// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class S3Bucket extends pulumi.CustomResource {
    /**
     * Get an existing S3Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3BucketState, opts?: pulumi.CustomResourceOptions): S3Bucket {
        return new S3Bucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/s3Bucket:S3Bucket';

    /**
     * Returns true if the given object is an instance of S3Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3Bucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3Bucket.__pulumiType;
    }

    /**
     * Key for access via S3-compatible clients
     */
    declare public /*out*/ readonly accessKey: pulumi.Output<string>;
    /**
     * Configuration for server
     */
    declare public readonly configuration: pulumi.Output<outputs.S3BucketConfiguration | undefined>;
    /**
     * Configurator identifier
     */
    declare public /*out*/ readonly configuratorId: pulumi.Output<number>;
    /**
     * Information about storage disk stats
     */
    declare public /*out*/ readonly diskStats: pulumi.Output<outputs.S3BucketDiskStat[]>;
    /**
     * Full name for S3 bucket (with random prefix)
     */
    declare public /*out*/ readonly fullName: pulumi.Output<string>;
    /**
     * Hostname for access via S3-compatible clients
     */
    declare public /*out*/ readonly hostname: pulumi.Output<string>;
    /**
     * Location of storage
     */
    declare public /*out*/ readonly location: pulumi.Output<string>;
    /**
     * Name for S3 bucket
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Stored objects amount
     */
    declare public /*out*/ readonly objectAmount: pulumi.Output<number>;
    /**
     * Preset ID for S3 bucket. Cannot be used with (conflicts with configuration)
     */
    declare public readonly presetId: pulumi.Output<number>;
    /**
     * Project ID for created S3 bucket
     */
    declare public readonly projectId: pulumi.Output<number>;
    declare public readonly s3BucketId: pulumi.Output<string>;
    /**
     * Secret for access via S3-compatible clients
     */
    declare public /*out*/ readonly secretKey: pulumi.Output<string>;
    /**
     * Current status of S3 bucket (`no_paid`, `created`, `transfer`)
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Type for S3 bucket (`private`, `public`)
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a S3Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3BucketArgs | S3BucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3BucketState | undefined;
            resourceInputs["accessKey"] = state?.accessKey;
            resourceInputs["configuration"] = state?.configuration;
            resourceInputs["configuratorId"] = state?.configuratorId;
            resourceInputs["diskStats"] = state?.diskStats;
            resourceInputs["fullName"] = state?.fullName;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["objectAmount"] = state?.objectAmount;
            resourceInputs["presetId"] = state?.presetId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["s3BucketId"] = state?.s3BucketId;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as S3BucketArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["configuration"] = args?.configuration;
            resourceInputs["name"] = args?.name;
            resourceInputs["presetId"] = args?.presetId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["s3BucketId"] = args?.s3BucketId;
            resourceInputs["type"] = args?.type;
            resourceInputs["accessKey"] = undefined /*out*/;
            resourceInputs["configuratorId"] = undefined /*out*/;
            resourceInputs["diskStats"] = undefined /*out*/;
            resourceInputs["fullName"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["objectAmount"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey", "secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(S3Bucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3Bucket resources.
 */
export interface S3BucketState {
    /**
     * Key for access via S3-compatible clients
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Configuration for server
     */
    configuration?: pulumi.Input<inputs.S3BucketConfiguration>;
    /**
     * Configurator identifier
     */
    configuratorId?: pulumi.Input<number>;
    /**
     * Information about storage disk stats
     */
    diskStats?: pulumi.Input<pulumi.Input<inputs.S3BucketDiskStat>[]>;
    /**
     * Full name for S3 bucket (with random prefix)
     */
    fullName?: pulumi.Input<string>;
    /**
     * Hostname for access via S3-compatible clients
     */
    hostname?: pulumi.Input<string>;
    /**
     * Location of storage
     */
    location?: pulumi.Input<string>;
    /**
     * Name for S3 bucket
     */
    name?: pulumi.Input<string>;
    /**
     * Stored objects amount
     */
    objectAmount?: pulumi.Input<number>;
    /**
     * Preset ID for S3 bucket. Cannot be used with (conflicts with configuration)
     */
    presetId?: pulumi.Input<number>;
    /**
     * Project ID for created S3 bucket
     */
    projectId?: pulumi.Input<number>;
    s3BucketId?: pulumi.Input<string>;
    /**
     * Secret for access via S3-compatible clients
     */
    secretKey?: pulumi.Input<string>;
    /**
     * Current status of S3 bucket (`no_paid`, `created`, `transfer`)
     */
    status?: pulumi.Input<string>;
    /**
     * Type for S3 bucket (`private`, `public`)
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a S3Bucket resource.
 */
export interface S3BucketArgs {
    /**
     * Configuration for server
     */
    configuration?: pulumi.Input<inputs.S3BucketConfiguration>;
    /**
     * Name for S3 bucket
     */
    name?: pulumi.Input<string>;
    /**
     * Preset ID for S3 bucket. Cannot be used with (conflicts with configuration)
     */
    presetId?: pulumi.Input<number>;
    /**
     * Project ID for created S3 bucket
     */
    projectId?: pulumi.Input<number>;
    s3BucketId?: pulumi.Input<string>;
    /**
     * Type for S3 bucket (`private`, `public`)
     */
    type: pulumi.Input<string>;
}
