// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getS3Configurator(args?: GetS3ConfiguratorArgs, opts?: pulumi.InvokeOptions): Promise<GetS3ConfiguratorResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("timeweb-cloud:index/getS3Configurator:getS3Configurator", {
        "diskType": args.diskType,
        "id": args.id,
        "location": args.location,
        "requirements": args.requirements,
        "storageClass": args.storageClass,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getS3Configurator.
 */
export interface GetS3ConfiguratorArgs {
    diskType?: string;
    id?: string;
    location?: string;
    requirements?: inputs.GetS3ConfiguratorRequirement[];
    storageClass?: string;
}

/**
 * A collection of values returned by getS3Configurator.
 */
export interface GetS3ConfiguratorResult {
    readonly diskType: string;
    readonly id: string;
    readonly location: string;
    readonly requirements?: outputs.GetS3ConfiguratorRequirement[];
    readonly storageClass: string;
}
export function getS3ConfiguratorOutput(args?: GetS3ConfiguratorOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetS3ConfiguratorResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("timeweb-cloud:index/getS3Configurator:getS3Configurator", {
        "diskType": args.diskType,
        "id": args.id,
        "location": args.location,
        "requirements": args.requirements,
        "storageClass": args.storageClass,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getS3Configurator.
 */
export interface GetS3ConfiguratorOutputArgs {
    diskType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    requirements?: pulumi.Input<pulumi.Input<inputs.GetS3ConfiguratorRequirementArgs>[]>;
    storageClass?: pulumi.Input<string>;
}
