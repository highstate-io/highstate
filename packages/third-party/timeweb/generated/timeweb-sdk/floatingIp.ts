// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FloatingIp extends pulumi.CustomResource {
    /**
     * Get an existing FloatingIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FloatingIpState, opts?: pulumi.CustomResourceOptions): FloatingIp {
        return new FloatingIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/floatingIp:FloatingIp';

    /**
     * Returns true if the given object is an instance of FloatingIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FloatingIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FloatingIp.__pulumiType;
    }

    /**
     * Address of specified floating IP Address
     */
    declare public readonly availabilityZone: pulumi.Output<string>;
    /**
     * Comment of specified floating IP Address
     */
    declare public readonly comment: pulumi.Output<string>;
    /**
     * Enabled DDoS Guard for specified floating IP Address
     */
    declare public readonly ddosGuard: pulumi.Output<boolean>;
    declare public readonly floatingIpId: pulumi.Output<string>;
    /**
     * Address of specified floating IP Address
     */
    declare public /*out*/ readonly ip: pulumi.Output<string>;
    /**
     * PTR record in DNS zone of specified floating IP Address
     */
    declare public readonly ptr: pulumi.Output<string>;
    /**
     * Address of specified floating IP Address
     */
    declare public readonly resource: pulumi.Output<outputs.FloatingIpResource | undefined>;

    /**
     * Create a FloatingIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FloatingIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FloatingIpArgs | FloatingIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FloatingIpState | undefined;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["ddosGuard"] = state?.ddosGuard;
            resourceInputs["floatingIpId"] = state?.floatingIpId;
            resourceInputs["ip"] = state?.ip;
            resourceInputs["ptr"] = state?.ptr;
            resourceInputs["resource"] = state?.resource;
        } else {
            const args = argsOrState as FloatingIpArgs | undefined;
            if (args?.availabilityZone === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["ddosGuard"] = args?.ddosGuard;
            resourceInputs["floatingIpId"] = args?.floatingIpId;
            resourceInputs["ptr"] = args?.ptr;
            resourceInputs["resource"] = args?.resource;
            resourceInputs["ip"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FloatingIp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FloatingIp resources.
 */
export interface FloatingIpState {
    /**
     * Address of specified floating IP Address
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Comment of specified floating IP Address
     */
    comment?: pulumi.Input<string>;
    /**
     * Enabled DDoS Guard for specified floating IP Address
     */
    ddosGuard?: pulumi.Input<boolean>;
    floatingIpId?: pulumi.Input<string>;
    /**
     * Address of specified floating IP Address
     */
    ip?: pulumi.Input<string>;
    /**
     * PTR record in DNS zone of specified floating IP Address
     */
    ptr?: pulumi.Input<string>;
    /**
     * Address of specified floating IP Address
     */
    resource?: pulumi.Input<inputs.FloatingIpResource>;
}

/**
 * The set of arguments for constructing a FloatingIp resource.
 */
export interface FloatingIpArgs {
    /**
     * Address of specified floating IP Address
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * Comment of specified floating IP Address
     */
    comment?: pulumi.Input<string>;
    /**
     * Enabled DDoS Guard for specified floating IP Address
     */
    ddosGuard?: pulumi.Input<boolean>;
    floatingIpId?: pulumi.Input<string>;
    /**
     * PTR record in DNS zone of specified floating IP Address
     */
    ptr?: pulumi.Input<string>;
    /**
     * Address of specified floating IP Address
     */
    resource?: pulumi.Input<inputs.FloatingIpResource>;
}
