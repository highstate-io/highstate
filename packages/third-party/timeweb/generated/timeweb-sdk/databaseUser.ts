// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatabaseUser extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseUserState, opts?: pulumi.CustomResourceOptions): DatabaseUser {
        return new DatabaseUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/databaseUser:DatabaseUser';

    /**
     * Returns true if the given object is an instance of DatabaseUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseUser.__pulumiType;
    }

    /**
     * Database cluster ID for which user be created
     */
    declare public readonly clusterId: pulumi.Output<number>;
    declare public readonly databaseUserId: pulumi.Output<string>;
    /**
     * Description for user
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Allowed host for login as this user
     */
    declare public readonly host: pulumi.Output<string>;
    /**
     * Privileges of user by instance
     */
    declare public readonly instances: pulumi.Output<outputs.DatabaseUserInstance[] | undefined>;
    /**
     * Login for user
     */
    declare public readonly login: pulumi.Output<string>;
    /**
     * Password for user
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * Privileges of user
     */
    declare public readonly privileges: pulumi.Output<string[] | undefined>;

    /**
     * Create a DatabaseUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseUserArgs | DatabaseUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseUserState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["databaseUserId"] = state?.databaseUserId;
            resourceInputs["description"] = state?.description;
            resourceInputs["host"] = state?.host;
            resourceInputs["instances"] = state?.instances;
            resourceInputs["login"] = state?.login;
            resourceInputs["password"] = state?.password;
            resourceInputs["privileges"] = state?.privileges;
        } else {
            const args = argsOrState as DatabaseUserArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.login === undefined && !opts.urn) {
                throw new Error("Missing required property 'login'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["databaseUserId"] = args?.databaseUserId;
            resourceInputs["description"] = args?.description;
            resourceInputs["host"] = args?.host;
            resourceInputs["instances"] = args?.instances;
            resourceInputs["login"] = args?.login;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["privileges"] = args?.privileges;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatabaseUser resources.
 */
export interface DatabaseUserState {
    /**
     * Database cluster ID for which user be created
     */
    clusterId?: pulumi.Input<number>;
    databaseUserId?: pulumi.Input<string>;
    /**
     * Description for user
     */
    description?: pulumi.Input<string>;
    /**
     * Allowed host for login as this user
     */
    host?: pulumi.Input<string>;
    /**
     * Privileges of user by instance
     */
    instances?: pulumi.Input<pulumi.Input<inputs.DatabaseUserInstance>[]>;
    /**
     * Login for user
     */
    login?: pulumi.Input<string>;
    /**
     * Password for user
     */
    password?: pulumi.Input<string>;
    /**
     * Privileges of user
     */
    privileges?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DatabaseUser resource.
 */
export interface DatabaseUserArgs {
    /**
     * Database cluster ID for which user be created
     */
    clusterId: pulumi.Input<number>;
    databaseUserId?: pulumi.Input<string>;
    /**
     * Description for user
     */
    description?: pulumi.Input<string>;
    /**
     * Allowed host for login as this user
     */
    host?: pulumi.Input<string>;
    /**
     * Privileges of user by instance
     */
    instances?: pulumi.Input<pulumi.Input<inputs.DatabaseUserInstance>[]>;
    /**
     * Login for user
     */
    login: pulumi.Input<string>;
    /**
     * Password for user
     */
    password: pulumi.Input<string>;
    /**
     * Privileges of user
     */
    privileges?: pulumi.Input<pulumi.Input<string>[]>;
}
