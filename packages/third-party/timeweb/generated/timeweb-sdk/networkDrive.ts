// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkDrive extends pulumi.CustomResource {
    /**
     * Get an existing NetworkDrive resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkDriveState, opts?: pulumi.CustomResourceOptions): NetworkDrive {
        return new NetworkDrive(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/networkDrive:NetworkDrive';

    /**
     * Returns true if the given object is an instance of NetworkDrive.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkDrive {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkDrive.__pulumiType;
    }

    /**
     * Zone of specified network drive
     */
    declare public readonly availabilityZone: pulumi.Output<string>;
    /**
     * Comment for the network drive
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Location of specified network drive
     */
    declare public /*out*/ readonly location: pulumi.Output<string>;
    /**
     * Name of the network drive
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkDriveId: pulumi.Output<string>;
    /**
     * Preset id of the network drive
     */
    declare public readonly presetId: pulumi.Output<number>;
    /**
     * Mount network drive to resource
     */
    declare public readonly resource: pulumi.Output<outputs.NetworkDriveResource | undefined>;
    /**
     * Size of the network drive
     */
    declare public readonly size: pulumi.Output<number>;
    /**
     * Status of the network drive
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Type of the network drive
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a NetworkDrive resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkDriveArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkDriveArgs | NetworkDriveState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkDriveState | undefined;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkDriveId"] = state?.networkDriveId;
            resourceInputs["presetId"] = state?.presetId;
            resourceInputs["resource"] = state?.resource;
            resourceInputs["size"] = state?.size;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as NetworkDriveArgs | undefined;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkDriveId"] = args?.networkDriveId;
            resourceInputs["presetId"] = args?.presetId;
            resourceInputs["resource"] = args?.resource;
            resourceInputs["size"] = args?.size;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkDrive.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkDrive resources.
 */
export interface NetworkDriveState {
    /**
     * Zone of specified network drive
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Comment for the network drive
     */
    comment?: pulumi.Input<string>;
    /**
     * Location of specified network drive
     */
    location?: pulumi.Input<string>;
    /**
     * Name of the network drive
     */
    name?: pulumi.Input<string>;
    networkDriveId?: pulumi.Input<string>;
    /**
     * Preset id of the network drive
     */
    presetId?: pulumi.Input<number>;
    /**
     * Mount network drive to resource
     */
    resource?: pulumi.Input<inputs.NetworkDriveResource>;
    /**
     * Size of the network drive
     */
    size?: pulumi.Input<number>;
    /**
     * Status of the network drive
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the network drive
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkDrive resource.
 */
export interface NetworkDriveArgs {
    /**
     * Zone of specified network drive
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Comment for the network drive
     */
    comment?: pulumi.Input<string>;
    /**
     * Name of the network drive
     */
    name?: pulumi.Input<string>;
    networkDriveId?: pulumi.Input<string>;
    /**
     * Preset id of the network drive
     */
    presetId?: pulumi.Input<number>;
    /**
     * Mount network drive to resource
     */
    resource?: pulumi.Input<inputs.NetworkDriveResource>;
    /**
     * Size of the network drive
     */
    size?: pulumi.Input<number>;
}
