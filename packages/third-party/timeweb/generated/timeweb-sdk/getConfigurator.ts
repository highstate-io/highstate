// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getConfigurator(args?: GetConfiguratorArgs, opts?: pulumi.InvokeOptions): Promise<GetConfiguratorResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("timeweb-cloud:index/getConfigurator:getConfigurator", {
        "cpuFrequency": args.cpuFrequency,
        "diskType": args.diskType,
        "id": args.id,
        "location": args.location,
        "presetType": args.presetType,
        "requirements": args.requirements,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getConfigurator.
 */
export interface GetConfiguratorArgs {
    cpuFrequency?: string;
    /**
     * @deprecated Deprecated
     */
    diskType?: string;
    id?: string;
    location?: string;
    presetType?: string;
    requirements?: inputs.GetConfiguratorRequirement[];
}

/**
 * A collection of values returned by getConfigurator.
 */
export interface GetConfiguratorResult {
    readonly cpuFrequency: string;
    /**
     * @deprecated Deprecated
     */
    readonly diskType: string;
    readonly id: string;
    readonly location: string;
    readonly presetType: string;
    readonly requirements?: outputs.GetConfiguratorRequirement[];
}
export function getConfiguratorOutput(args?: GetConfiguratorOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConfiguratorResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("timeweb-cloud:index/getConfigurator:getConfigurator", {
        "cpuFrequency": args.cpuFrequency,
        "diskType": args.diskType,
        "id": args.id,
        "location": args.location,
        "presetType": args.presetType,
        "requirements": args.requirements,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getConfigurator.
 */
export interface GetConfiguratorOutputArgs {
    cpuFrequency?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    diskType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    presetType?: pulumi.Input<string>;
    requirements?: pulumi.Input<pulumi.Input<inputs.GetConfiguratorRequirementArgs>[]>;
}
