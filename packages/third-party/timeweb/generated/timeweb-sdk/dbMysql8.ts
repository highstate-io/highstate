// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DbMysql8 extends pulumi.CustomResource {
    /**
     * Get an existing DbMysql8 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbMysql8State, opts?: pulumi.CustomResourceOptions): DbMysql8 {
        return new DbMysql8(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/dbMysql8:DbMysql8';

    /**
     * Returns true if the given object is an instance of DbMysql8.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbMysql8 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbMysql8.__pulumiType;
    }

    /**
     * Interval between indices between rows for `AUTO_INCREMENT` columns
     */
    declare public readonly autoIncrementIncrement: pulumi.Output<number>;
    /**
     * Start value for `AUTO_INCREMENT` columns
     */
    declare public readonly autoIncrementOffset: pulumi.Output<number>;
    declare public readonly dbMysql8Id: pulumi.Output<string>;
    /**
     * Information about database disk stats
     */
    declare public /*out*/ readonly diskStats: pulumi.Output<outputs.DbMysql8DiskStat[]>;
    /**
     * Hash type for database
     */
    declare public readonly hashType: pulumi.Output<string | undefined>;
    /**
     * Host for connection to database
     */
    declare public /*out*/ readonly host: pulumi.Output<string>;
    /**
     * IOPS count
     */
    declare public readonly innodbIoCapacity: pulumi.Output<number>;
    /**
     * Threads count for cleanup operation
     */
    declare public readonly innodbPurgeThreads: pulumi.Output<number>;
    /**
     * Threads count for read operation
     */
    declare public readonly innodbReadIoThreads: pulumi.Output<number>;
    /**
     * Maximum active threads count
     */
    declare public readonly innodbThreadConcurrency: pulumi.Output<number>;
    /**
     * Threads count for write operation
     */
    declare public readonly innodbWriteIoThreads: pulumi.Output<number>;
    /**
     * IP-address database of network interface
     */
    declare public /*out*/ readonly ip: pulumi.Output<string>;
    /**
     * Flag that shows allowability database only by external IP address
     */
    declare public readonly isExternalIp: pulumi.Output<boolean>;
    /**
     * Buffer size for JOIN operation
     */
    declare public readonly joinBufferSize: pulumi.Output<number>;
    /**
     * Local IP-address database of network interface
     */
    declare public /*out*/ readonly localIp: pulumi.Output<string>;
    /**
     * Flag that enables local network for DB
     */
    declare public readonly localNetwork: pulumi.Output<outputs.DbMysql8LocalNetwork | undefined>;
    /**
     * Login for database
     */
    declare public readonly login: pulumi.Output<string | undefined>;
    /**
     * Max allowed size for one packet or parameter that may be sent via `mysql_stmt_send_long_data()`
     */
    declare public readonly maxAllowedPacket: pulumi.Output<number>;
    /**
     * The maximum permitted number of simultaneous client connections
     */
    declare public readonly maxConnections: pulumi.Output<number>;
    /**
     * Max size for user MEMORY-tables
     */
    declare public readonly maxHeapTableSize: pulumi.Output<number>;
    /**
     * Name for database
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Password for database
     */
    declare public readonly password: pulumi.Output<string>;
    /**
     * Port for connection to database
     */
    declare public /*out*/ readonly port: pulumi.Output<number>;
    /**
     * Preset ID for database
     */
    declare public readonly presetId: pulumi.Output<number>;
    /**
     * Project ID for created DB
     */
    declare public readonly projectId: pulumi.Output<number>;
    /**
     * The current server SQL mode
     */
    declare public readonly sqlModes: pulumi.Output<string[]>;
    /**
     * Current status of database (`started`, `starting`, `stoped`, `no_paid`)
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a DbMysql8 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbMysql8Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbMysql8Args | DbMysql8State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbMysql8State | undefined;
            resourceInputs["autoIncrementIncrement"] = state?.autoIncrementIncrement;
            resourceInputs["autoIncrementOffset"] = state?.autoIncrementOffset;
            resourceInputs["dbMysql8Id"] = state?.dbMysql8Id;
            resourceInputs["diskStats"] = state?.diskStats;
            resourceInputs["hashType"] = state?.hashType;
            resourceInputs["host"] = state?.host;
            resourceInputs["innodbIoCapacity"] = state?.innodbIoCapacity;
            resourceInputs["innodbPurgeThreads"] = state?.innodbPurgeThreads;
            resourceInputs["innodbReadIoThreads"] = state?.innodbReadIoThreads;
            resourceInputs["innodbThreadConcurrency"] = state?.innodbThreadConcurrency;
            resourceInputs["innodbWriteIoThreads"] = state?.innodbWriteIoThreads;
            resourceInputs["ip"] = state?.ip;
            resourceInputs["isExternalIp"] = state?.isExternalIp;
            resourceInputs["joinBufferSize"] = state?.joinBufferSize;
            resourceInputs["localIp"] = state?.localIp;
            resourceInputs["localNetwork"] = state?.localNetwork;
            resourceInputs["login"] = state?.login;
            resourceInputs["maxAllowedPacket"] = state?.maxAllowedPacket;
            resourceInputs["maxConnections"] = state?.maxConnections;
            resourceInputs["maxHeapTableSize"] = state?.maxHeapTableSize;
            resourceInputs["name"] = state?.name;
            resourceInputs["password"] = state?.password;
            resourceInputs["port"] = state?.port;
            resourceInputs["presetId"] = state?.presetId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["sqlModes"] = state?.sqlModes;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as DbMysql8Args | undefined;
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if (args?.presetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'presetId'");
            }
            resourceInputs["autoIncrementIncrement"] = args?.autoIncrementIncrement;
            resourceInputs["autoIncrementOffset"] = args?.autoIncrementOffset;
            resourceInputs["dbMysql8Id"] = args?.dbMysql8Id;
            resourceInputs["hashType"] = args?.hashType;
            resourceInputs["innodbIoCapacity"] = args?.innodbIoCapacity;
            resourceInputs["innodbPurgeThreads"] = args?.innodbPurgeThreads;
            resourceInputs["innodbReadIoThreads"] = args?.innodbReadIoThreads;
            resourceInputs["innodbThreadConcurrency"] = args?.innodbThreadConcurrency;
            resourceInputs["innodbWriteIoThreads"] = args?.innodbWriteIoThreads;
            resourceInputs["isExternalIp"] = args?.isExternalIp;
            resourceInputs["joinBufferSize"] = args?.joinBufferSize;
            resourceInputs["localNetwork"] = args?.localNetwork;
            resourceInputs["login"] = args?.login;
            resourceInputs["maxAllowedPacket"] = args?.maxAllowedPacket;
            resourceInputs["maxConnections"] = args?.maxConnections;
            resourceInputs["maxHeapTableSize"] = args?.maxHeapTableSize;
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["presetId"] = args?.presetId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["sqlModes"] = args?.sqlModes;
            resourceInputs["diskStats"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["ip"] = undefined /*out*/;
            resourceInputs["localIp"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DbMysql8.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbMysql8 resources.
 */
export interface DbMysql8State {
    /**
     * Interval between indices between rows for `AUTO_INCREMENT` columns
     */
    autoIncrementIncrement?: pulumi.Input<number>;
    /**
     * Start value for `AUTO_INCREMENT` columns
     */
    autoIncrementOffset?: pulumi.Input<number>;
    dbMysql8Id?: pulumi.Input<string>;
    /**
     * Information about database disk stats
     */
    diskStats?: pulumi.Input<pulumi.Input<inputs.DbMysql8DiskStat>[]>;
    /**
     * Hash type for database
     */
    hashType?: pulumi.Input<string>;
    /**
     * Host for connection to database
     */
    host?: pulumi.Input<string>;
    /**
     * IOPS count
     */
    innodbIoCapacity?: pulumi.Input<number>;
    /**
     * Threads count for cleanup operation
     */
    innodbPurgeThreads?: pulumi.Input<number>;
    /**
     * Threads count for read operation
     */
    innodbReadIoThreads?: pulumi.Input<number>;
    /**
     * Maximum active threads count
     */
    innodbThreadConcurrency?: pulumi.Input<number>;
    /**
     * Threads count for write operation
     */
    innodbWriteIoThreads?: pulumi.Input<number>;
    /**
     * IP-address database of network interface
     */
    ip?: pulumi.Input<string>;
    /**
     * Flag that shows allowability database only by external IP address
     */
    isExternalIp?: pulumi.Input<boolean>;
    /**
     * Buffer size for JOIN operation
     */
    joinBufferSize?: pulumi.Input<number>;
    /**
     * Local IP-address database of network interface
     */
    localIp?: pulumi.Input<string>;
    /**
     * Flag that enables local network for DB
     */
    localNetwork?: pulumi.Input<inputs.DbMysql8LocalNetwork>;
    /**
     * Login for database
     */
    login?: pulumi.Input<string>;
    /**
     * Max allowed size for one packet or parameter that may be sent via `mysql_stmt_send_long_data()`
     */
    maxAllowedPacket?: pulumi.Input<number>;
    /**
     * The maximum permitted number of simultaneous client connections
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Max size for user MEMORY-tables
     */
    maxHeapTableSize?: pulumi.Input<number>;
    /**
     * Name for database
     */
    name?: pulumi.Input<string>;
    /**
     * Password for database
     */
    password?: pulumi.Input<string>;
    /**
     * Port for connection to database
     */
    port?: pulumi.Input<number>;
    /**
     * Preset ID for database
     */
    presetId?: pulumi.Input<number>;
    /**
     * Project ID for created DB
     */
    projectId?: pulumi.Input<number>;
    /**
     * The current server SQL mode
     */
    sqlModes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Current status of database (`started`, `starting`, `stoped`, `no_paid`)
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbMysql8 resource.
 */
export interface DbMysql8Args {
    /**
     * Interval between indices between rows for `AUTO_INCREMENT` columns
     */
    autoIncrementIncrement?: pulumi.Input<number>;
    /**
     * Start value for `AUTO_INCREMENT` columns
     */
    autoIncrementOffset?: pulumi.Input<number>;
    dbMysql8Id?: pulumi.Input<string>;
    /**
     * Hash type for database
     */
    hashType?: pulumi.Input<string>;
    /**
     * IOPS count
     */
    innodbIoCapacity?: pulumi.Input<number>;
    /**
     * Threads count for cleanup operation
     */
    innodbPurgeThreads?: pulumi.Input<number>;
    /**
     * Threads count for read operation
     */
    innodbReadIoThreads?: pulumi.Input<number>;
    /**
     * Maximum active threads count
     */
    innodbThreadConcurrency?: pulumi.Input<number>;
    /**
     * Threads count for write operation
     */
    innodbWriteIoThreads?: pulumi.Input<number>;
    /**
     * Flag that shows allowability database only by external IP address
     */
    isExternalIp?: pulumi.Input<boolean>;
    /**
     * Buffer size for JOIN operation
     */
    joinBufferSize?: pulumi.Input<number>;
    /**
     * Flag that enables local network for DB
     */
    localNetwork?: pulumi.Input<inputs.DbMysql8LocalNetwork>;
    /**
     * Login for database
     */
    login?: pulumi.Input<string>;
    /**
     * Max allowed size for one packet or parameter that may be sent via `mysql_stmt_send_long_data()`
     */
    maxAllowedPacket?: pulumi.Input<number>;
    /**
     * The maximum permitted number of simultaneous client connections
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Max size for user MEMORY-tables
     */
    maxHeapTableSize?: pulumi.Input<number>;
    /**
     * Name for database
     */
    name?: pulumi.Input<string>;
    /**
     * Password for database
     */
    password: pulumi.Input<string>;
    /**
     * Preset ID for database
     */
    presetId: pulumi.Input<number>;
    /**
     * Project ID for created DB
     */
    projectId?: pulumi.Input<number>;
    /**
     * The current server SQL mode
     */
    sqlModes?: pulumi.Input<pulumi.Input<string>[]>;
}
