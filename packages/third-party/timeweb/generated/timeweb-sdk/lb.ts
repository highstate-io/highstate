// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lb extends pulumi.CustomResource {
    /**
     * Get an existing Lb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbState, opts?: pulumi.CustomResourceOptions): Lb {
        return new Lb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/lb:Lb';

    /**
     * Returns true if the given object is an instance of Lb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lb.__pulumiType;
    }

    /**
     * Algorithm for balancing
     */
    declare public readonly algo: pulumi.Output<string | undefined>;
    /**
     * Availability zone for load balancer
     */
    declare public readonly availabilityZone: pulumi.Output<string>;
    /**
     * Client timeout
     */
    declare public readonly clientTimeout: pulumi.Output<number>;
    /**
     * Connection timeout
     */
    declare public readonly connectTimeout: pulumi.Output<number>;
    /**
     * Floating IP ID for server
     */
    declare public readonly floatingIpId: pulumi.Output<string | undefined>;
    declare public readonly healthCheck: pulumi.Output<outputs.LbHealthCheck | undefined>;
    /**
     * Http request timeout
     */
    declare public readonly httprequestTimeout: pulumi.Output<number>;
    /**
     * IP-address balancer of network interface
     */
    declare public /*out*/ readonly ip: pulumi.Output<string>;
    /**
     * Backends IPs
     */
    declare public readonly ips: pulumi.Output<string[]>;
    /**
     * Keep alive connection from balancer to backend server
     */
    declare public readonly isKeepalive: pulumi.Output<boolean>;
    /**
     * Automatic redirect HTTP to HTTPS
     */
    declare public readonly isSsl: pulumi.Output<boolean>;
    /**
     * Save user session for balancing to same backend server
     */
    declare public readonly isSticky: pulumi.Output<boolean>;
    /**
     * Use PROXY-protocol for communicating with backend server
     */
    declare public readonly isUseProxy: pulumi.Output<boolean>;
    declare public readonly lbId: pulumi.Output<string>;
    /**
     * Local IP-address balancer of network interface
     */
    declare public /*out*/ readonly localIp: pulumi.Output<string>;
    /**
     * Flag that enables local network for load balancer
     */
    declare public readonly localNetwork: pulumi.Output<outputs.LbLocalNetwork | undefined>;
    /**
     * Maximum number of connections to backend server
     */
    declare public readonly maxconn: pulumi.Output<number>;
    /**
     * Name for balancer
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Preset ID for balancer
     */
    declare public readonly presetId: pulumi.Output<number>;
    /**
     * Project ID for created balancer
     */
    declare public readonly projectId: pulumi.Output<number>;
    /**
     * Server timeout
     */
    declare public readonly serverTimeout: pulumi.Output<number>;
    /**
     * Current status of balancer (`started`, `starting`, `stoped`, `no_paid`)
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a Lb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbArgs | LbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbState | undefined;
            resourceInputs["algo"] = state?.algo;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["clientTimeout"] = state?.clientTimeout;
            resourceInputs["connectTimeout"] = state?.connectTimeout;
            resourceInputs["floatingIpId"] = state?.floatingIpId;
            resourceInputs["healthCheck"] = state?.healthCheck;
            resourceInputs["httprequestTimeout"] = state?.httprequestTimeout;
            resourceInputs["ip"] = state?.ip;
            resourceInputs["ips"] = state?.ips;
            resourceInputs["isKeepalive"] = state?.isKeepalive;
            resourceInputs["isSsl"] = state?.isSsl;
            resourceInputs["isSticky"] = state?.isSticky;
            resourceInputs["isUseProxy"] = state?.isUseProxy;
            resourceInputs["lbId"] = state?.lbId;
            resourceInputs["localIp"] = state?.localIp;
            resourceInputs["localNetwork"] = state?.localNetwork;
            resourceInputs["maxconn"] = state?.maxconn;
            resourceInputs["name"] = state?.name;
            resourceInputs["presetId"] = state?.presetId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["serverTimeout"] = state?.serverTimeout;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as LbArgs | undefined;
            if (args?.presetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'presetId'");
            }
            resourceInputs["algo"] = args?.algo;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["clientTimeout"] = args?.clientTimeout;
            resourceInputs["connectTimeout"] = args?.connectTimeout;
            resourceInputs["floatingIpId"] = args?.floatingIpId;
            resourceInputs["healthCheck"] = args?.healthCheck;
            resourceInputs["httprequestTimeout"] = args?.httprequestTimeout;
            resourceInputs["ips"] = args?.ips;
            resourceInputs["isKeepalive"] = args?.isKeepalive;
            resourceInputs["isSsl"] = args?.isSsl;
            resourceInputs["isSticky"] = args?.isSticky;
            resourceInputs["isUseProxy"] = args?.isUseProxy;
            resourceInputs["lbId"] = args?.lbId;
            resourceInputs["localNetwork"] = args?.localNetwork;
            resourceInputs["maxconn"] = args?.maxconn;
            resourceInputs["name"] = args?.name;
            resourceInputs["presetId"] = args?.presetId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["serverTimeout"] = args?.serverTimeout;
            resourceInputs["ip"] = undefined /*out*/;
            resourceInputs["localIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lb resources.
 */
export interface LbState {
    /**
     * Algorithm for balancing
     */
    algo?: pulumi.Input<string>;
    /**
     * Availability zone for load balancer
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Client timeout
     */
    clientTimeout?: pulumi.Input<number>;
    /**
     * Connection timeout
     */
    connectTimeout?: pulumi.Input<number>;
    /**
     * Floating IP ID for server
     */
    floatingIpId?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<inputs.LbHealthCheck>;
    /**
     * Http request timeout
     */
    httprequestTimeout?: pulumi.Input<number>;
    /**
     * IP-address balancer of network interface
     */
    ip?: pulumi.Input<string>;
    /**
     * Backends IPs
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Keep alive connection from balancer to backend server
     */
    isKeepalive?: pulumi.Input<boolean>;
    /**
     * Automatic redirect HTTP to HTTPS
     */
    isSsl?: pulumi.Input<boolean>;
    /**
     * Save user session for balancing to same backend server
     */
    isSticky?: pulumi.Input<boolean>;
    /**
     * Use PROXY-protocol for communicating with backend server
     */
    isUseProxy?: pulumi.Input<boolean>;
    lbId?: pulumi.Input<string>;
    /**
     * Local IP-address balancer of network interface
     */
    localIp?: pulumi.Input<string>;
    /**
     * Flag that enables local network for load balancer
     */
    localNetwork?: pulumi.Input<inputs.LbLocalNetwork>;
    /**
     * Maximum number of connections to backend server
     */
    maxconn?: pulumi.Input<number>;
    /**
     * Name for balancer
     */
    name?: pulumi.Input<string>;
    /**
     * Preset ID for balancer
     */
    presetId?: pulumi.Input<number>;
    /**
     * Project ID for created balancer
     */
    projectId?: pulumi.Input<number>;
    /**
     * Server timeout
     */
    serverTimeout?: pulumi.Input<number>;
    /**
     * Current status of balancer (`started`, `starting`, `stoped`, `no_paid`)
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lb resource.
 */
export interface LbArgs {
    /**
     * Algorithm for balancing
     */
    algo?: pulumi.Input<string>;
    /**
     * Availability zone for load balancer
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Client timeout
     */
    clientTimeout?: pulumi.Input<number>;
    /**
     * Connection timeout
     */
    connectTimeout?: pulumi.Input<number>;
    /**
     * Floating IP ID for server
     */
    floatingIpId?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<inputs.LbHealthCheck>;
    /**
     * Http request timeout
     */
    httprequestTimeout?: pulumi.Input<number>;
    /**
     * Backends IPs
     */
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Keep alive connection from balancer to backend server
     */
    isKeepalive?: pulumi.Input<boolean>;
    /**
     * Automatic redirect HTTP to HTTPS
     */
    isSsl?: pulumi.Input<boolean>;
    /**
     * Save user session for balancing to same backend server
     */
    isSticky?: pulumi.Input<boolean>;
    /**
     * Use PROXY-protocol for communicating with backend server
     */
    isUseProxy?: pulumi.Input<boolean>;
    lbId?: pulumi.Input<string>;
    /**
     * Flag that enables local network for load balancer
     */
    localNetwork?: pulumi.Input<inputs.LbLocalNetwork>;
    /**
     * Maximum number of connections to backend server
     */
    maxconn?: pulumi.Input<number>;
    /**
     * Name for balancer
     */
    name?: pulumi.Input<string>;
    /**
     * Preset ID for balancer
     */
    presetId: pulumi.Input<number>;
    /**
     * Project ID for created balancer
     */
    projectId?: pulumi.Input<number>;
    /**
     * Server timeout
     */
    serverTimeout?: pulumi.Input<number>;
}
