// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DbBackup extends pulumi.CustomResource {
    /**
     * Get an existing DbBackup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbBackupState, opts?: pulumi.CustomResourceOptions): DbBackup {
        return new DbBackup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/dbBackup:DbBackup';

    /**
     * Returns true if the given object is an instance of DbBackup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbBackup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbBackup.__pulumiType;
    }

    /**
     * Comment for backup
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Date when backup was created
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly dbBackupId: pulumi.Output<string>;
    /**
     * Name of backup
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * Backups size
     */
    declare public /*out*/ readonly size: pulumi.Output<number>;
    /**
     * DB ID for which backup should be created
     */
    declare public readonly sourceDbId: pulumi.Output<number>;
    /**
     * Current status of backup
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Backup type (`manual` or `auto`)
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a DbBackup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbBackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbBackupArgs | DbBackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbBackupState | undefined;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["dbBackupId"] = state?.dbBackupId;
            resourceInputs["name"] = state?.name;
            resourceInputs["size"] = state?.size;
            resourceInputs["sourceDbId"] = state?.sourceDbId;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as DbBackupArgs | undefined;
            if (args?.sourceDbId === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceDbId'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["dbBackupId"] = args?.dbBackupId;
            resourceInputs["sourceDbId"] = args?.sourceDbId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbBackup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbBackup resources.
 */
export interface DbBackupState {
    /**
     * Comment for backup
     */
    comment?: pulumi.Input<string>;
    /**
     * Date when backup was created
     */
    createdAt?: pulumi.Input<string>;
    dbBackupId?: pulumi.Input<string>;
    /**
     * Name of backup
     */
    name?: pulumi.Input<string>;
    /**
     * Backups size
     */
    size?: pulumi.Input<number>;
    /**
     * DB ID for which backup should be created
     */
    sourceDbId?: pulumi.Input<number>;
    /**
     * Current status of backup
     */
    status?: pulumi.Input<string>;
    /**
     * Backup type (`manual` or `auto`)
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbBackup resource.
 */
export interface DbBackupArgs {
    /**
     * Comment for backup
     */
    comment?: pulumi.Input<string>;
    dbBackupId?: pulumi.Input<string>;
    /**
     * DB ID for which backup should be created
     */
    sourceDbId: pulumi.Input<number>;
}
