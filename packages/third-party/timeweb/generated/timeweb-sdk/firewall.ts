// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Firewall extends pulumi.CustomResource {
    /**
     * Get an existing Firewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallState, opts?: pulumi.CustomResourceOptions): Firewall {
        return new Firewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/firewall:Firewall';

    /**
     * Returns true if the given object is an instance of Firewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Firewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Firewall.__pulumiType;
    }

    /**
     * Description for firewall
     */
    declare public readonly description: pulumi.Output<string>;
    declare public readonly firewallId: pulumi.Output<string>;
    declare public readonly links: pulumi.Output<outputs.FirewallLink[] | undefined>;
    /**
     * Name for firewall
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a Firewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallArgs | FirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["firewallId"] = state?.firewallId;
            resourceInputs["links"] = state?.links;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as FirewallArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["firewallId"] = args?.firewallId;
            resourceInputs["links"] = args?.links;
            resourceInputs["name"] = args?.name;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Firewall.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Firewall resources.
 */
export interface FirewallState {
    /**
     * Description for firewall
     */
    description?: pulumi.Input<string>;
    firewallId?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.FirewallLink>[]>;
    /**
     * Name for firewall
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Firewall resource.
 */
export interface FirewallArgs {
    /**
     * Description for firewall
     */
    description?: pulumi.Input<string>;
    firewallId?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.FirewallLink>[]>;
    /**
     * Name for firewall
     */
    name?: pulumi.Input<string>;
}
