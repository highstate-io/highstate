// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class S3BucketFile extends pulumi.CustomResource {
    /**
     * Get an existing S3BucketFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3BucketFileState, opts?: pulumi.CustomResourceOptions): S3BucketFile {
        return new S3BucketFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/s3BucketFile:S3BucketFile';

    /**
     * Returns true if the given object is an instance of S3BucketFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3BucketFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3BucketFile.__pulumiType;
    }

    /**
     * S3 Bucket ID for which file should be created
     */
    declare public readonly bucketId: pulumi.Output<number>;
    /**
     * File base64-encoded content
     */
    declare public readonly file: pulumi.Output<string>;
    /**
     * File path in S3 bucket
     */
    declare public readonly path: pulumi.Output<string>;
    declare public readonly s3BucketFileId: pulumi.Output<string>;

    /**
     * Create a S3BucketFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3BucketFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3BucketFileArgs | S3BucketFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3BucketFileState | undefined;
            resourceInputs["bucketId"] = state?.bucketId;
            resourceInputs["file"] = state?.file;
            resourceInputs["path"] = state?.path;
            resourceInputs["s3BucketFileId"] = state?.s3BucketFileId;
        } else {
            const args = argsOrState as S3BucketFileArgs | undefined;
            if (args?.bucketId === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucketId'");
            }
            if (args?.file === undefined && !opts.urn) {
                throw new Error("Missing required property 'file'");
            }
            if (args?.path === undefined && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["bucketId"] = args?.bucketId;
            resourceInputs["file"] = args?.file;
            resourceInputs["path"] = args?.path;
            resourceInputs["s3BucketFileId"] = args?.s3BucketFileId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3BucketFile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3BucketFile resources.
 */
export interface S3BucketFileState {
    /**
     * S3 Bucket ID for which file should be created
     */
    bucketId?: pulumi.Input<number>;
    /**
     * File base64-encoded content
     */
    file?: pulumi.Input<string>;
    /**
     * File path in S3 bucket
     */
    path?: pulumi.Input<string>;
    s3BucketFileId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a S3BucketFile resource.
 */
export interface S3BucketFileArgs {
    /**
     * S3 Bucket ID for which file should be created
     */
    bucketId: pulumi.Input<number>;
    /**
     * File base64-encoded content
     */
    file: pulumi.Input<string>;
    /**
     * File path in S3 bucket
     */
    path: pulumi.Input<string>;
    s3BucketFileId?: pulumi.Input<string>;
}
