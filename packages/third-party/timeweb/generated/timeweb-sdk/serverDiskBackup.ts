// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServerDiskBackup extends pulumi.CustomResource {
    /**
     * Get an existing ServerDiskBackup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerDiskBackupState, opts?: pulumi.CustomResourceOptions): ServerDiskBackup {
        return new ServerDiskBackup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/serverDiskBackup:ServerDiskBackup';

    /**
     * Returns true if the given object is an instance of ServerDiskBackup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerDiskBackup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerDiskBackup.__pulumiType;
    }

    /**
     * Comment for backup
     */
    declare public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Date when backup was created
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Name of backup
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    declare public readonly serverDiskBackupId: pulumi.Output<string>;
    /**
     * Backups size
     */
    declare public /*out*/ readonly size: pulumi.Output<number>;
    /**
     * Disk ID for which backup should be created
     */
    declare public readonly sourceServerDiskId: pulumi.Output<number>;
    /**
     * Server ID for which disk backups should be created
     */
    declare public readonly sourceServerId: pulumi.Output<number>;
    /**
     * Current status of backup
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Backup type (always `manual` for now)
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;

    /**
     * Create a ServerDiskBackup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerDiskBackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerDiskBackupArgs | ServerDiskBackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerDiskBackupState | undefined;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["name"] = state?.name;
            resourceInputs["serverDiskBackupId"] = state?.serverDiskBackupId;
            resourceInputs["size"] = state?.size;
            resourceInputs["sourceServerDiskId"] = state?.sourceServerDiskId;
            resourceInputs["sourceServerId"] = state?.sourceServerId;
            resourceInputs["status"] = state?.status;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as ServerDiskBackupArgs | undefined;
            if (args?.sourceServerDiskId === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceServerDiskId'");
            }
            if (args?.sourceServerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceServerId'");
            }
            resourceInputs["comment"] = args?.comment;
            resourceInputs["serverDiskBackupId"] = args?.serverDiskBackupId;
            resourceInputs["sourceServerDiskId"] = args?.sourceServerDiskId;
            resourceInputs["sourceServerId"] = args?.sourceServerId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerDiskBackup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServerDiskBackup resources.
 */
export interface ServerDiskBackupState {
    /**
     * Comment for backup
     */
    comment?: pulumi.Input<string>;
    /**
     * Date when backup was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Name of backup
     */
    name?: pulumi.Input<string>;
    serverDiskBackupId?: pulumi.Input<string>;
    /**
     * Backups size
     */
    size?: pulumi.Input<number>;
    /**
     * Disk ID for which backup should be created
     */
    sourceServerDiskId?: pulumi.Input<number>;
    /**
     * Server ID for which disk backups should be created
     */
    sourceServerId?: pulumi.Input<number>;
    /**
     * Current status of backup
     */
    status?: pulumi.Input<string>;
    /**
     * Backup type (always `manual` for now)
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerDiskBackup resource.
 */
export interface ServerDiskBackupArgs {
    /**
     * Comment for backup
     */
    comment?: pulumi.Input<string>;
    serverDiskBackupId?: pulumi.Input<string>;
    /**
     * Disk ID for which backup should be created
     */
    sourceServerDiskId: pulumi.Input<number>;
    /**
     * Server ID for which disk backups should be created
     */
    sourceServerId: pulumi.Input<number>;
}
