// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DnsRr extends pulumi.CustomResource {
    /**
     * Get an existing DnsRr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRrState, opts?: pulumi.CustomResourceOptions): DnsRr {
        return new DnsRr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'timeweb-cloud:index/dnsRr:DnsRr';

    /**
     * Returns true if the given object is an instance of DnsRr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRr.__pulumiType;
    }

    declare public readonly dnsRrId: pulumi.Output<string>;
    /**
     * Host label for the resource record relative to zone name (zone name will be appended to end via dot symbol). Special
     * name '@' will be determined as zone root
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Type for resource record
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Value for resource record. Domain names should be without trailing dot symbol
     */
    declare public readonly value: pulumi.Output<string>;
    /**
     * Zone ID for which resource record should be created
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a DnsRr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRrArgs | DnsRrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRrState | undefined;
            resourceInputs["dnsRrId"] = state?.dnsRrId;
            resourceInputs["name"] = state?.name;
            resourceInputs["type"] = state?.type;
            resourceInputs["value"] = state?.value;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as DnsRrArgs | undefined;
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.value === undefined && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["dnsRrId"] = args?.dnsRrId;
            resourceInputs["name"] = args?.name;
            resourceInputs["type"] = args?.type;
            resourceInputs["value"] = args?.value;
            resourceInputs["zoneId"] = args?.zoneId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRr.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsRr resources.
 */
export interface DnsRrState {
    dnsRrId?: pulumi.Input<string>;
    /**
     * Host label for the resource record relative to zone name (zone name will be appended to end via dot symbol). Special
     * name '@' will be determined as zone root
     */
    name?: pulumi.Input<string>;
    /**
     * Type for resource record
     */
    type?: pulumi.Input<string>;
    /**
     * Value for resource record. Domain names should be without trailing dot symbol
     */
    value?: pulumi.Input<string>;
    /**
     * Zone ID for which resource record should be created
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRr resource.
 */
export interface DnsRrArgs {
    dnsRrId?: pulumi.Input<string>;
    /**
     * Host label for the resource record relative to zone name (zone name will be appended to end via dot symbol). Special
     * name '@' will be determined as zone root
     */
    name?: pulumi.Input<string>;
    /**
     * Type for resource record
     */
    type: pulumi.Input<string>;
    /**
     * Value for resource record. Domain names should be without trailing dot symbol
     */
    value: pulumi.Input<string>;
    /**
     * Zone ID for which resource record should be created
     */
    zoneId: pulumi.Input<string>;
}
