// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DatabaseClusterDiskStat {
    size: pulumi.Input<number>;
    used: pulumi.Input<number>;
}

export interface DatabaseClusterNetwork {
    ips: pulumi.Input<pulumi.Input<inputs.DatabaseClusterNetworkIp>[]>;
    type: pulumi.Input<string>;
}

export interface DatabaseClusterNetworkIp {
    ip: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface DatabaseUserInstance {
    /**
     * Database instance ID for which user has privileges
     */
    instanceId?: pulumi.Input<number>;
    /**
     * Privileges of user
     */
    privileges?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DbMongodbDiskStat {
    size: pulumi.Input<number>;
    used: pulumi.Input<number>;
}

export interface DbMongodbLocalNetwork {
    /**
     * ID of VPC for assign address from
     */
    id: pulumi.Input<string>;
    /**
     * Address in VPC subnetwork for manual assign
     */
    ip?: pulumi.Input<string>;
}

export interface DbMysql5DiskStat {
    size: pulumi.Input<number>;
    used: pulumi.Input<number>;
}

export interface DbMysql5LocalNetwork {
    /**
     * ID of VPC for assign address from
     */
    id: pulumi.Input<string>;
    /**
     * Address in VPC subnetwork for manual assign
     */
    ip?: pulumi.Input<string>;
}

export interface DbMysql8DiskStat {
    size: pulumi.Input<number>;
    used: pulumi.Input<number>;
}

export interface DbMysql8LocalNetwork {
    /**
     * ID of VPC for assign address from
     */
    id: pulumi.Input<string>;
    /**
     * Address in VPC subnetwork for manual assign
     */
    ip?: pulumi.Input<string>;
}

export interface DbPostgresDiskStat {
    size: pulumi.Input<number>;
    used: pulumi.Input<number>;
}

export interface DbPostgresLocalNetwork {
    /**
     * ID of VPC for assign address from
     */
    id: pulumi.Input<string>;
    /**
     * Address in VPC subnetwork for manual assign
     */
    ip?: pulumi.Input<string>;
}

export interface DbRedisDiskStat {
    size: pulumi.Input<number>;
    used: pulumi.Input<number>;
}

export interface DbRedisLocalNetwork {
    /**
     * ID of VPC for assign address from
     */
    id: pulumi.Input<string>;
    /**
     * Address in VPC subnetwork for manual assign
     */
    ip?: pulumi.Input<string>;
}

export interface FirewallLink {
    /**
     * Resource ID
     */
    id: pulumi.Input<string>;
    /**
     * Resource type [server, dbaas, balancer]
     */
    type: pulumi.Input<string>;
}

export interface FloatingIpResource {
    /**
     * ID of resource that bind with floating IP Address
     */
    id: pulumi.Input<string>;
    /**
     * Type of resource that bind with floating IP Address (`server`, `balancer`, `dbaas`)
     */
    type: pulumi.Input<string>;
}

export interface GetConfiguratorRequirement {
    /**
     * Maximum allowed CPU count
     */
    cpuMax?: number;
    /**
     * Minimum allowed CPU count
     */
    cpuMin?: number;
    /**
     * Step between allowed CPU counts
     */
    cpuStep?: number;
    /**
     * Maximum allowed disk size
     */
    diskMax?: number;
    /**
     * Minimum allowed disk size
     */
    diskMin?: number;
    /**
     * Step between allowed disk sizes
     */
    diskStep?: number;
    /**
     * Maximum allowed GPU count
     */
    gpuMax?: number;
    /**
     * Minimum allowed GPU count
     */
    gpuMin?: number;
    /**
     * Step between allowed GPU counts
     */
    gpuStep?: number;
    /**
     * Maximum allowed network bandwidth capacity
     */
    networkBandwidthMax?: number;
    /**
     * Minimum allowed network bandwidth capacity
     */
    networkBandwidthMin?: number;
    /**
     * Step between allowed network bandwidth capacities
     */
    networkBandwidthStep?: number;
    /**
     * Maximum allowed RAM size
     */
    ramMax?: number;
    /**
     * Minimum allowed RAM size
     */
    ramMin?: number;
    /**
     * Step between allowed RAM sizes
     */
    ramStep?: number;
}

export interface GetConfiguratorRequirementArgs {
    /**
     * Maximum allowed CPU count
     */
    cpuMax?: pulumi.Input<number>;
    /**
     * Minimum allowed CPU count
     */
    cpuMin?: pulumi.Input<number>;
    /**
     * Step between allowed CPU counts
     */
    cpuStep?: pulumi.Input<number>;
    /**
     * Maximum allowed disk size
     */
    diskMax?: pulumi.Input<number>;
    /**
     * Minimum allowed disk size
     */
    diskMin?: pulumi.Input<number>;
    /**
     * Step between allowed disk sizes
     */
    diskStep?: pulumi.Input<number>;
    /**
     * Maximum allowed GPU count
     */
    gpuMax?: pulumi.Input<number>;
    /**
     * Minimum allowed GPU count
     */
    gpuMin?: pulumi.Input<number>;
    /**
     * Step between allowed GPU counts
     */
    gpuStep?: pulumi.Input<number>;
    /**
     * Maximum allowed network bandwidth capacity
     */
    networkBandwidthMax?: pulumi.Input<number>;
    /**
     * Minimum allowed network bandwidth capacity
     */
    networkBandwidthMin?: pulumi.Input<number>;
    /**
     * Step between allowed network bandwidth capacities
     */
    networkBandwidthStep?: pulumi.Input<number>;
    /**
     * Maximum allowed RAM size
     */
    ramMax?: pulumi.Input<number>;
    /**
     * Minimum allowed RAM size
     */
    ramMin?: pulumi.Input<number>;
    /**
     * Step between allowed RAM sizes
     */
    ramStep?: pulumi.Input<number>;
}

export interface GetDatabasePresetPriceFilter {
    /**
     * Minimum price (inclusive)
     */
    from: number;
    /**
     * Maximum price (inclusive)
     */
    to: number;
}

export interface GetDatabasePresetPriceFilterArgs {
    /**
     * Minimum price (inclusive)
     */
    from: pulumi.Input<number>;
    /**
     * Maximum price (inclusive)
     */
    to: pulumi.Input<number>;
}

export interface GetDbPresetPriceFilter {
    /**
     * Minimum price (inclusive)
     */
    from: number;
    /**
     * Maximum price (inclusive)
     */
    to: number;
}

export interface GetDbPresetPriceFilterArgs {
    /**
     * Minimum price (inclusive)
     */
    from: pulumi.Input<number>;
    /**
     * Maximum price (inclusive)
     */
    to: pulumi.Input<number>;
}

export interface GetFloatingIpResource {
    /**
     * ID of resource that bind with floating IP Address
     */
    id?: string;
    /**
     * Type of resource that bind with floating IP Address
     */
    type?: string;
}

export interface GetFloatingIpResourceArgs {
    /**
     * ID of resource that bind with floating IP Address
     */
    id?: pulumi.Input<string>;
    /**
     * Type of resource that bind with floating IP Address
     */
    type?: pulumi.Input<string>;
}

export interface GetK8sPresetPriceFilter {
    /**
     * Minimum price (inclusive)
     */
    from: number;
    /**
     * Maximum price (inclusive)
     */
    to: number;
}

export interface GetK8sPresetPriceFilterArgs {
    /**
     * Minimum price (inclusive)
     */
    from: pulumi.Input<number>;
    /**
     * Maximum price (inclusive)
     */
    to: pulumi.Input<number>;
}

export interface GetLbPresetPriceFilter {
    /**
     * Minimum price (inclusive)
     */
    from: number;
    /**
     * Maximum price (inclusive)
     */
    to: number;
}

export interface GetLbPresetPriceFilterArgs {
    /**
     * Minimum price (inclusive)
     */
    from: pulumi.Input<number>;
    /**
     * Maximum price (inclusive)
     */
    to: pulumi.Input<number>;
}

export interface GetNetworkDrivePresetPriceFilter {
    /**
     * Minimum price (inclusive)
     */
    from: number;
    /**
     * Maximum price (inclusive)
     */
    to: number;
}

export interface GetNetworkDrivePresetPriceFilterArgs {
    /**
     * Minimum price (inclusive)
     */
    from: pulumi.Input<number>;
    /**
     * Maximum price (inclusive)
     */
    to: pulumi.Input<number>;
}

export interface GetOsRequirement {
    /**
     * Minimal allowed network bandwidth capacity
     */
    bandwidthMin?: number;
    /**
     * Minimal allowed CPU count
     */
    cpuMin?: number;
    /**
     * Minimal allowed disk size
     */
    diskMin?: number;
    /**
     * Minimal allowed RAM size
     */
    ramMin?: number;
}

export interface GetOsRequirementArgs {
    /**
     * Minimal allowed network bandwidth capacity
     */
    bandwidthMin?: pulumi.Input<number>;
    /**
     * Minimal allowed CPU count
     */
    cpuMin?: pulumi.Input<number>;
    /**
     * Minimal allowed disk size
     */
    diskMin?: pulumi.Input<number>;
    /**
     * Minimal allowed RAM size
     */
    ramMin?: pulumi.Input<number>;
}

export interface GetPresetsPriceFilter {
    /**
     * Minimum price (inclusive)
     */
    from: number;
    /**
     * Maximum price (inclusive)
     */
    to: number;
}

export interface GetPresetsPriceFilterArgs {
    /**
     * Minimum price (inclusive)
     */
    from: pulumi.Input<number>;
    /**
     * Maximum price (inclusive)
     */
    to: pulumi.Input<number>;
}

export interface GetS3ConfiguratorRequirement {
    /**
     * Maximum allowed disk size
     */
    diskMax?: number;
    /**
     * Minimum allowed disk size
     */
    diskMin?: number;
    /**
     * Step between allowed disk sizes
     */
    diskStep?: number;
}

export interface GetS3ConfiguratorRequirementArgs {
    /**
     * Maximum allowed disk size
     */
    diskMax?: pulumi.Input<number>;
    /**
     * Minimum allowed disk size
     */
    diskMin?: pulumi.Input<number>;
    /**
     * Step between allowed disk sizes
     */
    diskStep?: pulumi.Input<number>;
}

export interface GetS3PresetPriceFilter {
    /**
     * Minimum price (inclusive)
     */
    from: number;
    /**
     * Maximum price (inclusive)
     */
    to: number;
}

export interface GetS3PresetPriceFilterArgs {
    /**
     * Minimum price (inclusive)
     */
    from: pulumi.Input<number>;
    /**
     * Maximum price (inclusive)
     */
    to: pulumi.Input<number>;
}

export interface GetSoftwareOs {
    /**
     * Description of specified OS
     */
    description?: string;
    /**
     * Family of specified OS
     */
    family?: string;
    /**
     * Identifier of specified OS
     */
    id?: number;
    /**
     * Name of specified OS
     */
    name?: string;
    /**
     * Configuration requirements to install specified OS
     */
    requirements?: inputs.GetSoftwareOsRequirement[];
    /**
     * Version of specified OS
     */
    version?: string;
    /**
     * Codename of specified OS
     */
    versionCodename?: string;
}

export interface GetSoftwareOsArgs {
    /**
     * Description of specified OS
     */
    description?: pulumi.Input<string>;
    /**
     * Family of specified OS
     */
    family?: pulumi.Input<string>;
    /**
     * Identifier of specified OS
     */
    id?: pulumi.Input<number>;
    /**
     * Name of specified OS
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration requirements to install specified OS
     */
    requirements?: pulumi.Input<pulumi.Input<inputs.GetSoftwareOsRequirementArgs>[]>;
    /**
     * Version of specified OS
     */
    version?: pulumi.Input<string>;
    /**
     * Codename of specified OS
     */
    versionCodename?: pulumi.Input<string>;
}

export interface GetSoftwareOsRequirement {
    bandwidthMin: number;
    cpuMin: number;
    diskMin: number;
    ramMin: number;
}

export interface GetSoftwareOsRequirementArgs {
    bandwidthMin: pulumi.Input<number>;
    cpuMin: pulumi.Input<number>;
    diskMin: pulumi.Input<number>;
    ramMin: pulumi.Input<number>;
}

export interface LbHealthCheck {
    /**
     * Error requests count threshold for active backend health check
     */
    fall?: pulumi.Input<number>;
    /**
     * Interval in seconds for active backend health check
     */
    inter?: pulumi.Input<number>;
    /**
     * Path for active backend health check
     */
    path?: pulumi.Input<string>;
    /**
     * TCP port for active backend health check
     */
    port?: pulumi.Input<number>;
    /**
     * Protocol for active backend health check
     */
    proto?: pulumi.Input<string>;
    /**
     * Success requests count threshold for active backend health check
     */
    rise?: pulumi.Input<number>;
    /**
     * Timeout for active backend health check
     */
    timeout?: pulumi.Input<number>;
}

export interface LbLocalNetwork {
    /**
     * ID of VPC for assign address from
     */
    id: pulumi.Input<string>;
    /**
     * Address in VPC subnetwork for manual assign
     */
    ip?: pulumi.Input<string>;
}

export interface NetworkDriveResource {
    /**
     * ID of resource that mounts to network drive
     */
    id?: pulumi.Input<number>;
    /**
     * Type of resource that mounts with network drive (`server`)
     */
    type?: pulumi.Input<string>;
}

export interface S3BucketConfiguration {
    /**
     * Configurator ID for S3 Strorage
     */
    configuratorId: pulumi.Input<number>;
    /**
     * Disk size for S3 Storage
     */
    disk: pulumi.Input<number>;
}

export interface S3BucketDiskStat {
    size: pulumi.Input<number>;
    used: pulumi.Input<number>;
}

export interface ServerConfiguration {
    /**
     * Configurator ID for created server
     */
    configuratorId: pulumi.Input<number>;
    /**
     * CPU count for created server
     */
    cpu: pulumi.Input<number>;
    /**
     * Disk size for created server
     */
    disk: pulumi.Input<number>;
    /**
     * GPU count for created server
     */
    gpu?: pulumi.Input<number>;
    /**
     * RAM size for created server (must be divisible by 1024 and corresponds OS, software and configurator requirements)
     */
    ram: pulumi.Input<number>;
}

export interface ServerDisk {
    id: pulumi.Input<number>;
    isMounted: pulumi.Input<boolean>;
    isSystem: pulumi.Input<boolean>;
    size: pulumi.Input<number>;
    status: pulumi.Input<string>;
    systemName: pulumi.Input<string>;
    type: pulumi.Input<string>;
    used: pulumi.Input<number>;
}

export interface ServerLocalNetwork {
    /**
     * ID of VPC for assign address from
     */
    id?: pulumi.Input<string>;
    /**
     * Address in VPC subnetwork for manual assign
     */
    ip?: pulumi.Input<string>;
    /**
     * NAT mode for created servers (`dnat_and_snat` - egress and ingress traffic allowed, `snat` - only egress traffic allowed, `no_nat` - only local network traffic allowed)
     */
    mode?: pulumi.Input<string>;
}

export interface ServerNetwork {
    bandwidth: pulumi.Input<number>;
    ips: pulumi.Input<pulumi.Input<inputs.ServerNetworkIp>[]>;
    isDdosGuard: pulumi.Input<boolean>;
    natMode: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServerNetworkIp {
    ip: pulumi.Input<string>;
    isMain: pulumi.Input<boolean>;
    ptr: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ServerO {
    id: pulumi.Input<number>;
    name: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface ServerSoftware {
    id: pulumi.Input<number>;
    name: pulumi.Input<string>;
}

export interface SshKeyUsedBy {
    id: pulumi.Input<number>;
    name: pulumi.Input<string>;
}
