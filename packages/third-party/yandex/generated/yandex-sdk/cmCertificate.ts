// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CmCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CmCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmCertificateState, opts?: pulumi.CustomResourceOptions): CmCertificate {
        return new CmCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/cmCertificate:CmCertificate';

    /**
     * Returns true if the given object is an instance of CmCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmCertificate.__pulumiType;
    }

    declare public /*out*/ readonly challenges: pulumi.Output<outputs.CmCertificateChallenge[]>;
    declare public readonly cmCertificateId: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly deletionProtection: pulumi.Output<boolean | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly domains: pulumi.Output<string[] | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public /*out*/ readonly issuedAt: pulumi.Output<string>;
    declare public /*out*/ readonly issuer: pulumi.Output<string>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly managed: pulumi.Output<outputs.CmCertificateManaged | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly notAfter: pulumi.Output<string>;
    declare public /*out*/ readonly notBefore: pulumi.Output<string>;
    declare public readonly selfManaged: pulumi.Output<outputs.CmCertificateSelfManaged | undefined>;
    declare public /*out*/ readonly serial: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public /*out*/ readonly subject: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.CmCertificateTimeouts | undefined>;
    declare public /*out*/ readonly type: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a CmCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CmCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmCertificateArgs | CmCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmCertificateState | undefined;
            resourceInputs["challenges"] = state?.challenges;
            resourceInputs["cmCertificateId"] = state?.cmCertificateId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["domains"] = state?.domains;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["issuedAt"] = state?.issuedAt;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["managed"] = state?.managed;
            resourceInputs["name"] = state?.name;
            resourceInputs["notAfter"] = state?.notAfter;
            resourceInputs["notBefore"] = state?.notBefore;
            resourceInputs["selfManaged"] = state?.selfManaged;
            resourceInputs["serial"] = state?.serial;
            resourceInputs["status"] = state?.status;
            resourceInputs["subject"] = state?.subject;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["type"] = state?.type;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as CmCertificateArgs | undefined;
            resourceInputs["cmCertificateId"] = args?.cmCertificateId;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["domains"] = args?.domains;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["managed"] = args?.managed;
            resourceInputs["name"] = args?.name;
            resourceInputs["selfManaged"] = args?.selfManaged;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["challenges"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["issuedAt"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["notAfter"] = undefined /*out*/;
            resourceInputs["notBefore"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subject"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CmCertificate resources.
 */
export interface CmCertificateState {
    challenges?: pulumi.Input<pulumi.Input<inputs.CmCertificateChallenge>[]>;
    cmCertificateId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    folderId?: pulumi.Input<string>;
    issuedAt?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    managed?: pulumi.Input<inputs.CmCertificateManaged>;
    name?: pulumi.Input<string>;
    notAfter?: pulumi.Input<string>;
    notBefore?: pulumi.Input<string>;
    selfManaged?: pulumi.Input<inputs.CmCertificateSelfManaged>;
    serial?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subject?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CmCertificateTimeouts>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CmCertificate resource.
 */
export interface CmCertificateArgs {
    cmCertificateId?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    managed?: pulumi.Input<inputs.CmCertificateManaged>;
    name?: pulumi.Input<string>;
    selfManaged?: pulumi.Input<inputs.CmCertificateSelfManaged>;
    timeouts?: pulumi.Input<inputs.CmCertificateTimeouts>;
}
