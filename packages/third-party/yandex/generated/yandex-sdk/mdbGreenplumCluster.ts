// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MdbGreenplumCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbGreenplumCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbGreenplumClusterState, opts?: pulumi.CustomResourceOptions): MdbGreenplumCluster {
        return new MdbGreenplumCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbGreenplumCluster:MdbGreenplumCluster';

    /**
     * Returns true if the given object is an instance of MdbGreenplumCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbGreenplumCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbGreenplumCluster.__pulumiType;
    }

    declare public readonly access: pulumi.Output<outputs.MdbGreenplumClusterAccess | undefined>;
    declare public readonly assignPublicIp: pulumi.Output<boolean>;
    declare public readonly backupWindowStart: pulumi.Output<outputs.MdbGreenplumClusterBackupWindowStart | undefined>;
    declare public readonly cloudStorage: pulumi.Output<outputs.MdbGreenplumClusterCloudStorage | undefined>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly deletionProtection: pulumi.Output<boolean>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly environment: pulumi.Output<string>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly greenplumConfig: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly health: pulumi.Output<string>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly maintenanceWindow: pulumi.Output<outputs.MdbGreenplumClusterMaintenanceWindow | undefined>;
    declare public readonly masterHostCount: pulumi.Output<number>;
    declare public /*out*/ readonly masterHosts: pulumi.Output<outputs.MdbGreenplumClusterMasterHost[]>;
    declare public readonly masterSubcluster: pulumi.Output<outputs.MdbGreenplumClusterMasterSubcluster>;
    declare public readonly mdbGreenplumClusterId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<string>;
    declare public readonly poolerConfig: pulumi.Output<outputs.MdbGreenplumClusterPoolerConfig | undefined>;
    declare public readonly pxfConfig: pulumi.Output<outputs.MdbGreenplumClusterPxfConfig | undefined>;
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    declare public readonly segmentHostCount: pulumi.Output<number>;
    declare public /*out*/ readonly segmentHosts: pulumi.Output<outputs.MdbGreenplumClusterSegmentHost[]>;
    declare public readonly segmentInHost: pulumi.Output<number>;
    declare public readonly segmentSubcluster: pulumi.Output<outputs.MdbGreenplumClusterSegmentSubcluster>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly subnetId: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.MdbGreenplumClusterTimeouts | undefined>;
    declare public readonly userName: pulumi.Output<string>;
    declare public readonly userPassword: pulumi.Output<string>;
    declare public readonly version: pulumi.Output<string>;
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a MdbGreenplumCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbGreenplumClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbGreenplumClusterArgs | MdbGreenplumClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbGreenplumClusterState | undefined;
            resourceInputs["access"] = state?.access;
            resourceInputs["assignPublicIp"] = state?.assignPublicIp;
            resourceInputs["backupWindowStart"] = state?.backupWindowStart;
            resourceInputs["cloudStorage"] = state?.cloudStorage;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["greenplumConfig"] = state?.greenplumConfig;
            resourceInputs["health"] = state?.health;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["maintenanceWindow"] = state?.maintenanceWindow;
            resourceInputs["masterHostCount"] = state?.masterHostCount;
            resourceInputs["masterHosts"] = state?.masterHosts;
            resourceInputs["masterSubcluster"] = state?.masterSubcluster;
            resourceInputs["mdbGreenplumClusterId"] = state?.mdbGreenplumClusterId;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["poolerConfig"] = state?.poolerConfig;
            resourceInputs["pxfConfig"] = state?.pxfConfig;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["segmentHostCount"] = state?.segmentHostCount;
            resourceInputs["segmentHosts"] = state?.segmentHosts;
            resourceInputs["segmentInHost"] = state?.segmentInHost;
            resourceInputs["segmentSubcluster"] = state?.segmentSubcluster;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["userName"] = state?.userName;
            resourceInputs["userPassword"] = state?.userPassword;
            resourceInputs["version"] = state?.version;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as MdbGreenplumClusterArgs | undefined;
            if (args?.assignPublicIp === undefined && !opts.urn) {
                throw new Error("Missing required property 'assignPublicIp'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.masterHostCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterHostCount'");
            }
            if (args?.masterSubcluster === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterSubcluster'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.segmentHostCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'segmentHostCount'");
            }
            if (args?.segmentInHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'segmentInHost'");
            }
            if (args?.segmentSubcluster === undefined && !opts.urn) {
                throw new Error("Missing required property 'segmentSubcluster'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.userName === undefined && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            if (args?.userPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'userPassword'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if (args?.zone === undefined && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["access"] = args?.access;
            resourceInputs["assignPublicIp"] = args?.assignPublicIp;
            resourceInputs["backupWindowStart"] = args?.backupWindowStart;
            resourceInputs["cloudStorage"] = args?.cloudStorage;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["greenplumConfig"] = args?.greenplumConfig;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["masterHostCount"] = args?.masterHostCount;
            resourceInputs["masterSubcluster"] = args?.masterSubcluster;
            resourceInputs["mdbGreenplumClusterId"] = args?.mdbGreenplumClusterId;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["poolerConfig"] = args?.poolerConfig;
            resourceInputs["pxfConfig"] = args?.pxfConfig;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["segmentHostCount"] = args?.segmentHostCount;
            resourceInputs["segmentInHost"] = args?.segmentInHost;
            resourceInputs["segmentSubcluster"] = args?.segmentSubcluster;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["userName"] = args?.userName;
            resourceInputs["userPassword"] = args?.userPassword ? pulumi.secret(args.userPassword) : undefined;
            resourceInputs["version"] = args?.version;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["masterHosts"] = undefined /*out*/;
            resourceInputs["segmentHosts"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["userPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MdbGreenplumCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MdbGreenplumCluster resources.
 */
export interface MdbGreenplumClusterState {
    access?: pulumi.Input<inputs.MdbGreenplumClusterAccess>;
    assignPublicIp?: pulumi.Input<boolean>;
    backupWindowStart?: pulumi.Input<inputs.MdbGreenplumClusterBackupWindowStart>;
    cloudStorage?: pulumi.Input<inputs.MdbGreenplumClusterCloudStorage>;
    createdAt?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    environment?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    greenplumConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    health?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceWindow?: pulumi.Input<inputs.MdbGreenplumClusterMaintenanceWindow>;
    masterHostCount?: pulumi.Input<number>;
    masterHosts?: pulumi.Input<pulumi.Input<inputs.MdbGreenplumClusterMasterHost>[]>;
    masterSubcluster?: pulumi.Input<inputs.MdbGreenplumClusterMasterSubcluster>;
    mdbGreenplumClusterId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    poolerConfig?: pulumi.Input<inputs.MdbGreenplumClusterPoolerConfig>;
    pxfConfig?: pulumi.Input<inputs.MdbGreenplumClusterPxfConfig>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    segmentHostCount?: pulumi.Input<number>;
    segmentHosts?: pulumi.Input<pulumi.Input<inputs.MdbGreenplumClusterSegmentHost>[]>;
    segmentInHost?: pulumi.Input<number>;
    segmentSubcluster?: pulumi.Input<inputs.MdbGreenplumClusterSegmentSubcluster>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MdbGreenplumClusterTimeouts>;
    userName?: pulumi.Input<string>;
    userPassword?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MdbGreenplumCluster resource.
 */
export interface MdbGreenplumClusterArgs {
    access?: pulumi.Input<inputs.MdbGreenplumClusterAccess>;
    assignPublicIp: pulumi.Input<boolean>;
    backupWindowStart?: pulumi.Input<inputs.MdbGreenplumClusterBackupWindowStart>;
    cloudStorage?: pulumi.Input<inputs.MdbGreenplumClusterCloudStorage>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    environment: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    greenplumConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceWindow?: pulumi.Input<inputs.MdbGreenplumClusterMaintenanceWindow>;
    masterHostCount: pulumi.Input<number>;
    masterSubcluster: pulumi.Input<inputs.MdbGreenplumClusterMasterSubcluster>;
    mdbGreenplumClusterId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    poolerConfig?: pulumi.Input<inputs.MdbGreenplumClusterPoolerConfig>;
    pxfConfig?: pulumi.Input<inputs.MdbGreenplumClusterPxfConfig>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    segmentHostCount: pulumi.Input<number>;
    segmentInHost: pulumi.Input<number>;
    segmentSubcluster: pulumi.Input<inputs.MdbGreenplumClusterSegmentSubcluster>;
    subnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MdbGreenplumClusterTimeouts>;
    userName: pulumi.Input<string>;
    userPassword: pulumi.Input<string>;
    version: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}
