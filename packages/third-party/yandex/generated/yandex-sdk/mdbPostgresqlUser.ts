// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MdbPostgresqlUser extends pulumi.CustomResource {
    /**
     * Get an existing MdbPostgresqlUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbPostgresqlUserState, opts?: pulumi.CustomResourceOptions): MdbPostgresqlUser {
        return new MdbPostgresqlUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbPostgresqlUser:MdbPostgresqlUser';

    /**
     * Returns true if the given object is an instance of MdbPostgresqlUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbPostgresqlUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbPostgresqlUser.__pulumiType;
    }

    declare public readonly clusterId: pulumi.Output<string>;
    declare public readonly connLimit: pulumi.Output<number>;
    declare public readonly deletionProtection: pulumi.Output<string | undefined>;
    declare public readonly grants: pulumi.Output<string[]>;
    declare public readonly login: pulumi.Output<boolean | undefined>;
    declare public readonly mdbPostgresqlUserId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly password: pulumi.Output<string>;
    declare public readonly permissions: pulumi.Output<outputs.MdbPostgresqlUserPermission[] | undefined>;
    declare public readonly settings: pulumi.Output<{[key: string]: string}>;
    declare public readonly timeouts: pulumi.Output<outputs.MdbPostgresqlUserTimeouts | undefined>;

    /**
     * Create a MdbPostgresqlUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbPostgresqlUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbPostgresqlUserArgs | MdbPostgresqlUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbPostgresqlUserState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["connLimit"] = state?.connLimit;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["grants"] = state?.grants;
            resourceInputs["login"] = state?.login;
            resourceInputs["mdbPostgresqlUserId"] = state?.mdbPostgresqlUserId;
            resourceInputs["name"] = state?.name;
            resourceInputs["password"] = state?.password;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["settings"] = state?.settings;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as MdbPostgresqlUserArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["connLimit"] = args?.connLimit;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["grants"] = args?.grants;
            resourceInputs["login"] = args?.login;
            resourceInputs["mdbPostgresqlUserId"] = args?.mdbPostgresqlUserId;
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["settings"] = args?.settings;
            resourceInputs["timeouts"] = args?.timeouts;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MdbPostgresqlUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MdbPostgresqlUser resources.
 */
export interface MdbPostgresqlUserState {
    clusterId?: pulumi.Input<string>;
    connLimit?: pulumi.Input<number>;
    deletionProtection?: pulumi.Input<string>;
    grants?: pulumi.Input<pulumi.Input<string>[]>;
    login?: pulumi.Input<boolean>;
    mdbPostgresqlUserId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlUserPermission>[]>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MdbPostgresqlUserTimeouts>;
}

/**
 * The set of arguments for constructing a MdbPostgresqlUser resource.
 */
export interface MdbPostgresqlUserArgs {
    clusterId: pulumi.Input<string>;
    connLimit?: pulumi.Input<number>;
    deletionProtection?: pulumi.Input<string>;
    grants?: pulumi.Input<pulumi.Input<string>[]>;
    login?: pulumi.Input<boolean>;
    mdbPostgresqlUserId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlUserPermission>[]>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MdbPostgresqlUserTimeouts>;
}
