// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlbVirtualHost extends pulumi.CustomResource {
    /**
     * Get an existing AlbVirtualHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlbVirtualHostState, opts?: pulumi.CustomResourceOptions): AlbVirtualHost {
        return new AlbVirtualHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/albVirtualHost:AlbVirtualHost';

    /**
     * Returns true if the given object is an instance of AlbVirtualHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlbVirtualHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlbVirtualHost.__pulumiType;
    }

    declare public readonly albVirtualHostId: pulumi.Output<string>;
    declare public readonly authorities: pulumi.Output<string[] | undefined>;
    declare public readonly httpRouterId: pulumi.Output<string>;
    declare public readonly modifyRequestHeaders: pulumi.Output<outputs.AlbVirtualHostModifyRequestHeader[] | undefined>;
    declare public readonly modifyResponseHeaders: pulumi.Output<outputs.AlbVirtualHostModifyResponseHeader[] | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly routeOptions: pulumi.Output<outputs.AlbVirtualHostRouteOptions | undefined>;
    declare public readonly routes: pulumi.Output<outputs.AlbVirtualHostRoute[] | undefined>;
    declare public readonly timeouts: pulumi.Output<outputs.AlbVirtualHostTimeouts | undefined>;

    /**
     * Create a AlbVirtualHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlbVirtualHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlbVirtualHostArgs | AlbVirtualHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlbVirtualHostState | undefined;
            resourceInputs["albVirtualHostId"] = state?.albVirtualHostId;
            resourceInputs["authorities"] = state?.authorities;
            resourceInputs["httpRouterId"] = state?.httpRouterId;
            resourceInputs["modifyRequestHeaders"] = state?.modifyRequestHeaders;
            resourceInputs["modifyResponseHeaders"] = state?.modifyResponseHeaders;
            resourceInputs["name"] = state?.name;
            resourceInputs["routeOptions"] = state?.routeOptions;
            resourceInputs["routes"] = state?.routes;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as AlbVirtualHostArgs | undefined;
            if (args?.httpRouterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'httpRouterId'");
            }
            resourceInputs["albVirtualHostId"] = args?.albVirtualHostId;
            resourceInputs["authorities"] = args?.authorities;
            resourceInputs["httpRouterId"] = args?.httpRouterId;
            resourceInputs["modifyRequestHeaders"] = args?.modifyRequestHeaders;
            resourceInputs["modifyResponseHeaders"] = args?.modifyResponseHeaders;
            resourceInputs["name"] = args?.name;
            resourceInputs["routeOptions"] = args?.routeOptions;
            resourceInputs["routes"] = args?.routes;
            resourceInputs["timeouts"] = args?.timeouts;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlbVirtualHost.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlbVirtualHost resources.
 */
export interface AlbVirtualHostState {
    albVirtualHostId?: pulumi.Input<string>;
    authorities?: pulumi.Input<pulumi.Input<string>[]>;
    httpRouterId?: pulumi.Input<string>;
    modifyRequestHeaders?: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostModifyRequestHeader>[]>;
    modifyResponseHeaders?: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostModifyResponseHeader>[]>;
    name?: pulumi.Input<string>;
    routeOptions?: pulumi.Input<inputs.AlbVirtualHostRouteOptions>;
    routes?: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRoute>[]>;
    timeouts?: pulumi.Input<inputs.AlbVirtualHostTimeouts>;
}

/**
 * The set of arguments for constructing a AlbVirtualHost resource.
 */
export interface AlbVirtualHostArgs {
    albVirtualHostId?: pulumi.Input<string>;
    authorities?: pulumi.Input<pulumi.Input<string>[]>;
    httpRouterId: pulumi.Input<string>;
    modifyRequestHeaders?: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostModifyRequestHeader>[]>;
    modifyResponseHeaders?: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostModifyResponseHeader>[]>;
    name?: pulumi.Input<string>;
    routeOptions?: pulumi.Input<inputs.AlbVirtualHostRouteOptions>;
    routes?: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRoute>[]>;
    timeouts?: pulumi.Input<inputs.AlbVirtualHostTimeouts>;
}
