// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class YdbDatabaseDedicated extends pulumi.CustomResource {
    /**
     * Get an existing YdbDatabaseDedicated resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: YdbDatabaseDedicatedState, opts?: pulumi.CustomResourceOptions): YdbDatabaseDedicated {
        return new YdbDatabaseDedicated(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/ydbDatabaseDedicated:YdbDatabaseDedicated';

    /**
     * Returns true if the given object is an instance of YdbDatabaseDedicated.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is YdbDatabaseDedicated {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === YdbDatabaseDedicated.__pulumiType;
    }

    declare public readonly assignPublicIps: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public /*out*/ readonly databasePath: pulumi.Output<string>;
    declare public readonly deletionProtection: pulumi.Output<boolean | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly location: pulumi.Output<outputs.YdbDatabaseDedicatedLocation | undefined>;
    declare public readonly locationId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<string>;
    declare public readonly resourcePresetId: pulumi.Output<string>;
    declare public readonly scalePolicy: pulumi.Output<outputs.YdbDatabaseDedicatedScalePolicy>;
    declare public readonly sleepAfter: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly storageConfig: pulumi.Output<outputs.YdbDatabaseDedicatedStorageConfig>;
    declare public readonly subnetIds: pulumi.Output<string[]>;
    declare public readonly timeouts: pulumi.Output<outputs.YdbDatabaseDedicatedTimeouts | undefined>;
    declare public /*out*/ readonly tlsEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly ydbApiEndpoint: pulumi.Output<string>;
    declare public readonly ydbDatabaseDedicatedId: pulumi.Output<string>;
    declare public /*out*/ readonly ydbFullEndpoint: pulumi.Output<string>;

    /**
     * Create a YdbDatabaseDedicated resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: YdbDatabaseDedicatedArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: YdbDatabaseDedicatedArgs | YdbDatabaseDedicatedState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as YdbDatabaseDedicatedState | undefined;
            resourceInputs["assignPublicIps"] = state?.assignPublicIps;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["databasePath"] = state?.databasePath;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["location"] = state?.location;
            resourceInputs["locationId"] = state?.locationId;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["resourcePresetId"] = state?.resourcePresetId;
            resourceInputs["scalePolicy"] = state?.scalePolicy;
            resourceInputs["sleepAfter"] = state?.sleepAfter;
            resourceInputs["status"] = state?.status;
            resourceInputs["storageConfig"] = state?.storageConfig;
            resourceInputs["subnetIds"] = state?.subnetIds;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["tlsEnabled"] = state?.tlsEnabled;
            resourceInputs["ydbApiEndpoint"] = state?.ydbApiEndpoint;
            resourceInputs["ydbDatabaseDedicatedId"] = state?.ydbDatabaseDedicatedId;
            resourceInputs["ydbFullEndpoint"] = state?.ydbFullEndpoint;
        } else {
            const args = argsOrState as YdbDatabaseDedicatedArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.resourcePresetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourcePresetId'");
            }
            if (args?.scalePolicy === undefined && !opts.urn) {
                throw new Error("Missing required property 'scalePolicy'");
            }
            if (args?.storageConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageConfig'");
            }
            if (args?.subnetIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            resourceInputs["assignPublicIps"] = args?.assignPublicIps;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["location"] = args?.location;
            resourceInputs["locationId"] = args?.locationId;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["resourcePresetId"] = args?.resourcePresetId;
            resourceInputs["scalePolicy"] = args?.scalePolicy;
            resourceInputs["sleepAfter"] = args?.sleepAfter;
            resourceInputs["storageConfig"] = args?.storageConfig;
            resourceInputs["subnetIds"] = args?.subnetIds;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["ydbDatabaseDedicatedId"] = args?.ydbDatabaseDedicatedId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["databasePath"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tlsEnabled"] = undefined /*out*/;
            resourceInputs["ydbApiEndpoint"] = undefined /*out*/;
            resourceInputs["ydbFullEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(YdbDatabaseDedicated.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering YdbDatabaseDedicated resources.
 */
export interface YdbDatabaseDedicatedState {
    assignPublicIps?: pulumi.Input<boolean>;
    createdAt?: pulumi.Input<string>;
    databasePath?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<inputs.YdbDatabaseDedicatedLocation>;
    locationId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
    scalePolicy?: pulumi.Input<inputs.YdbDatabaseDedicatedScalePolicy>;
    sleepAfter?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    storageConfig?: pulumi.Input<inputs.YdbDatabaseDedicatedStorageConfig>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.YdbDatabaseDedicatedTimeouts>;
    tlsEnabled?: pulumi.Input<boolean>;
    ydbApiEndpoint?: pulumi.Input<string>;
    ydbDatabaseDedicatedId?: pulumi.Input<string>;
    ydbFullEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a YdbDatabaseDedicated resource.
 */
export interface YdbDatabaseDedicatedArgs {
    assignPublicIps?: pulumi.Input<boolean>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<inputs.YdbDatabaseDedicatedLocation>;
    locationId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
    scalePolicy: pulumi.Input<inputs.YdbDatabaseDedicatedScalePolicy>;
    sleepAfter?: pulumi.Input<number>;
    storageConfig: pulumi.Input<inputs.YdbDatabaseDedicatedStorageConfig>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.YdbDatabaseDedicatedTimeouts>;
    ydbDatabaseDedicatedId?: pulumi.Input<string>;
}
