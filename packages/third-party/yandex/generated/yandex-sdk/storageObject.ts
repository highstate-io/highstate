// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StorageObject extends pulumi.CustomResource {
    /**
     * Get an existing StorageObject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageObjectState, opts?: pulumi.CustomResourceOptions): StorageObject {
        return new StorageObject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/storageObject:StorageObject';

    /**
     * Returns true if the given object is an instance of StorageObject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageObject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageObject.__pulumiType;
    }

    declare public readonly accessKey: pulumi.Output<string | undefined>;
    declare public readonly acl: pulumi.Output<string | undefined>;
    declare public readonly bucket: pulumi.Output<string>;
    declare public readonly content: pulumi.Output<string | undefined>;
    declare public readonly contentBase64: pulumi.Output<string | undefined>;
    declare public readonly contentType: pulumi.Output<string>;
    declare public readonly key: pulumi.Output<string>;
    declare public readonly objectLockLegalHoldStatus: pulumi.Output<string | undefined>;
    declare public readonly objectLockMode: pulumi.Output<string | undefined>;
    declare public readonly objectLockRetainUntilDate: pulumi.Output<string | undefined>;
    declare public readonly secretKey: pulumi.Output<string | undefined>;
    declare public readonly source: pulumi.Output<string | undefined>;
    declare public readonly sourceHash: pulumi.Output<string | undefined>;
    declare public readonly storageObjectId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a StorageObject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageObjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageObjectArgs | StorageObjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageObjectState | undefined;
            resourceInputs["accessKey"] = state?.accessKey;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["content"] = state?.content;
            resourceInputs["contentBase64"] = state?.contentBase64;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["key"] = state?.key;
            resourceInputs["objectLockLegalHoldStatus"] = state?.objectLockLegalHoldStatus;
            resourceInputs["objectLockMode"] = state?.objectLockMode;
            resourceInputs["objectLockRetainUntilDate"] = state?.objectLockRetainUntilDate;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["source"] = state?.source;
            resourceInputs["sourceHash"] = state?.sourceHash;
            resourceInputs["storageObjectId"] = state?.storageObjectId;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as StorageObjectArgs | undefined;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["accessKey"] = args?.accessKey;
            resourceInputs["acl"] = args?.acl;
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["content"] = args?.content;
            resourceInputs["contentBase64"] = args?.contentBase64;
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["key"] = args?.key;
            resourceInputs["objectLockLegalHoldStatus"] = args?.objectLockLegalHoldStatus;
            resourceInputs["objectLockMode"] = args?.objectLockMode;
            resourceInputs["objectLockRetainUntilDate"] = args?.objectLockRetainUntilDate;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["source"] = args?.source;
            resourceInputs["sourceHash"] = args?.sourceHash;
            resourceInputs["storageObjectId"] = args?.storageObjectId;
            resourceInputs["tags"] = args?.tags;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StorageObject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageObject resources.
 */
export interface StorageObjectState {
    accessKey?: pulumi.Input<string>;
    acl?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentBase64?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    objectLockLegalHoldStatus?: pulumi.Input<string>;
    objectLockMode?: pulumi.Input<string>;
    objectLockRetainUntilDate?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceHash?: pulumi.Input<string>;
    storageObjectId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a StorageObject resource.
 */
export interface StorageObjectArgs {
    accessKey?: pulumi.Input<string>;
    acl?: pulumi.Input<string>;
    bucket: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentBase64?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    objectLockLegalHoldStatus?: pulumi.Input<string>;
    objectLockMode?: pulumi.Input<string>;
    objectLockRetainUntilDate?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    sourceHash?: pulumi.Input<string>;
    storageObjectId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
