// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CdnResource extends pulumi.CustomResource {
    /**
     * Get an existing CdnResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdnResourceState, opts?: pulumi.CustomResourceOptions): CdnResource {
        return new CdnResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/cdnResource:CdnResource';

    /**
     * Returns true if the given object is an instance of CdnResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdnResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdnResource.__pulumiType;
    }

    declare public readonly active: pulumi.Output<boolean | undefined>;
    declare public readonly cdnResourceId: pulumi.Output<string>;
    declare public readonly cname: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly options: pulumi.Output<outputs.CdnResourceOptions | undefined>;
    declare public readonly originGroupId: pulumi.Output<number | undefined>;
    declare public readonly originGroupName: pulumi.Output<string | undefined>;
    declare public readonly originProtocol: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly providerCname: pulumi.Output<string>;
    declare public readonly secondaryHostnames: pulumi.Output<string[] | undefined>;
    declare public readonly sslCertificate: pulumi.Output<outputs.CdnResourceSslCertificate | undefined>;
    declare public readonly timeouts: pulumi.Output<outputs.CdnResourceTimeouts | undefined>;
    declare public readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a CdnResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CdnResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdnResourceArgs | CdnResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdnResourceState | undefined;
            resourceInputs["active"] = state?.active;
            resourceInputs["cdnResourceId"] = state?.cdnResourceId;
            resourceInputs["cname"] = state?.cname;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["options"] = state?.options;
            resourceInputs["originGroupId"] = state?.originGroupId;
            resourceInputs["originGroupName"] = state?.originGroupName;
            resourceInputs["originProtocol"] = state?.originProtocol;
            resourceInputs["providerCname"] = state?.providerCname;
            resourceInputs["secondaryHostnames"] = state?.secondaryHostnames;
            resourceInputs["sslCertificate"] = state?.sslCertificate;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as CdnResourceArgs | undefined;
            resourceInputs["active"] = args?.active;
            resourceInputs["cdnResourceId"] = args?.cdnResourceId;
            resourceInputs["cname"] = args?.cname;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["options"] = args?.options;
            resourceInputs["originGroupId"] = args?.originGroupId;
            resourceInputs["originGroupName"] = args?.originGroupName;
            resourceInputs["originProtocol"] = args?.originProtocol;
            resourceInputs["secondaryHostnames"] = args?.secondaryHostnames;
            resourceInputs["sslCertificate"] = args?.sslCertificate;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["updatedAt"] = args?.updatedAt;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["providerCname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CdnResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CdnResource resources.
 */
export interface CdnResourceState {
    active?: pulumi.Input<boolean>;
    cdnResourceId?: pulumi.Input<string>;
    cname?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    options?: pulumi.Input<inputs.CdnResourceOptions>;
    originGroupId?: pulumi.Input<number>;
    originGroupName?: pulumi.Input<string>;
    originProtocol?: pulumi.Input<string>;
    providerCname?: pulumi.Input<string>;
    secondaryHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    sslCertificate?: pulumi.Input<inputs.CdnResourceSslCertificate>;
    timeouts?: pulumi.Input<inputs.CdnResourceTimeouts>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CdnResource resource.
 */
export interface CdnResourceArgs {
    active?: pulumi.Input<boolean>;
    cdnResourceId?: pulumi.Input<string>;
    cname?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    options?: pulumi.Input<inputs.CdnResourceOptions>;
    originGroupId?: pulumi.Input<number>;
    originGroupName?: pulumi.Input<string>;
    originProtocol?: pulumi.Input<string>;
    secondaryHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    sslCertificate?: pulumi.Input<inputs.CdnResourceSslCertificate>;
    timeouts?: pulumi.Input<inputs.CdnResourceTimeouts>;
    updatedAt?: pulumi.Input<string>;
}
