// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMdbKafkaCluster(args?: GetMdbKafkaClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetMdbKafkaClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getMdbKafkaCluster:getMdbKafkaCluster", {
        "clusterId": args.clusterId,
        "config": args.config,
        "deletionProtection": args.deletionProtection,
        "folderId": args.folderId,
        "id": args.id,
        "name": args.name,
        "subnetIds": args.subnetIds,
        "topics": args.topics,
        "users": args.users,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMdbKafkaCluster.
 */
export interface GetMdbKafkaClusterArgs {
    clusterId?: string;
    config?: inputs.GetMdbKafkaClusterConfig;
    deletionProtection?: boolean;
    folderId?: string;
    id?: string;
    name?: string;
    subnetIds?: string[];
    topics?: inputs.GetMdbKafkaClusterTopic[];
    users?: inputs.GetMdbKafkaClusterUser[];
}

/**
 * A collection of values returned by getMdbKafkaCluster.
 */
export interface GetMdbKafkaClusterResult {
    readonly accesses: outputs.GetMdbKafkaClusterAccess[];
    readonly clusterId: string;
    readonly config?: outputs.GetMdbKafkaClusterConfig;
    readonly createdAt: string;
    readonly deletionProtection: boolean;
    readonly description: string;
    readonly diskSizeAutoscalings: outputs.GetMdbKafkaClusterDiskSizeAutoscaling[];
    readonly environment: string;
    readonly folderId: string;
    readonly health: string;
    readonly hostGroupIds: string[];
    readonly hosts: outputs.GetMdbKafkaClusterHost[];
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly maintenanceWindows: outputs.GetMdbKafkaClusterMaintenanceWindow[];
    readonly name: string;
    readonly networkId: string;
    readonly securityGroupIds: string[];
    readonly status: string;
    readonly subnetIds?: string[];
    readonly topics?: outputs.GetMdbKafkaClusterTopic[];
    readonly users?: outputs.GetMdbKafkaClusterUser[];
}
export function getMdbKafkaClusterOutput(args?: GetMdbKafkaClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetMdbKafkaClusterResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("yandex:index/getMdbKafkaCluster:getMdbKafkaCluster", {
        "clusterId": args.clusterId,
        "config": args.config,
        "deletionProtection": args.deletionProtection,
        "folderId": args.folderId,
        "id": args.id,
        "name": args.name,
        "subnetIds": args.subnetIds,
        "topics": args.topics,
        "users": args.users,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMdbKafkaCluster.
 */
export interface GetMdbKafkaClusterOutputArgs {
    clusterId?: pulumi.Input<string>;
    config?: pulumi.Input<inputs.GetMdbKafkaClusterConfigArgs>;
    deletionProtection?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    topics?: pulumi.Input<pulumi.Input<inputs.GetMdbKafkaClusterTopicArgs>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.GetMdbKafkaClusterUserArgs>[]>;
}
