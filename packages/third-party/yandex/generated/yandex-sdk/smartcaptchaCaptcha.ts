// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SmartcaptchaCaptcha extends pulumi.CustomResource {
    /**
     * Get an existing SmartcaptchaCaptcha resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmartcaptchaCaptchaState, opts?: pulumi.CustomResourceOptions): SmartcaptchaCaptcha {
        return new SmartcaptchaCaptcha(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/smartcaptchaCaptcha:SmartcaptchaCaptcha';

    /**
     * Returns true if the given object is an instance of SmartcaptchaCaptcha.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmartcaptchaCaptcha {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmartcaptchaCaptcha.__pulumiType;
    }

    declare public readonly allowedSites: pulumi.Output<string[] | undefined>;
    declare public readonly challengeType: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly clientKey: pulumi.Output<string>;
    declare public readonly cloudId: pulumi.Output<string>;
    declare public readonly complexity: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly deletionProtection: pulumi.Output<boolean | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly overrideVariants: pulumi.Output<outputs.SmartcaptchaCaptchaOverrideVariant[] | undefined>;
    declare public readonly preCheckType: pulumi.Output<string | undefined>;
    declare public readonly securityRules: pulumi.Output<outputs.SmartcaptchaCaptchaSecurityRule[] | undefined>;
    declare public readonly smartcaptchaCaptchaId: pulumi.Output<string>;
    declare public readonly styleJson: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly suspend: pulumi.Output<boolean>;
    declare public readonly timeouts: pulumi.Output<outputs.SmartcaptchaCaptchaTimeouts | undefined>;
    declare public readonly turnOffHostnameCheck: pulumi.Output<boolean | undefined>;

    /**
     * Create a SmartcaptchaCaptcha resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SmartcaptchaCaptchaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmartcaptchaCaptchaArgs | SmartcaptchaCaptchaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmartcaptchaCaptchaState | undefined;
            resourceInputs["allowedSites"] = state?.allowedSites;
            resourceInputs["challengeType"] = state?.challengeType;
            resourceInputs["clientKey"] = state?.clientKey;
            resourceInputs["cloudId"] = state?.cloudId;
            resourceInputs["complexity"] = state?.complexity;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["name"] = state?.name;
            resourceInputs["overrideVariants"] = state?.overrideVariants;
            resourceInputs["preCheckType"] = state?.preCheckType;
            resourceInputs["securityRules"] = state?.securityRules;
            resourceInputs["smartcaptchaCaptchaId"] = state?.smartcaptchaCaptchaId;
            resourceInputs["styleJson"] = state?.styleJson;
            resourceInputs["suspend"] = state?.suspend;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["turnOffHostnameCheck"] = state?.turnOffHostnameCheck;
        } else {
            const args = argsOrState as SmartcaptchaCaptchaArgs | undefined;
            resourceInputs["allowedSites"] = args?.allowedSites;
            resourceInputs["challengeType"] = args?.challengeType;
            resourceInputs["cloudId"] = args?.cloudId;
            resourceInputs["complexity"] = args?.complexity;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["name"] = args?.name;
            resourceInputs["overrideVariants"] = args?.overrideVariants;
            resourceInputs["preCheckType"] = args?.preCheckType;
            resourceInputs["securityRules"] = args?.securityRules;
            resourceInputs["smartcaptchaCaptchaId"] = args?.smartcaptchaCaptchaId;
            resourceInputs["styleJson"] = args?.styleJson;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["turnOffHostnameCheck"] = args?.turnOffHostnameCheck;
            resourceInputs["clientKey"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["suspend"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmartcaptchaCaptcha.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SmartcaptchaCaptcha resources.
 */
export interface SmartcaptchaCaptchaState {
    allowedSites?: pulumi.Input<pulumi.Input<string>[]>;
    challengeType?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    cloudId?: pulumi.Input<string>;
    complexity?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overrideVariants?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaOverrideVariant>[]>;
    preCheckType?: pulumi.Input<string>;
    securityRules?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRule>[]>;
    smartcaptchaCaptchaId?: pulumi.Input<string>;
    styleJson?: pulumi.Input<string>;
    suspend?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.SmartcaptchaCaptchaTimeouts>;
    turnOffHostnameCheck?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SmartcaptchaCaptcha resource.
 */
export interface SmartcaptchaCaptchaArgs {
    allowedSites?: pulumi.Input<pulumi.Input<string>[]>;
    challengeType?: pulumi.Input<string>;
    cloudId?: pulumi.Input<string>;
    complexity?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overrideVariants?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaOverrideVariant>[]>;
    preCheckType?: pulumi.Input<string>;
    securityRules?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRule>[]>;
    smartcaptchaCaptchaId?: pulumi.Input<string>;
    styleJson?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SmartcaptchaCaptchaTimeouts>;
    turnOffHostnameCheck?: pulumi.Input<boolean>;
}
