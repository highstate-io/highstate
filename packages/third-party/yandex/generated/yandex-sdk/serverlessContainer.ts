// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServerlessContainer extends pulumi.CustomResource {
    /**
     * Get an existing ServerlessContainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerlessContainerState, opts?: pulumi.CustomResourceOptions): ServerlessContainer {
        return new ServerlessContainer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/serverlessContainer:ServerlessContainer';

    /**
     * Returns true if the given object is an instance of ServerlessContainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerlessContainer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerlessContainer.__pulumiType;
    }

    declare public readonly concurrency: pulumi.Output<number | undefined>;
    declare public readonly connectivity: pulumi.Output<outputs.ServerlessContainerConnectivity | undefined>;
    declare public readonly coreFraction: pulumi.Output<number>;
    declare public readonly cores: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly executionTimeout: pulumi.Output<string>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly image: pulumi.Output<outputs.ServerlessContainerImage>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly logOptions: pulumi.Output<outputs.ServerlessContainerLogOptions | undefined>;
    /**
     * Container memory in megabytes, should be aligned to 128
     */
    declare public readonly memory: pulumi.Output<number>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly provisionPolicy: pulumi.Output<outputs.ServerlessContainerProvisionPolicy | undefined>;
    declare public /*out*/ readonly revisionId: pulumi.Output<string>;
    declare public readonly secrets: pulumi.Output<outputs.ServerlessContainerSecret[] | undefined>;
    declare public readonly serverlessContainerId: pulumi.Output<string>;
    declare public readonly serviceAccountId: pulumi.Output<string | undefined>;
    declare public readonly storageMounts: pulumi.Output<outputs.ServerlessContainerStorageMount[] | undefined>;
    declare public readonly timeouts: pulumi.Output<outputs.ServerlessContainerTimeouts | undefined>;
    declare public /*out*/ readonly url: pulumi.Output<string>;

    /**
     * Create a ServerlessContainer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerlessContainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerlessContainerArgs | ServerlessContainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerlessContainerState | undefined;
            resourceInputs["concurrency"] = state?.concurrency;
            resourceInputs["connectivity"] = state?.connectivity;
            resourceInputs["coreFraction"] = state?.coreFraction;
            resourceInputs["cores"] = state?.cores;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["executionTimeout"] = state?.executionTimeout;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["image"] = state?.image;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["logOptions"] = state?.logOptions;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["name"] = state?.name;
            resourceInputs["provisionPolicy"] = state?.provisionPolicy;
            resourceInputs["revisionId"] = state?.revisionId;
            resourceInputs["secrets"] = state?.secrets;
            resourceInputs["serverlessContainerId"] = state?.serverlessContainerId;
            resourceInputs["serviceAccountId"] = state?.serviceAccountId;
            resourceInputs["storageMounts"] = state?.storageMounts;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as ServerlessContainerArgs | undefined;
            if (args?.image === undefined && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            if (args?.memory === undefined && !opts.urn) {
                throw new Error("Missing required property 'memory'");
            }
            resourceInputs["concurrency"] = args?.concurrency;
            resourceInputs["connectivity"] = args?.connectivity;
            resourceInputs["coreFraction"] = args?.coreFraction;
            resourceInputs["cores"] = args?.cores;
            resourceInputs["description"] = args?.description;
            resourceInputs["executionTimeout"] = args?.executionTimeout;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["image"] = args?.image;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["logOptions"] = args?.logOptions;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["name"] = args?.name;
            resourceInputs["provisionPolicy"] = args?.provisionPolicy;
            resourceInputs["secrets"] = args?.secrets;
            resourceInputs["serverlessContainerId"] = args?.serverlessContainerId;
            resourceInputs["serviceAccountId"] = args?.serviceAccountId;
            resourceInputs["storageMounts"] = args?.storageMounts;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerlessContainer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServerlessContainer resources.
 */
export interface ServerlessContainerState {
    concurrency?: pulumi.Input<number>;
    connectivity?: pulumi.Input<inputs.ServerlessContainerConnectivity>;
    coreFraction?: pulumi.Input<number>;
    cores?: pulumi.Input<number>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    executionTimeout?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    image?: pulumi.Input<inputs.ServerlessContainerImage>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logOptions?: pulumi.Input<inputs.ServerlessContainerLogOptions>;
    /**
     * Container memory in megabytes, should be aligned to 128
     */
    memory?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    provisionPolicy?: pulumi.Input<inputs.ServerlessContainerProvisionPolicy>;
    revisionId?: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.ServerlessContainerSecret>[]>;
    serverlessContainerId?: pulumi.Input<string>;
    serviceAccountId?: pulumi.Input<string>;
    storageMounts?: pulumi.Input<pulumi.Input<inputs.ServerlessContainerStorageMount>[]>;
    timeouts?: pulumi.Input<inputs.ServerlessContainerTimeouts>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerlessContainer resource.
 */
export interface ServerlessContainerArgs {
    concurrency?: pulumi.Input<number>;
    connectivity?: pulumi.Input<inputs.ServerlessContainerConnectivity>;
    coreFraction?: pulumi.Input<number>;
    cores?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    executionTimeout?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    image: pulumi.Input<inputs.ServerlessContainerImage>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logOptions?: pulumi.Input<inputs.ServerlessContainerLogOptions>;
    /**
     * Container memory in megabytes, should be aligned to 128
     */
    memory: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    provisionPolicy?: pulumi.Input<inputs.ServerlessContainerProvisionPolicy>;
    secrets?: pulumi.Input<pulumi.Input<inputs.ServerlessContainerSecret>[]>;
    serverlessContainerId?: pulumi.Input<string>;
    serviceAccountId?: pulumi.Input<string>;
    storageMounts?: pulumi.Input<pulumi.Input<inputs.ServerlessContainerStorageMount>[]>;
    timeouts?: pulumi.Input<inputs.ServerlessContainerTimeouts>;
}
