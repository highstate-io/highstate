// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MdbPostgresqlCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbPostgresqlCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbPostgresqlClusterState, opts?: pulumi.CustomResourceOptions): MdbPostgresqlCluster {
        return new MdbPostgresqlCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster';

    /**
     * Returns true if the given object is an instance of MdbPostgresqlCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbPostgresqlCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbPostgresqlCluster.__pulumiType;
    }

    declare public readonly config: pulumi.Output<outputs.MdbPostgresqlClusterConfig>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly databases: pulumi.Output<outputs.MdbPostgresqlClusterDatabase[] | undefined>;
    declare public readonly deletionProtection: pulumi.Output<boolean>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly environment: pulumi.Output<string>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public /*out*/ readonly health: pulumi.Output<string>;
    declare public readonly hostGroupIds: pulumi.Output<string[]>;
    declare public readonly hostMasterName: pulumi.Output<string>;
    declare public readonly hosts: pulumi.Output<outputs.MdbPostgresqlClusterHost[]>;
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    declare public readonly maintenanceWindow: pulumi.Output<outputs.MdbPostgresqlClusterMaintenanceWindow | undefined>;
    declare public readonly mdbPostgresqlClusterId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<string>;
    declare public readonly restore: pulumi.Output<outputs.MdbPostgresqlClusterRestore | undefined>;
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.MdbPostgresqlClusterTimeouts | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly users: pulumi.Output<outputs.MdbPostgresqlClusterUser[] | undefined>;

    /**
     * Create a MdbPostgresqlCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbPostgresqlClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbPostgresqlClusterArgs | MdbPostgresqlClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbPostgresqlClusterState | undefined;
            resourceInputs["config"] = state?.config;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["databases"] = state?.databases;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["health"] = state?.health;
            resourceInputs["hostGroupIds"] = state?.hostGroupIds;
            resourceInputs["hostMasterName"] = state?.hostMasterName;
            resourceInputs["hosts"] = state?.hosts;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["maintenanceWindow"] = state?.maintenanceWindow;
            resourceInputs["mdbPostgresqlClusterId"] = state?.mdbPostgresqlClusterId;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["restore"] = state?.restore;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["status"] = state?.status;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["users"] = state?.users;
        } else {
            const args = argsOrState as MdbPostgresqlClusterArgs | undefined;
            if (args?.config === undefined && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.hosts === undefined && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["config"] = args?.config;
            resourceInputs["databases"] = args?.databases;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["hostGroupIds"] = args?.hostGroupIds;
            resourceInputs["hostMasterName"] = args?.hostMasterName;
            resourceInputs["hosts"] = args?.hosts;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["mdbPostgresqlClusterId"] = args?.mdbPostgresqlClusterId;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["restore"] = args?.restore;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["users"] = args?.users;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdbPostgresqlCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MdbPostgresqlCluster resources.
 */
export interface MdbPostgresqlClusterState {
    config?: pulumi.Input<inputs.MdbPostgresqlClusterConfig>;
    createdAt?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    databases?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterDatabase>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    environment?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    health?: pulumi.Input<string>;
    hostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    hostMasterName?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterHost>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceWindow?: pulumi.Input<inputs.MdbPostgresqlClusterMaintenanceWindow>;
    mdbPostgresqlClusterId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.MdbPostgresqlClusterRestore>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MdbPostgresqlClusterTimeouts>;
    /**
     * @deprecated Deprecated
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterUser>[]>;
}

/**
 * The set of arguments for constructing a MdbPostgresqlCluster resource.
 */
export interface MdbPostgresqlClusterArgs {
    config: pulumi.Input<inputs.MdbPostgresqlClusterConfig>;
    /**
     * @deprecated Deprecated
     */
    databases?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterDatabase>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    environment: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    hostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    hostMasterName?: pulumi.Input<string>;
    hosts: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterHost>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceWindow?: pulumi.Input<inputs.MdbPostgresqlClusterMaintenanceWindow>;
    mdbPostgresqlClusterId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.MdbPostgresqlClusterRestore>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.MdbPostgresqlClusterTimeouts>;
    /**
     * @deprecated Deprecated
     */
    users?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterUser>[]>;
}
