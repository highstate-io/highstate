// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BackupPolicy extends pulumi.CustomResource {
    /**
     * Get an existing BackupPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupPolicyState, opts?: pulumi.CustomResourceOptions): BackupPolicy {
        return new BackupPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/backupPolicy:BackupPolicy';

    /**
     * Returns true if the given object is an instance of BackupPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupPolicy.__pulumiType;
    }

    declare public readonly archiveName: pulumi.Output<string | undefined>;
    declare public readonly backupPolicyId: pulumi.Output<string>;
    declare public readonly cbt: pulumi.Output<string | undefined>;
    declare public readonly compression: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public /*out*/ readonly enabled: pulumi.Output<boolean>;
    declare public readonly fastBackupEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly format: pulumi.Output<string | undefined>;
    declare public readonly multiVolumeSnapshottingEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly performanceWindowEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly preserveFileSecuritySettings: pulumi.Output<boolean | undefined>;
    declare public readonly quiesceSnapshottingEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly reattempts: pulumi.Output<outputs.BackupPolicyReattempts>;
    declare public readonly retention: pulumi.Output<outputs.BackupPolicyRetention>;
    declare public readonly scheduling: pulumi.Output<outputs.BackupPolicyScheduling>;
    declare public readonly silentModeEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly splittingBytes: pulumi.Output<string | undefined>;
    declare public readonly timeouts: pulumi.Output<outputs.BackupPolicyTimeouts | undefined>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    declare public readonly vmSnapshotReattempts: pulumi.Output<outputs.BackupPolicyVmSnapshotReattempts>;
    declare public readonly vssProvider: pulumi.Output<string | undefined>;

    /**
     * Create a BackupPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupPolicyArgs | BackupPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupPolicyState | undefined;
            resourceInputs["archiveName"] = state?.archiveName;
            resourceInputs["backupPolicyId"] = state?.backupPolicyId;
            resourceInputs["cbt"] = state?.cbt;
            resourceInputs["compression"] = state?.compression;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["fastBackupEnabled"] = state?.fastBackupEnabled;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["format"] = state?.format;
            resourceInputs["multiVolumeSnapshottingEnabled"] = state?.multiVolumeSnapshottingEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["performanceWindowEnabled"] = state?.performanceWindowEnabled;
            resourceInputs["preserveFileSecuritySettings"] = state?.preserveFileSecuritySettings;
            resourceInputs["quiesceSnapshottingEnabled"] = state?.quiesceSnapshottingEnabled;
            resourceInputs["reattempts"] = state?.reattempts;
            resourceInputs["retention"] = state?.retention;
            resourceInputs["scheduling"] = state?.scheduling;
            resourceInputs["silentModeEnabled"] = state?.silentModeEnabled;
            resourceInputs["splittingBytes"] = state?.splittingBytes;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["vmSnapshotReattempts"] = state?.vmSnapshotReattempts;
            resourceInputs["vssProvider"] = state?.vssProvider;
        } else {
            const args = argsOrState as BackupPolicyArgs | undefined;
            if (args?.reattempts === undefined && !opts.urn) {
                throw new Error("Missing required property 'reattempts'");
            }
            if (args?.retention === undefined && !opts.urn) {
                throw new Error("Missing required property 'retention'");
            }
            if (args?.scheduling === undefined && !opts.urn) {
                throw new Error("Missing required property 'scheduling'");
            }
            if (args?.vmSnapshotReattempts === undefined && !opts.urn) {
                throw new Error("Missing required property 'vmSnapshotReattempts'");
            }
            resourceInputs["archiveName"] = args?.archiveName;
            resourceInputs["backupPolicyId"] = args?.backupPolicyId;
            resourceInputs["cbt"] = args?.cbt;
            resourceInputs["compression"] = args?.compression;
            resourceInputs["fastBackupEnabled"] = args?.fastBackupEnabled;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["format"] = args?.format;
            resourceInputs["multiVolumeSnapshottingEnabled"] = args?.multiVolumeSnapshottingEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["performanceWindowEnabled"] = args?.performanceWindowEnabled;
            resourceInputs["preserveFileSecuritySettings"] = args?.preserveFileSecuritySettings;
            resourceInputs["quiesceSnapshottingEnabled"] = args?.quiesceSnapshottingEnabled;
            resourceInputs["reattempts"] = args?.reattempts;
            resourceInputs["retention"] = args?.retention;
            resourceInputs["scheduling"] = args?.scheduling;
            resourceInputs["silentModeEnabled"] = args?.silentModeEnabled;
            resourceInputs["splittingBytes"] = args?.splittingBytes;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["vmSnapshotReattempts"] = args?.vmSnapshotReattempts;
            resourceInputs["vssProvider"] = args?.vssProvider;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BackupPolicy resources.
 */
export interface BackupPolicyState {
    archiveName?: pulumi.Input<string>;
    backupPolicyId?: pulumi.Input<string>;
    cbt?: pulumi.Input<string>;
    compression?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    fastBackupEnabled?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    multiVolumeSnapshottingEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    performanceWindowEnabled?: pulumi.Input<boolean>;
    preserveFileSecuritySettings?: pulumi.Input<boolean>;
    quiesceSnapshottingEnabled?: pulumi.Input<boolean>;
    reattempts?: pulumi.Input<inputs.BackupPolicyReattempts>;
    retention?: pulumi.Input<inputs.BackupPolicyRetention>;
    scheduling?: pulumi.Input<inputs.BackupPolicyScheduling>;
    silentModeEnabled?: pulumi.Input<boolean>;
    splittingBytes?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BackupPolicyTimeouts>;
    updatedAt?: pulumi.Input<string>;
    vmSnapshotReattempts?: pulumi.Input<inputs.BackupPolicyVmSnapshotReattempts>;
    vssProvider?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackupPolicy resource.
 */
export interface BackupPolicyArgs {
    archiveName?: pulumi.Input<string>;
    backupPolicyId?: pulumi.Input<string>;
    cbt?: pulumi.Input<string>;
    compression?: pulumi.Input<string>;
    fastBackupEnabled?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    multiVolumeSnapshottingEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    performanceWindowEnabled?: pulumi.Input<boolean>;
    preserveFileSecuritySettings?: pulumi.Input<boolean>;
    quiesceSnapshottingEnabled?: pulumi.Input<boolean>;
    reattempts: pulumi.Input<inputs.BackupPolicyReattempts>;
    retention: pulumi.Input<inputs.BackupPolicyRetention>;
    scheduling: pulumi.Input<inputs.BackupPolicyScheduling>;
    silentModeEnabled?: pulumi.Input<boolean>;
    splittingBytes?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BackupPolicyTimeouts>;
    vmSnapshotReattempts: pulumi.Input<inputs.BackupPolicyVmSnapshotReattempts>;
    vssProvider?: pulumi.Input<string>;
}
