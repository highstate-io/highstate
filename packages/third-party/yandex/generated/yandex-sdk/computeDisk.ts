// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeDisk extends pulumi.CustomResource {
    /**
     * Get an existing ComputeDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeDiskState, opts?: pulumi.CustomResourceOptions): ComputeDisk {
        return new ComputeDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/computeDisk:ComputeDisk';

    /**
     * Returns true if the given object is an instance of ComputeDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeDisk.__pulumiType;
    }

    declare public readonly allowRecreate: pulumi.Output<boolean | undefined>;
    declare public readonly blockSize: pulumi.Output<number | undefined>;
    declare public readonly computeDiskId: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly diskPlacementPolicy: pulumi.Output<outputs.ComputeDiskDiskPlacementPolicy | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly imageId: pulumi.Output<string | undefined>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly productIds: pulumi.Output<string[]>;
    declare public readonly size: pulumi.Output<number | undefined>;
    declare public readonly snapshotId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.ComputeDiskTimeouts | undefined>;
    declare public readonly type: pulumi.Output<string | undefined>;
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a ComputeDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ComputeDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeDiskArgs | ComputeDiskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeDiskState | undefined;
            resourceInputs["allowRecreate"] = state?.allowRecreate;
            resourceInputs["blockSize"] = state?.blockSize;
            resourceInputs["computeDiskId"] = state?.computeDiskId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskPlacementPolicy"] = state?.diskPlacementPolicy;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["productIds"] = state?.productIds;
            resourceInputs["size"] = state?.size;
            resourceInputs["snapshotId"] = state?.snapshotId;
            resourceInputs["status"] = state?.status;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["type"] = state?.type;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as ComputeDiskArgs | undefined;
            resourceInputs["allowRecreate"] = args?.allowRecreate;
            resourceInputs["blockSize"] = args?.blockSize;
            resourceInputs["computeDiskId"] = args?.computeDiskId;
            resourceInputs["description"] = args?.description;
            resourceInputs["diskPlacementPolicy"] = args?.diskPlacementPolicy;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["size"] = args?.size;
            resourceInputs["snapshotId"] = args?.snapshotId;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["type"] = args?.type;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["productIds"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeDisk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeDisk resources.
 */
export interface ComputeDiskState {
    allowRecreate?: pulumi.Input<boolean>;
    blockSize?: pulumi.Input<number>;
    computeDiskId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskPlacementPolicy?: pulumi.Input<inputs.ComputeDiskDiskPlacementPolicy>;
    folderId?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    productIds?: pulumi.Input<pulumi.Input<string>[]>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeDiskTimeouts>;
    type?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeDisk resource.
 */
export interface ComputeDiskArgs {
    allowRecreate?: pulumi.Input<boolean>;
    blockSize?: pulumi.Input<number>;
    computeDiskId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskPlacementPolicy?: pulumi.Input<inputs.ComputeDiskDiskPlacementPolicy>;
    folderId?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeDiskTimeouts>;
    type?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
