// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlbBackendGroupGrpcBackend {
    healthcheck?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendHealthcheck>;
    loadBalancingConfig?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendLoadBalancingConfig>;
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    targetGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendTls>;
    weight?: pulumi.Input<number>;
}

export interface AlbBackendGroupGrpcBackendHealthcheck {
    grpcHealthcheck?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck>;
    interval: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck>;
    timeout: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck {
    serviceName?: pulumi.Input<string>;
}

export interface AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path: pulumi.Input<string>;
}

export interface AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface AlbBackendGroupGrpcBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface AlbBackendGroupGrpcBackendTls {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendTlsValidationContext>;
}

export interface AlbBackendGroupGrpcBackendTlsValidationContext {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface AlbBackendGroupHttpBackend {
    healthcheck?: pulumi.Input<inputs.AlbBackendGroupHttpBackendHealthcheck>;
    http2?: pulumi.Input<boolean>;
    loadBalancingConfig?: pulumi.Input<inputs.AlbBackendGroupHttpBackendLoadBalancingConfig>;
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    storageBucket?: pulumi.Input<string>;
    targetGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.AlbBackendGroupHttpBackendTls>;
    weight?: pulumi.Input<number>;
}

export interface AlbBackendGroupHttpBackendHealthcheck {
    grpcHealthcheck?: pulumi.Input<inputs.AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck>;
    interval: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck>;
    timeout: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck {
    serviceName?: pulumi.Input<string>;
}

export interface AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path: pulumi.Input<string>;
}

export interface AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface AlbBackendGroupHttpBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface AlbBackendGroupHttpBackendTls {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.AlbBackendGroupHttpBackendTlsValidationContext>;
}

export interface AlbBackendGroupHttpBackendTlsValidationContext {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface AlbBackendGroupSessionAffinity {
    /**
     * IP address affinity
     */
    connection?: pulumi.Input<inputs.AlbBackendGroupSessionAffinityConnection>;
    /**
     * Cookie affinity
     */
    cookie?: pulumi.Input<inputs.AlbBackendGroupSessionAffinityCookie>;
    /**
     * Request header affinity
     */
    header?: pulumi.Input<inputs.AlbBackendGroupSessionAffinityHeader>;
}

export interface AlbBackendGroupSessionAffinityConnection {
    /**
     * Use source IP address
     */
    sourceIp?: pulumi.Input<boolean>;
}

export interface AlbBackendGroupSessionAffinityCookie {
    /**
     * Name of the HTTP cookie
     */
    name: pulumi.Input<string>;
    /**
     * TTL for the cookie (if not set, session cookie will be used)
     */
    ttl?: pulumi.Input<string>;
}

export interface AlbBackendGroupSessionAffinityHeader {
    /**
     * The name of the request header that will be used
     */
    headerName: pulumi.Input<string>;
}

export interface AlbBackendGroupStreamBackend {
    enableProxyProtocol?: pulumi.Input<boolean>;
    healthcheck?: pulumi.Input<inputs.AlbBackendGroupStreamBackendHealthcheck>;
    loadBalancingConfig?: pulumi.Input<inputs.AlbBackendGroupStreamBackendLoadBalancingConfig>;
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    targetGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.AlbBackendGroupStreamBackendTls>;
    weight?: pulumi.Input<number>;
}

export interface AlbBackendGroupStreamBackendHealthcheck {
    grpcHealthcheck?: pulumi.Input<inputs.AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck>;
    interval: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck>;
    timeout: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck {
    serviceName?: pulumi.Input<string>;
}

export interface AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path: pulumi.Input<string>;
}

export interface AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface AlbBackendGroupStreamBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface AlbBackendGroupStreamBackendTls {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.AlbBackendGroupStreamBackendTlsValidationContext>;
}

export interface AlbBackendGroupStreamBackendTlsValidationContext {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface AlbBackendGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AlbHttpRouterRouteOptions {
    rbac?: pulumi.Input<inputs.AlbHttpRouterRouteOptionsRbac>;
    securityProfileId?: pulumi.Input<string>;
}

export interface AlbHttpRouterRouteOptionsRbac {
    action?: pulumi.Input<string>;
    principals: pulumi.Input<pulumi.Input<inputs.AlbHttpRouterRouteOptionsRbacPrincipal>[]>;
}

export interface AlbHttpRouterRouteOptionsRbacPrincipal {
    andPrincipals: pulumi.Input<pulumi.Input<inputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal>[]>;
}

export interface AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal {
    any?: pulumi.Input<boolean>;
    header?: pulumi.Input<inputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader>;
    remoteIp?: pulumi.Input<string>;
}

export interface AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader {
    name: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue>;
}

export interface AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue {
    exact?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
}

export interface AlbHttpRouterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AlbLoadBalancerAllocationPolicy {
    locations: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerAllocationPolicyLocation>[]>;
}

export interface AlbLoadBalancerAllocationPolicyLocation {
    disableTraffic?: pulumi.Input<boolean>;
    subnetId: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}

export interface AlbLoadBalancerListener {
    endpoints?: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerListenerEndpoint>[]>;
    http?: pulumi.Input<inputs.AlbLoadBalancerListenerHttp>;
    name: pulumi.Input<string>;
    stream?: pulumi.Input<inputs.AlbLoadBalancerListenerStream>;
    tls?: pulumi.Input<inputs.AlbLoadBalancerListenerTls>;
}

export interface AlbLoadBalancerListenerEndpoint {
    addresses: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerListenerEndpointAddress>[]>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface AlbLoadBalancerListenerEndpointAddress {
    externalIpv4Address?: pulumi.Input<inputs.AlbLoadBalancerListenerEndpointAddressExternalIpv4Address>;
    externalIpv6Address?: pulumi.Input<inputs.AlbLoadBalancerListenerEndpointAddressExternalIpv6Address>;
    internalIpv4Address?: pulumi.Input<inputs.AlbLoadBalancerListenerEndpointAddressInternalIpv4Address>;
}

export interface AlbLoadBalancerListenerEndpointAddressExternalIpv4Address {
    address?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerEndpointAddressExternalIpv6Address {
    address?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerEndpointAddressInternalIpv4Address {
    address?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerHttp {
    handler?: pulumi.Input<inputs.AlbLoadBalancerListenerHttpHandler>;
    redirects?: pulumi.Input<inputs.AlbLoadBalancerListenerHttpRedirects>;
}

export interface AlbLoadBalancerListenerHttpHandler {
    allowHttp10?: pulumi.Input<boolean>;
    http2Options?: pulumi.Input<inputs.AlbLoadBalancerListenerHttpHandlerHttp2Options>;
    httpRouterId?: pulumi.Input<string>;
    rewriteRequestId?: pulumi.Input<boolean>;
}

export interface AlbLoadBalancerListenerHttpHandlerHttp2Options {
    maxConcurrentStreams?: pulumi.Input<number>;
}

export interface AlbLoadBalancerListenerHttpRedirects {
    httpToHttps?: pulumi.Input<boolean>;
}

export interface AlbLoadBalancerListenerStream {
    handler?: pulumi.Input<inputs.AlbLoadBalancerListenerStreamHandler>;
}

export interface AlbLoadBalancerListenerStreamHandler {
    backendGroupId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerTls {
    defaultHandler: pulumi.Input<inputs.AlbLoadBalancerListenerTlsDefaultHandler>;
    sniHandlers?: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerListenerTlsSniHandler>[]>;
}

export interface AlbLoadBalancerListenerTlsDefaultHandler {
    certificateIds: pulumi.Input<pulumi.Input<string>[]>;
    httpHandler?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler>;
    streamHandler?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler>;
}

export interface AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler {
    allowHttp10?: pulumi.Input<boolean>;
    http2Options?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options>;
    httpRouterId?: pulumi.Input<string>;
    rewriteRequestId?: pulumi.Input<boolean>;
}

export interface AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options {
    maxConcurrentStreams?: pulumi.Input<number>;
}

export interface AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler {
    backendGroupId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerTlsSniHandler {
    handler: pulumi.Input<inputs.AlbLoadBalancerListenerTlsSniHandlerHandler>;
    name: pulumi.Input<string>;
    serverNames: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AlbLoadBalancerListenerTlsSniHandlerHandler {
    certificateIds: pulumi.Input<pulumi.Input<string>[]>;
    httpHandler?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler>;
    streamHandler?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler>;
}

export interface AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler {
    allowHttp10?: pulumi.Input<boolean>;
    http2Options?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options>;
    httpRouterId?: pulumi.Input<string>;
    rewriteRequestId?: pulumi.Input<boolean>;
}

export interface AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options {
    maxConcurrentStreams?: pulumi.Input<number>;
}

export interface AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler {
    backendGroupId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerLogOptions {
    disable?: pulumi.Input<boolean>;
    discardRules?: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerLogOptionsDiscardRule>[]>;
    logGroupId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerLogOptionsDiscardRule {
    discardPercent?: pulumi.Input<number>;
    grpcCodes?: pulumi.Input<pulumi.Input<string>[]>;
    httpCodeIntervals?: pulumi.Input<pulumi.Input<string>[]>;
    httpCodes?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface AlbLoadBalancerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AlbTargetGroupTarget {
    ipAddress: pulumi.Input<string>;
    privateIpv4Address?: pulumi.Input<boolean>;
    subnetId?: pulumi.Input<string>;
}

export interface AlbTargetGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AlbVirtualHostModifyRequestHeader {
    append?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    remove?: pulumi.Input<boolean>;
    replace?: pulumi.Input<string>;
}

export interface AlbVirtualHostModifyResponseHeader {
    append?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    remove?: pulumi.Input<boolean>;
    replace?: pulumi.Input<string>;
}

export interface AlbVirtualHostRoute {
    grpcRoute?: pulumi.Input<inputs.AlbVirtualHostRouteGrpcRoute>;
    httpRoute?: pulumi.Input<inputs.AlbVirtualHostRouteHttpRoute>;
    name?: pulumi.Input<string>;
    routeOptions?: pulumi.Input<inputs.AlbVirtualHostRouteRouteOptions>;
}

export interface AlbVirtualHostRouteGrpcRoute {
    grpcMatches?: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteGrpcRouteGrpcMatch>[]>;
    grpcRouteAction?: pulumi.Input<inputs.AlbVirtualHostRouteGrpcRouteGrpcRouteAction>;
    grpcStatusResponseAction?: pulumi.Input<inputs.AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction>;
}

export interface AlbVirtualHostRouteGrpcRouteGrpcMatch {
    fqmn?: pulumi.Input<inputs.AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn>;
}

export interface AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn {
    exact?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteGrpcRouteGrpcRouteAction {
    autoHostRewrite?: pulumi.Input<boolean>;
    backendGroupId: pulumi.Input<string>;
    hostRewrite?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<string>;
    maxTimeout?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction {
    status?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteHttpRoute {
    directResponseAction?: pulumi.Input<inputs.AlbVirtualHostRouteHttpRouteDirectResponseAction>;
    httpMatches?: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteHttpRouteHttpMatch>[]>;
    httpRouteAction?: pulumi.Input<inputs.AlbVirtualHostRouteHttpRouteHttpRouteAction>;
    redirectAction?: pulumi.Input<inputs.AlbVirtualHostRouteHttpRouteRedirectAction>;
}

export interface AlbVirtualHostRouteHttpRouteDirectResponseAction {
    body?: pulumi.Input<string>;
    status?: pulumi.Input<number>;
}

export interface AlbVirtualHostRouteHttpRouteHttpMatch {
    httpMethods?: pulumi.Input<pulumi.Input<string>[]>;
    path?: pulumi.Input<inputs.AlbVirtualHostRouteHttpRouteHttpMatchPath>;
}

export interface AlbVirtualHostRouteHttpRouteHttpMatchPath {
    exact?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteHttpRouteHttpRouteAction {
    autoHostRewrite?: pulumi.Input<boolean>;
    backendGroupId: pulumi.Input<string>;
    hostRewrite?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<string>;
    prefixRewrite?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
    upgradeTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AlbVirtualHostRouteHttpRouteRedirectAction {
    removeQuery?: pulumi.Input<boolean>;
    replaceHost?: pulumi.Input<string>;
    replacePath?: pulumi.Input<string>;
    replacePort?: pulumi.Input<number>;
    replacePrefix?: pulumi.Input<string>;
    replaceScheme?: pulumi.Input<string>;
    responseCode?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteOptions {
    rbac?: pulumi.Input<inputs.AlbVirtualHostRouteOptionsRbac>;
    securityProfileId?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteOptionsRbac {
    action?: pulumi.Input<string>;
    principals: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteOptionsRbacPrincipal>[]>;
}

export interface AlbVirtualHostRouteOptionsRbacPrincipal {
    andPrincipals: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal>[]>;
}

export interface AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal {
    any?: pulumi.Input<boolean>;
    header?: pulumi.Input<inputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader>;
    remoteIp?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader {
    name: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue>;
}

export interface AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue {
    exact?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteRouteOptions {
    rbac?: pulumi.Input<inputs.AlbVirtualHostRouteRouteOptionsRbac>;
    securityProfileId?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteRouteOptionsRbac {
    action?: pulumi.Input<string>;
    principals: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteRouteOptionsRbacPrincipal>[]>;
}

export interface AlbVirtualHostRouteRouteOptionsRbacPrincipal {
    andPrincipals: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal>[]>;
}

export interface AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal {
    any?: pulumi.Input<boolean>;
    header?: pulumi.Input<inputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader>;
    remoteIp?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader {
    name: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue>;
}

export interface AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue {
    exact?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
}

export interface AlbVirtualHostTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ApiGatewayCanary {
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    weight?: pulumi.Input<number>;
}

export interface ApiGatewayConnectivity {
    networkId: pulumi.Input<string>;
}

export interface ApiGatewayCustomDomain {
    certificateId: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
}

export interface ApiGatewayLogOptions {
    disabled?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    logGroupId?: pulumi.Input<string>;
    minLevel?: pulumi.Input<string>;
}

export interface ApiGatewayTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface AuditTrailsTrailDataStreamDestination {
    databaseId: pulumi.Input<string>;
    streamName: pulumi.Input<string>;
}

export interface AuditTrailsTrailFilter {
    eventFilters?: pulumi.Input<pulumi.Input<inputs.AuditTrailsTrailFilterEventFilter>[]>;
    pathFilter?: pulumi.Input<inputs.AuditTrailsTrailFilterPathFilter>;
}

export interface AuditTrailsTrailFilterEventFilter {
    categories: pulumi.Input<pulumi.Input<inputs.AuditTrailsTrailFilterEventFilterCategory>[]>;
    pathFilter: pulumi.Input<inputs.AuditTrailsTrailFilterEventFilterPathFilter>;
    service: pulumi.Input<string>;
}

export interface AuditTrailsTrailFilterEventFilterCategory {
    plane: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface AuditTrailsTrailFilterEventFilterPathFilter {
    anyFilter?: pulumi.Input<inputs.AuditTrailsTrailFilterEventFilterPathFilterAnyFilter>;
    someFilter?: pulumi.Input<inputs.AuditTrailsTrailFilterEventFilterPathFilterSomeFilter>;
}

export interface AuditTrailsTrailFilterEventFilterPathFilterAnyFilter {
    resourceId: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
}

export interface AuditTrailsTrailFilterEventFilterPathFilterSomeFilter {
    anyFilters: pulumi.Input<pulumi.Input<inputs.AuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilter>[]>;
    resourceId: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
}

export interface AuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilter {
    resourceId: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
}

export interface AuditTrailsTrailFilterPathFilter {
    anyFilter?: pulumi.Input<inputs.AuditTrailsTrailFilterPathFilterAnyFilter>;
    someFilter?: pulumi.Input<inputs.AuditTrailsTrailFilterPathFilterSomeFilter>;
}

export interface AuditTrailsTrailFilterPathFilterAnyFilter {
    resourceId: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
}

export interface AuditTrailsTrailFilterPathFilterSomeFilter {
    anyFilters: pulumi.Input<pulumi.Input<inputs.AuditTrailsTrailFilterPathFilterSomeFilterAnyFilter>[]>;
    resourceId: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
}

export interface AuditTrailsTrailFilterPathFilterSomeFilterAnyFilter {
    resourceId: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
}

export interface AuditTrailsTrailLoggingDestination {
    logGroupId: pulumi.Input<string>;
}

export interface AuditTrailsTrailStorageDestination {
    bucketName: pulumi.Input<string>;
    objectPrefix?: pulumi.Input<string>;
}

export interface AuditTrailsTrailTimeouts {
    default?: pulumi.Input<string>;
}

export interface BackupPolicyBindingsTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface BackupPolicyReattempts {
    enabled?: pulumi.Input<boolean>;
    interval?: pulumi.Input<string>;
    maxAttempts?: pulumi.Input<number>;
}

export interface BackupPolicyRetention {
    afterBackup?: pulumi.Input<boolean>;
    rules?: pulumi.Input<pulumi.Input<inputs.BackupPolicyRetentionRule>[]>;
}

export interface BackupPolicyRetentionRule {
    maxAge?: pulumi.Input<string>;
    maxCount?: pulumi.Input<number>;
    repeatPeriods?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BackupPolicyScheduling {
    backupSets?: pulumi.Input<pulumi.Input<inputs.BackupPolicySchedulingBackupSet>[]>;
    enabled?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    executeByInterval?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    executeByTimes?: pulumi.Input<pulumi.Input<inputs.BackupPolicySchedulingExecuteByTime>[]>;
    maxParallelBackups?: pulumi.Input<number>;
    randomMaxDelay?: pulumi.Input<string>;
    scheme?: pulumi.Input<string>;
    weeklyBackupDay?: pulumi.Input<string>;
}

export interface BackupPolicySchedulingBackupSet {
    executeByInterval?: pulumi.Input<number>;
    executeByTimes?: pulumi.Input<pulumi.Input<inputs.BackupPolicySchedulingBackupSetExecuteByTime>[]>;
    type?: pulumi.Input<string>;
}

export interface BackupPolicySchedulingBackupSetExecuteByTime {
    includeLastDayOfMonth?: pulumi.Input<boolean>;
    monthdays?: pulumi.Input<pulumi.Input<number>[]>;
    months?: pulumi.Input<pulumi.Input<number>[]>;
    repeatAts?: pulumi.Input<pulumi.Input<string>[]>;
    repeatEvery?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    weekdays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BackupPolicySchedulingExecuteByTime {
    includeLastDayOfMonth?: pulumi.Input<boolean>;
    monthdays?: pulumi.Input<pulumi.Input<number>[]>;
    months?: pulumi.Input<pulumi.Input<number>[]>;
    repeatAts?: pulumi.Input<pulumi.Input<string>[]>;
    repeatEvery?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    weekdays?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BackupPolicyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface BackupPolicyVmSnapshotReattempts {
    enabled?: pulumi.Input<boolean>;
    interval?: pulumi.Input<string>;
    maxAttempts?: pulumi.Input<number>;
}

export interface CdnOriginGroupOrigin {
    backup?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    originGroupId?: pulumi.Input<number>;
    source: pulumi.Input<string>;
}

export interface CdnOriginGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface CdnResourceOptions {
    allowedHttpMethods?: pulumi.Input<pulumi.Input<string>[]>;
    browserCacheSettings?: pulumi.Input<number>;
    cacheHttpHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    cors?: pulumi.Input<pulumi.Input<string>[]>;
    customHostHeader?: pulumi.Input<string>;
    customServerName?: pulumi.Input<string>;
    disableCache?: pulumi.Input<boolean>;
    disableProxyForceRanges?: pulumi.Input<boolean>;
    edgeCacheSettings?: pulumi.Input<number>;
    enableIpUrlSigning?: pulumi.Input<boolean>;
    fetchedCompressed?: pulumi.Input<boolean>;
    forwardHostHeader?: pulumi.Input<boolean>;
    gzipOn?: pulumi.Input<boolean>;
    ignoreCookie?: pulumi.Input<boolean>;
    ignoreQueryParams?: pulumi.Input<boolean>;
    ipAddressAcl?: pulumi.Input<inputs.CdnResourceOptionsIpAddressAcl>;
    proxyCacheMethodsSet?: pulumi.Input<boolean>;
    queryParamsBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    queryParamsWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    redirectHttpToHttps?: pulumi.Input<boolean>;
    redirectHttpsToHttp?: pulumi.Input<boolean>;
    secureKey?: pulumi.Input<string>;
    slice?: pulumi.Input<boolean>;
    staticRequestHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    staticResponseHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface CdnResourceOptionsIpAddressAcl {
    exceptedValues?: pulumi.Input<pulumi.Input<string>[]>;
    policyType?: pulumi.Input<string>;
}

export interface CdnResourceSslCertificate {
    certificateManagerId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface CdnResourceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface CmCertificateChallenge {
    createdAt: pulumi.Input<string>;
    dnsName: pulumi.Input<string>;
    dnsType: pulumi.Input<string>;
    dnsValue: pulumi.Input<string>;
    domain: pulumi.Input<string>;
    httpContent: pulumi.Input<string>;
    httpUrl: pulumi.Input<string>;
    message: pulumi.Input<string>;
    type: pulumi.Input<string>;
    updatedAt: pulumi.Input<string>;
}

export interface CmCertificateManaged {
    challengeCount?: pulumi.Input<number>;
    challengeType: pulumi.Input<string>;
}

export interface CmCertificateSelfManaged {
    certificate: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    privateKeyLockboxSecret?: pulumi.Input<inputs.CmCertificateSelfManagedPrivateKeyLockboxSecret>;
}

export interface CmCertificateSelfManagedPrivateKeyLockboxSecret {
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface CmCertificateTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeDiskDiskPlacementPolicy {
    diskPlacementGroupId: pulumi.Input<string>;
}

export interface ComputeDiskPlacementGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeDiskTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeFilesystemTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeGpuClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeImageTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeInstanceBootDisk {
    autoDelete?: pulumi.Input<boolean>;
    deviceName?: pulumi.Input<string>;
    diskId?: pulumi.Input<string>;
    initializeParams?: pulumi.Input<inputs.ComputeInstanceBootDiskInitializeParams>;
    mode?: pulumi.Input<string>;
}

export interface ComputeInstanceBootDiskInitializeParams {
    blockSize?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ComputeInstanceFilesystem {
    deviceName?: pulumi.Input<string>;
    filesystemId: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupAllocationPolicy {
    instanceTagsPools?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupAllocationPolicyInstanceTagsPool>[]>;
    zones: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ComputeInstanceGroupAllocationPolicyInstanceTagsPool {
    tags: pulumi.Input<pulumi.Input<string>[]>;
    zone: pulumi.Input<string>;
}

export interface ComputeInstanceGroupApplicationLoadBalancer {
    ignoreHealthChecks?: pulumi.Input<boolean>;
    maxOpeningTrafficDuration?: pulumi.Input<number>;
    statusMessage?: pulumi.Input<string>;
    targetGroupDescription?: pulumi.Input<string>;
    targetGroupId?: pulumi.Input<string>;
    targetGroupLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetGroupName?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupDeployPolicy {
    maxCreating?: pulumi.Input<number>;
    maxDeleting?: pulumi.Input<number>;
    maxExpansion: pulumi.Input<number>;
    maxUnavailable: pulumi.Input<number>;
    startupDuration?: pulumi.Input<number>;
    strategy?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupHealthCheck {
    healthyThreshold?: pulumi.Input<number>;
    httpOptions?: pulumi.Input<inputs.ComputeInstanceGroupHealthCheckHttpOptions>;
    interval?: pulumi.Input<number>;
    tcpOptions?: pulumi.Input<inputs.ComputeInstanceGroupHealthCheckTcpOptions>;
    timeout?: pulumi.Input<number>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupHealthCheckHttpOptions {
    path: pulumi.Input<string>;
    port: pulumi.Input<number>;
}

export interface ComputeInstanceGroupHealthCheckTcpOptions {
    port: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstance {
    fqdn: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    instanceTag: pulumi.Input<string>;
    name: pulumi.Input<string>;
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceNetworkInterface>[]>;
    status: pulumi.Input<string>;
    statusChangedAt: pulumi.Input<string>;
    statusMessage: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceNetworkInterface {
    index: pulumi.Input<number>;
    ipAddress: pulumi.Input<string>;
    ipv4: pulumi.Input<boolean>;
    ipv6: pulumi.Input<boolean>;
    ipv6Address: pulumi.Input<string>;
    macAddress: pulumi.Input<string>;
    nat: pulumi.Input<boolean>;
    natIpAddress: pulumi.Input<string>;
    natIpVersion: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplate {
    bootDisk: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateBootDisk>;
    description?: pulumi.Input<string>;
    filesystems?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateFilesystem>[]>;
    hostname?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metadataOptions?: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateMetadataOptions>;
    name?: pulumi.Input<string>;
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateNetworkInterface>[]>;
    networkSettings?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateNetworkSetting>[]>;
    placementPolicy?: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplatePlacementPolicy>;
    platformId?: pulumi.Input<string>;
    resources: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateResources>;
    schedulingPolicy?: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateSchedulingPolicy>;
    secondaryDisks?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateSecondaryDisk>[]>;
    serviceAccountId?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateBootDisk {
    deviceName?: pulumi.Input<string>;
    diskId?: pulumi.Input<string>;
    initializeParams?: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams {
    description?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateFilesystem {
    deviceName?: pulumi.Input<string>;
    filesystemId: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateMetadataOptions {
    awsV1HttpEndpoint?: pulumi.Input<number>;
    awsV1HttpToken?: pulumi.Input<number>;
    gceHttpEndpoint?: pulumi.Input<number>;
    gceHttpToken?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstanceTemplateNetworkInterface {
    dnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord>[]>;
    ipAddress?: pulumi.Input<string>;
    ipv4?: pulumi.Input<boolean>;
    ipv6?: pulumi.Input<boolean>;
    ipv6Address?: pulumi.Input<string>;
    ipv6DnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord>[]>;
    nat?: pulumi.Input<boolean>;
    natDnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord>[]>;
    natIpAddress?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstanceTemplateNetworkSetting {
    type?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplatePlacementPolicy {
    placementGroupId: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateResources {
    coreFraction?: pulumi.Input<number>;
    cores: pulumi.Input<number>;
    gpus?: pulumi.Input<number>;
    memory: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstanceTemplateSchedulingPolicy {
    preemptible?: pulumi.Input<boolean>;
}

export interface ComputeInstanceGroupInstanceTemplateSecondaryDisk {
    deviceName?: pulumi.Input<string>;
    diskId?: pulumi.Input<string>;
    initializeParams?: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams {
    description?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupLoadBalancer {
    ignoreHealthChecks?: pulumi.Input<boolean>;
    maxOpeningTrafficDuration?: pulumi.Input<number>;
    statusMessage?: pulumi.Input<string>;
    targetGroupDescription?: pulumi.Input<string>;
    targetGroupId?: pulumi.Input<string>;
    targetGroupLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetGroupName?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupScalePolicy {
    autoScale?: pulumi.Input<inputs.ComputeInstanceGroupScalePolicyAutoScale>;
    fixedScale?: pulumi.Input<inputs.ComputeInstanceGroupScalePolicyFixedScale>;
    testAutoScale?: pulumi.Input<inputs.ComputeInstanceGroupScalePolicyTestAutoScale>;
}

export interface ComputeInstanceGroupScalePolicyAutoScale {
    autoScaleType?: pulumi.Input<string>;
    cpuUtilizationTarget?: pulumi.Input<number>;
    customRules?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupScalePolicyAutoScaleCustomRule>[]>;
    initialSize: pulumi.Input<number>;
    maxSize?: pulumi.Input<number>;
    measurementDuration: pulumi.Input<number>;
    minZoneSize?: pulumi.Input<number>;
    stabilizationDuration?: pulumi.Input<number>;
    warmupDuration?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupScalePolicyAutoScaleCustomRule {
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metricName: pulumi.Input<string>;
    metricType: pulumi.Input<string>;
    ruleType: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    target: pulumi.Input<number>;
}

export interface ComputeInstanceGroupScalePolicyFixedScale {
    size: pulumi.Input<number>;
}

export interface ComputeInstanceGroupScalePolicyTestAutoScale {
    autoScaleType?: pulumi.Input<string>;
    cpuUtilizationTarget?: pulumi.Input<number>;
    customRules?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule>[]>;
    initialSize: pulumi.Input<number>;
    maxSize?: pulumi.Input<number>;
    measurementDuration: pulumi.Input<number>;
    minZoneSize?: pulumi.Input<number>;
    stabilizationDuration?: pulumi.Input<number>;
    warmupDuration?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule {
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metricName: pulumi.Input<string>;
    metricType: pulumi.Input<string>;
    ruleType: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    target: pulumi.Input<number>;
}

export interface ComputeInstanceGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeInstanceLocalDisk {
    deviceName?: pulumi.Input<string>;
    sizeBytes: pulumi.Input<number>;
}

export interface ComputeInstanceMetadataOptions {
    awsV1HttpEndpoint?: pulumi.Input<number>;
    awsV1HttpToken?: pulumi.Input<number>;
    gceHttpEndpoint?: pulumi.Input<number>;
    gceHttpToken?: pulumi.Input<number>;
}

export interface ComputeInstanceNetworkInterface {
    dnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceNetworkInterfaceDnsRecord>[]>;
    index?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
    ipv4?: pulumi.Input<boolean>;
    ipv6?: pulumi.Input<boolean>;
    ipv6Address?: pulumi.Input<string>;
    ipv6DnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceNetworkInterfaceIpv6DnsRecord>[]>;
    macAddress?: pulumi.Input<string>;
    nat?: pulumi.Input<boolean>;
    natDnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceNetworkInterfaceNatDnsRecord>[]>;
    natIpAddress?: pulumi.Input<string>;
    natIpVersion?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId: pulumi.Input<string>;
}

export interface ComputeInstanceNetworkInterfaceDnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstanceNetworkInterfaceIpv6DnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstanceNetworkInterfaceNatDnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstancePlacementPolicy {
    hostAffinityRules?: pulumi.Input<pulumi.Input<inputs.ComputeInstancePlacementPolicyHostAffinityRule>[]>;
    placementGroupId?: pulumi.Input<string>;
    placementGroupPartition?: pulumi.Input<number>;
}

export interface ComputeInstancePlacementPolicyHostAffinityRule {
    key: pulumi.Input<string>;
    op: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ComputeInstanceResources {
    coreFraction?: pulumi.Input<number>;
    cores: pulumi.Input<number>;
    gpus?: pulumi.Input<number>;
    memory: pulumi.Input<number>;
}

export interface ComputeInstanceSchedulingPolicy {
    preemptible?: pulumi.Input<boolean>;
}

export interface ComputeInstanceSecondaryDisk {
    autoDelete?: pulumi.Input<boolean>;
    deviceName?: pulumi.Input<string>;
    diskId: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface ComputeInstanceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputePlacementGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeSnapshotScheduleSchedulePolicy {
    expression?: pulumi.Input<string>;
    startAt?: pulumi.Input<string>;
}

export interface ComputeSnapshotScheduleSnapshotSpec {
    description?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ComputeSnapshotScheduleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeSnapshotTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ContainerRegistryIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface ContainerRegistryIpPermissionTimeouts {
    default?: pulumi.Input<string>;
}

export interface ContainerRegistryTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ContainerRepositoryIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface ContainerRepositoryLifecyclePolicyRule {
    description?: pulumi.Input<string>;
    expirePeriod?: pulumi.Input<string>;
    retainedTop?: pulumi.Input<number>;
    tagRegexp?: pulumi.Input<string>;
    untagged?: pulumi.Input<boolean>;
}

export interface ContainerRepositoryLifecyclePolicyTimeouts {
    default?: pulumi.Input<string>;
}

export interface ContainerRepositoryTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface DataprocClusterClusterConfig {
    hadoop?: pulumi.Input<inputs.DataprocClusterClusterConfigHadoop>;
    subclusterSpecs: pulumi.Input<pulumi.Input<inputs.DataprocClusterClusterConfigSubclusterSpec>[]>;
    versionId?: pulumi.Input<string>;
}

export interface DataprocClusterClusterConfigHadoop {
    initializationActions?: pulumi.Input<pulumi.Input<inputs.DataprocClusterClusterConfigHadoopInitializationAction>[]>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DataprocClusterClusterConfigHadoopInitializationAction {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    timeout?: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface DataprocClusterClusterConfigSubclusterSpec {
    assignPublicIp?: pulumi.Input<boolean>;
    autoscalingConfig?: pulumi.Input<inputs.DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig>;
    hostsCount: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resources: pulumi.Input<inputs.DataprocClusterClusterConfigSubclusterSpecResources>;
    role: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig {
    cpuUtilizationTarget?: pulumi.Input<string>;
    decommissionTimeout?: pulumi.Input<string>;
    maxHostsCount: pulumi.Input<number>;
    measurementDuration?: pulumi.Input<string>;
    preemptible?: pulumi.Input<boolean>;
    stabilizationDuration?: pulumi.Input<string>;
    warmupDuration?: pulumi.Input<string>;
}

export interface DataprocClusterClusterConfigSubclusterSpecResources {
    diskSize: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface DataprocClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DatasphereCommunityTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: pulumi.Input<string>;
}

export interface DatasphereProjectLimits {
    balance?: pulumi.Input<number>;
    maxUnitsPerExecution?: pulumi.Input<number>;
    maxUnitsPerHour?: pulumi.Input<number>;
}

export interface DatasphereProjectSettings {
    commitMode?: pulumi.Input<string>;
    dataProcClusterId?: pulumi.Input<string>;
    defaultFolderId?: pulumi.Input<string>;
    ide?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    serviceAccountId?: pulumi.Input<string>;
    staleExecTimeoutMode?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface DatasphereProjectTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettings {
    clickhouseSource?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSource>;
    clickhouseTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTarget>;
    kafkaSource?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSource>;
    kafkaTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTarget>;
    metrikaSource?: pulumi.Input<inputs.DatatransferEndpointSettingsMetrikaSource>;
    mongoSource?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSource>;
    mongoTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTarget>;
    mysqlSource?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSource>;
    mysqlTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTarget>;
    postgresSource?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSource>;
    postgresTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTarget>;
    ydbSource?: pulumi.Input<inputs.DatatransferEndpointSettingsYdbSource>;
    ydbTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsYdbTarget>;
    ydsSource?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsSource>;
    ydsTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsTarget>;
}

export interface DatatransferEndpointSettingsClickhouseSource {
    clickhouseClusterName?: pulumi.Input<string>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnection>;
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnection {
    connectionOptions?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions {
    database?: pulumi.Input<string>;
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise {
    httpPort?: pulumi.Input<number>;
    nativePort?: pulumi.Input<number>;
    shards?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard>[]>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTarget {
    altNames?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetAltName>[]>;
    cleanupPolicy?: pulumi.Input<string>;
    clickhouseClusterName?: pulumi.Input<string>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnection>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    sharding?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetSharding>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetAltName {
    fromName?: pulumi.Input<string>;
    toName?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnection {
    connectionOptions?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions {
    database?: pulumi.Input<string>;
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise {
    httpPort?: pulumi.Input<number>;
    nativePort?: pulumi.Input<number>;
    shards?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard>[]>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetSharding {
    columnValueHash?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash>;
    customMapping?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetShardingCustomMapping>;
    roundRobin?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetShardingRoundRobin>;
    transferId?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetShardingTransferId>;
}

export interface DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash {
    columnName?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetShardingCustomMapping {
    columnName?: pulumi.Input<string>;
    mappings?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMapping>[]>;
}

export interface DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMapping {
    columnValue?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingColumnValue>;
    shardName?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingColumnValue {
    stringValue?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetShardingRoundRobin {
}

export interface DatatransferEndpointSettingsClickhouseTargetShardingTransferId {
}

export interface DatatransferEndpointSettingsKafkaSource {
    auth?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceAuth>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceConnection>;
    parser?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParser>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    topicName?: pulumi.Input<string>;
    topicNames?: pulumi.Input<pulumi.Input<string>[]>;
    transformer?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceTransformer>;
}

export interface DatatransferEndpointSettingsKafkaSourceAuth {
    noAuth?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceAuthNoAuth>;
    sasl?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceAuthSasl>;
}

export interface DatatransferEndpointSettingsKafkaSourceAuthNoAuth {
}

export interface DatatransferEndpointSettingsKafkaSourceAuthSasl {
    mechanism?: pulumi.Input<string>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceAuthSaslPassword>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaSourceAuthSaslPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaSourceConnection {
    clusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremise>;
}

export interface DatatransferEndpointSettingsKafkaSourceConnectionOnPremise {
    brokerUrls?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaSourceParser {
    auditTrailsV1Parser?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParserAuditTrailsV1Parser>;
    cloudLoggingParser?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParserCloudLoggingParser>;
    jsonParser?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParserJsonParser>;
    tskvParser?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParserTskvParser>;
}

export interface DatatransferEndpointSettingsKafkaSourceParserAuditTrailsV1Parser {
}

export interface DatatransferEndpointSettingsKafkaSourceParserCloudLoggingParser {
}

export interface DatatransferEndpointSettingsKafkaSourceParserJsonParser {
    addRestColumn?: pulumi.Input<boolean>;
    dataSchema?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchema>;
    nullKeysAllowed?: pulumi.Input<boolean>;
    unescapeStringValues?: pulumi.Input<boolean>;
}

export interface DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchema {
    fields?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFields>;
    jsonFields?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFields {
    fields?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFieldsField>[]>;
}

export interface DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFieldsField {
    key?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    required?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaSourceParserTskvParser {
    addRestColumn?: pulumi.Input<boolean>;
    dataSchema?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchema>;
    nullKeysAllowed?: pulumi.Input<boolean>;
    unescapeStringValues?: pulumi.Input<boolean>;
}

export interface DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchema {
    fields?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFields>;
    jsonFields?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFields {
    fields?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFieldsField>[]>;
}

export interface DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFieldsField {
    key?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    required?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaSourceTransformer {
    bufferFlushInterval?: pulumi.Input<string>;
    bufferSize?: pulumi.Input<string>;
    cloudFunction?: pulumi.Input<string>;
    invocationTimeout?: pulumi.Input<string>;
    numberOfRetries?: pulumi.Input<number>;
    serviceAccountId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaTarget {
    auth?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetAuth>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetConnection>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    serializer?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetSerializer>;
    topicSettings?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetTopicSettings>;
}

export interface DatatransferEndpointSettingsKafkaTargetAuth {
    noAuth?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetAuthNoAuth>;
    sasl?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetAuthSasl>;
}

export interface DatatransferEndpointSettingsKafkaTargetAuthNoAuth {
}

export interface DatatransferEndpointSettingsKafkaTargetAuthSasl {
    mechanism?: pulumi.Input<string>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetAuthSaslPassword>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaTargetAuthSaslPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaTargetConnection {
    clusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremise>;
}

export interface DatatransferEndpointSettingsKafkaTargetConnectionOnPremise {
    brokerUrls?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaTargetSerializer {
    serializerAuto?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerAuto>;
    serializerDebezium?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebezium>;
    serializerJson?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerJson>;
}

export interface DatatransferEndpointSettingsKafkaTargetSerializerSerializerAuto {
}

export interface DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebezium {
    serializerParameters?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebeziumSerializerParameter>[]>;
}

export interface DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebeziumSerializerParameter {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaTargetSerializerSerializerJson {
}

export interface DatatransferEndpointSettingsKafkaTargetTopicSettings {
    topic?: pulumi.Input<inputs.DatatransferEndpointSettingsKafkaTargetTopicSettingsTopic>;
    topicPrefix?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsKafkaTargetTopicSettingsTopic {
    saveTxOrder?: pulumi.Input<boolean>;
    topicName?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMetrikaSource {
    counterIds?: pulumi.Input<pulumi.Input<number>[]>;
    streams?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsMetrikaSourceStream>[]>;
    token?: pulumi.Input<inputs.DatatransferEndpointSettingsMetrikaSourceToken>;
}

export interface DatatransferEndpointSettingsMetrikaSourceStream {
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMetrikaSourceToken {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSource {
    collections?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceCollection>[]>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnection>;
    excludedCollections?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceExcludedCollection>[]>;
    secondaryPreferredMode?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSourceCollection {
    collectionName?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSourceConnection {
    connectionOptions?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions>;
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions {
    authSource?: pulumi.Input<string>;
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    replicaSet?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSourceExcludedCollection {
    collectionName?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoTarget {
    cleanupPolicy?: pulumi.Input<string>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnection>;
    database?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoTargetConnection {
    connectionOptions?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions>;
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions {
    authSource?: pulumi.Input<string>;
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    replicaSet?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlSource {
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceConnection>;
    database?: pulumi.Input<string>;
    excludeTablesRegexes?: pulumi.Input<pulumi.Input<string>[]>;
    includeTablesRegexes?: pulumi.Input<pulumi.Input<string>[]>;
    objectTransferSettings?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceObjectTransferSettings>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourcePassword>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    serviceDatabase?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlSourceConnection {
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremise>;
}

export interface DatatransferEndpointSettingsMysqlSourceConnectionOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlSourceObjectTransferSettings {
    routine?: pulumi.Input<string>;
    tables?: pulumi.Input<string>;
    trigger?: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlSourcePassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlTarget {
    cleanupPolicy?: pulumi.Input<string>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetConnection>;
    database?: pulumi.Input<string>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetPassword>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    serviceDatabase?: pulumi.Input<string>;
    skipConstraintChecks?: pulumi.Input<boolean>;
    sqlMode?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlTargetConnection {
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremise>;
}

export interface DatatransferEndpointSettingsMysqlTargetConnectionOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlTargetPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresSource {
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceConnection>;
    database?: pulumi.Input<string>;
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
    objectTransferSettings?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceObjectTransferSettings>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourcePassword>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    serviceSchema?: pulumi.Input<string>;
    slotGigabyteLagLimit?: pulumi.Input<number>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresSourceConnection {
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremise>;
}

export interface DatatransferEndpointSettingsPostgresSourceConnectionOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresSourceObjectTransferSettings {
    cast?: pulumi.Input<string>;
    collation?: pulumi.Input<string>;
    constraint?: pulumi.Input<string>;
    defaultValues?: pulumi.Input<string>;
    fkConstraint?: pulumi.Input<string>;
    function?: pulumi.Input<string>;
    index?: pulumi.Input<string>;
    materializedView?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    primaryKey?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
    sequence?: pulumi.Input<string>;
    sequenceOwnedBy?: pulumi.Input<string>;
    sequenceSet?: pulumi.Input<string>;
    table?: pulumi.Input<string>;
    trigger?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresSourcePassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresTarget {
    cleanupPolicy?: pulumi.Input<string>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetConnection>;
    database?: pulumi.Input<string>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetPassword>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresTargetConnection {
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremise>;
}

export interface DatatransferEndpointSettingsPostgresTargetConnectionOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresTargetPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsYdbSource {
    changefeedCustomName?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    saKeyContent?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    serviceAccountId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsYdbTarget {
    cleanupPolicy?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    defaultCompression?: pulumi.Input<string>;
    instance?: pulumi.Input<string>;
    isTableColumnOriented?: pulumi.Input<boolean>;
    path?: pulumi.Input<string>;
    saKeyContent?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    serviceAccountId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsYdsSource {
    allowTtlRewind?: pulumi.Input<boolean>;
    consumer?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    parser?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParser>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    serviceAccountId?: pulumi.Input<string>;
    stream?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    supportedCodecs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatatransferEndpointSettingsYdsSourceParser {
    auditTrailsV1Parser?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParserAuditTrailsV1Parser>;
    cloudLoggingParser?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParserCloudLoggingParser>;
    jsonParser?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParserJsonParser>;
    tskvParser?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParserTskvParser>;
}

export interface DatatransferEndpointSettingsYdsSourceParserAuditTrailsV1Parser {
}

export interface DatatransferEndpointSettingsYdsSourceParserCloudLoggingParser {
}

export interface DatatransferEndpointSettingsYdsSourceParserJsonParser {
    addRestColumn?: pulumi.Input<boolean>;
    dataSchema?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchema>;
    nullKeysAllowed?: pulumi.Input<boolean>;
    unescapeStringValues?: pulumi.Input<boolean>;
}

export interface DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchema {
    fields?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFields>;
    jsonFields?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFields {
    fields?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFieldsField>[]>;
}

export interface DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFieldsField {
    key?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    required?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsYdsSourceParserTskvParser {
    addRestColumn?: pulumi.Input<boolean>;
    dataSchema?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchema>;
    nullKeysAllowed?: pulumi.Input<boolean>;
    unescapeStringValues?: pulumi.Input<boolean>;
}

export interface DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchema {
    fields?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFields>;
    jsonFields?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFields {
    fields?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFieldsField>[]>;
}

export interface DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFieldsField {
    key?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    required?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsYdsTarget {
    database?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    saveTxOrder?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    serializer?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsTargetSerializer>;
    serviceAccountId?: pulumi.Input<string>;
    stream?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsYdsTargetSerializer {
    serializerAuto?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerAuto>;
    serializerDebezium?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerDebezium>;
    serializerJson?: pulumi.Input<inputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerJson>;
}

export interface DatatransferEndpointSettingsYdsTargetSerializerSerializerAuto {
}

export interface DatatransferEndpointSettingsYdsTargetSerializerSerializerDebezium {
    serializerParameters?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerDebeziumSerializerParameter>[]>;
}

export interface DatatransferEndpointSettingsYdsTargetSerializerSerializerDebeziumSerializerParameter {
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsYdsTargetSerializerSerializerJson {
}

export interface DatatransferTransferRuntime {
    ycRuntime?: pulumi.Input<inputs.DatatransferTransferRuntimeYcRuntime>;
}

export interface DatatransferTransferRuntimeYcRuntime {
    jobCount?: pulumi.Input<number>;
    uploadShardParams?: pulumi.Input<inputs.DatatransferTransferRuntimeYcRuntimeUploadShardParams>;
}

export interface DatatransferTransferRuntimeYcRuntimeUploadShardParams {
    jobCount?: pulumi.Input<number>;
    processCount?: pulumi.Input<number>;
}

export interface DatatransferTransferTransformation {
    transformers?: pulumi.Input<pulumi.Input<inputs.DatatransferTransferTransformationTransformer>[]>;
}

export interface DatatransferTransferTransformationTransformer {
    convertToString?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerConvertToString>;
    filterColumns?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerFilterColumns>;
    filterRows?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerFilterRows>;
    maskField?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerMaskField>;
    renameTables?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerRenameTables>;
    replacePrimaryKey?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerReplacePrimaryKey>;
    sharderTransformer?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerSharderTransformer>;
    tableSplitterTransformer?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerTableSplitterTransformer>;
}

export interface DatatransferTransferTransformationTransformerConvertToString {
    columns?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerConvertToStringColumns>;
    tables?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerConvertToStringTables>;
}

export interface DatatransferTransferTransformationTransformerConvertToStringColumns {
    excludeColumns?: pulumi.Input<pulumi.Input<string>[]>;
    includeColumns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatatransferTransferTransformationTransformerConvertToStringTables {
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatatransferTransferTransformationTransformerFilterColumns {
    columns?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerFilterColumnsColumns>;
    tables?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerFilterColumnsTables>;
}

export interface DatatransferTransferTransformationTransformerFilterColumnsColumns {
    excludeColumns?: pulumi.Input<pulumi.Input<string>[]>;
    includeColumns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatatransferTransferTransformationTransformerFilterColumnsTables {
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatatransferTransferTransformationTransformerFilterRows {
    filter?: pulumi.Input<string>;
    tables?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerFilterRowsTables>;
}

export interface DatatransferTransferTransformationTransformerFilterRowsTables {
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatatransferTransferTransformationTransformerMaskField {
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    function?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerMaskFieldFunction>;
    tables?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerMaskFieldTables>;
}

export interface DatatransferTransferTransformationTransformerMaskFieldFunction {
    maskFunctionHash?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerMaskFieldFunctionMaskFunctionHash>;
}

export interface DatatransferTransferTransformationTransformerMaskFieldFunctionMaskFunctionHash {
    userDefinedSalt?: pulumi.Input<string>;
}

export interface DatatransferTransferTransformationTransformerMaskFieldTables {
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatatransferTransferTransformationTransformerRenameTables {
    renameTables?: pulumi.Input<pulumi.Input<inputs.DatatransferTransferTransformationTransformerRenameTablesRenameTable>[]>;
}

export interface DatatransferTransferTransformationTransformerRenameTablesRenameTable {
    newName?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerRenameTablesRenameTableNewName>;
    originalName?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerRenameTablesRenameTableOriginalName>;
}

export interface DatatransferTransferTransformationTransformerRenameTablesRenameTableNewName {
    name?: pulumi.Input<string>;
    nameSpace?: pulumi.Input<string>;
}

export interface DatatransferTransferTransformationTransformerRenameTablesRenameTableOriginalName {
    name?: pulumi.Input<string>;
    nameSpace?: pulumi.Input<string>;
}

export interface DatatransferTransferTransformationTransformerReplacePrimaryKey {
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    tables?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerReplacePrimaryKeyTables>;
}

export interface DatatransferTransferTransformationTransformerReplacePrimaryKeyTables {
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatatransferTransferTransformationTransformerSharderTransformer {
    columns?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerSharderTransformerColumns>;
    shardsCount?: pulumi.Input<number>;
    tables?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerSharderTransformerTables>;
}

export interface DatatransferTransferTransformationTransformerSharderTransformerColumns {
    excludeColumns?: pulumi.Input<pulumi.Input<string>[]>;
    includeColumns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatatransferTransferTransformationTransformerSharderTransformerTables {
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DatatransferTransferTransformationTransformerTableSplitterTransformer {
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    splitter?: pulumi.Input<string>;
    tables?: pulumi.Input<inputs.DatatransferTransferTransformationTransformerTableSplitterTransformerTables>;
}

export interface DatatransferTransferTransformationTransformerTableSplitterTransformerTables {
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DnsRecordsetTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsZoneIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface DnsZoneTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface FunctionAsyncInvocation {
    retriesCount?: pulumi.Input<number>;
    serviceAccountId?: pulumi.Input<string>;
    ymqFailureTarget?: pulumi.Input<inputs.FunctionAsyncInvocationYmqFailureTarget>;
    ymqSuccessTarget?: pulumi.Input<inputs.FunctionAsyncInvocationYmqSuccessTarget>;
}

export interface FunctionAsyncInvocationYmqFailureTarget {
    arn: pulumi.Input<string>;
    serviceAccountId: pulumi.Input<string>;
}

export interface FunctionAsyncInvocationYmqSuccessTarget {
    arn: pulumi.Input<string>;
    serviceAccountId: pulumi.Input<string>;
}

export interface FunctionConnectivity {
    networkId: pulumi.Input<string>;
}

export interface FunctionContent {
    zipFilename: pulumi.Input<string>;
}

export interface FunctionIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface FunctionLogOptions {
    disabled?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    logGroupId?: pulumi.Input<string>;
    minLevel?: pulumi.Input<string>;
}

export interface FunctionPackage {
    bucketName: pulumi.Input<string>;
    objectName: pulumi.Input<string>;
    sha256?: pulumi.Input<string>;
}

export interface FunctionScalingPolicyPolicy {
    tag: pulumi.Input<string>;
    zoneInstancesLimit?: pulumi.Input<number>;
    zoneRequestsLimit?: pulumi.Input<number>;
}

export interface FunctionSecret {
    environmentVariable: pulumi.Input<string>;
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
    versionId: pulumi.Input<string>;
}

export interface FunctionStorageMount {
    bucket: pulumi.Input<string>;
    mountPointName: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
}

export interface FunctionTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface FunctionTriggerContainer {
    id: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    retryAttempts?: pulumi.Input<string>;
    retryInterval?: pulumi.Input<string>;
    serviceAccountId?: pulumi.Input<string>;
}

export interface FunctionTriggerContainerRegistry {
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    createImage?: pulumi.Input<boolean>;
    createImageTag?: pulumi.Input<boolean>;
    deleteImage?: pulumi.Input<boolean>;
    deleteImageTag?: pulumi.Input<boolean>;
    imageName?: pulumi.Input<string>;
    registryId: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface FunctionTriggerDataStreams {
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    serviceAccountId: pulumi.Input<string>;
    streamName: pulumi.Input<string>;
}

export interface FunctionTriggerDlq {
    queueId: pulumi.Input<string>;
    serviceAccountId: pulumi.Input<string>;
}

export interface FunctionTriggerFunction {
    id: pulumi.Input<string>;
    retryAttempts?: pulumi.Input<string>;
    retryInterval?: pulumi.Input<string>;
    serviceAccountId?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface FunctionTriggerIot {
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    deviceId?: pulumi.Input<string>;
    registryId: pulumi.Input<string>;
    topic?: pulumi.Input<string>;
}

export interface FunctionTriggerLogGroup {
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    logGroupIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionTriggerLogging {
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    groupId: pulumi.Input<string>;
    levels?: pulumi.Input<pulumi.Input<string>[]>;
    resourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    resourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    streamNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionTriggerMail {
    attachmentsBucketId?: pulumi.Input<string>;
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    serviceAccountId?: pulumi.Input<string>;
}

export interface FunctionTriggerMessageQueue {
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    queueId: pulumi.Input<string>;
    serviceAccountId: pulumi.Input<string>;
    visibilityTimeout?: pulumi.Input<string>;
}

export interface FunctionTriggerObjectStorage {
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    bucketId: pulumi.Input<string>;
    create?: pulumi.Input<boolean>;
    delete?: pulumi.Input<boolean>;
    prefix?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    update?: pulumi.Input<boolean>;
}

export interface FunctionTriggerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface FunctionTriggerTimer {
    cronExpression: pulumi.Input<string>;
    payload?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupGrpcBackend {
    healthcheck?: inputs.GetAlbBackendGroupGrpcBackendHealthcheck;
    loadBalancingConfig?: inputs.GetAlbBackendGroupGrpcBackendLoadBalancingConfig;
    name?: string;
    port?: number;
    targetGroupIds?: string[];
    tls?: inputs.GetAlbBackendGroupGrpcBackendTls;
    weight?: number;
}

export interface GetAlbBackendGroupGrpcBackendArgs {
    healthcheck?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendHealthcheckArgs>;
    loadBalancingConfig?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendLoadBalancingConfigArgs>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    targetGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendTlsArgs>;
    weight?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheck {
    grpcHealthcheck?: inputs.GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck;
    healthcheckPort?: number;
    healthyThreshold?: number;
    httpHealthcheck?: inputs.GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck;
    interval?: string;
    intervalJitterPercent?: number;
    streamHealthcheck?: inputs.GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck;
    timeout?: string;
    unhealthyThreshold?: number;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckArgs {
    grpcHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckArgs>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckArgs>;
    interval?: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckArgs>;
    timeout?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck {
    serviceName?: string;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckArgs {
    serviceName?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck {
    host?: string;
    http2?: boolean;
    path?: string;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckArgs {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck {
    receive?: string;
    send?: string;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckArgs {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupGrpcBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: number;
    mode?: string;
    panicThreshold?: number;
    strictLocality?: boolean;
}

export interface GetAlbBackendGroupGrpcBackendLoadBalancingConfigArgs {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface GetAlbBackendGroupGrpcBackendTls {
    sni?: string;
    validationContext?: inputs.GetAlbBackendGroupGrpcBackendTlsValidationContext;
}

export interface GetAlbBackendGroupGrpcBackendTlsArgs {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendTlsValidationContextArgs>;
}

export interface GetAlbBackendGroupGrpcBackendTlsValidationContext {
    trustedCaBytes?: string;
    trustedCaId?: string;
}

export interface GetAlbBackendGroupGrpcBackendTlsValidationContextArgs {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupHttpBackend {
    healthcheck?: inputs.GetAlbBackendGroupHttpBackendHealthcheck;
    http2?: boolean;
    loadBalancingConfig?: inputs.GetAlbBackendGroupHttpBackendLoadBalancingConfig;
    name?: string;
    port?: number;
    storageBucket?: string;
    targetGroupIds?: string[];
    tls?: inputs.GetAlbBackendGroupHttpBackendTls;
    weight?: number;
}

export interface GetAlbBackendGroupHttpBackendArgs {
    healthcheck?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendHealthcheckArgs>;
    http2?: pulumi.Input<boolean>;
    loadBalancingConfig?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendLoadBalancingConfigArgs>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    storageBucket?: pulumi.Input<string>;
    targetGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendTlsArgs>;
    weight?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupHttpBackendHealthcheck {
    grpcHealthcheck?: inputs.GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck;
    healthcheckPort?: number;
    healthyThreshold?: number;
    httpHealthcheck?: inputs.GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheck;
    interval?: string;
    intervalJitterPercent?: number;
    streamHealthcheck?: inputs.GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheck;
    timeout?: string;
    unhealthyThreshold?: number;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckArgs {
    grpcHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckArgs>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs>;
    interval?: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckArgs>;
    timeout?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck {
    serviceName?: string;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckArgs {
    serviceName?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheck {
    host?: string;
    http2?: boolean;
    path?: string;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheck {
    receive?: string;
    send?: string;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckArgs {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupHttpBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: number;
    mode?: string;
    panicThreshold?: number;
    strictLocality?: boolean;
}

export interface GetAlbBackendGroupHttpBackendLoadBalancingConfigArgs {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface GetAlbBackendGroupHttpBackendTls {
    sni?: string;
    validationContext?: inputs.GetAlbBackendGroupHttpBackendTlsValidationContext;
}

export interface GetAlbBackendGroupHttpBackendTlsArgs {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendTlsValidationContextArgs>;
}

export interface GetAlbBackendGroupHttpBackendTlsValidationContext {
    trustedCaBytes?: string;
    trustedCaId?: string;
}

export interface GetAlbBackendGroupHttpBackendTlsValidationContextArgs {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupSessionAffinity {
    /**
     * IP address affinity
     */
    connection?: inputs.GetAlbBackendGroupSessionAffinityConnection;
    /**
     * Cookie affinity
     */
    cookie?: inputs.GetAlbBackendGroupSessionAffinityCookie;
    /**
     * Request header affinity
     */
    header?: inputs.GetAlbBackendGroupSessionAffinityHeader;
}

export interface GetAlbBackendGroupSessionAffinityArgs {
    /**
     * IP address affinity
     */
    connection?: pulumi.Input<inputs.GetAlbBackendGroupSessionAffinityConnectionArgs>;
    /**
     * Cookie affinity
     */
    cookie?: pulumi.Input<inputs.GetAlbBackendGroupSessionAffinityCookieArgs>;
    /**
     * Request header affinity
     */
    header?: pulumi.Input<inputs.GetAlbBackendGroupSessionAffinityHeaderArgs>;
}

export interface GetAlbBackendGroupSessionAffinityConnection {
    /**
     * Use source IP address
     */
    sourceIp?: boolean;
}

export interface GetAlbBackendGroupSessionAffinityConnectionArgs {
    /**
     * Use source IP address
     */
    sourceIp?: pulumi.Input<boolean>;
}

export interface GetAlbBackendGroupSessionAffinityCookie {
    /**
     * Name of the HTTP cookie
     */
    name?: string;
    /**
     * TTL for the cookie (if not set, session cookie will be used)
     */
    ttl?: string;
}

export interface GetAlbBackendGroupSessionAffinityCookieArgs {
    /**
     * Name of the HTTP cookie
     */
    name?: pulumi.Input<string>;
    /**
     * TTL for the cookie (if not set, session cookie will be used)
     */
    ttl?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupSessionAffinityHeader {
    /**
     * The name of the request header that will be used
     */
    headerName?: string;
}

export interface GetAlbBackendGroupSessionAffinityHeaderArgs {
    /**
     * The name of the request header that will be used
     */
    headerName?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupStreamBackend {
    enableProxyProtocol?: boolean;
    healthcheck?: inputs.GetAlbBackendGroupStreamBackendHealthcheck;
    loadBalancingConfig?: inputs.GetAlbBackendGroupStreamBackendLoadBalancingConfig;
    name?: string;
    port?: number;
    targetGroupIds?: string[];
    tls?: inputs.GetAlbBackendGroupStreamBackendTls;
    weight?: number;
}

export interface GetAlbBackendGroupStreamBackendArgs {
    enableProxyProtocol?: pulumi.Input<boolean>;
    healthcheck?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendHealthcheckArgs>;
    loadBalancingConfig?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendLoadBalancingConfigArgs>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    targetGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendTlsArgs>;
    weight?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupStreamBackendHealthcheck {
    grpcHealthcheck?: inputs.GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck;
    healthcheckPort?: number;
    healthyThreshold?: number;
    httpHealthcheck?: inputs.GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheck;
    interval?: string;
    intervalJitterPercent?: number;
    streamHealthcheck?: inputs.GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheck;
    timeout?: string;
    unhealthyThreshold?: number;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckArgs {
    grpcHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckArgs>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckArgs>;
    interval?: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckArgs>;
    timeout?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck {
    serviceName?: string;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckArgs {
    serviceName?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheck {
    host?: string;
    http2?: boolean;
    path?: string;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckArgs {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheck {
    receive?: string;
    send?: string;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckArgs {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupStreamBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: number;
    mode?: string;
    panicThreshold?: number;
    strictLocality?: boolean;
}

export interface GetAlbBackendGroupStreamBackendLoadBalancingConfigArgs {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface GetAlbBackendGroupStreamBackendTls {
    sni?: string;
    validationContext?: inputs.GetAlbBackendGroupStreamBackendTlsValidationContext;
}

export interface GetAlbBackendGroupStreamBackendTlsArgs {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendTlsValidationContextArgs>;
}

export interface GetAlbBackendGroupStreamBackendTlsValidationContext {
    trustedCaBytes?: string;
    trustedCaId?: string;
}

export interface GetAlbBackendGroupStreamBackendTlsValidationContextArgs {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface GetAlbLoadBalancerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GetAlbLoadBalancerTimeoutsArgs {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface GetApiGatewayCanary {
    variables?: {[key: string]: string};
    weight?: number;
}

export interface GetApiGatewayCanaryArgs {
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    weight?: pulumi.Input<number>;
}

export interface GetApiGatewayConnectivity {
    networkId: string;
}

export interface GetApiGatewayConnectivityArgs {
    networkId: pulumi.Input<string>;
}

export interface GetApiGatewayCustomDomain {
    certificateId: string;
    domainId?: string;
    fqdn: string;
}

export interface GetApiGatewayCustomDomainArgs {
    certificateId: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
}

export interface GetCdnResourceOptions {
    allowedHttpMethods?: string[];
    browserCacheSettings?: number;
    cacheHttpHeaders?: string[];
    cors?: string[];
    customHostHeader?: string;
    customServerName?: string;
    disableCache?: boolean;
    disableProxyForceRanges?: boolean;
    edgeCacheSettings?: number;
    enableIpUrlSigning?: boolean;
    fetchedCompressed?: boolean;
    forwardHostHeader?: boolean;
    gzipOn?: boolean;
    ignoreCookie?: boolean;
    ignoreQueryParams?: boolean;
    ipAddressAcl?: inputs.GetCdnResourceOptionsIpAddressAcl;
    proxyCacheMethodsSet?: boolean;
    queryParamsBlacklists?: string[];
    queryParamsWhitelists?: string[];
    redirectHttpToHttps?: boolean;
    redirectHttpsToHttp?: boolean;
    secureKey?: string;
    slice?: boolean;
    staticRequestHeaders?: {[key: string]: string};
    staticResponseHeaders?: {[key: string]: string};
}

export interface GetCdnResourceOptionsArgs {
    allowedHttpMethods?: pulumi.Input<pulumi.Input<string>[]>;
    browserCacheSettings?: pulumi.Input<number>;
    cacheHttpHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    cors?: pulumi.Input<pulumi.Input<string>[]>;
    customHostHeader?: pulumi.Input<string>;
    customServerName?: pulumi.Input<string>;
    disableCache?: pulumi.Input<boolean>;
    disableProxyForceRanges?: pulumi.Input<boolean>;
    edgeCacheSettings?: pulumi.Input<number>;
    enableIpUrlSigning?: pulumi.Input<boolean>;
    fetchedCompressed?: pulumi.Input<boolean>;
    forwardHostHeader?: pulumi.Input<boolean>;
    gzipOn?: pulumi.Input<boolean>;
    ignoreCookie?: pulumi.Input<boolean>;
    ignoreQueryParams?: pulumi.Input<boolean>;
    ipAddressAcl?: pulumi.Input<inputs.GetCdnResourceOptionsIpAddressAclArgs>;
    proxyCacheMethodsSet?: pulumi.Input<boolean>;
    queryParamsBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    queryParamsWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    redirectHttpToHttps?: pulumi.Input<boolean>;
    redirectHttpsToHttp?: pulumi.Input<boolean>;
    secureKey?: pulumi.Input<string>;
    slice?: pulumi.Input<boolean>;
    staticRequestHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    staticResponseHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GetCdnResourceOptionsIpAddressAcl {
    exceptedValues?: string[];
    policyType?: string;
}

export interface GetCdnResourceOptionsIpAddressAclArgs {
    exceptedValues?: pulumi.Input<pulumi.Input<string>[]>;
    policyType?: pulumi.Input<string>;
}

export interface GetCdnResourceSslCertificate {
    certificateManagerId?: string;
    status?: string;
    type: string;
}

export interface GetCdnResourceSslCertificateArgs {
    certificateManagerId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GetComputeDiskDiskPlacementPolicy {
    diskPlacementGroupId: string;
}

export interface GetComputeDiskDiskPlacementPolicyArgs {
    diskPlacementGroupId: pulumi.Input<string>;
}

export interface GetComputeInstanceFilesystem {
    deviceName?: string;
    filesystemId?: string;
    mode?: string;
}

export interface GetComputeInstanceFilesystemArgs {
    deviceName?: pulumi.Input<string>;
    filesystemId?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface GetComputeInstanceLocalDisk {
    deviceName?: string;
    sizeBytes: number;
}

export interface GetComputeInstanceLocalDiskArgs {
    deviceName?: pulumi.Input<string>;
    sizeBytes: pulumi.Input<number>;
}

export interface GetComputeInstanceMetadataOptions {
    awsV1HttpEndpoint?: number;
    awsV1HttpToken?: number;
    gceHttpEndpoint?: number;
    gceHttpToken?: number;
}

export interface GetComputeInstanceMetadataOptionsArgs {
    awsV1HttpEndpoint?: pulumi.Input<number>;
    awsV1HttpToken?: pulumi.Input<number>;
    gceHttpEndpoint?: pulumi.Input<number>;
    gceHttpToken?: pulumi.Input<number>;
}

export interface GetComputeInstancePlacementPolicy {
    hostAffinityRules?: inputs.GetComputeInstancePlacementPolicyHostAffinityRule[];
    placementGroupId?: string;
    placementGroupPartition?: number;
}

export interface GetComputeInstancePlacementPolicyArgs {
    hostAffinityRules?: pulumi.Input<pulumi.Input<inputs.GetComputeInstancePlacementPolicyHostAffinityRuleArgs>[]>;
    placementGroupId?: pulumi.Input<string>;
    placementGroupPartition?: pulumi.Input<number>;
}

export interface GetComputeInstancePlacementPolicyHostAffinityRule {
    key: string;
    op: string;
    values: string[];
}

export interface GetComputeInstancePlacementPolicyHostAffinityRuleArgs {
    key: pulumi.Input<string>;
    op: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetComputeSnapshotScheduleSchedulePolicy {
    expression?: string;
    startAt?: string;
}

export interface GetComputeSnapshotScheduleSchedulePolicyArgs {
    expression?: pulumi.Input<string>;
    startAt?: pulumi.Input<string>;
}

export interface GetComputeSnapshotScheduleSnapshotSpec {
    description?: string;
    labels?: {[key: string]: string};
}

export interface GetComputeSnapshotScheduleSnapshotSpecArgs {
    description?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GetContainerRegistryIpPermissionTimeouts {
    default?: string;
}

export interface GetContainerRegistryIpPermissionTimeoutsArgs {
    default?: pulumi.Input<string>;
}

export interface GetContainerRepositoryLifecyclePolicyTimeouts {
    default?: string;
}

export interface GetContainerRepositoryLifecyclePolicyTimeoutsArgs {
    default?: pulumi.Input<string>;
}

export interface GetDatasphereCommunityTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}

export interface GetDatasphereCommunityTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: pulumi.Input<string>;
}

export interface GetDatasphereProjectTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}

export interface GetDatasphereProjectTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: pulumi.Input<string>;
}

export interface GetDnsZoneTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GetDnsZoneTimeoutsArgs {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface GetFunctionConnectivity {
    networkId: string;
}

export interface GetFunctionConnectivityArgs {
    networkId: pulumi.Input<string>;
}

export interface GetFunctionScalingPolicyPolicy {
    tag?: string;
    zoneInstancesLimit?: number;
    zoneRequestsLimit?: number;
}

export interface GetFunctionScalingPolicyPolicyArgs {
    tag?: pulumi.Input<string>;
    zoneInstancesLimit?: pulumi.Input<number>;
    zoneRequestsLimit?: pulumi.Input<number>;
}

export interface GetFunctionSecret {
    environmentVariable: string;
    id: string;
    key: string;
    versionId: string;
}

export interface GetFunctionSecretArgs {
    environmentVariable: pulumi.Input<string>;
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
    versionId: pulumi.Input<string>;
}

export interface GetFunctionStorageMount {
    bucket: string;
    mountPointName: string;
    prefix?: string;
    readOnly?: boolean;
}

export interface GetFunctionStorageMountArgs {
    bucket: pulumi.Input<string>;
    mountPointName: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
}

export interface GetIamPolicyBinding {
    members: string[];
    role: string;
}

export interface GetIamPolicyBindingArgs {
    members: pulumi.Input<pulumi.Input<string>[]>;
    role: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterAccess {
    dataLens?: boolean;
    dataTransfer?: boolean;
    metrika?: boolean;
    serverless?: boolean;
    webSql?: boolean;
    yandexQuery?: boolean;
}

export interface GetMdbClickhouseClusterAccessArgs {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
    metrika?: pulumi.Input<boolean>;
    serverless?: pulumi.Input<boolean>;
    webSql?: pulumi.Input<boolean>;
    yandexQuery?: pulumi.Input<boolean>;
}

export interface GetMdbClickhouseClusterBackupWindowStart {
    hours?: number;
    minutes?: number;
}

export interface GetMdbClickhouseClusterBackupWindowStartArgs {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface GetMdbClickhouseClusterClickhouse {
    config?: inputs.GetMdbClickhouseClusterClickhouseConfig;
    resources?: inputs.GetMdbClickhouseClusterClickhouseResources;
}

export interface GetMdbClickhouseClusterClickhouseArgs {
    config?: pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseConfigArgs>;
    resources?: pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseResourcesArgs>;
}

export interface GetMdbClickhouseClusterClickhouseConfig {
    backgroundFetchesPoolSize?: number;
    backgroundMergesMutationsConcurrencyRatio?: number;
    backgroundMessageBrokerSchedulePoolSize?: number;
    backgroundPoolSize?: number;
    backgroundSchedulePoolSize?: number;
    compressions?: inputs.GetMdbClickhouseClusterClickhouseConfigCompression[];
    defaultDatabase?: string;
    geobaseEnabled?: boolean;
    geobaseUri?: string;
    graphiteRollups?: inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollup[];
    kafka?: inputs.GetMdbClickhouseClusterClickhouseConfigKafka;
    kafkaTopics?: inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopic[];
    keepAliveTimeout?: number;
    logLevel?: string;
    markCacheSize?: number;
    maxConcurrentQueries?: number;
    maxConnections?: number;
    maxPartitionSizeToDrop?: number;
    maxTableSizeToDrop?: number;
    mergeTree?: inputs.GetMdbClickhouseClusterClickhouseConfigMergeTree;
    metricLogEnabled?: boolean;
    metricLogRetentionSize?: number;
    metricLogRetentionTime?: number;
    partLogRetentionSize?: number;
    partLogRetentionTime?: number;
    queryLogRetentionSize?: number;
    queryLogRetentionTime?: number;
    queryThreadLogEnabled?: boolean;
    queryThreadLogRetentionSize?: number;
    queryThreadLogRetentionTime?: number;
    rabbitmq?: inputs.GetMdbClickhouseClusterClickhouseConfigRabbitmq;
    textLogEnabled?: boolean;
    textLogLevel?: string;
    textLogRetentionSize?: number;
    textLogRetentionTime?: number;
    timezone?: string;
    totalMemoryProfilerStep?: number;
    traceLogEnabled?: boolean;
    traceLogRetentionSize?: number;
    traceLogRetentionTime?: number;
    uncompressedCacheSize?: number;
}

export interface GetMdbClickhouseClusterClickhouseConfigArgs {
    backgroundFetchesPoolSize?: pulumi.Input<number>;
    backgroundMergesMutationsConcurrencyRatio?: pulumi.Input<number>;
    backgroundMessageBrokerSchedulePoolSize?: pulumi.Input<number>;
    backgroundPoolSize?: pulumi.Input<number>;
    backgroundSchedulePoolSize?: pulumi.Input<number>;
    compressions?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseConfigCompressionArgs>[]>;
    defaultDatabase?: pulumi.Input<string>;
    geobaseEnabled?: pulumi.Input<boolean>;
    geobaseUri?: pulumi.Input<string>;
    graphiteRollups?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupArgs>[]>;
    kafka?: pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseConfigKafkaArgs>;
    kafkaTopics?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicArgs>[]>;
    keepAliveTimeout?: pulumi.Input<number>;
    logLevel?: pulumi.Input<string>;
    markCacheSize?: pulumi.Input<number>;
    maxConcurrentQueries?: pulumi.Input<number>;
    maxConnections?: pulumi.Input<number>;
    maxPartitionSizeToDrop?: pulumi.Input<number>;
    maxTableSizeToDrop?: pulumi.Input<number>;
    mergeTree?: pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeArgs>;
    metricLogEnabled?: pulumi.Input<boolean>;
    metricLogRetentionSize?: pulumi.Input<number>;
    metricLogRetentionTime?: pulumi.Input<number>;
    partLogRetentionSize?: pulumi.Input<number>;
    partLogRetentionTime?: pulumi.Input<number>;
    queryLogRetentionSize?: pulumi.Input<number>;
    queryLogRetentionTime?: pulumi.Input<number>;
    queryThreadLogEnabled?: pulumi.Input<boolean>;
    queryThreadLogRetentionSize?: pulumi.Input<number>;
    queryThreadLogRetentionTime?: pulumi.Input<number>;
    rabbitmq?: pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqArgs>;
    textLogEnabled?: pulumi.Input<boolean>;
    textLogLevel?: pulumi.Input<string>;
    textLogRetentionSize?: pulumi.Input<number>;
    textLogRetentionTime?: pulumi.Input<number>;
    timezone?: pulumi.Input<string>;
    totalMemoryProfilerStep?: pulumi.Input<number>;
    traceLogEnabled?: pulumi.Input<boolean>;
    traceLogRetentionSize?: pulumi.Input<number>;
    traceLogRetentionTime?: pulumi.Input<number>;
    uncompressedCacheSize?: pulumi.Input<number>;
}

export interface GetMdbClickhouseClusterClickhouseConfigCompression {
    level?: number;
    method?: string;
    minPartSize?: number;
    minPartSizeRatio?: number;
}

export interface GetMdbClickhouseClusterClickhouseConfigCompressionArgs {
    level?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
    minPartSize?: pulumi.Input<number>;
    minPartSizeRatio?: pulumi.Input<number>;
}

export interface GetMdbClickhouseClusterClickhouseConfigGraphiteRollup {
    name?: string;
    patterns?: inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPattern[];
}

export interface GetMdbClickhouseClusterClickhouseConfigGraphiteRollupArgs {
    name?: pulumi.Input<string>;
    patterns?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternArgs>[]>;
}

export interface GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPattern {
    function?: string;
    regexp?: string;
    retentions?: inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention[];
}

export interface GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternArgs {
    function?: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
    retentions?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionArgs>[]>;
}

export interface GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention {
    age?: number;
    precision?: number;
}

export interface GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionArgs {
    age?: pulumi.Input<number>;
    precision?: pulumi.Input<number>;
}

export interface GetMdbClickhouseClusterClickhouseConfigKafka {
    enableSslCertificateVerification?: boolean;
    maxPollIntervalMs?: number;
    saslMechanism?: string;
    saslPassword?: string;
    saslUsername?: string;
    securityProtocol?: string;
    sessionTimeoutMs?: number;
}

export interface GetMdbClickhouseClusterClickhouseConfigKafkaArgs {
    enableSslCertificateVerification?: pulumi.Input<boolean>;
    maxPollIntervalMs?: pulumi.Input<number>;
    saslMechanism?: pulumi.Input<string>;
    saslPassword?: pulumi.Input<string>;
    saslUsername?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
    sessionTimeoutMs?: pulumi.Input<number>;
}

export interface GetMdbClickhouseClusterClickhouseConfigKafkaTopic {
    name?: string;
    settings?: inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicSettings;
}

export interface GetMdbClickhouseClusterClickhouseConfigKafkaTopicArgs {
    name?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicSettingsArgs>;
}

export interface GetMdbClickhouseClusterClickhouseConfigKafkaTopicSettings {
    enableSslCertificateVerification?: boolean;
    maxPollIntervalMs?: number;
    saslMechanism?: string;
    saslPassword?: string;
    saslUsername?: string;
    securityProtocol?: string;
    sessionTimeoutMs?: number;
}

export interface GetMdbClickhouseClusterClickhouseConfigKafkaTopicSettingsArgs {
    enableSslCertificateVerification?: pulumi.Input<boolean>;
    maxPollIntervalMs?: pulumi.Input<number>;
    saslMechanism?: pulumi.Input<string>;
    saslPassword?: pulumi.Input<string>;
    saslUsername?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
    sessionTimeoutMs?: pulumi.Input<number>;
}

export interface GetMdbClickhouseClusterClickhouseConfigMergeTree {
    cleanupDelayPeriod?: number;
    maxAvgPartSizeForTooManyParts?: number;
    maxBytesToMergeAtMinSpaceInPool?: number;
    maxNumberOfMergesWithTtlInPool?: number;
    maxPartsInTotal?: number;
    maxReplicatedMergesInQueue?: number;
    mergeSelectingSleepMs?: number;
    mergeWithRecompressionTtlTimeout?: number;
    mergeWithTtlTimeout?: number;
    minAgeToForceMergeOnPartitionOnly?: boolean;
    minAgeToForceMergeSeconds?: number;
    minBytesForWidePart?: number;
    minRowsForWidePart?: number;
    numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge?: number;
    partsToDelayInsert?: number;
    partsToThrowInsert?: number;
    replicatedDeduplicationWindow?: number;
    replicatedDeduplicationWindowSeconds?: number;
    ttlOnlyDropParts?: boolean;
}

export interface GetMdbClickhouseClusterClickhouseConfigMergeTreeArgs {
    cleanupDelayPeriod?: pulumi.Input<number>;
    maxAvgPartSizeForTooManyParts?: pulumi.Input<number>;
    maxBytesToMergeAtMinSpaceInPool?: pulumi.Input<number>;
    maxNumberOfMergesWithTtlInPool?: pulumi.Input<number>;
    maxPartsInTotal?: pulumi.Input<number>;
    maxReplicatedMergesInQueue?: pulumi.Input<number>;
    mergeSelectingSleepMs?: pulumi.Input<number>;
    mergeWithRecompressionTtlTimeout?: pulumi.Input<number>;
    mergeWithTtlTimeout?: pulumi.Input<number>;
    minAgeToForceMergeOnPartitionOnly?: pulumi.Input<boolean>;
    minAgeToForceMergeSeconds?: pulumi.Input<number>;
    minBytesForWidePart?: pulumi.Input<number>;
    minRowsForWidePart?: pulumi.Input<number>;
    numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge?: pulumi.Input<number>;
    partsToDelayInsert?: pulumi.Input<number>;
    partsToThrowInsert?: pulumi.Input<number>;
    replicatedDeduplicationWindow?: pulumi.Input<number>;
    replicatedDeduplicationWindowSeconds?: pulumi.Input<number>;
    ttlOnlyDropParts?: pulumi.Input<boolean>;
}

export interface GetMdbClickhouseClusterClickhouseConfigRabbitmq {
    password?: string;
    username?: string;
    vhost?: string;
}

export interface GetMdbClickhouseClusterClickhouseConfigRabbitmqArgs {
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vhost?: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterClickhouseResources {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbClickhouseClusterClickhouseResourcesArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterCloudStorage {
    dataCacheEnabled?: boolean;
    dataCacheMaxSize?: number;
    enabled?: boolean;
    moveFactor?: number;
    preferNotToMerge?: boolean;
}

export interface GetMdbClickhouseClusterCloudStorageArgs {
    dataCacheEnabled?: pulumi.Input<boolean>;
    dataCacheMaxSize?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    moveFactor?: pulumi.Input<number>;
    preferNotToMerge?: pulumi.Input<boolean>;
}

export interface GetMdbClickhouseClusterDatabase {
    name?: string;
}

export interface GetMdbClickhouseClusterDatabaseArgs {
    name?: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterFormatSchema {
    name?: string;
    type?: string;
    uri?: string;
}

export interface GetMdbClickhouseClusterFormatSchemaArgs {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterHost {
    assignPublicIp?: boolean;
    fqdn?: string;
    shardName?: string;
    subnetId?: string;
    type?: string;
    zone?: string;
}

export interface GetMdbClickhouseClusterHostArgs {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    shardName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterMaintenanceWindow {
    day?: string;
    hour?: number;
    type?: string;
}

export interface GetMdbClickhouseClusterMaintenanceWindowArgs {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterMlModel {
    name?: string;
    type?: string;
    uri?: string;
}

export interface GetMdbClickhouseClusterMlModelArgs {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterShard {
    name?: string;
    resources?: inputs.GetMdbClickhouseClusterShardResources;
    weight?: number;
}

export interface GetMdbClickhouseClusterShardArgs {
    name?: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.GetMdbClickhouseClusterShardResourcesArgs>;
    weight?: pulumi.Input<number>;
}

export interface GetMdbClickhouseClusterShardGroup {
    description?: string;
    name?: string;
    shardNames?: string[];
}

export interface GetMdbClickhouseClusterShardGroupArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    shardNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMdbClickhouseClusterShardResources {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbClickhouseClusterShardResourcesArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterUser {
    name?: string;
    password?: string;
    permissions?: inputs.GetMdbClickhouseClusterUserPermission[];
    quotas?: inputs.GetMdbClickhouseClusterUserQuota[];
    settings?: inputs.GetMdbClickhouseClusterUserSettings;
}

export interface GetMdbClickhouseClusterUserArgs {
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterUserPermissionArgs>[]>;
    quotas?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterUserQuotaArgs>[]>;
    settings?: pulumi.Input<inputs.GetMdbClickhouseClusterUserSettingsArgs>;
}

export interface GetMdbClickhouseClusterUserPermission {
    databaseName?: string;
}

export interface GetMdbClickhouseClusterUserPermissionArgs {
    databaseName?: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterUserQuota {
    errors?: number;
    executionTime?: number;
    intervalDuration?: number;
    queries?: number;
    readRows?: number;
    resultRows?: number;
}

export interface GetMdbClickhouseClusterUserQuotaArgs {
    errors?: pulumi.Input<number>;
    executionTime?: pulumi.Input<number>;
    intervalDuration?: pulumi.Input<number>;
    queries?: pulumi.Input<number>;
    readRows?: pulumi.Input<number>;
    resultRows?: pulumi.Input<number>;
}

export interface GetMdbClickhouseClusterUserSettings {
    addHttpCorsHeader?: boolean;
    allowDdl?: boolean;
    allowIntrospectionFunctions?: boolean;
    allowSuspiciousLowCardinalityTypes?: boolean;
    asyncInsert?: boolean;
    asyncInsertBusyTimeout?: number;
    asyncInsertMaxDataSize?: number;
    asyncInsertStaleTimeout?: number;
    asyncInsertThreads?: number;
    cancelHttpReadonlyQueriesOnClientClose?: boolean;
    compile?: boolean;
    compileExpressions?: boolean;
    connectTimeout?: number;
    connectTimeoutWithFailover?: number;
    countDistinctImplementation?: string;
    distinctOverflowMode?: string;
    distributedAggregationMemoryEfficient?: boolean;
    distributedDdlTaskTimeout?: number;
    distributedProductMode?: string;
    emptyResultForAggregationByEmptySet?: boolean;
    enableHttpCompression?: boolean;
    fallbackToStaleReplicasForDistributedQueries?: boolean;
    flattenNested?: boolean;
    forceIndexByDate?: boolean;
    forcePrimaryKey?: boolean;
    groupByOverflowMode?: string;
    groupByTwoLevelThreshold?: number;
    groupByTwoLevelThresholdBytes?: number;
    httpConnectionTimeout?: number;
    httpHeadersProgressInterval?: number;
    httpReceiveTimeout?: number;
    httpSendTimeout?: number;
    inputFormatDefaultsForOmittedFields?: boolean;
    inputFormatImportNestedJson?: boolean;
    inputFormatParallelParsing?: boolean;
    inputFormatValuesInterpretExpressions?: boolean;
    insertKeeperMaxRetries?: number;
    insertNullAsDefault?: boolean;
    insertQuorum?: number;
    insertQuorumTimeout?: number;
    joinOverflowMode?: string;
    joinUseNulls?: boolean;
    joinedSubqueryRequiresAlias?: boolean;
    localFilesystemReadMethod?: string;
    lowCardinalityAllowInNativeFormat?: boolean;
    maxAstDepth?: number;
    maxAstElements?: number;
    maxBlockSize?: number;
    maxBytesBeforeExternalGroupBy?: number;
    maxBytesBeforeExternalSort?: number;
    maxBytesInDistinct?: number;
    maxBytesInJoin?: number;
    maxBytesInSet?: number;
    maxBytesToRead?: number;
    maxBytesToSort?: number;
    maxBytesToTransfer?: number;
    maxColumnsToRead?: number;
    maxConcurrentQueriesForUser?: number;
    maxExecutionTime?: number;
    maxExpandedAstElements?: number;
    maxFinalThreads?: number;
    maxHttpGetRedirects?: number;
    maxInsertBlockSize?: number;
    maxMemoryUsage?: number;
    maxMemoryUsageForUser?: number;
    maxNetworkBandwidth?: number;
    maxNetworkBandwidthForUser?: number;
    maxParserDepth?: number;
    maxQuerySize?: number;
    maxReadBufferSize?: number;
    maxReplicaDelayForDistributedQueries?: number;
    maxResultBytes?: number;
    maxResultRows?: number;
    maxRowsInDistinct?: number;
    maxRowsInJoin?: number;
    maxRowsInSet?: number;
    maxRowsToGroupBy?: number;
    maxRowsToRead?: number;
    maxRowsToSort?: number;
    maxRowsToTransfer?: number;
    maxTemporaryColumns?: number;
    maxTemporaryDataOnDiskSizeForQuery?: number;
    maxTemporaryDataOnDiskSizeForUser?: number;
    maxTemporaryNonConstColumns?: number;
    maxThreads?: number;
    memoryOvercommitRatioDenominator?: number;
    memoryOvercommitRatioDenominatorForUser?: number;
    memoryProfilerSampleProbability?: number;
    memoryProfilerStep?: number;
    memoryUsageOvercommitMaxWaitMicroseconds?: number;
    mergeTreeMaxBytesToUseCache?: number;
    mergeTreeMaxRowsToUseCache?: number;
    mergeTreeMinBytesForConcurrentRead?: number;
    mergeTreeMinRowsForConcurrentRead?: number;
    minBytesToUseDirectIo?: number;
    minCountToCompile?: number;
    minCountToCompileExpression?: number;
    minExecutionSpeed?: number;
    minExecutionSpeedBytes?: number;
    minInsertBlockSizeBytes?: number;
    minInsertBlockSizeRows?: number;
    outputFormatJsonQuote64bitIntegers?: boolean;
    outputFormatJsonQuoteDenormals?: boolean;
    priority?: number;
    quotaMode?: string;
    readOverflowMode?: string;
    readonly?: number;
    receiveTimeout?: number;
    remoteFilesystemReadMethod?: string;
    replicationAlterPartitionsSync?: number;
    resultOverflowMode?: string;
    selectSequentialConsistency?: boolean;
    sendProgressInHttpHeaders?: boolean;
    sendTimeout?: number;
    setOverflowMode?: string;
    skipUnavailableShards?: boolean;
    sortOverflowMode?: string;
    timeoutBeforeCheckingExecutionSpeed?: number;
    timeoutOverflowMode?: string;
    transferOverflowMode?: string;
    transformNullIn?: boolean;
    useUncompressedCache?: boolean;
    waitForAsyncInsert?: boolean;
    waitForAsyncInsertTimeout?: number;
}

export interface GetMdbClickhouseClusterUserSettingsArgs {
    addHttpCorsHeader?: pulumi.Input<boolean>;
    allowDdl?: pulumi.Input<boolean>;
    allowIntrospectionFunctions?: pulumi.Input<boolean>;
    allowSuspiciousLowCardinalityTypes?: pulumi.Input<boolean>;
    asyncInsert?: pulumi.Input<boolean>;
    asyncInsertBusyTimeout?: pulumi.Input<number>;
    asyncInsertMaxDataSize?: pulumi.Input<number>;
    asyncInsertStaleTimeout?: pulumi.Input<number>;
    asyncInsertThreads?: pulumi.Input<number>;
    cancelHttpReadonlyQueriesOnClientClose?: pulumi.Input<boolean>;
    compile?: pulumi.Input<boolean>;
    compileExpressions?: pulumi.Input<boolean>;
    connectTimeout?: pulumi.Input<number>;
    connectTimeoutWithFailover?: pulumi.Input<number>;
    countDistinctImplementation?: pulumi.Input<string>;
    distinctOverflowMode?: pulumi.Input<string>;
    distributedAggregationMemoryEfficient?: pulumi.Input<boolean>;
    distributedDdlTaskTimeout?: pulumi.Input<number>;
    distributedProductMode?: pulumi.Input<string>;
    emptyResultForAggregationByEmptySet?: pulumi.Input<boolean>;
    enableHttpCompression?: pulumi.Input<boolean>;
    fallbackToStaleReplicasForDistributedQueries?: pulumi.Input<boolean>;
    flattenNested?: pulumi.Input<boolean>;
    forceIndexByDate?: pulumi.Input<boolean>;
    forcePrimaryKey?: pulumi.Input<boolean>;
    groupByOverflowMode?: pulumi.Input<string>;
    groupByTwoLevelThreshold?: pulumi.Input<number>;
    groupByTwoLevelThresholdBytes?: pulumi.Input<number>;
    httpConnectionTimeout?: pulumi.Input<number>;
    httpHeadersProgressInterval?: pulumi.Input<number>;
    httpReceiveTimeout?: pulumi.Input<number>;
    httpSendTimeout?: pulumi.Input<number>;
    inputFormatDefaultsForOmittedFields?: pulumi.Input<boolean>;
    inputFormatImportNestedJson?: pulumi.Input<boolean>;
    inputFormatParallelParsing?: pulumi.Input<boolean>;
    inputFormatValuesInterpretExpressions?: pulumi.Input<boolean>;
    insertKeeperMaxRetries?: pulumi.Input<number>;
    insertNullAsDefault?: pulumi.Input<boolean>;
    insertQuorum?: pulumi.Input<number>;
    insertQuorumTimeout?: pulumi.Input<number>;
    joinOverflowMode?: pulumi.Input<string>;
    joinUseNulls?: pulumi.Input<boolean>;
    joinedSubqueryRequiresAlias?: pulumi.Input<boolean>;
    localFilesystemReadMethod?: pulumi.Input<string>;
    lowCardinalityAllowInNativeFormat?: pulumi.Input<boolean>;
    maxAstDepth?: pulumi.Input<number>;
    maxAstElements?: pulumi.Input<number>;
    maxBlockSize?: pulumi.Input<number>;
    maxBytesBeforeExternalGroupBy?: pulumi.Input<number>;
    maxBytesBeforeExternalSort?: pulumi.Input<number>;
    maxBytesInDistinct?: pulumi.Input<number>;
    maxBytesInJoin?: pulumi.Input<number>;
    maxBytesInSet?: pulumi.Input<number>;
    maxBytesToRead?: pulumi.Input<number>;
    maxBytesToSort?: pulumi.Input<number>;
    maxBytesToTransfer?: pulumi.Input<number>;
    maxColumnsToRead?: pulumi.Input<number>;
    maxConcurrentQueriesForUser?: pulumi.Input<number>;
    maxExecutionTime?: pulumi.Input<number>;
    maxExpandedAstElements?: pulumi.Input<number>;
    maxFinalThreads?: pulumi.Input<number>;
    maxHttpGetRedirects?: pulumi.Input<number>;
    maxInsertBlockSize?: pulumi.Input<number>;
    maxMemoryUsage?: pulumi.Input<number>;
    maxMemoryUsageForUser?: pulumi.Input<number>;
    maxNetworkBandwidth?: pulumi.Input<number>;
    maxNetworkBandwidthForUser?: pulumi.Input<number>;
    maxParserDepth?: pulumi.Input<number>;
    maxQuerySize?: pulumi.Input<number>;
    maxReadBufferSize?: pulumi.Input<number>;
    maxReplicaDelayForDistributedQueries?: pulumi.Input<number>;
    maxResultBytes?: pulumi.Input<number>;
    maxResultRows?: pulumi.Input<number>;
    maxRowsInDistinct?: pulumi.Input<number>;
    maxRowsInJoin?: pulumi.Input<number>;
    maxRowsInSet?: pulumi.Input<number>;
    maxRowsToGroupBy?: pulumi.Input<number>;
    maxRowsToRead?: pulumi.Input<number>;
    maxRowsToSort?: pulumi.Input<number>;
    maxRowsToTransfer?: pulumi.Input<number>;
    maxTemporaryColumns?: pulumi.Input<number>;
    maxTemporaryDataOnDiskSizeForQuery?: pulumi.Input<number>;
    maxTemporaryDataOnDiskSizeForUser?: pulumi.Input<number>;
    maxTemporaryNonConstColumns?: pulumi.Input<number>;
    maxThreads?: pulumi.Input<number>;
    memoryOvercommitRatioDenominator?: pulumi.Input<number>;
    memoryOvercommitRatioDenominatorForUser?: pulumi.Input<number>;
    memoryProfilerSampleProbability?: pulumi.Input<number>;
    memoryProfilerStep?: pulumi.Input<number>;
    memoryUsageOvercommitMaxWaitMicroseconds?: pulumi.Input<number>;
    mergeTreeMaxBytesToUseCache?: pulumi.Input<number>;
    mergeTreeMaxRowsToUseCache?: pulumi.Input<number>;
    mergeTreeMinBytesForConcurrentRead?: pulumi.Input<number>;
    mergeTreeMinRowsForConcurrentRead?: pulumi.Input<number>;
    minBytesToUseDirectIo?: pulumi.Input<number>;
    minCountToCompile?: pulumi.Input<number>;
    minCountToCompileExpression?: pulumi.Input<number>;
    minExecutionSpeed?: pulumi.Input<number>;
    minExecutionSpeedBytes?: pulumi.Input<number>;
    minInsertBlockSizeBytes?: pulumi.Input<number>;
    minInsertBlockSizeRows?: pulumi.Input<number>;
    outputFormatJsonQuote64bitIntegers?: pulumi.Input<boolean>;
    outputFormatJsonQuoteDenormals?: pulumi.Input<boolean>;
    priority?: pulumi.Input<number>;
    quotaMode?: pulumi.Input<string>;
    readOverflowMode?: pulumi.Input<string>;
    readonly?: pulumi.Input<number>;
    receiveTimeout?: pulumi.Input<number>;
    remoteFilesystemReadMethod?: pulumi.Input<string>;
    replicationAlterPartitionsSync?: pulumi.Input<number>;
    resultOverflowMode?: pulumi.Input<string>;
    selectSequentialConsistency?: pulumi.Input<boolean>;
    sendProgressInHttpHeaders?: pulumi.Input<boolean>;
    sendTimeout?: pulumi.Input<number>;
    setOverflowMode?: pulumi.Input<string>;
    skipUnavailableShards?: pulumi.Input<boolean>;
    sortOverflowMode?: pulumi.Input<string>;
    timeoutBeforeCheckingExecutionSpeed?: pulumi.Input<number>;
    timeoutOverflowMode?: pulumi.Input<string>;
    transferOverflowMode?: pulumi.Input<string>;
    transformNullIn?: pulumi.Input<boolean>;
    useUncompressedCache?: pulumi.Input<boolean>;
    waitForAsyncInsert?: pulumi.Input<boolean>;
    waitForAsyncInsertTimeout?: pulumi.Input<number>;
}

export interface GetMdbClickhouseClusterZookeeper {
    resources?: inputs.GetMdbClickhouseClusterZookeeperResources;
}

export interface GetMdbClickhouseClusterZookeeperArgs {
    resources?: pulumi.Input<inputs.GetMdbClickhouseClusterZookeeperResourcesArgs>;
}

export interface GetMdbClickhouseClusterZookeeperResources {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbClickhouseClusterZookeeperResourcesArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbGreenplumClusterPoolerConfig {
    poolClientIdleTimeout?: number;
    poolSize?: number;
    poolingMode?: string;
}

export interface GetMdbGreenplumClusterPoolerConfigArgs {
    poolClientIdleTimeout?: pulumi.Input<number>;
    poolSize?: pulumi.Input<number>;
    poolingMode?: pulumi.Input<string>;
}

export interface GetMdbGreenplumClusterPxfConfig {
    connectionTimeout?: number;
    maxThreads?: number;
    poolAllowCoreThreadTimeout?: boolean;
    poolCoreSize?: number;
    poolMaxSize?: number;
    poolQueueCapacity?: number;
    uploadTimeout?: number;
    xms?: number;
    xmx?: number;
}

export interface GetMdbGreenplumClusterPxfConfigArgs {
    connectionTimeout?: pulumi.Input<number>;
    maxThreads?: pulumi.Input<number>;
    poolAllowCoreThreadTimeout?: pulumi.Input<boolean>;
    poolCoreSize?: pulumi.Input<number>;
    poolMaxSize?: pulumi.Input<number>;
    poolQueueCapacity?: pulumi.Input<number>;
    uploadTimeout?: pulumi.Input<number>;
    xms?: pulumi.Input<number>;
    xmx?: pulumi.Input<number>;
}

export interface GetMdbKafkaClusterConfig {
    access?: inputs.GetMdbKafkaClusterConfigAccess;
    assignPublicIp?: boolean;
    brokersCount?: number;
    diskSizeAutoscaling?: inputs.GetMdbKafkaClusterConfigDiskSizeAutoscaling;
    kafka: inputs.GetMdbKafkaClusterConfigKafka;
    schemaRegistry?: boolean;
    /**
     * @deprecated Deprecated
     */
    unmanagedTopics?: boolean;
    version: string;
    zones: string[];
    zookeeper?: inputs.GetMdbKafkaClusterConfigZookeeper;
}

export interface GetMdbKafkaClusterConfigArgs {
    access?: pulumi.Input<inputs.GetMdbKafkaClusterConfigAccessArgs>;
    assignPublicIp?: pulumi.Input<boolean>;
    brokersCount?: pulumi.Input<number>;
    diskSizeAutoscaling?: pulumi.Input<inputs.GetMdbKafkaClusterConfigDiskSizeAutoscalingArgs>;
    kafka: pulumi.Input<inputs.GetMdbKafkaClusterConfigKafkaArgs>;
    schemaRegistry?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    unmanagedTopics?: pulumi.Input<boolean>;
    version: pulumi.Input<string>;
    zones: pulumi.Input<pulumi.Input<string>[]>;
    zookeeper?: pulumi.Input<inputs.GetMdbKafkaClusterConfigZookeeperArgs>;
}

export interface GetMdbKafkaClusterConfigAccess {
    dataTransfer?: boolean;
}

export interface GetMdbKafkaClusterConfigAccessArgs {
    dataTransfer?: pulumi.Input<boolean>;
}

export interface GetMdbKafkaClusterConfigDiskSizeAutoscaling {
    diskSizeLimit: number;
    emergencyUsageThreshold?: number;
    plannedUsageThreshold?: number;
}

export interface GetMdbKafkaClusterConfigDiskSizeAutoscalingArgs {
    diskSizeLimit: pulumi.Input<number>;
    emergencyUsageThreshold?: pulumi.Input<number>;
    plannedUsageThreshold?: pulumi.Input<number>;
}

export interface GetMdbKafkaClusterConfigKafka {
    kafkaConfig?: inputs.GetMdbKafkaClusterConfigKafkaKafkaConfig;
    resources: inputs.GetMdbKafkaClusterConfigKafkaResources;
}

export interface GetMdbKafkaClusterConfigKafkaArgs {
    kafkaConfig?: pulumi.Input<inputs.GetMdbKafkaClusterConfigKafkaKafkaConfigArgs>;
    resources: pulumi.Input<inputs.GetMdbKafkaClusterConfigKafkaResourcesArgs>;
}

export interface GetMdbKafkaClusterConfigKafkaKafkaConfig {
    autoCreateTopicsEnable?: boolean;
    compressionType?: string;
    defaultReplicationFactor?: string;
    logFlushIntervalMessages?: string;
    logFlushIntervalMs?: string;
    logFlushSchedulerIntervalMs?: string;
    logPreallocate?: boolean;
    logRetentionBytes?: string;
    logRetentionHours?: string;
    logRetentionMinutes?: string;
    logRetentionMs?: string;
    logSegmentBytes?: string;
    messageMaxBytes?: string;
    numPartitions?: string;
    offsetsRetentionMinutes?: string;
    replicaFetchMaxBytes?: string;
    saslEnabledMechanisms?: string[];
    socketReceiveBufferBytes?: string;
    socketSendBufferBytes?: string;
    sslCipherSuites?: string[];
}

export interface GetMdbKafkaClusterConfigKafkaKafkaConfigArgs {
    autoCreateTopicsEnable?: pulumi.Input<boolean>;
    compressionType?: pulumi.Input<string>;
    defaultReplicationFactor?: pulumi.Input<string>;
    logFlushIntervalMessages?: pulumi.Input<string>;
    logFlushIntervalMs?: pulumi.Input<string>;
    logFlushSchedulerIntervalMs?: pulumi.Input<string>;
    logPreallocate?: pulumi.Input<boolean>;
    logRetentionBytes?: pulumi.Input<string>;
    logRetentionHours?: pulumi.Input<string>;
    logRetentionMinutes?: pulumi.Input<string>;
    logRetentionMs?: pulumi.Input<string>;
    logSegmentBytes?: pulumi.Input<string>;
    messageMaxBytes?: pulumi.Input<string>;
    numPartitions?: pulumi.Input<string>;
    offsetsRetentionMinutes?: pulumi.Input<string>;
    replicaFetchMaxBytes?: pulumi.Input<string>;
    saslEnabledMechanisms?: pulumi.Input<pulumi.Input<string>[]>;
    socketReceiveBufferBytes?: pulumi.Input<string>;
    socketSendBufferBytes?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMdbKafkaClusterConfigKafkaResources {
    diskSize: number;
    diskTypeId: string;
    resourcePresetId: string;
}

export interface GetMdbKafkaClusterConfigKafkaResourcesArgs {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface GetMdbKafkaClusterConfigZookeeper {
    resources?: inputs.GetMdbKafkaClusterConfigZookeeperResources;
}

export interface GetMdbKafkaClusterConfigZookeeperArgs {
    resources?: pulumi.Input<inputs.GetMdbKafkaClusterConfigZookeeperResourcesArgs>;
}

export interface GetMdbKafkaClusterConfigZookeeperResources {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbKafkaClusterConfigZookeeperResourcesArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbKafkaClusterTopic {
    name: string;
    partitions: number;
    replicationFactor: number;
    topicConfig?: inputs.GetMdbKafkaClusterTopicTopicConfig;
}

export interface GetMdbKafkaClusterTopicArgs {
    name: pulumi.Input<string>;
    partitions: pulumi.Input<number>;
    replicationFactor: pulumi.Input<number>;
    topicConfig?: pulumi.Input<inputs.GetMdbKafkaClusterTopicTopicConfigArgs>;
}

export interface GetMdbKafkaClusterTopicTopicConfig {
    cleanupPolicy?: string;
    compressionType?: string;
    deleteRetentionMs?: string;
    fileDeleteDelayMs?: string;
    flushMessages?: string;
    flushMs?: string;
    maxMessageBytes?: string;
    minCompactionLagMs?: string;
    minInsyncReplicas?: string;
    preallocate?: boolean;
    retentionBytes?: string;
    retentionMs?: string;
    segmentBytes?: string;
}

export interface GetMdbKafkaClusterTopicTopicConfigArgs {
    cleanupPolicy?: pulumi.Input<string>;
    compressionType?: pulumi.Input<string>;
    deleteRetentionMs?: pulumi.Input<string>;
    fileDeleteDelayMs?: pulumi.Input<string>;
    flushMessages?: pulumi.Input<string>;
    flushMs?: pulumi.Input<string>;
    maxMessageBytes?: pulumi.Input<string>;
    minCompactionLagMs?: pulumi.Input<string>;
    minInsyncReplicas?: pulumi.Input<string>;
    preallocate?: pulumi.Input<boolean>;
    retentionBytes?: pulumi.Input<string>;
    retentionMs?: pulumi.Input<string>;
    segmentBytes?: pulumi.Input<string>;
}

export interface GetMdbKafkaClusterUser {
    name: string;
    password: string;
    permissions?: inputs.GetMdbKafkaClusterUserPermission[];
}

export interface GetMdbKafkaClusterUserArgs {
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.GetMdbKafkaClusterUserPermissionArgs>[]>;
}

export interface GetMdbKafkaClusterUserPermission {
    allowHosts?: string[];
    role: string;
    topicName: string;
}

export interface GetMdbKafkaClusterUserPermissionArgs {
    allowHosts?: pulumi.Input<pulumi.Input<string>[]>;
    role: pulumi.Input<string>;
    topicName: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterClusterConfig {
    access?: inputs.GetMdbMongodbClusterClusterConfigAccess;
    backupRetainPeriodDays?: number;
    backupWindowStart?: inputs.GetMdbMongodbClusterClusterConfigBackupWindowStart;
    featureCompatibilityVersion?: string;
    mongocfg?: inputs.GetMdbMongodbClusterClusterConfigMongocfg;
    mongod?: inputs.GetMdbMongodbClusterClusterConfigMongod;
    mongos?: inputs.GetMdbMongodbClusterClusterConfigMongos;
    performanceDiagnostics?: inputs.GetMdbMongodbClusterClusterConfigPerformanceDiagnostics;
    version?: string;
}

export interface GetMdbMongodbClusterClusterConfigArgs {
    access?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigAccessArgs>;
    backupRetainPeriodDays?: pulumi.Input<number>;
    backupWindowStart?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigBackupWindowStartArgs>;
    featureCompatibilityVersion?: pulumi.Input<string>;
    mongocfg?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongocfgArgs>;
    mongod?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodArgs>;
    mongos?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongosArgs>;
    performanceDiagnostics?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigPerformanceDiagnosticsArgs>;
    version?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterClusterConfigAccess {
    dataLens?: boolean;
    dataTransfer?: boolean;
}

export interface GetMdbMongodbClusterClusterConfigAccessArgs {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
}

export interface GetMdbMongodbClusterClusterConfigBackupWindowStart {
    hours?: number;
    minutes?: number;
}

export interface GetMdbMongodbClusterClusterConfigBackupWindowStartArgs {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface GetMdbMongodbClusterClusterConfigMongocfg {
    net?: inputs.GetMdbMongodbClusterClusterConfigMongocfgNet;
    operationProfiling?: inputs.GetMdbMongodbClusterClusterConfigMongocfgOperationProfiling;
    storage?: inputs.GetMdbMongodbClusterClusterConfigMongocfgStorage;
}

export interface GetMdbMongodbClusterClusterConfigMongocfgArgs {
    net?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongocfgNetArgs>;
    operationProfiling?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongocfgOperationProfilingArgs>;
    storage?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongocfgStorageArgs>;
}

export interface GetMdbMongodbClusterClusterConfigMongocfgNet {
    maxIncomingConnections?: number;
}

export interface GetMdbMongodbClusterClusterConfigMongocfgNetArgs {
    maxIncomingConnections?: pulumi.Input<number>;
}

export interface GetMdbMongodbClusterClusterConfigMongocfgOperationProfiling {
    mode?: string;
    slowOpThreshold?: number;
}

export interface GetMdbMongodbClusterClusterConfigMongocfgOperationProfilingArgs {
    mode?: pulumi.Input<string>;
    slowOpThreshold?: pulumi.Input<number>;
}

export interface GetMdbMongodbClusterClusterConfigMongocfgStorage {
    wiredTiger?: inputs.GetMdbMongodbClusterClusterConfigMongocfgStorageWiredTiger;
}

export interface GetMdbMongodbClusterClusterConfigMongocfgStorageArgs {
    wiredTiger?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongocfgStorageWiredTigerArgs>;
}

export interface GetMdbMongodbClusterClusterConfigMongocfgStorageWiredTiger {
    cacheSizeGb?: number;
}

export interface GetMdbMongodbClusterClusterConfigMongocfgStorageWiredTigerArgs {
    cacheSizeGb?: pulumi.Input<number>;
}

export interface GetMdbMongodbClusterClusterConfigMongod {
    auditLog?: inputs.GetMdbMongodbClusterClusterConfigMongodAuditLog;
    net?: inputs.GetMdbMongodbClusterClusterConfigMongodNet;
    operationProfiling?: inputs.GetMdbMongodbClusterClusterConfigMongodOperationProfiling;
    security?: inputs.GetMdbMongodbClusterClusterConfigMongodSecurity;
    setParameter?: inputs.GetMdbMongodbClusterClusterConfigMongodSetParameter;
    storage?: inputs.GetMdbMongodbClusterClusterConfigMongodStorage;
}

export interface GetMdbMongodbClusterClusterConfigMongodArgs {
    auditLog?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodAuditLogArgs>;
    net?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodNetArgs>;
    operationProfiling?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodOperationProfilingArgs>;
    security?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodSecurityArgs>;
    setParameter?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodSetParameterArgs>;
    storage?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodStorageArgs>;
}

export interface GetMdbMongodbClusterClusterConfigMongodAuditLog {
    filter?: string;
    runtimeConfiguration?: boolean;
}

export interface GetMdbMongodbClusterClusterConfigMongodAuditLogArgs {
    filter?: pulumi.Input<string>;
    runtimeConfiguration?: pulumi.Input<boolean>;
}

export interface GetMdbMongodbClusterClusterConfigMongodNet {
    compressors?: string[];
    maxIncomingConnections?: number;
}

export interface GetMdbMongodbClusterClusterConfigMongodNetArgs {
    compressors?: pulumi.Input<pulumi.Input<string>[]>;
    maxIncomingConnections?: pulumi.Input<number>;
}

export interface GetMdbMongodbClusterClusterConfigMongodOperationProfiling {
    mode?: string;
    slowOpSampleRate?: number;
    slowOpThreshold?: number;
}

export interface GetMdbMongodbClusterClusterConfigMongodOperationProfilingArgs {
    mode?: pulumi.Input<string>;
    slowOpSampleRate?: pulumi.Input<number>;
    slowOpThreshold?: pulumi.Input<number>;
}

export interface GetMdbMongodbClusterClusterConfigMongodSecurity {
    enableEncryption?: boolean;
    kmip?: inputs.GetMdbMongodbClusterClusterConfigMongodSecurityKmip;
}

export interface GetMdbMongodbClusterClusterConfigMongodSecurityArgs {
    enableEncryption?: pulumi.Input<boolean>;
    kmip?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodSecurityKmipArgs>;
}

export interface GetMdbMongodbClusterClusterConfigMongodSecurityKmip {
    clientCertificate?: string;
    keyIdentifier?: string;
    port?: number;
    serverCa?: string;
    serverName?: string;
}

export interface GetMdbMongodbClusterClusterConfigMongodSecurityKmipArgs {
    clientCertificate?: pulumi.Input<string>;
    keyIdentifier?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    serverCa?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterClusterConfigMongodSetParameter {
    auditAuthorizationSuccess?: boolean;
    enableFlowControl?: boolean;
    minSnapshotHistoryWindowInSeconds?: number;
}

export interface GetMdbMongodbClusterClusterConfigMongodSetParameterArgs {
    auditAuthorizationSuccess?: pulumi.Input<boolean>;
    enableFlowControl?: pulumi.Input<boolean>;
    minSnapshotHistoryWindowInSeconds?: pulumi.Input<number>;
}

export interface GetMdbMongodbClusterClusterConfigMongodStorage {
    journal?: inputs.GetMdbMongodbClusterClusterConfigMongodStorageJournal;
    wiredTiger?: inputs.GetMdbMongodbClusterClusterConfigMongodStorageWiredTiger;
}

export interface GetMdbMongodbClusterClusterConfigMongodStorageArgs {
    journal?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodStorageJournalArgs>;
    wiredTiger?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodStorageWiredTigerArgs>;
}

export interface GetMdbMongodbClusterClusterConfigMongodStorageJournal {
    commitInterval?: number;
}

export interface GetMdbMongodbClusterClusterConfigMongodStorageJournalArgs {
    commitInterval?: pulumi.Input<number>;
}

export interface GetMdbMongodbClusterClusterConfigMongodStorageWiredTiger {
    blockCompressor?: string;
    cacheSizeGb?: number;
    prefixCompression?: boolean;
}

export interface GetMdbMongodbClusterClusterConfigMongodStorageWiredTigerArgs {
    blockCompressor?: pulumi.Input<string>;
    cacheSizeGb?: pulumi.Input<number>;
    prefixCompression?: pulumi.Input<boolean>;
}

export interface GetMdbMongodbClusterClusterConfigMongos {
    net?: inputs.GetMdbMongodbClusterClusterConfigMongosNet;
}

export interface GetMdbMongodbClusterClusterConfigMongosArgs {
    net?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongosNetArgs>;
}

export interface GetMdbMongodbClusterClusterConfigMongosNet {
    compressors?: string[];
    maxIncomingConnections?: number;
}

export interface GetMdbMongodbClusterClusterConfigMongosNetArgs {
    compressors?: pulumi.Input<pulumi.Input<string>[]>;
    maxIncomingConnections?: pulumi.Input<number>;
}

export interface GetMdbMongodbClusterClusterConfigPerformanceDiagnostics {
    enabled?: boolean;
}

export interface GetMdbMongodbClusterClusterConfigPerformanceDiagnosticsArgs {
    enabled?: pulumi.Input<boolean>;
}

export interface GetMdbMongodbClusterDatabase {
    name?: string;
}

export interface GetMdbMongodbClusterDatabaseArgs {
    name?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterHost {
    assignPublicIp?: boolean;
    health?: string;
    hostParameters?: inputs.GetMdbMongodbClusterHostHostParameters;
    name?: string;
    role?: string;
    shardName?: string;
    subnetId?: string;
    type?: string;
    zoneId?: string;
}

export interface GetMdbMongodbClusterHostArgs {
    assignPublicIp?: pulumi.Input<boolean>;
    health?: pulumi.Input<string>;
    hostParameters?: pulumi.Input<inputs.GetMdbMongodbClusterHostHostParametersArgs>;
    name?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    shardName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterHostHostParameters {
    hidden?: boolean;
    priority?: number;
    secondaryDelaySecs?: number;
    tags?: {[key: string]: string};
}

export interface GetMdbMongodbClusterHostHostParametersArgs {
    hidden?: pulumi.Input<boolean>;
    priority?: pulumi.Input<number>;
    secondaryDelaySecs?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GetMdbMongodbClusterMaintenanceWindow {
    day?: string;
    hour?: number;
    type?: string;
}

export interface GetMdbMongodbClusterMaintenanceWindowArgs {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterResources {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbMongodbClusterResourcesArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterResourcesMongocfg {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbMongodbClusterResourcesMongocfgArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterResourcesMongod {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbMongodbClusterResourcesMongodArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterResourcesMongoinfra {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbMongodbClusterResourcesMongoinfraArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterResourcesMongos {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbMongodbClusterResourcesMongosArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterRestore {
    backupId?: string;
    time?: string;
}

export interface GetMdbMongodbClusterRestoreArgs {
    backupId?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterUser {
    name?: string;
    password?: string;
    permissions?: inputs.GetMdbMongodbClusterUserPermission[];
}

export interface GetMdbMongodbClusterUserArgs {
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.GetMdbMongodbClusterUserPermissionArgs>[]>;
}

export interface GetMdbMongodbClusterUserPermission {
    databaseName?: string;
    roles?: string[];
}

export interface GetMdbMongodbClusterUserPermissionArgs {
    databaseName?: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMdbMongodbUserPermission {
    databaseName: string;
    roles?: string[];
}

export interface GetMdbMongodbUserPermissionArgs {
    databaseName: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMdbMysqlClusterAccess {
    dataLens?: boolean;
    dataTransfer?: boolean;
    webSql?: boolean;
}

export interface GetMdbMysqlClusterAccessArgs {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
    webSql?: pulumi.Input<boolean>;
}

export interface GetMdbMysqlUserPermission {
    databaseName?: string;
    roles?: string[];
}

export interface GetMdbMysqlUserPermissionArgs {
    databaseName?: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMdbOpensearchClusterAuthSettings {
    saml?: inputs.GetMdbOpensearchClusterAuthSettingsSaml;
}

export interface GetMdbOpensearchClusterAuthSettingsArgs {
    saml?: pulumi.Input<inputs.GetMdbOpensearchClusterAuthSettingsSamlArgs>;
}

export interface GetMdbOpensearchClusterAuthSettingsSaml {
    dashboardsUrl?: string;
    enabled?: boolean;
    idpEntityId?: string;
    idpMetadataFileContent?: string;
    rolesKey?: string;
    spEntityId?: string;
    subjectKey?: string;
}

export interface GetMdbOpensearchClusterAuthSettingsSamlArgs {
    dashboardsUrl?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    idpEntityId?: pulumi.Input<string>;
    idpMetadataFileContent?: pulumi.Input<string>;
    rolesKey?: pulumi.Input<string>;
    spEntityId?: pulumi.Input<string>;
    subjectKey?: pulumi.Input<string>;
}

export interface GetMdbOpensearchClusterConfig {
    access?: inputs.GetMdbOpensearchClusterConfigAccess;
    adminPassword?: string;
    dashboards?: inputs.GetMdbOpensearchClusterConfigDashboards;
    opensearch?: inputs.GetMdbOpensearchClusterConfigOpensearch;
    version?: string;
}

export interface GetMdbOpensearchClusterConfigArgs {
    access?: pulumi.Input<inputs.GetMdbOpensearchClusterConfigAccessArgs>;
    adminPassword?: pulumi.Input<string>;
    dashboards?: pulumi.Input<inputs.GetMdbOpensearchClusterConfigDashboardsArgs>;
    opensearch?: pulumi.Input<inputs.GetMdbOpensearchClusterConfigOpensearchArgs>;
    version?: pulumi.Input<string>;
}

export interface GetMdbOpensearchClusterConfigAccess {
    dataTransfer?: boolean;
    serverless?: boolean;
}

export interface GetMdbOpensearchClusterConfigAccessArgs {
    dataTransfer?: pulumi.Input<boolean>;
    serverless?: pulumi.Input<boolean>;
}

export interface GetMdbOpensearchClusterConfigDashboards {
    nodeGroups?: inputs.GetMdbOpensearchClusterConfigDashboardsNodeGroup[];
}

export interface GetMdbOpensearchClusterConfigDashboardsArgs {
    nodeGroups?: pulumi.Input<pulumi.Input<inputs.GetMdbOpensearchClusterConfigDashboardsNodeGroupArgs>[]>;
}

export interface GetMdbOpensearchClusterConfigDashboardsNodeGroup {
    assignPublicIp?: boolean;
    hostsCount: number;
    name: string;
    resources?: inputs.GetMdbOpensearchClusterConfigDashboardsNodeGroupResources;
    subnetIds?: string[];
    zoneIds?: string[];
}

export interface GetMdbOpensearchClusterConfigDashboardsNodeGroupArgs {
    assignPublicIp?: pulumi.Input<boolean>;
    hostsCount: pulumi.Input<number>;
    name: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.GetMdbOpensearchClusterConfigDashboardsNodeGroupResourcesArgs>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    zoneIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMdbOpensearchClusterConfigDashboardsNodeGroupResources {
    diskSize: number;
    diskTypeId: string;
    resourcePresetId: string;
}

export interface GetMdbOpensearchClusterConfigDashboardsNodeGroupResourcesArgs {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface GetMdbOpensearchClusterConfigOpensearch {
    nodeGroups?: inputs.GetMdbOpensearchClusterConfigOpensearchNodeGroup[];
    plugins?: string[];
}

export interface GetMdbOpensearchClusterConfigOpensearchArgs {
    nodeGroups?: pulumi.Input<pulumi.Input<inputs.GetMdbOpensearchClusterConfigOpensearchNodeGroupArgs>[]>;
    plugins?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMdbOpensearchClusterConfigOpensearchNodeGroup {
    assignPublicIp?: boolean;
    hostsCount?: number;
    name?: string;
    resources?: inputs.GetMdbOpensearchClusterConfigOpensearchNodeGroupResources;
    roles?: string[];
    subnetIds?: string[];
    zoneIds?: string[];
}

export interface GetMdbOpensearchClusterConfigOpensearchNodeGroupArgs {
    assignPublicIp?: pulumi.Input<boolean>;
    hostsCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.GetMdbOpensearchClusterConfigOpensearchNodeGroupResourcesArgs>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    zoneIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMdbOpensearchClusterConfigOpensearchNodeGroupResources {
    diskSize: number;
    diskTypeId: string;
    resourcePresetId: string;
}

export interface GetMdbOpensearchClusterConfigOpensearchNodeGroupResourcesArgs {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface GetMdbOpensearchClusterMaintenanceWindow {
    day?: string;
    hour?: number;
    type?: string;
}

export interface GetMdbOpensearchClusterMaintenanceWindowArgs {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface GetMdbOpensearchClusterTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}

export interface GetMdbOpensearchClusterTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: pulumi.Input<string>;
}

export interface GetMdbPostgresqlDatabaseExtension {
    name: string;
    version?: string;
}

export interface GetMdbPostgresqlDatabaseExtensionArgs {
    name: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface GetOrganizationmanagerOsLoginSettingsSshCertificateSettings {
    enabled?: boolean;
}

export interface GetOrganizationmanagerOsLoginSettingsSshCertificateSettingsArgs {
    enabled?: pulumi.Input<boolean>;
}

export interface GetOrganizationmanagerOsLoginSettingsUserSshKeySettings {
    allowManageOwnKeys?: boolean;
    enabled?: boolean;
}

export interface GetOrganizationmanagerOsLoginSettingsUserSshKeySettingsArgs {
    allowManageOwnKeys?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
}

export interface GetServerlessContainerConnectivity {
    networkId: string;
}

export interface GetServerlessContainerConnectivityArgs {
    networkId: pulumi.Input<string>;
}

export interface GetServerlessContainerSecret {
    environmentVariable: string;
    id: string;
    key: string;
    versionId: string;
}

export interface GetServerlessContainerSecretArgs {
    environmentVariable: pulumi.Input<string>;
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
    versionId: pulumi.Input<string>;
}

export interface GetServerlessContainerStorageMount {
    bucket: string;
    mountPointPath: string;
    prefix?: string;
    readOnly?: boolean;
}

export interface GetServerlessContainerStorageMountArgs {
    bucket: pulumi.Input<string>;
    mountPointPath: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
}

export interface GetVpcGatewaySharedEgressGateway {
}

export interface GetVpcGatewaySharedEgressGatewayArgs {
}

export interface GetYdbDatabaseServerlessServerlessDatabase {
    enableThrottlingRcuLimit?: boolean;
    provisionedRcuLimit?: number;
    storageSizeLimit?: number;
    throttlingRcuLimit?: number;
}

export interface GetYdbDatabaseServerlessServerlessDatabaseArgs {
    enableThrottlingRcuLimit?: pulumi.Input<boolean>;
    provisionedRcuLimit?: pulumi.Input<number>;
    storageSizeLimit?: pulumi.Input<number>;
    throttlingRcuLimit?: pulumi.Input<number>;
}

export interface IamServiceAccountApiKeyOutputToLockbox {
    /**
     * entry that will store the value of secret_key
     */
    entryForSecretKey: pulumi.Input<string>;
    /**
     * secret where to add the version with the sensitive values
     */
    secretId: pulumi.Input<string>;
}

export interface IamServiceAccountIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface IamServiceAccountIamMemberTimeouts {
    default?: pulumi.Input<string>;
}

export interface IamServiceAccountIamPolicyTimeouts {
    default?: pulumi.Input<string>;
}

export interface IamServiceAccountKeyOutputToLockbox {
    /**
     * entry that will store the value of private_key
     */
    entryForPrivateKey: pulumi.Input<string>;
    /**
     * secret where to add the version with the sensitive values
     */
    secretId: pulumi.Input<string>;
}

export interface IamServiceAccountStaticAccessKeyOutputToLockbox {
    /**
     * entry that will store the value of secret_key
     */
    entryForSecretKey: pulumi.Input<string>;
    /**
     * secret where to add the version with the sensitive values
     */
    secretId: pulumi.Input<string>;
}

export interface IamServiceAccountTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface IotCoreBrokerLogOptions {
    disabled?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    logGroupId?: pulumi.Input<string>;
    minLevel?: pulumi.Input<string>;
}

export interface IotCoreBrokerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface IotCoreDeviceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface IotCoreRegistryLogOptions {
    disabled?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    logGroupId?: pulumi.Input<string>;
    minLevel?: pulumi.Input<string>;
}

export interface IotCoreRegistryTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KmsAsymmetricEncryptionKeyIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface KmsAsymmetricEncryptionKeyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KmsAsymmetricSignatureKeyIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface KmsAsymmetricSignatureKeyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KmsSecretCiphertextTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
}

export interface KmsSymmetricKeyIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface KmsSymmetricKeyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KubernetesClusterKmsProvider {
    keyId?: pulumi.Input<string>;
}

export interface KubernetesClusterMaster {
    clusterCaCertificate?: pulumi.Input<string>;
    etcdClusterSize?: pulumi.Input<number>;
    externalV4Address?: pulumi.Input<string>;
    externalV4Endpoint?: pulumi.Input<string>;
    externalV6Address?: pulumi.Input<string>;
    externalV6Endpoint?: pulumi.Input<string>;
    internalV4Address?: pulumi.Input<string>;
    internalV4Endpoint?: pulumi.Input<string>;
    maintenancePolicy?: pulumi.Input<inputs.KubernetesClusterMasterMaintenancePolicy>;
    masterLocations?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterMasterMasterLocation>[]>;
    masterLogging?: pulumi.Input<inputs.KubernetesClusterMasterMasterLogging>;
    publicIp?: pulumi.Input<boolean>;
    regional?: pulumi.Input<inputs.KubernetesClusterMasterRegional>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    version?: pulumi.Input<string>;
    versionInfos?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterMasterVersionInfo>[]>;
    zonal?: pulumi.Input<inputs.KubernetesClusterMasterZonal>;
}

export interface KubernetesClusterMasterMaintenancePolicy {
    autoUpgrade: pulumi.Input<boolean>;
    maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterMasterMaintenancePolicyMaintenanceWindow>[]>;
}

export interface KubernetesClusterMasterMaintenancePolicyMaintenanceWindow {
    day?: pulumi.Input<string>;
    duration: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
}

export interface KubernetesClusterMasterMasterLocation {
    subnetId?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface KubernetesClusterMasterMasterLogging {
    auditEnabled?: pulumi.Input<boolean>;
    clusterAutoscalerEnabled?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    eventsEnabled?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    kubeApiserverEnabled?: pulumi.Input<boolean>;
    logGroupId?: pulumi.Input<string>;
}

export interface KubernetesClusterMasterRegional {
    locations?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterMasterRegionalLocation>[]>;
    region: pulumi.Input<string>;
}

export interface KubernetesClusterMasterRegionalLocation {
    subnetId?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface KubernetesClusterMasterVersionInfo {
    currentVersion: pulumi.Input<string>;
    newRevisionAvailable: pulumi.Input<boolean>;
    newRevisionSummary: pulumi.Input<string>;
    versionDeprecated: pulumi.Input<boolean>;
}

export interface KubernetesClusterMasterZonal {
    subnetId?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface KubernetesClusterNetworkImplementation {
    cilium?: pulumi.Input<inputs.KubernetesClusterNetworkImplementationCilium>;
}

export interface KubernetesClusterNetworkImplementationCilium {
}

export interface KubernetesClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KubernetesNodeGroupAllocationPolicy {
    locations?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupAllocationPolicyLocation>[]>;
}

export interface KubernetesNodeGroupAllocationPolicyLocation {
    /**
     * @deprecated Deprecated
     */
    subnetId?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface KubernetesNodeGroupDeployPolicy {
    maxExpansion: pulumi.Input<number>;
    maxUnavailable: pulumi.Input<number>;
}

export interface KubernetesNodeGroupInstanceTemplate {
    bootDisk?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateBootDisk>;
    containerNetwork?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateContainerNetwork>;
    containerRuntime?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateContainerRuntime>;
    gpuSettings?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateGpuSettings>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nat?: pulumi.Input<boolean>;
    networkAccelerationType?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateNetworkInterface>[]>;
    placementPolicy?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplatePlacementPolicy>;
    platformId?: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateResources>;
    schedulingPolicy?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateSchedulingPolicy>;
}

export interface KubernetesNodeGroupInstanceTemplateBootDisk {
    size?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface KubernetesNodeGroupInstanceTemplateContainerNetwork {
    podMtu?: pulumi.Input<number>;
}

export interface KubernetesNodeGroupInstanceTemplateContainerRuntime {
    type: pulumi.Input<string>;
}

export interface KubernetesNodeGroupInstanceTemplateGpuSettings {
    gpuClusterId?: pulumi.Input<string>;
    gpuEnvironment?: pulumi.Input<string>;
}

export interface KubernetesNodeGroupInstanceTemplateNetworkInterface {
    ipv4?: pulumi.Input<boolean>;
    ipv4DnsRecords?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord>[]>;
    ipv6?: pulumi.Input<boolean>;
    ipv6DnsRecords?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord>[]>;
    nat?: pulumi.Input<boolean>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface KubernetesNodeGroupInstanceTemplatePlacementPolicy {
    placementGroupId: pulumi.Input<string>;
}

export interface KubernetesNodeGroupInstanceTemplateResources {
    coreFraction?: pulumi.Input<number>;
    cores?: pulumi.Input<number>;
    gpus?: pulumi.Input<number>;
    memory?: pulumi.Input<number>;
}

export interface KubernetesNodeGroupInstanceTemplateSchedulingPolicy {
    preemptible?: pulumi.Input<boolean>;
}

export interface KubernetesNodeGroupMaintenancePolicy {
    autoRepair: pulumi.Input<boolean>;
    autoUpgrade: pulumi.Input<boolean>;
    maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupMaintenancePolicyMaintenanceWindow>[]>;
}

export interface KubernetesNodeGroupMaintenancePolicyMaintenanceWindow {
    day?: pulumi.Input<string>;
    duration: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
}

export interface KubernetesNodeGroupScalePolicy {
    autoScale?: pulumi.Input<inputs.KubernetesNodeGroupScalePolicyAutoScale>;
    fixedScale?: pulumi.Input<inputs.KubernetesNodeGroupScalePolicyFixedScale>;
}

export interface KubernetesNodeGroupScalePolicyAutoScale {
    initial: pulumi.Input<number>;
    max: pulumi.Input<number>;
    min: pulumi.Input<number>;
}

export interface KubernetesNodeGroupScalePolicyFixedScale {
    size?: pulumi.Input<number>;
}

export interface KubernetesNodeGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KubernetesNodeGroupVersionInfo {
    currentVersion: pulumi.Input<string>;
    newRevisionAvailable: pulumi.Input<boolean>;
    newRevisionSummary: pulumi.Input<string>;
    versionDeprecated: pulumi.Input<boolean>;
}

export interface LbNetworkLoadBalancerAttachedTargetGroup {
    healthchecks: pulumi.Input<pulumi.Input<inputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheck>[]>;
    targetGroupId: pulumi.Input<string>;
}

export interface LbNetworkLoadBalancerAttachedTargetGroupHealthcheck {
    healthyThreshold?: pulumi.Input<number>;
    httpOptions?: pulumi.Input<inputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions>;
    interval?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tcpOptions?: pulumi.Input<inputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions>;
    timeout?: pulumi.Input<number>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions {
    path?: pulumi.Input<string>;
    port: pulumi.Input<number>;
}

export interface LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions {
    port: pulumi.Input<number>;
}

export interface LbNetworkLoadBalancerListener {
    externalAddressSpec?: pulumi.Input<inputs.LbNetworkLoadBalancerListenerExternalAddressSpec>;
    internalAddressSpec?: pulumi.Input<inputs.LbNetworkLoadBalancerListenerInternalAddressSpec>;
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    targetPort?: pulumi.Input<number>;
}

export interface LbNetworkLoadBalancerListenerExternalAddressSpec {
    address?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
}

export interface LbNetworkLoadBalancerListenerInternalAddressSpec {
    address?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface LbNetworkLoadBalancerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbTargetGroupTarget {
    address: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface LbTargetGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LoadtestingAgentComputeInstance {
    bootDisk: pulumi.Input<inputs.LoadtestingAgentComputeInstanceBootDisk>;
    computedMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.LoadtestingAgentComputeInstanceNetworkInterface>[]>;
    platformId?: pulumi.Input<string>;
    resources: pulumi.Input<inputs.LoadtestingAgentComputeInstanceResources>;
    serviceAccountId: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

export interface LoadtestingAgentComputeInstanceBootDisk {
    autoDelete?: pulumi.Input<boolean>;
    deviceName?: pulumi.Input<string>;
    diskId?: pulumi.Input<string>;
    initializeParams: pulumi.Input<inputs.LoadtestingAgentComputeInstanceBootDiskInitializeParams>;
}

export interface LoadtestingAgentComputeInstanceBootDiskInitializeParams {
    blockSize?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface LoadtestingAgentComputeInstanceNetworkInterface {
    index?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
    ipv4?: pulumi.Input<boolean>;
    ipv6?: pulumi.Input<boolean>;
    ipv6Address?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    nat?: pulumi.Input<boolean>;
    natIpAddress?: pulumi.Input<string>;
    natIpVersion?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId: pulumi.Input<string>;
}

export interface LoadtestingAgentComputeInstanceResources {
    coreFraction?: pulumi.Input<number>;
    cores?: pulumi.Input<number>;
    memory?: pulumi.Input<number>;
}

export interface LoadtestingAgentTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LockboxSecretIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface LockboxSecretTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LockboxSecretVersionEntry {
    command?: pulumi.Input<inputs.LockboxSecretVersionEntryCommand>;
    key: pulumi.Input<string>;
    textValue?: pulumi.Input<string>;
}

export interface LockboxSecretVersionEntryCommand {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    path: pulumi.Input<string>;
}

export interface LockboxSecretVersionHashedTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
}

export interface LockboxSecretVersionTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
}

export interface LoggingGroupTimeouts {
    default?: pulumi.Input<string>;
}

export interface MdbClickhouseClusterAccess {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
    metrika?: pulumi.Input<boolean>;
    serverless?: pulumi.Input<boolean>;
    webSql?: pulumi.Input<boolean>;
    yandexQuery?: pulumi.Input<boolean>;
}

export interface MdbClickhouseClusterBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouse {
    config?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfig>;
    resources?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseResources>;
}

export interface MdbClickhouseClusterClickhouseConfig {
    backgroundFetchesPoolSize?: pulumi.Input<number>;
    backgroundMergesMutationsConcurrencyRatio?: pulumi.Input<number>;
    backgroundMessageBrokerSchedulePoolSize?: pulumi.Input<number>;
    backgroundPoolSize?: pulumi.Input<number>;
    backgroundSchedulePoolSize?: pulumi.Input<number>;
    compressions?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigCompression>[]>;
    defaultDatabase?: pulumi.Input<string>;
    geobaseEnabled?: pulumi.Input<boolean>;
    geobaseUri?: pulumi.Input<string>;
    graphiteRollups?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollup>[]>;
    kafka?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigKafka>;
    kafkaTopics?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigKafkaTopic>[]>;
    keepAliveTimeout?: pulumi.Input<number>;
    logLevel?: pulumi.Input<string>;
    markCacheSize?: pulumi.Input<number>;
    maxConcurrentQueries?: pulumi.Input<number>;
    maxConnections?: pulumi.Input<number>;
    maxPartitionSizeToDrop?: pulumi.Input<number>;
    maxTableSizeToDrop?: pulumi.Input<number>;
    mergeTree?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigMergeTree>;
    metricLogEnabled?: pulumi.Input<boolean>;
    metricLogRetentionSize?: pulumi.Input<number>;
    metricLogRetentionTime?: pulumi.Input<number>;
    partLogRetentionSize?: pulumi.Input<number>;
    partLogRetentionTime?: pulumi.Input<number>;
    queryLogRetentionSize?: pulumi.Input<number>;
    queryLogRetentionTime?: pulumi.Input<number>;
    queryThreadLogEnabled?: pulumi.Input<boolean>;
    queryThreadLogRetentionSize?: pulumi.Input<number>;
    queryThreadLogRetentionTime?: pulumi.Input<number>;
    rabbitmq?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigRabbitmq>;
    textLogEnabled?: pulumi.Input<boolean>;
    textLogLevel?: pulumi.Input<string>;
    textLogRetentionSize?: pulumi.Input<number>;
    textLogRetentionTime?: pulumi.Input<number>;
    timezone?: pulumi.Input<string>;
    totalMemoryProfilerStep?: pulumi.Input<number>;
    traceLogEnabled?: pulumi.Input<boolean>;
    traceLogRetentionSize?: pulumi.Input<number>;
    traceLogRetentionTime?: pulumi.Input<number>;
    uncompressedCacheSize?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouseConfigCompression {
    level?: pulumi.Input<number>;
    method: pulumi.Input<string>;
    minPartSize: pulumi.Input<number>;
    minPartSizeRatio: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouseConfigGraphiteRollup {
    name: pulumi.Input<string>;
    patterns?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern>[]>;
}

export interface MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern {
    function: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
    retentions?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention>[]>;
}

export interface MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention {
    age: pulumi.Input<number>;
    precision: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouseConfigKafka {
    enableSslCertificateVerification?: pulumi.Input<boolean>;
    maxPollIntervalMs?: pulumi.Input<number>;
    saslMechanism?: pulumi.Input<string>;
    saslPassword?: pulumi.Input<string>;
    saslUsername?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
    sessionTimeoutMs?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouseConfigKafkaTopic {
    name: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigKafkaTopicSettings>;
}

export interface MdbClickhouseClusterClickhouseConfigKafkaTopicSettings {
    enableSslCertificateVerification?: pulumi.Input<boolean>;
    maxPollIntervalMs?: pulumi.Input<number>;
    saslMechanism?: pulumi.Input<string>;
    saslPassword?: pulumi.Input<string>;
    saslUsername?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
    sessionTimeoutMs?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouseConfigMergeTree {
    cleanupDelayPeriod?: pulumi.Input<number>;
    maxAvgPartSizeForTooManyParts?: pulumi.Input<number>;
    maxBytesToMergeAtMinSpaceInPool?: pulumi.Input<number>;
    maxNumberOfMergesWithTtlInPool?: pulumi.Input<number>;
    maxPartsInTotal?: pulumi.Input<number>;
    maxReplicatedMergesInQueue?: pulumi.Input<number>;
    mergeSelectingSleepMs?: pulumi.Input<number>;
    mergeWithRecompressionTtlTimeout?: pulumi.Input<number>;
    mergeWithTtlTimeout?: pulumi.Input<number>;
    minAgeToForceMergeOnPartitionOnly?: pulumi.Input<boolean>;
    minAgeToForceMergeSeconds?: pulumi.Input<number>;
    minBytesForWidePart?: pulumi.Input<number>;
    minRowsForWidePart?: pulumi.Input<number>;
    numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge?: pulumi.Input<number>;
    partsToDelayInsert?: pulumi.Input<number>;
    partsToThrowInsert?: pulumi.Input<number>;
    replicatedDeduplicationWindow?: pulumi.Input<number>;
    replicatedDeduplicationWindowSeconds?: pulumi.Input<number>;
    ttlOnlyDropParts?: pulumi.Input<boolean>;
}

export interface MdbClickhouseClusterClickhouseConfigRabbitmq {
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vhost?: pulumi.Input<string>;
}

export interface MdbClickhouseClusterClickhouseResources {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface MdbClickhouseClusterCloudStorage {
    dataCacheEnabled?: pulumi.Input<boolean>;
    dataCacheMaxSize?: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    moveFactor?: pulumi.Input<number>;
    preferNotToMerge?: pulumi.Input<boolean>;
}

export interface MdbClickhouseClusterDatabase {
    name: pulumi.Input<string>;
}

export interface MdbClickhouseClusterFormatSchema {
    name: pulumi.Input<string>;
    type: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface MdbClickhouseClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    shardName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbClickhouseClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbClickhouseClusterMlModel {
    name: pulumi.Input<string>;
    type: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface MdbClickhouseClusterShard {
    name: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.MdbClickhouseClusterShardResources>;
    weight?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterShardGroup {
    description?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    shardNames: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbClickhouseClusterShardResources {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface MdbClickhouseClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbClickhouseClusterUser {
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterUserPermission>[]>;
    quotas?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterUserQuota>[]>;
    settings?: pulumi.Input<inputs.MdbClickhouseClusterUserSettings>;
}

export interface MdbClickhouseClusterUserPermission {
    databaseName: pulumi.Input<string>;
}

export interface MdbClickhouseClusterUserQuota {
    errors?: pulumi.Input<number>;
    executionTime?: pulumi.Input<number>;
    intervalDuration: pulumi.Input<number>;
    queries?: pulumi.Input<number>;
    readRows?: pulumi.Input<number>;
    resultRows?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterUserSettings {
    addHttpCorsHeader?: pulumi.Input<boolean>;
    allowDdl?: pulumi.Input<boolean>;
    allowIntrospectionFunctions?: pulumi.Input<boolean>;
    allowSuspiciousLowCardinalityTypes?: pulumi.Input<boolean>;
    asyncInsert?: pulumi.Input<boolean>;
    asyncInsertBusyTimeout?: pulumi.Input<number>;
    asyncInsertMaxDataSize?: pulumi.Input<number>;
    asyncInsertStaleTimeout?: pulumi.Input<number>;
    asyncInsertThreads?: pulumi.Input<number>;
    cancelHttpReadonlyQueriesOnClientClose?: pulumi.Input<boolean>;
    compile?: pulumi.Input<boolean>;
    compileExpressions?: pulumi.Input<boolean>;
    connectTimeout?: pulumi.Input<number>;
    connectTimeoutWithFailover?: pulumi.Input<number>;
    countDistinctImplementation?: pulumi.Input<string>;
    distinctOverflowMode?: pulumi.Input<string>;
    distributedAggregationMemoryEfficient?: pulumi.Input<boolean>;
    distributedDdlTaskTimeout?: pulumi.Input<number>;
    distributedProductMode?: pulumi.Input<string>;
    emptyResultForAggregationByEmptySet?: pulumi.Input<boolean>;
    enableHttpCompression?: pulumi.Input<boolean>;
    fallbackToStaleReplicasForDistributedQueries?: pulumi.Input<boolean>;
    flattenNested?: pulumi.Input<boolean>;
    forceIndexByDate?: pulumi.Input<boolean>;
    forcePrimaryKey?: pulumi.Input<boolean>;
    groupByOverflowMode?: pulumi.Input<string>;
    groupByTwoLevelThreshold?: pulumi.Input<number>;
    groupByTwoLevelThresholdBytes?: pulumi.Input<number>;
    httpConnectionTimeout?: pulumi.Input<number>;
    httpHeadersProgressInterval?: pulumi.Input<number>;
    httpReceiveTimeout?: pulumi.Input<number>;
    httpSendTimeout?: pulumi.Input<number>;
    inputFormatDefaultsForOmittedFields?: pulumi.Input<boolean>;
    inputFormatImportNestedJson?: pulumi.Input<boolean>;
    inputFormatParallelParsing?: pulumi.Input<boolean>;
    inputFormatValuesInterpretExpressions?: pulumi.Input<boolean>;
    insertKeeperMaxRetries?: pulumi.Input<number>;
    insertNullAsDefault?: pulumi.Input<boolean>;
    insertQuorum?: pulumi.Input<number>;
    insertQuorumTimeout?: pulumi.Input<number>;
    joinOverflowMode?: pulumi.Input<string>;
    joinUseNulls?: pulumi.Input<boolean>;
    joinedSubqueryRequiresAlias?: pulumi.Input<boolean>;
    localFilesystemReadMethod?: pulumi.Input<string>;
    lowCardinalityAllowInNativeFormat?: pulumi.Input<boolean>;
    maxAstDepth?: pulumi.Input<number>;
    maxAstElements?: pulumi.Input<number>;
    maxBlockSize?: pulumi.Input<number>;
    maxBytesBeforeExternalGroupBy?: pulumi.Input<number>;
    maxBytesBeforeExternalSort?: pulumi.Input<number>;
    maxBytesInDistinct?: pulumi.Input<number>;
    maxBytesInJoin?: pulumi.Input<number>;
    maxBytesInSet?: pulumi.Input<number>;
    maxBytesToRead?: pulumi.Input<number>;
    maxBytesToSort?: pulumi.Input<number>;
    maxBytesToTransfer?: pulumi.Input<number>;
    maxColumnsToRead?: pulumi.Input<number>;
    maxConcurrentQueriesForUser?: pulumi.Input<number>;
    maxExecutionTime?: pulumi.Input<number>;
    maxExpandedAstElements?: pulumi.Input<number>;
    maxFinalThreads?: pulumi.Input<number>;
    maxHttpGetRedirects?: pulumi.Input<number>;
    maxInsertBlockSize?: pulumi.Input<number>;
    maxMemoryUsage?: pulumi.Input<number>;
    maxMemoryUsageForUser?: pulumi.Input<number>;
    maxNetworkBandwidth?: pulumi.Input<number>;
    maxNetworkBandwidthForUser?: pulumi.Input<number>;
    maxParserDepth?: pulumi.Input<number>;
    maxQuerySize?: pulumi.Input<number>;
    maxReadBufferSize?: pulumi.Input<number>;
    maxReplicaDelayForDistributedQueries?: pulumi.Input<number>;
    maxResultBytes?: pulumi.Input<number>;
    maxResultRows?: pulumi.Input<number>;
    maxRowsInDistinct?: pulumi.Input<number>;
    maxRowsInJoin?: pulumi.Input<number>;
    maxRowsInSet?: pulumi.Input<number>;
    maxRowsToGroupBy?: pulumi.Input<number>;
    maxRowsToRead?: pulumi.Input<number>;
    maxRowsToSort?: pulumi.Input<number>;
    maxRowsToTransfer?: pulumi.Input<number>;
    maxTemporaryColumns?: pulumi.Input<number>;
    maxTemporaryDataOnDiskSizeForQuery?: pulumi.Input<number>;
    maxTemporaryDataOnDiskSizeForUser?: pulumi.Input<number>;
    maxTemporaryNonConstColumns?: pulumi.Input<number>;
    maxThreads?: pulumi.Input<number>;
    memoryOvercommitRatioDenominator?: pulumi.Input<number>;
    memoryOvercommitRatioDenominatorForUser?: pulumi.Input<number>;
    memoryProfilerSampleProbability?: pulumi.Input<number>;
    memoryProfilerStep?: pulumi.Input<number>;
    memoryUsageOvercommitMaxWaitMicroseconds?: pulumi.Input<number>;
    mergeTreeMaxBytesToUseCache?: pulumi.Input<number>;
    mergeTreeMaxRowsToUseCache?: pulumi.Input<number>;
    mergeTreeMinBytesForConcurrentRead?: pulumi.Input<number>;
    mergeTreeMinRowsForConcurrentRead?: pulumi.Input<number>;
    minBytesToUseDirectIo?: pulumi.Input<number>;
    minCountToCompile?: pulumi.Input<number>;
    minCountToCompileExpression?: pulumi.Input<number>;
    minExecutionSpeed?: pulumi.Input<number>;
    minExecutionSpeedBytes?: pulumi.Input<number>;
    minInsertBlockSizeBytes?: pulumi.Input<number>;
    minInsertBlockSizeRows?: pulumi.Input<number>;
    outputFormatJsonQuote64bitIntegers?: pulumi.Input<boolean>;
    outputFormatJsonQuoteDenormals?: pulumi.Input<boolean>;
    priority?: pulumi.Input<number>;
    quotaMode?: pulumi.Input<string>;
    readOverflowMode?: pulumi.Input<string>;
    readonly?: pulumi.Input<number>;
    receiveTimeout?: pulumi.Input<number>;
    remoteFilesystemReadMethod?: pulumi.Input<string>;
    replicationAlterPartitionsSync?: pulumi.Input<number>;
    resultOverflowMode?: pulumi.Input<string>;
    selectSequentialConsistency?: pulumi.Input<boolean>;
    sendProgressInHttpHeaders?: pulumi.Input<boolean>;
    sendTimeout?: pulumi.Input<number>;
    setOverflowMode?: pulumi.Input<string>;
    skipUnavailableShards?: pulumi.Input<boolean>;
    sortOverflowMode?: pulumi.Input<string>;
    timeoutBeforeCheckingExecutionSpeed?: pulumi.Input<number>;
    timeoutOverflowMode?: pulumi.Input<string>;
    transferOverflowMode?: pulumi.Input<string>;
    transformNullIn?: pulumi.Input<boolean>;
    useUncompressedCache?: pulumi.Input<boolean>;
    waitForAsyncInsert?: pulumi.Input<boolean>;
    waitForAsyncInsertTimeout?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterZookeeper {
    resources?: pulumi.Input<inputs.MdbClickhouseClusterZookeeperResources>;
}

export interface MdbClickhouseClusterZookeeperResources {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface MdbElasticsearchClusterConfig {
    adminPassword: pulumi.Input<string>;
    dataNode: pulumi.Input<inputs.MdbElasticsearchClusterConfigDataNode>;
    edition?: pulumi.Input<string>;
    masterNode?: pulumi.Input<inputs.MdbElasticsearchClusterConfigMasterNode>;
    plugins?: pulumi.Input<pulumi.Input<string>[]>;
    version?: pulumi.Input<string>;
}

export interface MdbElasticsearchClusterConfigDataNode {
    resources: pulumi.Input<inputs.MdbElasticsearchClusterConfigDataNodeResources>;
}

export interface MdbElasticsearchClusterConfigDataNodeResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbElasticsearchClusterConfigMasterNode {
    resources: pulumi.Input<inputs.MdbElasticsearchClusterConfigMasterNodeResources>;
}

export interface MdbElasticsearchClusterConfigMasterNodeResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbElasticsearchClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbElasticsearchClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbElasticsearchClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbGreenplumClusterAccess {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
    webSql?: pulumi.Input<boolean>;
}

export interface MdbGreenplumClusterBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbGreenplumClusterCloudStorage {
    enable?: pulumi.Input<boolean>;
}

export interface MdbGreenplumClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbGreenplumClusterMasterHost {
    assignPublicIp: pulumi.Input<boolean>;
    fqdn: pulumi.Input<string>;
}

export interface MdbGreenplumClusterMasterSubcluster {
    resources: pulumi.Input<inputs.MdbGreenplumClusterMasterSubclusterResources>;
}

export interface MdbGreenplumClusterMasterSubclusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbGreenplumClusterPoolerConfig {
    poolClientIdleTimeout?: pulumi.Input<number>;
    poolSize?: pulumi.Input<number>;
    poolingMode?: pulumi.Input<string>;
}

export interface MdbGreenplumClusterPxfConfig {
    connectionTimeout?: pulumi.Input<number>;
    maxThreads?: pulumi.Input<number>;
    poolAllowCoreThreadTimeout?: pulumi.Input<boolean>;
    poolCoreSize?: pulumi.Input<number>;
    poolMaxSize?: pulumi.Input<number>;
    poolQueueCapacity?: pulumi.Input<number>;
    uploadTimeout?: pulumi.Input<number>;
    xms?: pulumi.Input<number>;
    xmx?: pulumi.Input<number>;
}

export interface MdbGreenplumClusterSegmentHost {
    fqdn: pulumi.Input<string>;
}

export interface MdbGreenplumClusterSegmentSubcluster {
    resources: pulumi.Input<inputs.MdbGreenplumClusterSegmentSubclusterResources>;
}

export interface MdbGreenplumClusterSegmentSubclusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbGreenplumClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbKafkaClusterConfig {
    access?: pulumi.Input<inputs.MdbKafkaClusterConfigAccess>;
    assignPublicIp?: pulumi.Input<boolean>;
    brokersCount?: pulumi.Input<number>;
    diskSizeAutoscaling?: pulumi.Input<inputs.MdbKafkaClusterConfigDiskSizeAutoscaling>;
    kafka: pulumi.Input<inputs.MdbKafkaClusterConfigKafka>;
    schemaRegistry?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    unmanagedTopics?: pulumi.Input<boolean>;
    version: pulumi.Input<string>;
    zones: pulumi.Input<pulumi.Input<string>[]>;
    zookeeper?: pulumi.Input<inputs.MdbKafkaClusterConfigZookeeper>;
}

export interface MdbKafkaClusterConfigAccess {
    dataTransfer?: pulumi.Input<boolean>;
}

export interface MdbKafkaClusterConfigDiskSizeAutoscaling {
    diskSizeLimit: pulumi.Input<number>;
    emergencyUsageThreshold?: pulumi.Input<number>;
    plannedUsageThreshold?: pulumi.Input<number>;
}

export interface MdbKafkaClusterConfigKafka {
    kafkaConfig?: pulumi.Input<inputs.MdbKafkaClusterConfigKafkaKafkaConfig>;
    resources: pulumi.Input<inputs.MdbKafkaClusterConfigKafkaResources>;
}

export interface MdbKafkaClusterConfigKafkaKafkaConfig {
    autoCreateTopicsEnable?: pulumi.Input<boolean>;
    compressionType?: pulumi.Input<string>;
    defaultReplicationFactor?: pulumi.Input<string>;
    logFlushIntervalMessages?: pulumi.Input<string>;
    logFlushIntervalMs?: pulumi.Input<string>;
    logFlushSchedulerIntervalMs?: pulumi.Input<string>;
    logPreallocate?: pulumi.Input<boolean>;
    logRetentionBytes?: pulumi.Input<string>;
    logRetentionHours?: pulumi.Input<string>;
    logRetentionMinutes?: pulumi.Input<string>;
    logRetentionMs?: pulumi.Input<string>;
    logSegmentBytes?: pulumi.Input<string>;
    messageMaxBytes?: pulumi.Input<string>;
    numPartitions?: pulumi.Input<string>;
    offsetsRetentionMinutes?: pulumi.Input<string>;
    replicaFetchMaxBytes?: pulumi.Input<string>;
    saslEnabledMechanisms?: pulumi.Input<pulumi.Input<string>[]>;
    socketReceiveBufferBytes?: pulumi.Input<string>;
    socketSendBufferBytes?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbKafkaClusterConfigKafkaResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbKafkaClusterConfigZookeeper {
    resources?: pulumi.Input<inputs.MdbKafkaClusterConfigZookeeperResources>;
}

export interface MdbKafkaClusterConfigZookeeperResources {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface MdbKafkaClusterHost {
    assignPublicIp: pulumi.Input<boolean>;
    health: pulumi.Input<string>;
    name: pulumi.Input<string>;
    role: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}

export interface MdbKafkaClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbKafkaClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbKafkaClusterTopic {
    name: pulumi.Input<string>;
    partitions: pulumi.Input<number>;
    replicationFactor: pulumi.Input<number>;
    topicConfig?: pulumi.Input<inputs.MdbKafkaClusterTopicTopicConfig>;
}

export interface MdbKafkaClusterTopicTopicConfig {
    cleanupPolicy?: pulumi.Input<string>;
    compressionType?: pulumi.Input<string>;
    deleteRetentionMs?: pulumi.Input<string>;
    fileDeleteDelayMs?: pulumi.Input<string>;
    flushMessages?: pulumi.Input<string>;
    flushMs?: pulumi.Input<string>;
    maxMessageBytes?: pulumi.Input<string>;
    minCompactionLagMs?: pulumi.Input<string>;
    minInsyncReplicas?: pulumi.Input<string>;
    preallocate?: pulumi.Input<boolean>;
    retentionBytes?: pulumi.Input<string>;
    retentionMs?: pulumi.Input<string>;
    segmentBytes?: pulumi.Input<string>;
}

export interface MdbKafkaClusterUser {
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbKafkaClusterUserPermission>[]>;
}

export interface MdbKafkaClusterUserPermission {
    allowHosts?: pulumi.Input<pulumi.Input<string>[]>;
    role: pulumi.Input<string>;
    topicName: pulumi.Input<string>;
}

export interface MdbKafkaConnectorConnectorConfigMirrormaker {
    replicationFactor: pulumi.Input<number>;
    sourceCluster: pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster>;
    targetCluster: pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster>;
    topics: pulumi.Input<string>;
}

export interface MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster {
    alias?: pulumi.Input<string>;
    externalClusters?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster>[]>;
    thisClusters?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster>[]>;
}

export interface MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster {
    bootstrapServers: pulumi.Input<string>;
    saslMechanism?: pulumi.Input<string>;
    saslPassword?: pulumi.Input<string>;
    saslUsername?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
}

export interface MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster {
}

export interface MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster {
    alias?: pulumi.Input<string>;
    externalClusters?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster>[]>;
    thisClusters?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster>[]>;
}

export interface MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster {
    bootstrapServers: pulumi.Input<string>;
    saslMechanism?: pulumi.Input<string>;
    saslPassword?: pulumi.Input<string>;
    saslUsername?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
}

export interface MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster {
}

export interface MdbKafkaConnectorConnectorConfigS3Sink {
    fileCompressionType: pulumi.Input<string>;
    fileMaxRecords?: pulumi.Input<number>;
    s3Connection: pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigS3SinkS3Connection>;
    topics: pulumi.Input<string>;
}

export interface MdbKafkaConnectorConnectorConfigS3SinkS3Connection {
    bucketName: pulumi.Input<string>;
    externalS3s: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3>[]>;
}

export interface MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3 {
    accessKeyId?: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretAccessKey?: pulumi.Input<string>;
}

export interface MdbKafkaTopicTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbKafkaTopicTopicConfig {
    cleanupPolicy?: pulumi.Input<string>;
    compressionType?: pulumi.Input<string>;
    deleteRetentionMs?: pulumi.Input<string>;
    fileDeleteDelayMs?: pulumi.Input<string>;
    flushMessages?: pulumi.Input<string>;
    flushMs?: pulumi.Input<string>;
    maxMessageBytes?: pulumi.Input<string>;
    minCompactionLagMs?: pulumi.Input<string>;
    minInsyncReplicas?: pulumi.Input<string>;
    preallocate?: pulumi.Input<boolean>;
    retentionBytes?: pulumi.Input<string>;
    retentionMs?: pulumi.Input<string>;
    segmentBytes?: pulumi.Input<string>;
}

export interface MdbKafkaUserPermission {
    allowHosts?: pulumi.Input<pulumi.Input<string>[]>;
    role: pulumi.Input<string>;
    topicName: pulumi.Input<string>;
}

export interface MdbKafkaUserTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbMongodbClusterClusterConfig {
    access?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigAccess>;
    backupRetainPeriodDays?: pulumi.Input<number>;
    backupWindowStart?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigBackupWindowStart>;
    featureCompatibilityVersion?: pulumi.Input<string>;
    mongocfg?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongocfg>;
    mongod?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongod>;
    mongos?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongos>;
    performanceDiagnostics?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigPerformanceDiagnostics>;
    version: pulumi.Input<string>;
}

export interface MdbMongodbClusterClusterConfigAccess {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
}

export interface MdbMongodbClusterClusterConfigBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbMongodbClusterClusterConfigMongocfg {
    net?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongocfgNet>;
    operationProfiling?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongocfgOperationProfiling>;
    storage?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongocfgStorage>;
}

export interface MdbMongodbClusterClusterConfigMongocfgNet {
    maxIncomingConnections?: pulumi.Input<number>;
}

export interface MdbMongodbClusterClusterConfigMongocfgOperationProfiling {
    mode?: pulumi.Input<string>;
    slowOpThreshold?: pulumi.Input<number>;
}

export interface MdbMongodbClusterClusterConfigMongocfgStorage {
    wiredTiger?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongocfgStorageWiredTiger>;
}

export interface MdbMongodbClusterClusterConfigMongocfgStorageWiredTiger {
    cacheSizeGb?: pulumi.Input<number>;
}

export interface MdbMongodbClusterClusterConfigMongod {
    auditLog?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodAuditLog>;
    net?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodNet>;
    operationProfiling?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodOperationProfiling>;
    security?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodSecurity>;
    setParameter?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodSetParameter>;
    storage?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodStorage>;
}

export interface MdbMongodbClusterClusterConfigMongodAuditLog {
    filter?: pulumi.Input<string>;
    runtimeConfiguration?: pulumi.Input<boolean>;
}

export interface MdbMongodbClusterClusterConfigMongodNet {
    compressors?: pulumi.Input<pulumi.Input<string>[]>;
    maxIncomingConnections?: pulumi.Input<number>;
}

export interface MdbMongodbClusterClusterConfigMongodOperationProfiling {
    mode?: pulumi.Input<string>;
    slowOpSampleRate?: pulumi.Input<number>;
    slowOpThreshold?: pulumi.Input<number>;
}

export interface MdbMongodbClusterClusterConfigMongodSecurity {
    enableEncryption?: pulumi.Input<boolean>;
    kmip?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodSecurityKmip>;
}

export interface MdbMongodbClusterClusterConfigMongodSecurityKmip {
    clientCertificate?: pulumi.Input<string>;
    keyIdentifier?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    serverCa?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
}

export interface MdbMongodbClusterClusterConfigMongodSetParameter {
    auditAuthorizationSuccess?: pulumi.Input<boolean>;
    enableFlowControl?: pulumi.Input<boolean>;
    minSnapshotHistoryWindowInSeconds?: pulumi.Input<number>;
}

export interface MdbMongodbClusterClusterConfigMongodStorage {
    journal?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodStorageJournal>;
    wiredTiger?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodStorageWiredTiger>;
}

export interface MdbMongodbClusterClusterConfigMongodStorageJournal {
    commitInterval?: pulumi.Input<number>;
}

export interface MdbMongodbClusterClusterConfigMongodStorageWiredTiger {
    blockCompressor?: pulumi.Input<string>;
    cacheSizeGb?: pulumi.Input<number>;
    prefixCompression?: pulumi.Input<boolean>;
}

export interface MdbMongodbClusterClusterConfigMongos {
    net?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongosNet>;
}

export interface MdbMongodbClusterClusterConfigMongosNet {
    compressors?: pulumi.Input<pulumi.Input<string>[]>;
    maxIncomingConnections?: pulumi.Input<number>;
}

export interface MdbMongodbClusterClusterConfigPerformanceDiagnostics {
    enabled?: pulumi.Input<boolean>;
}

export interface MdbMongodbClusterDatabase {
    name: pulumi.Input<string>;
}

export interface MdbMongodbClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    health?: pulumi.Input<string>;
    hostParameters?: pulumi.Input<inputs.MdbMongodbClusterHostHostParameters>;
    name?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    shardName?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}

export interface MdbMongodbClusterHostHostParameters {
    hidden?: pulumi.Input<boolean>;
    priority?: pulumi.Input<number>;
    secondaryDelaySecs?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface MdbMongodbClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbMongodbClusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbMongodbClusterResourcesMongocfg {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbMongodbClusterResourcesMongod {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbMongodbClusterResourcesMongoinfra {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbMongodbClusterResourcesMongos {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbMongodbClusterRestore {
    backupId: pulumi.Input<string>;
    time?: pulumi.Input<string>;
}

export interface MdbMongodbClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbMongodbClusterUser {
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterUserPermission>[]>;
}

export interface MdbMongodbClusterUserPermission {
    databaseName: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbMongodbUserPermission {
    databaseName: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbMysqlClusterAccess {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
    webSql?: pulumi.Input<boolean>;
}

export interface MdbMysqlClusterBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbMysqlClusterDatabase {
    name: pulumi.Input<string>;
}

export interface MdbMysqlClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    backupPriority?: pulumi.Input<number>;
    fqdn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    replicationSource?: pulumi.Input<string>;
    replicationSourceName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbMysqlClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbMysqlClusterPerformanceDiagnostics {
    enabled?: pulumi.Input<boolean>;
    sessionsSamplingInterval: pulumi.Input<number>;
    statementsSamplingInterval: pulumi.Input<number>;
}

export interface MdbMysqlClusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbMysqlClusterRestore {
    backupId: pulumi.Input<string>;
    time?: pulumi.Input<string>;
}

export interface MdbMysqlClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbMysqlClusterUser {
    authenticationPlugin?: pulumi.Input<string>;
    connectionLimits?: pulumi.Input<inputs.MdbMysqlClusterUserConnectionLimits>;
    globalPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbMysqlClusterUserPermission>[]>;
}

export interface MdbMysqlClusterUserConnectionLimits {
    maxConnectionsPerHour?: pulumi.Input<number>;
    maxQuestionsPerHour?: pulumi.Input<number>;
    maxUpdatesPerHour?: pulumi.Input<number>;
    maxUserConnections?: pulumi.Input<number>;
}

export interface MdbMysqlClusterUserPermission {
    databaseName: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbMysqlDatabaseTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbMysqlUserConnectionLimits {
    maxConnectionsPerHour?: pulumi.Input<number>;
    maxQuestionsPerHour?: pulumi.Input<number>;
    maxUpdatesPerHour?: pulumi.Input<number>;
    maxUserConnections?: pulumi.Input<number>;
}

export interface MdbMysqlUserPermission {
    databaseName: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbMysqlUserTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbOpensearchClusterAuthSettings {
    saml?: pulumi.Input<inputs.MdbOpensearchClusterAuthSettingsSaml>;
}

export interface MdbOpensearchClusterAuthSettingsSaml {
    dashboardsUrl: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
    idpEntityId: pulumi.Input<string>;
    idpMetadataFileContent: pulumi.Input<string>;
    rolesKey?: pulumi.Input<string>;
    spEntityId: pulumi.Input<string>;
    subjectKey?: pulumi.Input<string>;
}

export interface MdbOpensearchClusterConfig {
    access?: pulumi.Input<inputs.MdbOpensearchClusterConfigAccess>;
    adminPassword: pulumi.Input<string>;
    dashboards?: pulumi.Input<inputs.MdbOpensearchClusterConfigDashboards>;
    opensearch?: pulumi.Input<inputs.MdbOpensearchClusterConfigOpensearch>;
    version?: pulumi.Input<string>;
}

export interface MdbOpensearchClusterConfigAccess {
    dataTransfer?: pulumi.Input<boolean>;
    serverless?: pulumi.Input<boolean>;
}

export interface MdbOpensearchClusterConfigDashboards {
    nodeGroups?: pulumi.Input<pulumi.Input<inputs.MdbOpensearchClusterConfigDashboardsNodeGroup>[]>;
}

export interface MdbOpensearchClusterConfigDashboardsNodeGroup {
    assignPublicIp?: pulumi.Input<boolean>;
    hostsCount: pulumi.Input<number>;
    name: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.MdbOpensearchClusterConfigDashboardsNodeGroupResources>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    zoneIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbOpensearchClusterConfigDashboardsNodeGroupResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbOpensearchClusterConfigOpensearch {
    nodeGroups?: pulumi.Input<pulumi.Input<inputs.MdbOpensearchClusterConfigOpensearchNodeGroup>[]>;
    plugins?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbOpensearchClusterConfigOpensearchNodeGroup {
    assignPublicIp?: pulumi.Input<boolean>;
    hostsCount: pulumi.Input<number>;
    name: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.MdbOpensearchClusterConfigOpensearchNodeGroupResources>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    zoneIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbOpensearchClusterConfigOpensearchNodeGroupResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbOpensearchClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    nodeGroup?: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface MdbOpensearchClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbOpensearchClusterTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: pulumi.Input<string>;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: pulumi.Input<string>;
}

export interface MdbPostgresqlClusterConfig {
    access?: pulumi.Input<inputs.MdbPostgresqlClusterConfigAccess>;
    autofailover?: pulumi.Input<boolean>;
    backupRetainPeriodDays?: pulumi.Input<number>;
    backupWindowStart?: pulumi.Input<inputs.MdbPostgresqlClusterConfigBackupWindowStart>;
    diskSizeAutoscaling?: pulumi.Input<inputs.MdbPostgresqlClusterConfigDiskSizeAutoscaling>;
    performanceDiagnostics?: pulumi.Input<inputs.MdbPostgresqlClusterConfigPerformanceDiagnostics>;
    poolerConfig?: pulumi.Input<inputs.MdbPostgresqlClusterConfigPoolerConfig>;
    postgresqlConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    resources: pulumi.Input<inputs.MdbPostgresqlClusterConfigResources>;
    version: pulumi.Input<string>;
}

export interface MdbPostgresqlClusterConfigAccess {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
    serverless?: pulumi.Input<boolean>;
    webSql?: pulumi.Input<boolean>;
}

export interface MdbPostgresqlClusterConfigBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbPostgresqlClusterConfigDiskSizeAutoscaling {
    diskSizeLimit: pulumi.Input<number>;
    emergencyUsageThreshold?: pulumi.Input<number>;
    plannedUsageThreshold?: pulumi.Input<number>;
}

export interface MdbPostgresqlClusterConfigPerformanceDiagnostics {
    enabled?: pulumi.Input<boolean>;
    sessionsSamplingInterval: pulumi.Input<number>;
    statementsSamplingInterval: pulumi.Input<number>;
}

export interface MdbPostgresqlClusterConfigPoolerConfig {
    poolDiscard?: pulumi.Input<boolean>;
    poolingMode?: pulumi.Input<string>;
}

export interface MdbPostgresqlClusterConfigResources {
    diskSize: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbPostgresqlClusterDatabase {
    extensions?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterDatabaseExtension>[]>;
    lcCollate?: pulumi.Input<string>;
    lcType?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    owner: pulumi.Input<string>;
    templateDb?: pulumi.Input<string>;
}

export interface MdbPostgresqlClusterDatabaseExtension {
    name: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface MdbPostgresqlClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    replicationSource?: pulumi.Input<string>;
    replicationSourceName?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbPostgresqlClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbPostgresqlClusterRestore {
    backupId: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    timeInclusive?: pulumi.Input<boolean>;
}

export interface MdbPostgresqlClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbPostgresqlClusterUser {
    connLimit?: pulumi.Input<number>;
    grants?: pulumi.Input<pulumi.Input<string>[]>;
    login?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbPostgresqlClusterUserPermission>[]>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface MdbPostgresqlClusterUserPermission {
    databaseName: pulumi.Input<string>;
}

export interface MdbPostgresqlDatabaseExtension {
    name: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface MdbPostgresqlDatabaseTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbPostgresqlUserPermission {
    databaseName: pulumi.Input<string>;
}

export interface MdbPostgresqlUserTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbRedisClusterConfig {
    clientOutputBufferLimitNormal?: pulumi.Input<string>;
    clientOutputBufferLimitPubsub?: pulumi.Input<string>;
    databases?: pulumi.Input<number>;
    maxmemoryPercent?: pulumi.Input<number>;
    maxmemoryPolicy?: pulumi.Input<string>;
    notifyKeyspaceEvents?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    slowlogLogSlowerThan?: pulumi.Input<number>;
    slowlogMaxLen?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    version: pulumi.Input<string>;
}

export interface MdbRedisClusterDiskSizeAutoscaling {
    diskSizeLimit: pulumi.Input<number>;
    emergencyUsageThreshold?: pulumi.Input<number>;
    plannedUsageThreshold?: pulumi.Input<number>;
}

export interface MdbRedisClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    replicaPriority?: pulumi.Input<number>;
    shardName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbRedisClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbRedisClusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbRedisClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbSqlserverClusterBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbSqlserverClusterDatabase {
    name: pulumi.Input<string>;
}

export interface MdbSqlserverClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbSqlserverClusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbSqlserverClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MdbSqlserverClusterUser {
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbSqlserverClusterUserPermission>[]>;
}

export interface MdbSqlserverClusterUserPermission {
    databaseName: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MonitoringDashboardParametrization {
    /**
     * Dashboard parameter
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardParametrizationParameter>[]>;
    /**
     * Predefined selectors
     */
    selectors?: pulumi.Input<string>;
}

export interface MonitoringDashboardParametrizationParameter {
    /**
     * Custom parameter
     */
    customs?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardParametrizationParameterCustom>[]>;
    /**
     * Parameter description
     */
    description?: pulumi.Input<string>;
    /**
     * UI-visibility
     */
    hidden?: pulumi.Input<boolean>;
    /**
     * Parameter identifier
     */
    id: pulumi.Input<string>;
    /**
     * Label values parameter
     */
    labelValues?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardParametrizationParameterLabelValue>[]>;
    /**
     * Text parameter
     */
    texts?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardParametrizationParameterText>[]>;
    /**
     * UI-visible title of the parameter
     */
    title?: pulumi.Input<string>;
}

export interface MonitoringDashboardParametrizationParameterCustom {
    /**
     * Default value
     */
    defaultValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the multiselectable values of parameter
     */
    multiselectable?: pulumi.Input<boolean>;
    /**
     * Parameter values
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MonitoringDashboardParametrizationParameterLabelValue {
    /**
     * Default value
     */
    defaultValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Folder ID
     */
    folderId?: pulumi.Input<string>;
    /**
     * Required. Label key to list label values
     */
    labelKey: pulumi.Input<string>;
    /**
     * Specifies the multiselectable values of parameter
     */
    multiselectable?: pulumi.Input<boolean>;
    /**
     * Required. Selectors to select metric label values
     */
    selectors?: pulumi.Input<string>;
}

export interface MonitoringDashboardParametrizationParameterText {
    /**
     * Default value
     */
    defaultValue?: pulumi.Input<string>;
}

export interface MonitoringDashboardTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface MonitoringDashboardWidget {
    /**
     * Chart widget
     */
    charts?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChart>[]>;
    /**
     * Required. Widget layout position
     */
    positions?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetPosition>[]>;
    /**
     * Text widget
     */
    texts?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetText>[]>;
    /**
     * Title widget
     */
    titles?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetTitle>[]>;
}

export interface MonitoringDashboardWidgetChart {
    /**
     * Chart ID
     */
    chartId?: pulumi.Input<string>;
    /**
     * Chart description in dashboard (not enabled in UI)
     */
    description?: pulumi.Input<string>;
    /**
     * Enable legend under chart
     */
    displayLegend?: pulumi.Input<boolean>;
    /**
     * Fixed time interval for chart
     */
    freeze?: pulumi.Input<string>;
    /**
     * Name hiding settings
     */
    nameHidingSettings?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartNameHidingSetting>[]>;
    /**
     * Queries
     */
    queries?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartQuery>[]>;
    seriesOverrides?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartSeriesOverride>[]>;
    /**
     * Chart widget title
     */
    title?: pulumi.Input<string>;
    /**
     * Visualization settings
     */
    visualizationSettings?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartVisualizationSetting>[]>;
}

export interface MonitoringDashboardWidgetChartNameHidingSetting {
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if we want to show concrete series names only, false if we want to hide concrete series names
     */
    positive?: pulumi.Input<boolean>;
}

export interface MonitoringDashboardWidgetChartQuery {
    /**
     * Downsampling settings
     */
    downsamplings?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartQueryDownsampling>[]>;
    /**
     * Downsampling settings
     */
    targets?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartQueryTarget>[]>;
}

export interface MonitoringDashboardWidgetChartQueryDownsampling {
    /**
     * Disable downsampling
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Parameters for filling gaps in data
     */
    gapFilling?: pulumi.Input<string>;
    /**
     * Function that is used for downsampling
     */
    gridAggregation?: pulumi.Input<string>;
    /**
     * Time interval (grid) for downsampling in milliseconds. Points in the specified range are aggregated into one time point
     */
    gridInterval?: pulumi.Input<number>;
    /**
     * Maximum number of points to be returned
     */
    maxPoints?: pulumi.Input<number>;
}

export interface MonitoringDashboardWidgetChartQueryTarget {
    /**
     * Checks that target is visible or invisible
     */
    hidden?: pulumi.Input<boolean>;
    /**
     * Required. Query
     */
    query?: pulumi.Input<string>;
    /**
     * Text mode
     */
    textMode?: pulumi.Input<boolean>;
}

export interface MonitoringDashboardWidgetChartSeriesOverride {
    /**
     * Series name
     */
    name?: pulumi.Input<string>;
    /**
     * Override settings
     */
    settings?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartSeriesOverrideSetting>[]>;
    /**
     * Target index
     */
    targetIndex?: pulumi.Input<string>;
}

export interface MonitoringDashboardWidgetChartSeriesOverrideSetting {
    /**
     * Series color or empty
     */
    color?: pulumi.Input<string>;
    /**
     * Stack grow down
     */
    growDown?: pulumi.Input<boolean>;
    /**
     * Series name or empty
     */
    name?: pulumi.Input<string>;
    /**
     * Stack name or empty
     */
    stackName?: pulumi.Input<string>;
    /**
     * Type
     */
    type?: pulumi.Input<string>;
    /**
     * Yaxis position
     */
    yaxisPosition?: pulumi.Input<string>;
}

export interface MonitoringDashboardWidgetChartVisualizationSetting {
    /**
     * Aggregation
     */
    aggregation?: pulumi.Input<string>;
    /**
     * Color scheme settings
     */
    colorSchemeSettings?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSetting>[]>;
    /**
     * Heatmap settings
     */
    heatmapSettings?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartVisualizationSettingHeatmapSetting>[]>;
    /**
     * Interpolate
     */
    interpolate?: pulumi.Input<string>;
    /**
     * Normalize
     */
    normalize?: pulumi.Input<boolean>;
    /**
     * Show chart labels
     */
    showLabels?: pulumi.Input<boolean>;
    /**
     * Inside chart title
     */
    title?: pulumi.Input<string>;
    /**
     * Visualization type
     */
    type?: pulumi.Input<string>;
    /**
     * Y axis settings
     */
    yaxisSettings?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartVisualizationSettingYaxisSetting>[]>;
}

export interface MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSetting {
    /**
     * Automatic color scheme
     */
    automatics?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomatic>[]>;
    /**
     * Gradient color scheme
     */
    gradients?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradient>[]>;
    /**
     * Standard color scheme
     */
    standards?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandard>[]>;
}

export interface MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomatic {
}

export interface MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradient {
    /**
     * Gradient green value
     */
    greenValue?: pulumi.Input<string>;
    /**
     * Gradient red value
     */
    redValue?: pulumi.Input<string>;
    /**
     * Gradient violet_value
     */
    violetValue?: pulumi.Input<string>;
    /**
     * Gradient yellow value
     */
    yellowValue?: pulumi.Input<string>;
}

export interface MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandard {
}

export interface MonitoringDashboardWidgetChartVisualizationSettingHeatmapSetting {
    /**
     * Heatmap green value
     */
    greenValue?: pulumi.Input<string>;
    /**
     * Heatmap red value
     */
    redValue?: pulumi.Input<string>;
    /**
     * Heatmap violet_value
     */
    violetValue?: pulumi.Input<string>;
    /**
     * Heatmap yellow value
     */
    yellowValue?: pulumi.Input<string>;
}

export interface MonitoringDashboardWidgetChartVisualizationSettingYaxisSetting {
    /**
     * Left Y axis settings
     */
    lefts?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeft>[]>;
    /**
     * Right Y axis settings
     */
    rights?: pulumi.Input<pulumi.Input<inputs.MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRight>[]>;
}

export interface MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeft {
    /**
     * Max value in extended number format or empty
     */
    max?: pulumi.Input<string>;
    /**
     * Min value in extended number format or empty
     */
    min?: pulumi.Input<string>;
    /**
     * Tick value precision (null as default, 0-7 in other cases)
     */
    precision?: pulumi.Input<number>;
    /**
     * Title or empty
     */
    title?: pulumi.Input<string>;
    /**
     * Type
     */
    type?: pulumi.Input<string>;
    /**
     * Unit format
     */
    unitFormat?: pulumi.Input<string>;
}

export interface MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRight {
    /**
     * Max value in extended number format or empty
     */
    max?: pulumi.Input<string>;
    /**
     * Min value in extended number format or empty
     */
    min?: pulumi.Input<string>;
    /**
     * Tick value precision (null as default, 0-7 in other cases)
     */
    precision?: pulumi.Input<number>;
    /**
     * Title or empty
     */
    title?: pulumi.Input<string>;
    /**
     * Type
     */
    type?: pulumi.Input<string>;
    /**
     * Unit format
     */
    unitFormat?: pulumi.Input<string>;
}

export interface MonitoringDashboardWidgetPosition {
    /**
     * Required. Height
     */
    h?: pulumi.Input<number>;
    /**
     * Required. Weight
     */
    w?: pulumi.Input<number>;
    /**
     * Required. X-axis top-left corner coordinate
     */
    x?: pulumi.Input<number>;
    /**
     * Required. Y-axis top-left corner coordinate
     */
    y?: pulumi.Input<number>;
}

export interface MonitoringDashboardWidgetText {
    /**
     * Text
     */
    text?: pulumi.Input<string>;
}

export interface MonitoringDashboardWidgetTitle {
    /**
     * Title size
     */
    size?: pulumi.Input<string>;
    /**
     * Title text
     */
    text: pulumi.Input<string>;
}

export interface OrganizationmanagerGroupIamMemberTimeouts {
    default?: pulumi.Input<string>;
}

export interface OrganizationmanagerGroupMembershipTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface OrganizationmanagerGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface OrganizationmanagerOrganizationIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface OrganizationmanagerOrganizationIamMemberTimeouts {
    default?: pulumi.Input<string>;
}

export interface OrganizationmanagerOsLoginSettingsSshCertificateSettings {
    enabled?: pulumi.Input<boolean>;
}

export interface OrganizationmanagerOsLoginSettingsTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface OrganizationmanagerOsLoginSettingsUserSshKeySettings {
    allowManageOwnKeys?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
}

export interface OrganizationmanagerSamlFederationSecuritySettings {
    encryptedAssertions: pulumi.Input<boolean>;
}

export interface OrganizationmanagerSamlFederationTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface OrganizationmanagerSamlFederationUserAccountTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface OrganizationmanagerUserSshKeyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ResourcemanagerCloudIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface ResourcemanagerCloudIamMemberTimeouts {
    default?: pulumi.Input<string>;
}

export interface ResourcemanagerCloudTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ResourcemanagerFolderIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface ResourcemanagerFolderIamMemberTimeouts {
    default?: pulumi.Input<string>;
}

export interface ResourcemanagerFolderIamPolicyTimeouts {
    default?: pulumi.Input<string>;
}

export interface ResourcemanagerFolderTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ServerlessContainerConnectivity {
    networkId: pulumi.Input<string>;
}

export interface ServerlessContainerIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface ServerlessContainerImage {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    digest?: pulumi.Input<string>;
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    url: pulumi.Input<string>;
    workDir?: pulumi.Input<string>;
}

export interface ServerlessContainerLogOptions {
    disabled?: pulumi.Input<boolean>;
    folderId?: pulumi.Input<string>;
    logGroupId?: pulumi.Input<string>;
    minLevel?: pulumi.Input<string>;
}

export interface ServerlessContainerProvisionPolicy {
    minInstances: pulumi.Input<number>;
}

export interface ServerlessContainerSecret {
    environmentVariable: pulumi.Input<string>;
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
    versionId: pulumi.Input<string>;
}

export interface ServerlessContainerStorageMount {
    bucket: pulumi.Input<string>;
    mountPointPath: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
}

export interface ServerlessContainerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SmartcaptchaCaptchaOverrideVariant {
    challengeType?: pulumi.Input<string>;
    complexity?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    preCheckType?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface SmartcaptchaCaptchaSecurityRule {
    condition?: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleCondition>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overrideVariantUuid?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
}

export interface SmartcaptchaCaptchaSecurityRuleCondition {
    headers?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionHeader>[]>;
    host?: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionHost>;
    sourceIp?: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIp>;
    uri?: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionUri>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionHeader {
    name?: pulumi.Input<string>;
    value: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionHeaderValue>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionHeaderValue {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionHost {
    hosts?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionHostHost>[]>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionHostHost {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionSourceIp {
    geoIpMatch?: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpMatch>;
    geoIpNotMatch?: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpNotMatch>;
    ipRangesMatch?: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatch>;
    ipRangesNotMatch?: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatch>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpMatch {
    locations?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpNotMatch {
    locations?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatch {
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatch {
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionUri {
    path?: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionUriPath>;
    queries?: pulumi.Input<pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionUriQuery>[]>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionUriPath {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionUriQuery {
    key: pulumi.Input<string>;
    value: pulumi.Input<inputs.SmartcaptchaCaptchaSecurityRuleConditionUriQueryValue>;
}

export interface SmartcaptchaCaptchaSecurityRuleConditionUriQueryValue {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SmartcaptchaCaptchaTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface StorageBucketAnonymousAccessFlags {
    configRead?: pulumi.Input<boolean>;
    list?: pulumi.Input<boolean>;
    read?: pulumi.Input<boolean>;
}

export interface StorageBucketCorsRule {
    allowedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    allowedMethods: pulumi.Input<pulumi.Input<string>[]>;
    allowedOrigins: pulumi.Input<pulumi.Input<string>[]>;
    exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    maxAgeSeconds?: pulumi.Input<number>;
}

export interface StorageBucketGrant {
    id?: pulumi.Input<string>;
    permissions: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface StorageBucketHttps {
    certificateId: pulumi.Input<string>;
}

export interface StorageBucketLifecycleRule {
    abortIncompleteMultipartUploadDays?: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    expiration?: pulumi.Input<inputs.StorageBucketLifecycleRuleExpiration>;
    filter?: pulumi.Input<inputs.StorageBucketLifecycleRuleFilter>;
    id?: pulumi.Input<string>;
    noncurrentVersionExpiration?: pulumi.Input<inputs.StorageBucketLifecycleRuleNoncurrentVersionExpiration>;
    noncurrentVersionTransitions?: pulumi.Input<pulumi.Input<inputs.StorageBucketLifecycleRuleNoncurrentVersionTransition>[]>;
    /**
     * @deprecated Deprecated
     */
    prefix?: pulumi.Input<string>;
    transitions?: pulumi.Input<pulumi.Input<inputs.StorageBucketLifecycleRuleTransition>[]>;
}

export interface StorageBucketLifecycleRuleExpiration {
    date?: pulumi.Input<string>;
    days?: pulumi.Input<number>;
    expiredObjectDeleteMarker?: pulumi.Input<boolean>;
}

export interface StorageBucketLifecycleRuleFilter {
    and?: pulumi.Input<inputs.StorageBucketLifecycleRuleFilterAnd>;
    objectSizeGreaterThan?: pulumi.Input<number>;
    objectSizeLessThan?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    tag?: pulumi.Input<inputs.StorageBucketLifecycleRuleFilterTag>;
}

export interface StorageBucketLifecycleRuleFilterAnd {
    objectSizeGreaterThan?: pulumi.Input<number>;
    objectSizeLessThan?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface StorageBucketLifecycleRuleFilterTag {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface StorageBucketLifecycleRuleNoncurrentVersionExpiration {
    days?: pulumi.Input<number>;
}

export interface StorageBucketLifecycleRuleNoncurrentVersionTransition {
    days?: pulumi.Input<number>;
    storageClass: pulumi.Input<string>;
}

export interface StorageBucketLifecycleRuleTransition {
    date?: pulumi.Input<string>;
    days?: pulumi.Input<number>;
    storageClass: pulumi.Input<string>;
}

export interface StorageBucketLogging {
    targetBucket: pulumi.Input<string>;
    targetPrefix?: pulumi.Input<string>;
}

export interface StorageBucketObjectLockConfiguration {
    objectLockEnabled?: pulumi.Input<string>;
    rule?: pulumi.Input<inputs.StorageBucketObjectLockConfigurationRule>;
}

export interface StorageBucketObjectLockConfigurationRule {
    defaultRetention: pulumi.Input<inputs.StorageBucketObjectLockConfigurationRuleDefaultRetention>;
}

export interface StorageBucketObjectLockConfigurationRuleDefaultRetention {
    days?: pulumi.Input<number>;
    mode: pulumi.Input<string>;
    years?: pulumi.Input<number>;
}

export interface StorageBucketServerSideEncryptionConfiguration {
    rule: pulumi.Input<inputs.StorageBucketServerSideEncryptionConfigurationRule>;
}

export interface StorageBucketServerSideEncryptionConfigurationRule {
    applyServerSideEncryptionByDefault: pulumi.Input<inputs.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault>;
}

export interface StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault {
    kmsMasterKeyId: pulumi.Input<string>;
    sseAlgorithm: pulumi.Input<string>;
}

export interface StorageBucketVersioning {
    enabled?: pulumi.Input<boolean>;
}

export interface StorageBucketWebsite {
    errorDocument?: pulumi.Input<string>;
    indexDocument?: pulumi.Input<string>;
    redirectAllRequestsTo?: pulumi.Input<string>;
    routingRules?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRule {
    description?: pulumi.Input<string>;
    dryRun?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    ruleCondition?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleCondition>;
    smartProtection?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtection>;
}

export interface SwsSecurityProfileSecurityRuleRuleCondition {
    action?: pulumi.Input<string>;
    condition?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionCondition>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionCondition {
    authority?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionAuthority>;
    headers?: pulumi.Input<pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHeader>[]>;
    httpMethod?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethod>;
    requestUri?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUri>;
    sourceIp?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIp>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionAuthority {
    authorities?: pulumi.Input<pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthority>[]>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthority {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionHeader {
    name?: pulumi.Input<string>;
    value: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValue>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValue {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethod {
    httpMethods?: pulumi.Input<pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethod>[]>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethod {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUri {
    path?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPath>;
    queries?: pulumi.Input<pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQuery>[]>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPath {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQuery {
    key: pulumi.Input<string>;
    value: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValue>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValue {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIp {
    geoIpMatch?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpMatch>;
    geoIpNotMatch?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpNotMatch>;
    ipRangesMatch?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatch>;
    ipRangesNotMatch?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatch>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpMatch {
    locations?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpNotMatch {
    locations?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatch {
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatch {
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtection {
    condition?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionCondition>;
    mode?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionCondition {
    authority?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthority>;
    headers?: pulumi.Input<pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHeader>[]>;
    httpMethod?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethod>;
    requestUri?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUri>;
    sourceIp?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIp>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthority {
    authorities?: pulumi.Input<pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthority>[]>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthority {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionHeader {
    name?: pulumi.Input<string>;
    value: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValue>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValue {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethod {
    httpMethods?: pulumi.Input<pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethod>[]>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethod {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUri {
    path?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPath>;
    queries?: pulumi.Input<pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQuery>[]>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPath {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQuery {
    key: pulumi.Input<string>;
    value: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValue>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValue {
    exactMatch?: pulumi.Input<string>;
    exactNotMatch?: pulumi.Input<string>;
    pireRegexMatch?: pulumi.Input<string>;
    pireRegexNotMatch?: pulumi.Input<string>;
    prefixMatch?: pulumi.Input<string>;
    prefixNotMatch?: pulumi.Input<string>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIp {
    geoIpMatch?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpMatch>;
    geoIpNotMatch?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpNotMatch>;
    ipRangesMatch?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatch>;
    ipRangesNotMatch?: pulumi.Input<inputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatch>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpMatch {
    locations?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpNotMatch {
    locations?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatch {
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatch {
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwsSecurityProfileTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpcAddressDnsRecord {
    dnsZoneId: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface VpcAddressExternalIpv4Address {
    address?: pulumi.Input<string>;
    ddosProtectionProvider?: pulumi.Input<string>;
    outgoingSmtpCapability?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

export interface VpcAddressTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpcDefaultSecurityGroupEgress {
    description?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    port?: pulumi.Input<number>;
    predefinedTarget?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    toPort?: pulumi.Input<number>;
    v4CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    v6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpcDefaultSecurityGroupIngress {
    description?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    port?: pulumi.Input<number>;
    predefinedTarget?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    toPort?: pulumi.Input<number>;
    v4CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    v6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpcDefaultSecurityGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpcGatewaySharedEgressGateway {
}

export interface VpcGatewayTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpcNetworkTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpcRouteTableStaticRoute {
    destinationPrefix?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    nextHopAddress?: pulumi.Input<string>;
}

export interface VpcRouteTableTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpcSecurityGroupEgress {
    description?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    port?: pulumi.Input<number>;
    predefinedTarget?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    toPort?: pulumi.Input<number>;
    v4CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    v6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpcSecurityGroupIngress {
    description?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    port?: pulumi.Input<number>;
    predefinedTarget?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    toPort?: pulumi.Input<number>;
    v4CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    v6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpcSecurityGroupRuleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpcSecurityGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpcSubnetDhcpOptions {
    domainName?: pulumi.Input<string>;
    domainNameServers?: pulumi.Input<pulumi.Input<string>[]>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpcSubnetTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface YdbDatabaseDedicatedLocation {
    region?: pulumi.Input<inputs.YdbDatabaseDedicatedLocationRegion>;
}

export interface YdbDatabaseDedicatedLocationRegion {
    id: pulumi.Input<string>;
}

export interface YdbDatabaseDedicatedScalePolicy {
    fixedScale: pulumi.Input<inputs.YdbDatabaseDedicatedScalePolicyFixedScale>;
}

export interface YdbDatabaseDedicatedScalePolicyFixedScale {
    size: pulumi.Input<number>;
}

export interface YdbDatabaseDedicatedStorageConfig {
    groupCount: pulumi.Input<number>;
    storageTypeId: pulumi.Input<string>;
}

export interface YdbDatabaseDedicatedTimeouts {
    default?: pulumi.Input<string>;
}

export interface YdbDatabaseIamBindingTimeouts {
    default?: pulumi.Input<string>;
}

export interface YdbDatabaseServerlessServerlessDatabase {
    enableThrottlingRcuLimit?: pulumi.Input<boolean>;
    provisionedRcuLimit?: pulumi.Input<number>;
    storageSizeLimit?: pulumi.Input<number>;
    throttlingRcuLimit?: pulumi.Input<number>;
}

export interface YdbDatabaseServerlessTimeouts {
    default?: pulumi.Input<string>;
}

export interface YdbTableChangefeedConsumer {
    name: pulumi.Input<string>;
    startingMessageTimestampMs?: pulumi.Input<number>;
    supportedCodecs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface YdbTableChangefeedTimeouts {
    create?: pulumi.Input<string>;
    default?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface YdbTableColumn {
    family?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    notNull?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface YdbTableFamily {
    compression: pulumi.Input<string>;
    data: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface YdbTableIndexTimeouts {
    create?: pulumi.Input<string>;
    default?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface YdbTablePartitioningSettings {
    autoPartitioningByLoad?: pulumi.Input<boolean>;
    autoPartitioningBySizeEnabled?: pulumi.Input<boolean>;
    autoPartitioningMaxPartitionsCount?: pulumi.Input<number>;
    autoPartitioningMinPartitionsCount?: pulumi.Input<number>;
    autoPartitioningPartitionSizeMb?: pulumi.Input<number>;
    partitionAtKeys?: pulumi.Input<pulumi.Input<inputs.YdbTablePartitioningSettingsPartitionAtKey>[]>;
    uniformPartitions?: pulumi.Input<number>;
}

export interface YdbTablePartitioningSettingsPartitionAtKey {
    keys: pulumi.Input<pulumi.Input<string>[]>;
}

export interface YdbTableTimeouts {
    create?: pulumi.Input<string>;
    default?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface YdbTableTtl {
    columnName: pulumi.Input<string>;
    expireInterval: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
}

export interface YdbTopicConsumer {
    important?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    startingMessageTimestampMs?: pulumi.Input<number>;
    supportedCodecs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface YdbTopicTimeouts {
    create?: pulumi.Input<string>;
    default?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}
