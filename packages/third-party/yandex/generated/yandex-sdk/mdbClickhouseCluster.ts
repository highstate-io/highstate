// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MdbClickhouseCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbClickhouseCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbClickhouseClusterState, opts?: pulumi.CustomResourceOptions): MdbClickhouseCluster {
        return new MdbClickhouseCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbClickhouseCluster:MdbClickhouseCluster';

    /**
     * Returns true if the given object is an instance of MdbClickhouseCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbClickhouseCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbClickhouseCluster.__pulumiType;
    }

    declare public readonly access: pulumi.Output<outputs.MdbClickhouseClusterAccess | undefined>;
    declare public readonly adminPassword: pulumi.Output<string | undefined>;
    declare public readonly backupWindowStart: pulumi.Output<outputs.MdbClickhouseClusterBackupWindowStart | undefined>;
    declare public readonly clickhouse: pulumi.Output<outputs.MdbClickhouseClusterClickhouse | undefined>;
    declare public readonly cloudStorage: pulumi.Output<outputs.MdbClickhouseClusterCloudStorage | undefined>;
    declare public readonly clusterId: pulumi.Output<string>;
    declare public readonly copySchemaOnNewHosts: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly databases: pulumi.Output<outputs.MdbClickhouseClusterDatabase[] | undefined>;
    declare public readonly deletionProtection: pulumi.Output<boolean>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly embeddedKeeper: pulumi.Output<boolean>;
    declare public readonly environment: pulumi.Output<string>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly formatSchemas: pulumi.Output<outputs.MdbClickhouseClusterFormatSchema[] | undefined>;
    declare public /*out*/ readonly health: pulumi.Output<string>;
    declare public readonly hosts: pulumi.Output<outputs.MdbClickhouseClusterHost[]>;
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    declare public readonly maintenanceWindow: pulumi.Output<outputs.MdbClickhouseClusterMaintenanceWindow | undefined>;
    declare public readonly mdbClickhouseClusterId: pulumi.Output<string>;
    declare public readonly mlModels: pulumi.Output<outputs.MdbClickhouseClusterMlModel[] | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<string>;
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    declare public readonly serviceAccountId: pulumi.Output<string>;
    declare public readonly shardGroups: pulumi.Output<outputs.MdbClickhouseClusterShardGroup[] | undefined>;
    declare public readonly shards: pulumi.Output<outputs.MdbClickhouseClusterShard[] | undefined>;
    declare public readonly sqlDatabaseManagement: pulumi.Output<boolean>;
    declare public readonly sqlUserManagement: pulumi.Output<boolean>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.MdbClickhouseClusterTimeouts | undefined>;
    declare public readonly users: pulumi.Output<outputs.MdbClickhouseClusterUser[] | undefined>;
    declare public readonly version: pulumi.Output<string>;
    declare public readonly zookeeper: pulumi.Output<outputs.MdbClickhouseClusterZookeeper | undefined>;

    /**
     * Create a MdbClickhouseCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbClickhouseClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbClickhouseClusterArgs | MdbClickhouseClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbClickhouseClusterState | undefined;
            resourceInputs["access"] = state?.access;
            resourceInputs["adminPassword"] = state?.adminPassword;
            resourceInputs["backupWindowStart"] = state?.backupWindowStart;
            resourceInputs["clickhouse"] = state?.clickhouse;
            resourceInputs["cloudStorage"] = state?.cloudStorage;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["copySchemaOnNewHosts"] = state?.copySchemaOnNewHosts;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["databases"] = state?.databases;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["embeddedKeeper"] = state?.embeddedKeeper;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["formatSchemas"] = state?.formatSchemas;
            resourceInputs["health"] = state?.health;
            resourceInputs["hosts"] = state?.hosts;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["maintenanceWindow"] = state?.maintenanceWindow;
            resourceInputs["mdbClickhouseClusterId"] = state?.mdbClickhouseClusterId;
            resourceInputs["mlModels"] = state?.mlModels;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["serviceAccountId"] = state?.serviceAccountId;
            resourceInputs["shardGroups"] = state?.shardGroups;
            resourceInputs["shards"] = state?.shards;
            resourceInputs["sqlDatabaseManagement"] = state?.sqlDatabaseManagement;
            resourceInputs["sqlUserManagement"] = state?.sqlUserManagement;
            resourceInputs["status"] = state?.status;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["users"] = state?.users;
            resourceInputs["version"] = state?.version;
            resourceInputs["zookeeper"] = state?.zookeeper;
        } else {
            const args = argsOrState as MdbClickhouseClusterArgs | undefined;
            if (args?.environment === undefined && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if (args?.hosts === undefined && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["access"] = args?.access;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["backupWindowStart"] = args?.backupWindowStart;
            resourceInputs["clickhouse"] = args?.clickhouse;
            resourceInputs["cloudStorage"] = args?.cloudStorage;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["copySchemaOnNewHosts"] = args?.copySchemaOnNewHosts;
            resourceInputs["databases"] = args?.databases;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["embeddedKeeper"] = args?.embeddedKeeper;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["formatSchemas"] = args?.formatSchemas;
            resourceInputs["hosts"] = args?.hosts;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["maintenanceWindow"] = args?.maintenanceWindow;
            resourceInputs["mdbClickhouseClusterId"] = args?.mdbClickhouseClusterId;
            resourceInputs["mlModels"] = args?.mlModels;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["serviceAccountId"] = args?.serviceAccountId;
            resourceInputs["shardGroups"] = args?.shardGroups;
            resourceInputs["shards"] = args?.shards;
            resourceInputs["sqlDatabaseManagement"] = args?.sqlDatabaseManagement;
            resourceInputs["sqlUserManagement"] = args?.sqlUserManagement;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["users"] = args?.users;
            resourceInputs["version"] = args?.version;
            resourceInputs["zookeeper"] = args?.zookeeper;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MdbClickhouseCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MdbClickhouseCluster resources.
 */
export interface MdbClickhouseClusterState {
    access?: pulumi.Input<inputs.MdbClickhouseClusterAccess>;
    adminPassword?: pulumi.Input<string>;
    backupWindowStart?: pulumi.Input<inputs.MdbClickhouseClusterBackupWindowStart>;
    clickhouse?: pulumi.Input<inputs.MdbClickhouseClusterClickhouse>;
    cloudStorage?: pulumi.Input<inputs.MdbClickhouseClusterCloudStorage>;
    clusterId?: pulumi.Input<string>;
    copySchemaOnNewHosts?: pulumi.Input<boolean>;
    createdAt?: pulumi.Input<string>;
    databases?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterDatabase>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    embeddedKeeper?: pulumi.Input<boolean>;
    environment?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    formatSchemas?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterFormatSchema>[]>;
    health?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterHost>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceWindow?: pulumi.Input<inputs.MdbClickhouseClusterMaintenanceWindow>;
    mdbClickhouseClusterId?: pulumi.Input<string>;
    mlModels?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterMlModel>[]>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    serviceAccountId?: pulumi.Input<string>;
    shardGroups?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterShardGroup>[]>;
    shards?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterShard>[]>;
    sqlDatabaseManagement?: pulumi.Input<boolean>;
    sqlUserManagement?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.MdbClickhouseClusterTimeouts>;
    users?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterUser>[]>;
    version?: pulumi.Input<string>;
    zookeeper?: pulumi.Input<inputs.MdbClickhouseClusterZookeeper>;
}

/**
 * The set of arguments for constructing a MdbClickhouseCluster resource.
 */
export interface MdbClickhouseClusterArgs {
    access?: pulumi.Input<inputs.MdbClickhouseClusterAccess>;
    adminPassword?: pulumi.Input<string>;
    backupWindowStart?: pulumi.Input<inputs.MdbClickhouseClusterBackupWindowStart>;
    clickhouse?: pulumi.Input<inputs.MdbClickhouseClusterClickhouse>;
    cloudStorage?: pulumi.Input<inputs.MdbClickhouseClusterCloudStorage>;
    clusterId?: pulumi.Input<string>;
    copySchemaOnNewHosts?: pulumi.Input<boolean>;
    databases?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterDatabase>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    embeddedKeeper?: pulumi.Input<boolean>;
    environment: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    formatSchemas?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterFormatSchema>[]>;
    hosts: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterHost>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceWindow?: pulumi.Input<inputs.MdbClickhouseClusterMaintenanceWindow>;
    mdbClickhouseClusterId?: pulumi.Input<string>;
    mlModels?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterMlModel>[]>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    serviceAccountId?: pulumi.Input<string>;
    shardGroups?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterShardGroup>[]>;
    shards?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterShard>[]>;
    sqlDatabaseManagement?: pulumi.Input<boolean>;
    sqlUserManagement?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.MdbClickhouseClusterTimeouts>;
    users?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterUser>[]>;
    version?: pulumi.Input<string>;
    zookeeper?: pulumi.Input<inputs.MdbClickhouseClusterZookeeper>;
}
