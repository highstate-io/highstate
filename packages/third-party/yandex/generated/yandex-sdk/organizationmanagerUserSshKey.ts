// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrganizationmanagerUserSshKey extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationmanagerUserSshKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationmanagerUserSshKeyState, opts?: pulumi.CustomResourceOptions): OrganizationmanagerUserSshKey {
        return new OrganizationmanagerUserSshKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/organizationmanagerUserSshKey:OrganizationmanagerUserSshKey';

    /**
     * Returns true if the given object is an instance of OrganizationmanagerUserSshKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationmanagerUserSshKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationmanagerUserSshKey.__pulumiType;
    }

    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly data: pulumi.Output<string>;
    declare public readonly expiresAt: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly fingerprint: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organizationId: pulumi.Output<string>;
    declare public readonly subjectId: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.OrganizationmanagerUserSshKeyTimeouts | undefined>;

    /**
     * Create a OrganizationmanagerUserSshKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationmanagerUserSshKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationmanagerUserSshKeyArgs | OrganizationmanagerUserSshKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationmanagerUserSshKeyState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["data"] = state?.data;
            resourceInputs["expiresAt"] = state?.expiresAt;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["name"] = state?.name;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["subjectId"] = state?.subjectId;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as OrganizationmanagerUserSshKeyArgs | undefined;
            if (args?.data === undefined && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            if (args?.organizationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if (args?.subjectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subjectId'");
            }
            resourceInputs["data"] = args?.data;
            resourceInputs["expiresAt"] = args?.expiresAt;
            resourceInputs["name"] = args?.name;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["subjectId"] = args?.subjectId;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationmanagerUserSshKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrganizationmanagerUserSshKey resources.
 */
export interface OrganizationmanagerUserSshKeyState {
    createdAt?: pulumi.Input<string>;
    data?: pulumi.Input<string>;
    expiresAt?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    subjectId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OrganizationmanagerUserSshKeyTimeouts>;
}

/**
 * The set of arguments for constructing a OrganizationmanagerUserSshKey resource.
 */
export interface OrganizationmanagerUserSshKeyArgs {
    data: pulumi.Input<string>;
    expiresAt?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
    subjectId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OrganizationmanagerUserSshKeyTimeouts>;
}
