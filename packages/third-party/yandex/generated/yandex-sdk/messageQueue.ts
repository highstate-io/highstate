// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MessageQueue extends pulumi.CustomResource {
    /**
     * Get an existing MessageQueue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MessageQueueState, opts?: pulumi.CustomResourceOptions): MessageQueue {
        return new MessageQueue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/messageQueue:MessageQueue';

    /**
     * Returns true if the given object is an instance of MessageQueue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MessageQueue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MessageQueue.__pulumiType;
    }

    declare public readonly accessKey: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    declare public readonly contentBasedDeduplication: pulumi.Output<boolean | undefined>;
    declare public readonly delaySeconds: pulumi.Output<number | undefined>;
    declare public readonly fifoQueue: pulumi.Output<boolean | undefined>;
    declare public readonly maxMessageSize: pulumi.Output<number | undefined>;
    declare public readonly messageQueueId: pulumi.Output<string>;
    declare public readonly messageRetentionSeconds: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly namePrefix: pulumi.Output<string | undefined>;
    declare public readonly receiveWaitTimeSeconds: pulumi.Output<number | undefined>;
    declare public readonly redrivePolicy: pulumi.Output<string | undefined>;
    declare public readonly regionId: pulumi.Output<string | undefined>;
    declare public readonly secretKey: pulumi.Output<string | undefined>;
    declare public readonly visibilityTimeoutSeconds: pulumi.Output<number | undefined>;

    /**
     * Create a MessageQueue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MessageQueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MessageQueueArgs | MessageQueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MessageQueueState | undefined;
            resourceInputs["accessKey"] = state?.accessKey;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["contentBasedDeduplication"] = state?.contentBasedDeduplication;
            resourceInputs["delaySeconds"] = state?.delaySeconds;
            resourceInputs["fifoQueue"] = state?.fifoQueue;
            resourceInputs["maxMessageSize"] = state?.maxMessageSize;
            resourceInputs["messageQueueId"] = state?.messageQueueId;
            resourceInputs["messageRetentionSeconds"] = state?.messageRetentionSeconds;
            resourceInputs["name"] = state?.name;
            resourceInputs["namePrefix"] = state?.namePrefix;
            resourceInputs["receiveWaitTimeSeconds"] = state?.receiveWaitTimeSeconds;
            resourceInputs["redrivePolicy"] = state?.redrivePolicy;
            resourceInputs["regionId"] = state?.regionId;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["visibilityTimeoutSeconds"] = state?.visibilityTimeoutSeconds;
        } else {
            const args = argsOrState as MessageQueueArgs | undefined;
            resourceInputs["accessKey"] = args?.accessKey;
            resourceInputs["contentBasedDeduplication"] = args?.contentBasedDeduplication;
            resourceInputs["delaySeconds"] = args?.delaySeconds;
            resourceInputs["fifoQueue"] = args?.fifoQueue;
            resourceInputs["maxMessageSize"] = args?.maxMessageSize;
            resourceInputs["messageQueueId"] = args?.messageQueueId;
            resourceInputs["messageRetentionSeconds"] = args?.messageRetentionSeconds;
            resourceInputs["name"] = args?.name;
            resourceInputs["namePrefix"] = args?.namePrefix;
            resourceInputs["receiveWaitTimeSeconds"] = args?.receiveWaitTimeSeconds;
            resourceInputs["redrivePolicy"] = args?.redrivePolicy;
            resourceInputs["regionId"] = args?.regionId;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["visibilityTimeoutSeconds"] = args?.visibilityTimeoutSeconds;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MessageQueue.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MessageQueue resources.
 */
export interface MessageQueueState {
    accessKey?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    contentBasedDeduplication?: pulumi.Input<boolean>;
    delaySeconds?: pulumi.Input<number>;
    fifoQueue?: pulumi.Input<boolean>;
    maxMessageSize?: pulumi.Input<number>;
    messageQueueId?: pulumi.Input<string>;
    messageRetentionSeconds?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    receiveWaitTimeSeconds?: pulumi.Input<number>;
    redrivePolicy?: pulumi.Input<string>;
    regionId?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    visibilityTimeoutSeconds?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MessageQueue resource.
 */
export interface MessageQueueArgs {
    accessKey?: pulumi.Input<string>;
    contentBasedDeduplication?: pulumi.Input<boolean>;
    delaySeconds?: pulumi.Input<number>;
    fifoQueue?: pulumi.Input<boolean>;
    maxMessageSize?: pulumi.Input<number>;
    messageQueueId?: pulumi.Input<string>;
    messageRetentionSeconds?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    receiveWaitTimeSeconds?: pulumi.Input<number>;
    redrivePolicy?: pulumi.Input<string>;
    regionId?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    visibilityTimeoutSeconds?: pulumi.Input<number>;
}
