// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ResourcemanagerCloudIamBinding extends pulumi.CustomResource {
    /**
     * Get an existing ResourcemanagerCloudIamBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourcemanagerCloudIamBindingState, opts?: pulumi.CustomResourceOptions): ResourcemanagerCloudIamBinding {
        return new ResourcemanagerCloudIamBinding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/resourcemanagerCloudIamBinding:ResourcemanagerCloudIamBinding';

    /**
     * Returns true if the given object is an instance of ResourcemanagerCloudIamBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourcemanagerCloudIamBinding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourcemanagerCloudIamBinding.__pulumiType;
    }

    declare public readonly cloudId: pulumi.Output<string>;
    declare public readonly members: pulumi.Output<string[]>;
    declare public readonly resourcemanagerCloudIamBindingId: pulumi.Output<string>;
    declare public readonly role: pulumi.Output<string>;
    declare public readonly sleepAfter: pulumi.Output<number | undefined>;
    declare public readonly timeouts: pulumi.Output<outputs.ResourcemanagerCloudIamBindingTimeouts | undefined>;

    /**
     * Create a ResourcemanagerCloudIamBinding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourcemanagerCloudIamBindingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourcemanagerCloudIamBindingArgs | ResourcemanagerCloudIamBindingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourcemanagerCloudIamBindingState | undefined;
            resourceInputs["cloudId"] = state?.cloudId;
            resourceInputs["members"] = state?.members;
            resourceInputs["resourcemanagerCloudIamBindingId"] = state?.resourcemanagerCloudIamBindingId;
            resourceInputs["role"] = state?.role;
            resourceInputs["sleepAfter"] = state?.sleepAfter;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as ResourcemanagerCloudIamBindingArgs | undefined;
            if (args?.cloudId === undefined && !opts.urn) {
                throw new Error("Missing required property 'cloudId'");
            }
            if (args?.members === undefined && !opts.urn) {
                throw new Error("Missing required property 'members'");
            }
            if (args?.role === undefined && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["cloudId"] = args?.cloudId;
            resourceInputs["members"] = args?.members;
            resourceInputs["resourcemanagerCloudIamBindingId"] = args?.resourcemanagerCloudIamBindingId;
            resourceInputs["role"] = args?.role;
            resourceInputs["sleepAfter"] = args?.sleepAfter;
            resourceInputs["timeouts"] = args?.timeouts;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourcemanagerCloudIamBinding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourcemanagerCloudIamBinding resources.
 */
export interface ResourcemanagerCloudIamBindingState {
    cloudId?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    resourcemanagerCloudIamBindingId?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    sleepAfter?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ResourcemanagerCloudIamBindingTimeouts>;
}

/**
 * The set of arguments for constructing a ResourcemanagerCloudIamBinding resource.
 */
export interface ResourcemanagerCloudIamBindingArgs {
    cloudId: pulumi.Input<string>;
    members: pulumi.Input<pulumi.Input<string>[]>;
    resourcemanagerCloudIamBindingId?: pulumi.Input<string>;
    role: pulumi.Input<string>;
    sleepAfter?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.ResourcemanagerCloudIamBindingTimeouts>;
}
