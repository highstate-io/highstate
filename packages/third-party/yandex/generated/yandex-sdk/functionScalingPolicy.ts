// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FunctionScalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FunctionScalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionScalingPolicyState, opts?: pulumi.CustomResourceOptions): FunctionScalingPolicy {
        return new FunctionScalingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/functionScalingPolicy:FunctionScalingPolicy';

    /**
     * Returns true if the given object is an instance of FunctionScalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionScalingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionScalingPolicy.__pulumiType;
    }

    declare public readonly functionId: pulumi.Output<string>;
    declare public readonly functionScalingPolicyId: pulumi.Output<string>;
    declare public readonly policies: pulumi.Output<outputs.FunctionScalingPolicyPolicy[] | undefined>;

    /**
     * Create a FunctionScalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionScalingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionScalingPolicyArgs | FunctionScalingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionScalingPolicyState | undefined;
            resourceInputs["functionId"] = state?.functionId;
            resourceInputs["functionScalingPolicyId"] = state?.functionScalingPolicyId;
            resourceInputs["policies"] = state?.policies;
        } else {
            const args = argsOrState as FunctionScalingPolicyArgs | undefined;
            if (args?.functionId === undefined && !opts.urn) {
                throw new Error("Missing required property 'functionId'");
            }
            resourceInputs["functionId"] = args?.functionId;
            resourceInputs["functionScalingPolicyId"] = args?.functionScalingPolicyId;
            resourceInputs["policies"] = args?.policies;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionScalingPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FunctionScalingPolicy resources.
 */
export interface FunctionScalingPolicyState {
    functionId?: pulumi.Input<string>;
    functionScalingPolicyId?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<inputs.FunctionScalingPolicyPolicy>[]>;
}

/**
 * The set of arguments for constructing a FunctionScalingPolicy resource.
 */
export interface FunctionScalingPolicyArgs {
    functionId: pulumi.Input<string>;
    functionScalingPolicyId?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<inputs.FunctionScalingPolicyPolicy>[]>;
}
