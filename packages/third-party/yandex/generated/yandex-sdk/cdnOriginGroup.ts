// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CdnOriginGroup extends pulumi.CustomResource {
    /**
     * Get an existing CdnOriginGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdnOriginGroupState, opts?: pulumi.CustomResourceOptions): CdnOriginGroup {
        return new CdnOriginGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/cdnOriginGroup:CdnOriginGroup';

    /**
     * Returns true if the given object is an instance of CdnOriginGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdnOriginGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdnOriginGroup.__pulumiType;
    }

    declare public readonly cdnOriginGroupId: pulumi.Output<string>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly origins: pulumi.Output<outputs.CdnOriginGroupOrigin[]>;
    declare public readonly timeouts: pulumi.Output<outputs.CdnOriginGroupTimeouts | undefined>;
    declare public readonly useNext: pulumi.Output<boolean | undefined>;

    /**
     * Create a CdnOriginGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdnOriginGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdnOriginGroupArgs | CdnOriginGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdnOriginGroupState | undefined;
            resourceInputs["cdnOriginGroupId"] = state?.cdnOriginGroupId;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["name"] = state?.name;
            resourceInputs["origins"] = state?.origins;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["useNext"] = state?.useNext;
        } else {
            const args = argsOrState as CdnOriginGroupArgs | undefined;
            if (args?.origins === undefined && !opts.urn) {
                throw new Error("Missing required property 'origins'");
            }
            resourceInputs["cdnOriginGroupId"] = args?.cdnOriginGroupId;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["name"] = args?.name;
            resourceInputs["origins"] = args?.origins;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["useNext"] = args?.useNext;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CdnOriginGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CdnOriginGroup resources.
 */
export interface CdnOriginGroupState {
    cdnOriginGroupId?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    origins?: pulumi.Input<pulumi.Input<inputs.CdnOriginGroupOrigin>[]>;
    timeouts?: pulumi.Input<inputs.CdnOriginGroupTimeouts>;
    useNext?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CdnOriginGroup resource.
 */
export interface CdnOriginGroupArgs {
    cdnOriginGroupId?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    origins: pulumi.Input<pulumi.Input<inputs.CdnOriginGroupOrigin>[]>;
    timeouts?: pulumi.Input<inputs.CdnOriginGroupTimeouts>;
    useNext?: pulumi.Input<boolean>;
}
