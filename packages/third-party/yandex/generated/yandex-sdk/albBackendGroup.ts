// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlbBackendGroup extends pulumi.CustomResource {
    /**
     * Get an existing AlbBackendGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlbBackendGroupState, opts?: pulumi.CustomResourceOptions): AlbBackendGroup {
        return new AlbBackendGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/albBackendGroup:AlbBackendGroup';

    /**
     * Returns true if the given object is an instance of AlbBackendGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlbBackendGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlbBackendGroup.__pulumiType;
    }

    declare public readonly albBackendGroupId: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly grpcBackends: pulumi.Output<outputs.AlbBackendGroupGrpcBackend[] | undefined>;
    declare public readonly httpBackends: pulumi.Output<outputs.AlbBackendGroupHttpBackend[] | undefined>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly sessionAffinity: pulumi.Output<outputs.AlbBackendGroupSessionAffinity | undefined>;
    declare public readonly streamBackends: pulumi.Output<outputs.AlbBackendGroupStreamBackend[] | undefined>;
    declare public readonly timeouts: pulumi.Output<outputs.AlbBackendGroupTimeouts | undefined>;

    /**
     * Create a AlbBackendGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AlbBackendGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlbBackendGroupArgs | AlbBackendGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlbBackendGroupState | undefined;
            resourceInputs["albBackendGroupId"] = state?.albBackendGroupId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["grpcBackends"] = state?.grpcBackends;
            resourceInputs["httpBackends"] = state?.httpBackends;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["sessionAffinity"] = state?.sessionAffinity;
            resourceInputs["streamBackends"] = state?.streamBackends;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as AlbBackendGroupArgs | undefined;
            resourceInputs["albBackendGroupId"] = args?.albBackendGroupId;
            resourceInputs["description"] = args?.description;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["grpcBackends"] = args?.grpcBackends;
            resourceInputs["httpBackends"] = args?.httpBackends;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["sessionAffinity"] = args?.sessionAffinity;
            resourceInputs["streamBackends"] = args?.streamBackends;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlbBackendGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlbBackendGroup resources.
 */
export interface AlbBackendGroupState {
    albBackendGroupId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    grpcBackends?: pulumi.Input<pulumi.Input<inputs.AlbBackendGroupGrpcBackend>[]>;
    httpBackends?: pulumi.Input<pulumi.Input<inputs.AlbBackendGroupHttpBackend>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    sessionAffinity?: pulumi.Input<inputs.AlbBackendGroupSessionAffinity>;
    streamBackends?: pulumi.Input<pulumi.Input<inputs.AlbBackendGroupStreamBackend>[]>;
    timeouts?: pulumi.Input<inputs.AlbBackendGroupTimeouts>;
}

/**
 * The set of arguments for constructing a AlbBackendGroup resource.
 */
export interface AlbBackendGroupArgs {
    albBackendGroupId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    grpcBackends?: pulumi.Input<pulumi.Input<inputs.AlbBackendGroupGrpcBackend>[]>;
    httpBackends?: pulumi.Input<pulumi.Input<inputs.AlbBackendGroupHttpBackend>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    sessionAffinity?: pulumi.Input<inputs.AlbBackendGroupSessionAffinity>;
    streamBackends?: pulumi.Input<pulumi.Input<inputs.AlbBackendGroupStreamBackend>[]>;
    timeouts?: pulumi.Input<inputs.AlbBackendGroupTimeouts>;
}
