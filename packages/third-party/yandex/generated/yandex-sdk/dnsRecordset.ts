// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsRecordset extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecordset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordsetState, opts?: pulumi.CustomResourceOptions): DnsRecordset {
        return new DnsRecordset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/dnsRecordset:DnsRecordset';

    /**
     * Returns true if the given object is an instance of DnsRecordset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecordset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecordset.__pulumiType;
    }

    declare public readonly datas: pulumi.Output<string[]>;
    declare public readonly dnsRecordsetId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.DnsRecordsetTimeouts | undefined>;
    declare public readonly ttl: pulumi.Output<number>;
    declare public readonly type: pulumi.Output<string>;
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a DnsRecordset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordsetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordsetArgs | DnsRecordsetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsRecordsetState | undefined;
            resourceInputs["datas"] = state?.datas;
            resourceInputs["dnsRecordsetId"] = state?.dnsRecordsetId;
            resourceInputs["name"] = state?.name;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["type"] = state?.type;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as DnsRecordsetArgs | undefined;
            if (args?.datas === undefined && !opts.urn) {
                throw new Error("Missing required property 'datas'");
            }
            if (args?.ttl === undefined && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["datas"] = args?.datas;
            resourceInputs["dnsRecordsetId"] = args?.dnsRecordsetId;
            resourceInputs["name"] = args?.name;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["type"] = args?.type;
            resourceInputs["zoneId"] = args?.zoneId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsRecordset.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsRecordset resources.
 */
export interface DnsRecordsetState {
    datas?: pulumi.Input<pulumi.Input<string>[]>;
    dnsRecordsetId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DnsRecordsetTimeouts>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRecordset resource.
 */
export interface DnsRecordsetArgs {
    datas: pulumi.Input<pulumi.Input<string>[]>;
    dnsRecordsetId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DnsRecordsetTimeouts>;
    ttl: pulumi.Input<number>;
    type: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}
