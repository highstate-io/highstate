// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrganizationmanagerSamlFederation extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationmanagerSamlFederation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationmanagerSamlFederationState, opts?: pulumi.CustomResourceOptions): OrganizationmanagerSamlFederation {
        return new OrganizationmanagerSamlFederation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/organizationmanagerSamlFederation:OrganizationmanagerSamlFederation';

    /**
     * Returns true if the given object is an instance of OrganizationmanagerSamlFederation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationmanagerSamlFederation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationmanagerSamlFederation.__pulumiType;
    }

    declare public readonly autoCreateAccountOnLogin: pulumi.Output<boolean>;
    declare public readonly caseInsensitiveNameIds: pulumi.Output<boolean>;
    declare public readonly cookieMaxAge: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly issuer: pulumi.Output<string>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organizationId: pulumi.Output<string>;
    declare public readonly organizationmanagerSamlFederationId: pulumi.Output<string>;
    declare public readonly securitySettings: pulumi.Output<outputs.OrganizationmanagerSamlFederationSecuritySettings | undefined>;
    declare public readonly ssoBinding: pulumi.Output<string>;
    declare public readonly ssoUrl: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.OrganizationmanagerSamlFederationTimeouts | undefined>;

    /**
     * Create a OrganizationmanagerSamlFederation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationmanagerSamlFederationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationmanagerSamlFederationArgs | OrganizationmanagerSamlFederationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationmanagerSamlFederationState | undefined;
            resourceInputs["autoCreateAccountOnLogin"] = state?.autoCreateAccountOnLogin;
            resourceInputs["caseInsensitiveNameIds"] = state?.caseInsensitiveNameIds;
            resourceInputs["cookieMaxAge"] = state?.cookieMaxAge;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["organizationId"] = state?.organizationId;
            resourceInputs["organizationmanagerSamlFederationId"] = state?.organizationmanagerSamlFederationId;
            resourceInputs["securitySettings"] = state?.securitySettings;
            resourceInputs["ssoBinding"] = state?.ssoBinding;
            resourceInputs["ssoUrl"] = state?.ssoUrl;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as OrganizationmanagerSamlFederationArgs | undefined;
            if (args?.issuer === undefined && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if (args?.organizationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if (args?.ssoBinding === undefined && !opts.urn) {
                throw new Error("Missing required property 'ssoBinding'");
            }
            if (args?.ssoUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'ssoUrl'");
            }
            resourceInputs["autoCreateAccountOnLogin"] = args?.autoCreateAccountOnLogin;
            resourceInputs["caseInsensitiveNameIds"] = args?.caseInsensitiveNameIds;
            resourceInputs["cookieMaxAge"] = args?.cookieMaxAge;
            resourceInputs["description"] = args?.description;
            resourceInputs["issuer"] = args?.issuer;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["organizationId"] = args?.organizationId;
            resourceInputs["organizationmanagerSamlFederationId"] = args?.organizationmanagerSamlFederationId;
            resourceInputs["securitySettings"] = args?.securitySettings;
            resourceInputs["ssoBinding"] = args?.ssoBinding;
            resourceInputs["ssoUrl"] = args?.ssoUrl;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationmanagerSamlFederation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrganizationmanagerSamlFederation resources.
 */
export interface OrganizationmanagerSamlFederationState {
    autoCreateAccountOnLogin?: pulumi.Input<boolean>;
    caseInsensitiveNameIds?: pulumi.Input<boolean>;
    cookieMaxAge?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    issuer?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    organizationmanagerSamlFederationId?: pulumi.Input<string>;
    securitySettings?: pulumi.Input<inputs.OrganizationmanagerSamlFederationSecuritySettings>;
    ssoBinding?: pulumi.Input<string>;
    ssoUrl?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OrganizationmanagerSamlFederationTimeouts>;
}

/**
 * The set of arguments for constructing a OrganizationmanagerSamlFederation resource.
 */
export interface OrganizationmanagerSamlFederationArgs {
    autoCreateAccountOnLogin?: pulumi.Input<boolean>;
    caseInsensitiveNameIds?: pulumi.Input<boolean>;
    cookieMaxAge?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    issuer: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
    organizationmanagerSamlFederationId?: pulumi.Input<string>;
    securitySettings?: pulumi.Input<inputs.OrganizationmanagerSamlFederationSecuritySettings>;
    ssoBinding: pulumi.Input<string>;
    ssoUrl: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OrganizationmanagerSamlFederationTimeouts>;
}
