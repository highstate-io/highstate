// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IamServiceAccountStaticAccessKey extends pulumi.CustomResource {
    /**
     * Get an existing IamServiceAccountStaticAccessKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamServiceAccountStaticAccessKeyState, opts?: pulumi.CustomResourceOptions): IamServiceAccountStaticAccessKey {
        return new IamServiceAccountStaticAccessKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/iamServiceAccountStaticAccessKey:IamServiceAccountStaticAccessKey';

    /**
     * Returns true if the given object is an instance of IamServiceAccountStaticAccessKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamServiceAccountStaticAccessKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamServiceAccountStaticAccessKey.__pulumiType;
    }

    declare public /*out*/ readonly accessKey: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly encryptedSecretKey: pulumi.Output<string>;
    declare public readonly iamServiceAccountStaticAccessKeyId: pulumi.Output<string>;
    declare public /*out*/ readonly keyFingerprint: pulumi.Output<string>;
    /**
     * option to create a Lockbox secret version from sensitive outputs
     */
    declare public readonly outputToLockbox: pulumi.Output<outputs.IamServiceAccountStaticAccessKeyOutputToLockbox | undefined>;
    /**
     * version generated, that will contain the sensitive outputs
     */
    declare public /*out*/ readonly outputToLockboxVersionId: pulumi.Output<string>;
    declare public readonly pgpKey: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly secretKey: pulumi.Output<string>;
    declare public readonly serviceAccountId: pulumi.Output<string>;

    /**
     * Create a IamServiceAccountStaticAccessKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamServiceAccountStaticAccessKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamServiceAccountStaticAccessKeyArgs | IamServiceAccountStaticAccessKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamServiceAccountStaticAccessKeyState | undefined;
            resourceInputs["accessKey"] = state?.accessKey;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["encryptedSecretKey"] = state?.encryptedSecretKey;
            resourceInputs["iamServiceAccountStaticAccessKeyId"] = state?.iamServiceAccountStaticAccessKeyId;
            resourceInputs["keyFingerprint"] = state?.keyFingerprint;
            resourceInputs["outputToLockbox"] = state?.outputToLockbox;
            resourceInputs["outputToLockboxVersionId"] = state?.outputToLockboxVersionId;
            resourceInputs["pgpKey"] = state?.pgpKey;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["serviceAccountId"] = state?.serviceAccountId;
        } else {
            const args = argsOrState as IamServiceAccountStaticAccessKeyArgs | undefined;
            if (args?.serviceAccountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["iamServiceAccountStaticAccessKeyId"] = args?.iamServiceAccountStaticAccessKeyId;
            resourceInputs["outputToLockbox"] = args?.outputToLockbox;
            resourceInputs["pgpKey"] = args?.pgpKey;
            resourceInputs["serviceAccountId"] = args?.serviceAccountId;
            resourceInputs["accessKey"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["encryptedSecretKey"] = undefined /*out*/;
            resourceInputs["keyFingerprint"] = undefined /*out*/;
            resourceInputs["outputToLockboxVersionId"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IamServiceAccountStaticAccessKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IamServiceAccountStaticAccessKey resources.
 */
export interface IamServiceAccountStaticAccessKeyState {
    accessKey?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encryptedSecretKey?: pulumi.Input<string>;
    iamServiceAccountStaticAccessKeyId?: pulumi.Input<string>;
    keyFingerprint?: pulumi.Input<string>;
    /**
     * option to create a Lockbox secret version from sensitive outputs
     */
    outputToLockbox?: pulumi.Input<inputs.IamServiceAccountStaticAccessKeyOutputToLockbox>;
    /**
     * version generated, that will contain the sensitive outputs
     */
    outputToLockboxVersionId?: pulumi.Input<string>;
    pgpKey?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    serviceAccountId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamServiceAccountStaticAccessKey resource.
 */
export interface IamServiceAccountStaticAccessKeyArgs {
    description?: pulumi.Input<string>;
    iamServiceAccountStaticAccessKeyId?: pulumi.Input<string>;
    /**
     * option to create a Lockbox secret version from sensitive outputs
     */
    outputToLockbox?: pulumi.Input<inputs.IamServiceAccountStaticAccessKeyOutputToLockbox>;
    pgpKey?: pulumi.Input<string>;
    serviceAccountId: pulumi.Input<string>;
}
