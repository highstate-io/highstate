// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BackupPolicyBindings extends pulumi.CustomResource {
    /**
     * Get an existing BackupPolicyBindings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupPolicyBindingsState, opts?: pulumi.CustomResourceOptions): BackupPolicyBindings {
        return new BackupPolicyBindings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/backupPolicyBindings:BackupPolicyBindings';

    /**
     * Returns true if the given object is an instance of BackupPolicyBindings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupPolicyBindings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupPolicyBindings.__pulumiType;
    }

    declare public readonly backupPolicyBindingsId: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public /*out*/ readonly enabled: pulumi.Output<boolean>;
    declare public readonly instanceId: pulumi.Output<string>;
    declare public readonly policyId: pulumi.Output<string>;
    declare public /*out*/ readonly processing: pulumi.Output<boolean>;
    declare public readonly timeouts: pulumi.Output<outputs.BackupPolicyBindingsTimeouts | undefined>;

    /**
     * Create a BackupPolicyBindings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupPolicyBindingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupPolicyBindingsArgs | BackupPolicyBindingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupPolicyBindingsState | undefined;
            resourceInputs["backupPolicyBindingsId"] = state?.backupPolicyBindingsId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["processing"] = state?.processing;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as BackupPolicyBindingsArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.policyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["backupPolicyBindingsId"] = args?.backupPolicyBindingsId;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["policyId"] = args?.policyId;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["processing"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupPolicyBindings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BackupPolicyBindings resources.
 */
export interface BackupPolicyBindingsState {
    backupPolicyBindingsId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    instanceId?: pulumi.Input<string>;
    policyId?: pulumi.Input<string>;
    processing?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.BackupPolicyBindingsTimeouts>;
}

/**
 * The set of arguments for constructing a BackupPolicyBindings resource.
 */
export interface BackupPolicyBindingsArgs {
    backupPolicyBindingsId?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    policyId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BackupPolicyBindingsTimeouts>;
}
