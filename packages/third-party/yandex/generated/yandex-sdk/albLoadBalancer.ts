// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlbLoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing AlbLoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlbLoadBalancerState, opts?: pulumi.CustomResourceOptions): AlbLoadBalancer {
        return new AlbLoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/albLoadBalancer:AlbLoadBalancer';

    /**
     * Returns true if the given object is an instance of AlbLoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlbLoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlbLoadBalancer.__pulumiType;
    }

    declare public readonly albLoadBalancerId: pulumi.Output<string>;
    declare public readonly allocationPolicy: pulumi.Output<outputs.AlbLoadBalancerAllocationPolicy>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly listeners: pulumi.Output<outputs.AlbLoadBalancerListener[] | undefined>;
    declare public /*out*/ readonly logGroupId: pulumi.Output<string>;
    declare public readonly logOptions: pulumi.Output<outputs.AlbLoadBalancerLogOptions | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<string>;
    declare public readonly regionId: pulumi.Output<string | undefined>;
    declare public readonly securityGroupIds: pulumi.Output<string[] | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.AlbLoadBalancerTimeouts | undefined>;

    /**
     * Create a AlbLoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlbLoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlbLoadBalancerArgs | AlbLoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlbLoadBalancerState | undefined;
            resourceInputs["albLoadBalancerId"] = state?.albLoadBalancerId;
            resourceInputs["allocationPolicy"] = state?.allocationPolicy;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["listeners"] = state?.listeners;
            resourceInputs["logGroupId"] = state?.logGroupId;
            resourceInputs["logOptions"] = state?.logOptions;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["regionId"] = state?.regionId;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["status"] = state?.status;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as AlbLoadBalancerArgs | undefined;
            if (args?.allocationPolicy === undefined && !opts.urn) {
                throw new Error("Missing required property 'allocationPolicy'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["albLoadBalancerId"] = args?.albLoadBalancerId;
            resourceInputs["allocationPolicy"] = args?.allocationPolicy;
            resourceInputs["description"] = args?.description;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["listeners"] = args?.listeners;
            resourceInputs["logOptions"] = args?.logOptions;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["regionId"] = args?.regionId;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["logGroupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlbLoadBalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlbLoadBalancer resources.
 */
export interface AlbLoadBalancerState {
    albLoadBalancerId?: pulumi.Input<string>;
    allocationPolicy?: pulumi.Input<inputs.AlbLoadBalancerAllocationPolicy>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    listeners?: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerListener>[]>;
    logGroupId?: pulumi.Input<string>;
    logOptions?: pulumi.Input<inputs.AlbLoadBalancerLogOptions>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    regionId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AlbLoadBalancerTimeouts>;
}

/**
 * The set of arguments for constructing a AlbLoadBalancer resource.
 */
export interface AlbLoadBalancerArgs {
    albLoadBalancerId?: pulumi.Input<string>;
    allocationPolicy: pulumi.Input<inputs.AlbLoadBalancerAllocationPolicy>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    listeners?: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerListener>[]>;
    logOptions?: pulumi.Input<inputs.AlbLoadBalancerLogOptions>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    regionId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.AlbLoadBalancerTimeouts>;
}
