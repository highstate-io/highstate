// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeInstance extends pulumi.CustomResource {
    /**
     * Get an existing ComputeInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeInstanceState, opts?: pulumi.CustomResourceOptions): ComputeInstance {
        return new ComputeInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/computeInstance:ComputeInstance';

    /**
     * Returns true if the given object is an instance of ComputeInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeInstance.__pulumiType;
    }

    declare public readonly allowRecreate: pulumi.Output<boolean | undefined>;
    declare public readonly allowStoppingForUpdate: pulumi.Output<boolean | undefined>;
    declare public readonly bootDisk: pulumi.Output<outputs.ComputeInstanceBootDisk>;
    declare public readonly computeInstanceId: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly filesystems: pulumi.Output<outputs.ComputeInstanceFilesystem[] | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public /*out*/ readonly fqdn: pulumi.Output<string>;
    declare public readonly gpuClusterId: pulumi.Output<string>;
    declare public readonly hostname: pulumi.Output<string>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly localDisks: pulumi.Output<outputs.ComputeInstanceLocalDisk[] | undefined>;
    declare public readonly maintenanceGracePeriod: pulumi.Output<string>;
    declare public readonly maintenancePolicy: pulumi.Output<string>;
    declare public readonly metadata: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly metadataOptions: pulumi.Output<outputs.ComputeInstanceMetadataOptions | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkAccelerationType: pulumi.Output<string | undefined>;
    declare public readonly networkInterfaces: pulumi.Output<outputs.ComputeInstanceNetworkInterface[]>;
    declare public readonly placementPolicy: pulumi.Output<outputs.ComputeInstancePlacementPolicy | undefined>;
    declare public readonly platformId: pulumi.Output<string | undefined>;
    declare public readonly resources: pulumi.Output<outputs.ComputeInstanceResources>;
    declare public readonly schedulingPolicy: pulumi.Output<outputs.ComputeInstanceSchedulingPolicy | undefined>;
    declare public readonly secondaryDisks: pulumi.Output<outputs.ComputeInstanceSecondaryDisk[] | undefined>;
    declare public readonly serviceAccountId: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.ComputeInstanceTimeouts | undefined>;
    declare public readonly zone: pulumi.Output<string>;

    /**
     * Create a ComputeInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeInstanceArgs | ComputeInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeInstanceState | undefined;
            resourceInputs["allowRecreate"] = state?.allowRecreate;
            resourceInputs["allowStoppingForUpdate"] = state?.allowStoppingForUpdate;
            resourceInputs["bootDisk"] = state?.bootDisk;
            resourceInputs["computeInstanceId"] = state?.computeInstanceId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["filesystems"] = state?.filesystems;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["fqdn"] = state?.fqdn;
            resourceInputs["gpuClusterId"] = state?.gpuClusterId;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["localDisks"] = state?.localDisks;
            resourceInputs["maintenanceGracePeriod"] = state?.maintenanceGracePeriod;
            resourceInputs["maintenancePolicy"] = state?.maintenancePolicy;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["metadataOptions"] = state?.metadataOptions;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkAccelerationType"] = state?.networkAccelerationType;
            resourceInputs["networkInterfaces"] = state?.networkInterfaces;
            resourceInputs["placementPolicy"] = state?.placementPolicy;
            resourceInputs["platformId"] = state?.platformId;
            resourceInputs["resources"] = state?.resources;
            resourceInputs["schedulingPolicy"] = state?.schedulingPolicy;
            resourceInputs["secondaryDisks"] = state?.secondaryDisks;
            resourceInputs["serviceAccountId"] = state?.serviceAccountId;
            resourceInputs["status"] = state?.status;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["zone"] = state?.zone;
        } else {
            const args = argsOrState as ComputeInstanceArgs | undefined;
            if (args?.bootDisk === undefined && !opts.urn) {
                throw new Error("Missing required property 'bootDisk'");
            }
            if (args?.networkInterfaces === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaces'");
            }
            if (args?.resources === undefined && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            resourceInputs["allowRecreate"] = args?.allowRecreate;
            resourceInputs["allowStoppingForUpdate"] = args?.allowStoppingForUpdate;
            resourceInputs["bootDisk"] = args?.bootDisk;
            resourceInputs["computeInstanceId"] = args?.computeInstanceId;
            resourceInputs["description"] = args?.description;
            resourceInputs["filesystems"] = args?.filesystems;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["gpuClusterId"] = args?.gpuClusterId;
            resourceInputs["hostname"] = args?.hostname;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["localDisks"] = args?.localDisks;
            resourceInputs["maintenanceGracePeriod"] = args?.maintenanceGracePeriod;
            resourceInputs["maintenancePolicy"] = args?.maintenancePolicy;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["metadataOptions"] = args?.metadataOptions;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkAccelerationType"] = args?.networkAccelerationType;
            resourceInputs["networkInterfaces"] = args?.networkInterfaces;
            resourceInputs["placementPolicy"] = args?.placementPolicy;
            resourceInputs["platformId"] = args?.platformId;
            resourceInputs["resources"] = args?.resources;
            resourceInputs["schedulingPolicy"] = args?.schedulingPolicy;
            resourceInputs["secondaryDisks"] = args?.secondaryDisks;
            resourceInputs["serviceAccountId"] = args?.serviceAccountId;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["zone"] = args?.zone;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeInstance resources.
 */
export interface ComputeInstanceState {
    allowRecreate?: pulumi.Input<boolean>;
    allowStoppingForUpdate?: pulumi.Input<boolean>;
    bootDisk?: pulumi.Input<inputs.ComputeInstanceBootDisk>;
    computeInstanceId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    filesystems?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceFilesystem>[]>;
    folderId?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    gpuClusterId?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    localDisks?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceLocalDisk>[]>;
    maintenanceGracePeriod?: pulumi.Input<string>;
    maintenancePolicy?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metadataOptions?: pulumi.Input<inputs.ComputeInstanceMetadataOptions>;
    name?: pulumi.Input<string>;
    networkAccelerationType?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceNetworkInterface>[]>;
    placementPolicy?: pulumi.Input<inputs.ComputeInstancePlacementPolicy>;
    platformId?: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.ComputeInstanceResources>;
    schedulingPolicy?: pulumi.Input<inputs.ComputeInstanceSchedulingPolicy>;
    secondaryDisks?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceSecondaryDisk>[]>;
    serviceAccountId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeInstanceTimeouts>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeInstance resource.
 */
export interface ComputeInstanceArgs {
    allowRecreate?: pulumi.Input<boolean>;
    allowStoppingForUpdate?: pulumi.Input<boolean>;
    bootDisk: pulumi.Input<inputs.ComputeInstanceBootDisk>;
    computeInstanceId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    filesystems?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceFilesystem>[]>;
    folderId?: pulumi.Input<string>;
    gpuClusterId?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    localDisks?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceLocalDisk>[]>;
    maintenanceGracePeriod?: pulumi.Input<string>;
    maintenancePolicy?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metadataOptions?: pulumi.Input<inputs.ComputeInstanceMetadataOptions>;
    name?: pulumi.Input<string>;
    networkAccelerationType?: pulumi.Input<string>;
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.ComputeInstanceNetworkInterface>[]>;
    placementPolicy?: pulumi.Input<inputs.ComputeInstancePlacementPolicy>;
    platformId?: pulumi.Input<string>;
    resources: pulumi.Input<inputs.ComputeInstanceResources>;
    schedulingPolicy?: pulumi.Input<inputs.ComputeInstanceSchedulingPolicy>;
    secondaryDisks?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceSecondaryDisk>[]>;
    serviceAccountId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeInstanceTimeouts>;
    zone?: pulumi.Input<string>;
}
