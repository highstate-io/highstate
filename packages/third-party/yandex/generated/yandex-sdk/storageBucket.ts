// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageBucket extends pulumi.CustomResource {
    /**
     * Get an existing StorageBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageBucketState, opts?: pulumi.CustomResourceOptions): StorageBucket {
        return new StorageBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/storageBucket:StorageBucket';

    /**
     * Returns true if the given object is an instance of StorageBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageBucket.__pulumiType;
    }

    declare public readonly accessKey: pulumi.Output<string | undefined>;
    declare public readonly acl: pulumi.Output<string | undefined>;
    declare public readonly anonymousAccessFlags: pulumi.Output<outputs.StorageBucketAnonymousAccessFlags | undefined>;
    declare public readonly bucket: pulumi.Output<string>;
    declare public /*out*/ readonly bucketDomainName: pulumi.Output<string>;
    declare public readonly bucketPrefix: pulumi.Output<string | undefined>;
    declare public readonly corsRules: pulumi.Output<outputs.StorageBucketCorsRule[] | undefined>;
    declare public readonly defaultStorageClass: pulumi.Output<string>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    declare public readonly grants: pulumi.Output<outputs.StorageBucketGrant[] | undefined>;
    declare public readonly https: pulumi.Output<outputs.StorageBucketHttps | undefined>;
    declare public readonly lifecycleRules: pulumi.Output<outputs.StorageBucketLifecycleRule[] | undefined>;
    declare public readonly loggings: pulumi.Output<outputs.StorageBucketLogging[] | undefined>;
    declare public readonly maxSize: pulumi.Output<number | undefined>;
    declare public readonly objectLockConfiguration: pulumi.Output<outputs.StorageBucketObjectLockConfiguration | undefined>;
    declare public readonly policy: pulumi.Output<string | undefined>;
    declare public readonly secretKey: pulumi.Output<string | undefined>;
    declare public readonly serverSideEncryptionConfiguration: pulumi.Output<outputs.StorageBucketServerSideEncryptionConfiguration | undefined>;
    declare public readonly storageBucketId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly versioning: pulumi.Output<outputs.StorageBucketVersioning | undefined>;
    declare public readonly website: pulumi.Output<outputs.StorageBucketWebsite | undefined>;
    declare public readonly websiteDomain: pulumi.Output<string>;
    declare public readonly websiteEndpoint: pulumi.Output<string>;

    /**
     * Create a StorageBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StorageBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageBucketArgs | StorageBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageBucketState | undefined;
            resourceInputs["accessKey"] = state?.accessKey;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["anonymousAccessFlags"] = state?.anonymousAccessFlags;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["bucketDomainName"] = state?.bucketDomainName;
            resourceInputs["bucketPrefix"] = state?.bucketPrefix;
            resourceInputs["corsRules"] = state?.corsRules;
            resourceInputs["defaultStorageClass"] = state?.defaultStorageClass;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["grants"] = state?.grants;
            resourceInputs["https"] = state?.https;
            resourceInputs["lifecycleRules"] = state?.lifecycleRules;
            resourceInputs["loggings"] = state?.loggings;
            resourceInputs["maxSize"] = state?.maxSize;
            resourceInputs["objectLockConfiguration"] = state?.objectLockConfiguration;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["serverSideEncryptionConfiguration"] = state?.serverSideEncryptionConfiguration;
            resourceInputs["storageBucketId"] = state?.storageBucketId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["versioning"] = state?.versioning;
            resourceInputs["website"] = state?.website;
            resourceInputs["websiteDomain"] = state?.websiteDomain;
            resourceInputs["websiteEndpoint"] = state?.websiteEndpoint;
        } else {
            const args = argsOrState as StorageBucketArgs | undefined;
            resourceInputs["accessKey"] = args?.accessKey;
            resourceInputs["acl"] = args?.acl;
            resourceInputs["anonymousAccessFlags"] = args?.anonymousAccessFlags;
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["bucketPrefix"] = args?.bucketPrefix;
            resourceInputs["corsRules"] = args?.corsRules;
            resourceInputs["defaultStorageClass"] = args?.defaultStorageClass;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["grants"] = args?.grants;
            resourceInputs["https"] = args?.https;
            resourceInputs["lifecycleRules"] = args?.lifecycleRules;
            resourceInputs["loggings"] = args?.loggings;
            resourceInputs["maxSize"] = args?.maxSize;
            resourceInputs["objectLockConfiguration"] = args?.objectLockConfiguration;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["serverSideEncryptionConfiguration"] = args?.serverSideEncryptionConfiguration;
            resourceInputs["storageBucketId"] = args?.storageBucketId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["versioning"] = args?.versioning;
            resourceInputs["website"] = args?.website;
            resourceInputs["websiteDomain"] = args?.websiteDomain;
            resourceInputs["websiteEndpoint"] = args?.websiteEndpoint;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StorageBucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageBucket resources.
 */
export interface StorageBucketState {
    accessKey?: pulumi.Input<string>;
    acl?: pulumi.Input<string>;
    anonymousAccessFlags?: pulumi.Input<inputs.StorageBucketAnonymousAccessFlags>;
    bucket?: pulumi.Input<string>;
    bucketDomainName?: pulumi.Input<string>;
    bucketPrefix?: pulumi.Input<string>;
    corsRules?: pulumi.Input<pulumi.Input<inputs.StorageBucketCorsRule>[]>;
    defaultStorageClass?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    grants?: pulumi.Input<pulumi.Input<inputs.StorageBucketGrant>[]>;
    https?: pulumi.Input<inputs.StorageBucketHttps>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.StorageBucketLifecycleRule>[]>;
    loggings?: pulumi.Input<pulumi.Input<inputs.StorageBucketLogging>[]>;
    maxSize?: pulumi.Input<number>;
    objectLockConfiguration?: pulumi.Input<inputs.StorageBucketObjectLockConfiguration>;
    policy?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.StorageBucketServerSideEncryptionConfiguration>;
    storageBucketId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    versioning?: pulumi.Input<inputs.StorageBucketVersioning>;
    website?: pulumi.Input<inputs.StorageBucketWebsite>;
    websiteDomain?: pulumi.Input<string>;
    websiteEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageBucket resource.
 */
export interface StorageBucketArgs {
    accessKey?: pulumi.Input<string>;
    acl?: pulumi.Input<string>;
    anonymousAccessFlags?: pulumi.Input<inputs.StorageBucketAnonymousAccessFlags>;
    bucket?: pulumi.Input<string>;
    bucketPrefix?: pulumi.Input<string>;
    corsRules?: pulumi.Input<pulumi.Input<inputs.StorageBucketCorsRule>[]>;
    defaultStorageClass?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    grants?: pulumi.Input<pulumi.Input<inputs.StorageBucketGrant>[]>;
    https?: pulumi.Input<inputs.StorageBucketHttps>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.StorageBucketLifecycleRule>[]>;
    loggings?: pulumi.Input<pulumi.Input<inputs.StorageBucketLogging>[]>;
    maxSize?: pulumi.Input<number>;
    objectLockConfiguration?: pulumi.Input<inputs.StorageBucketObjectLockConfiguration>;
    policy?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.StorageBucketServerSideEncryptionConfiguration>;
    storageBucketId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    versioning?: pulumi.Input<inputs.StorageBucketVersioning>;
    website?: pulumi.Input<inputs.StorageBucketWebsite>;
    websiteDomain?: pulumi.Input<string>;
    websiteEndpoint?: pulumi.Input<string>;
}
