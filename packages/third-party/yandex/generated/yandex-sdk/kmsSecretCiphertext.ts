// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KmsSecretCiphertext extends pulumi.CustomResource {
    /**
     * Get an existing KmsSecretCiphertext resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsSecretCiphertextState, opts?: pulumi.CustomResourceOptions): KmsSecretCiphertext {
        return new KmsSecretCiphertext(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/kmsSecretCiphertext:KmsSecretCiphertext';

    /**
     * Returns true if the given object is an instance of KmsSecretCiphertext.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsSecretCiphertext {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsSecretCiphertext.__pulumiType;
    }

    declare public readonly aadContext: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly ciphertext: pulumi.Output<string>;
    declare public readonly keyId: pulumi.Output<string>;
    declare public readonly kmsSecretCiphertextId: pulumi.Output<string>;
    declare public readonly plaintext: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.KmsSecretCiphertextTimeouts | undefined>;

    /**
     * Create a KmsSecretCiphertext resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsSecretCiphertextArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsSecretCiphertextArgs | KmsSecretCiphertextState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsSecretCiphertextState | undefined;
            resourceInputs["aadContext"] = state?.aadContext;
            resourceInputs["ciphertext"] = state?.ciphertext;
            resourceInputs["keyId"] = state?.keyId;
            resourceInputs["kmsSecretCiphertextId"] = state?.kmsSecretCiphertextId;
            resourceInputs["plaintext"] = state?.plaintext;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as KmsSecretCiphertextArgs | undefined;
            if (args?.keyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if (args?.plaintext === undefined && !opts.urn) {
                throw new Error("Missing required property 'plaintext'");
            }
            resourceInputs["aadContext"] = args?.aadContext;
            resourceInputs["keyId"] = args?.keyId;
            resourceInputs["kmsSecretCiphertextId"] = args?.kmsSecretCiphertextId;
            resourceInputs["plaintext"] = args?.plaintext ? pulumi.secret(args.plaintext) : undefined;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["ciphertext"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["plaintext"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KmsSecretCiphertext.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsSecretCiphertext resources.
 */
export interface KmsSecretCiphertextState {
    aadContext?: pulumi.Input<string>;
    ciphertext?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    kmsSecretCiphertextId?: pulumi.Input<string>;
    plaintext?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsSecretCiphertextTimeouts>;
}

/**
 * The set of arguments for constructing a KmsSecretCiphertext resource.
 */
export interface KmsSecretCiphertextArgs {
    aadContext?: pulumi.Input<string>;
    keyId: pulumi.Input<string>;
    kmsSecretCiphertextId?: pulumi.Input<string>;
    plaintext: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsSecretCiphertextTimeouts>;
}
