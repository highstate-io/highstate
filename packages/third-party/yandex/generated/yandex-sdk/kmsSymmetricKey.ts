// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KmsSymmetricKey extends pulumi.CustomResource {
    /**
     * Get an existing KmsSymmetricKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsSymmetricKeyState, opts?: pulumi.CustomResourceOptions): KmsSymmetricKey {
        return new KmsSymmetricKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/kmsSymmetricKey:KmsSymmetricKey';

    /**
     * Returns true if the given object is an instance of KmsSymmetricKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsSymmetricKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsSymmetricKey.__pulumiType;
    }

    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly defaultAlgorithm: pulumi.Output<string | undefined>;
    declare public readonly deletionProtection: pulumi.Output<boolean | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly kmsSymmetricKeyId: pulumi.Output<string>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly rotatedAt: pulumi.Output<string>;
    declare public readonly rotationPeriod: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.KmsSymmetricKeyTimeouts | undefined>;

    /**
     * Create a KmsSymmetricKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KmsSymmetricKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsSymmetricKeyArgs | KmsSymmetricKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsSymmetricKeyState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["defaultAlgorithm"] = state?.defaultAlgorithm;
            resourceInputs["deletionProtection"] = state?.deletionProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["kmsSymmetricKeyId"] = state?.kmsSymmetricKeyId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["rotatedAt"] = state?.rotatedAt;
            resourceInputs["rotationPeriod"] = state?.rotationPeriod;
            resourceInputs["status"] = state?.status;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as KmsSymmetricKeyArgs | undefined;
            resourceInputs["defaultAlgorithm"] = args?.defaultAlgorithm;
            resourceInputs["deletionProtection"] = args?.deletionProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["kmsSymmetricKeyId"] = args?.kmsSymmetricKeyId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["rotationPeriod"] = args?.rotationPeriod;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["rotatedAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmsSymmetricKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsSymmetricKey resources.
 */
export interface KmsSymmetricKeyState {
    createdAt?: pulumi.Input<string>;
    defaultAlgorithm?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    kmsSymmetricKeyId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    rotatedAt?: pulumi.Input<string>;
    rotationPeriod?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsSymmetricKeyTimeouts>;
}

/**
 * The set of arguments for constructing a KmsSymmetricKey resource.
 */
export interface KmsSymmetricKeyArgs {
    defaultAlgorithm?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    kmsSymmetricKeyId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    rotationPeriod?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KmsSymmetricKeyTimeouts>;
}
