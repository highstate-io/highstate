// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcSecurityGroupRule extends pulumi.CustomResource {
    /**
     * Get an existing VpcSecurityGroupRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcSecurityGroupRuleState, opts?: pulumi.CustomResourceOptions): VpcSecurityGroupRule {
        return new VpcSecurityGroupRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/vpcSecurityGroupRule:VpcSecurityGroupRule';

    /**
     * Returns true if the given object is an instance of VpcSecurityGroupRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcSecurityGroupRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcSecurityGroupRule.__pulumiType;
    }

    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly direction: pulumi.Output<string>;
    declare public readonly fromPort: pulumi.Output<number | undefined>;
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    declare public readonly port: pulumi.Output<number | undefined>;
    declare public readonly predefinedTarget: pulumi.Output<string | undefined>;
    declare public readonly protocol: pulumi.Output<string | undefined>;
    declare public readonly securityGroupBinding: pulumi.Output<string>;
    declare public readonly securityGroupId: pulumi.Output<string | undefined>;
    declare public readonly timeouts: pulumi.Output<outputs.VpcSecurityGroupRuleTimeouts | undefined>;
    declare public readonly toPort: pulumi.Output<number | undefined>;
    declare public readonly v4CidrBlocks: pulumi.Output<string[] | undefined>;
    declare public readonly v6CidrBlocks: pulumi.Output<string[] | undefined>;
    declare public readonly vpcSecurityGroupRuleId: pulumi.Output<string>;

    /**
     * Create a VpcSecurityGroupRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcSecurityGroupRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcSecurityGroupRuleArgs | VpcSecurityGroupRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcSecurityGroupRuleState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["direction"] = state?.direction;
            resourceInputs["fromPort"] = state?.fromPort;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["port"] = state?.port;
            resourceInputs["predefinedTarget"] = state?.predefinedTarget;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["securityGroupBinding"] = state?.securityGroupBinding;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["toPort"] = state?.toPort;
            resourceInputs["v4CidrBlocks"] = state?.v4CidrBlocks;
            resourceInputs["v6CidrBlocks"] = state?.v6CidrBlocks;
            resourceInputs["vpcSecurityGroupRuleId"] = state?.vpcSecurityGroupRuleId;
        } else {
            const args = argsOrState as VpcSecurityGroupRuleArgs | undefined;
            if (args?.direction === undefined && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if (args?.securityGroupBinding === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupBinding'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["direction"] = args?.direction;
            resourceInputs["fromPort"] = args?.fromPort;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["port"] = args?.port;
            resourceInputs["predefinedTarget"] = args?.predefinedTarget;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["securityGroupBinding"] = args?.securityGroupBinding;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["toPort"] = args?.toPort;
            resourceInputs["v4CidrBlocks"] = args?.v4CidrBlocks;
            resourceInputs["v6CidrBlocks"] = args?.v6CidrBlocks;
            resourceInputs["vpcSecurityGroupRuleId"] = args?.vpcSecurityGroupRuleId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcSecurityGroupRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcSecurityGroupRule resources.
 */
export interface VpcSecurityGroupRuleState {
    description?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    port?: pulumi.Input<number>;
    predefinedTarget?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    securityGroupBinding?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpcSecurityGroupRuleTimeouts>;
    toPort?: pulumi.Input<number>;
    v4CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    v6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    vpcSecurityGroupRuleId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcSecurityGroupRule resource.
 */
export interface VpcSecurityGroupRuleArgs {
    description?: pulumi.Input<string>;
    direction: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    port?: pulumi.Input<number>;
    predefinedTarget?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    securityGroupBinding: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpcSecurityGroupRuleTimeouts>;
    toPort?: pulumi.Input<number>;
    v4CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    v6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    vpcSecurityGroupRuleId?: pulumi.Input<string>;
}
