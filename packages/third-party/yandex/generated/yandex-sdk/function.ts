// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionState, opts?: pulumi.CustomResourceOptions): Function {
        return new Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/function:Function';

    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }

    declare public readonly asyncInvocation: pulumi.Output<outputs.FunctionAsyncInvocation | undefined>;
    declare public readonly concurrency: pulumi.Output<number>;
    declare public readonly connectivity: pulumi.Output<outputs.FunctionConnectivity | undefined>;
    declare public readonly content: pulumi.Output<outputs.FunctionContent | undefined>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly entrypoint: pulumi.Output<string>;
    declare public readonly environment: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly executionTimeout: pulumi.Output<string | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly functionId: pulumi.Output<string>;
    declare public /*out*/ readonly imageSize: pulumi.Output<number>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly logOptions: pulumi.Output<outputs.FunctionLogOptions | undefined>;
    declare public readonly memory: pulumi.Output<number>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly package: pulumi.Output<outputs.FunctionPackage | undefined>;
    declare public readonly runtime: pulumi.Output<string>;
    declare public readonly secrets: pulumi.Output<outputs.FunctionSecret[] | undefined>;
    declare public readonly serviceAccountId: pulumi.Output<string | undefined>;
    declare public readonly storageMounts: pulumi.Output<outputs.FunctionStorageMount[] | undefined>;
    declare public readonly tags: pulumi.Output<string[]>;
    declare public readonly timeouts: pulumi.Output<outputs.FunctionTimeouts | undefined>;
    declare public readonly tmpfsSize: pulumi.Output<number>;
    declare public readonly userHash: pulumi.Output<string>;
    declare public /*out*/ readonly version: pulumi.Output<string>;

    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionArgs | FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionState | undefined;
            resourceInputs["asyncInvocation"] = state?.asyncInvocation;
            resourceInputs["concurrency"] = state?.concurrency;
            resourceInputs["connectivity"] = state?.connectivity;
            resourceInputs["content"] = state?.content;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["entrypoint"] = state?.entrypoint;
            resourceInputs["environment"] = state?.environment;
            resourceInputs["executionTimeout"] = state?.executionTimeout;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["functionId"] = state?.functionId;
            resourceInputs["imageSize"] = state?.imageSize;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["logOptions"] = state?.logOptions;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["name"] = state?.name;
            resourceInputs["package"] = state?.package;
            resourceInputs["runtime"] = state?.runtime;
            resourceInputs["secrets"] = state?.secrets;
            resourceInputs["serviceAccountId"] = state?.serviceAccountId;
            resourceInputs["storageMounts"] = state?.storageMounts;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timeouts"] = state?.timeouts;
            resourceInputs["tmpfsSize"] = state?.tmpfsSize;
            resourceInputs["userHash"] = state?.userHash;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as FunctionArgs | undefined;
            if (args?.entrypoint === undefined && !opts.urn) {
                throw new Error("Missing required property 'entrypoint'");
            }
            if (args?.memory === undefined && !opts.urn) {
                throw new Error("Missing required property 'memory'");
            }
            if (args?.runtime === undefined && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if (args?.userHash === undefined && !opts.urn) {
                throw new Error("Missing required property 'userHash'");
            }
            resourceInputs["asyncInvocation"] = args?.asyncInvocation;
            resourceInputs["concurrency"] = args?.concurrency;
            resourceInputs["connectivity"] = args?.connectivity;
            resourceInputs["content"] = args?.content;
            resourceInputs["description"] = args?.description;
            resourceInputs["entrypoint"] = args?.entrypoint;
            resourceInputs["environment"] = args?.environment;
            resourceInputs["executionTimeout"] = args?.executionTimeout;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["functionId"] = args?.functionId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["logOptions"] = args?.logOptions;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["name"] = args?.name;
            resourceInputs["package"] = args?.package;
            resourceInputs["runtime"] = args?.runtime;
            resourceInputs["secrets"] = args?.secrets;
            resourceInputs["serviceAccountId"] = args?.serviceAccountId;
            resourceInputs["storageMounts"] = args?.storageMounts;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["tmpfsSize"] = args?.tmpfsSize;
            resourceInputs["userHash"] = args?.userHash;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["imageSize"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Function.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Function resources.
 */
export interface FunctionState {
    asyncInvocation?: pulumi.Input<inputs.FunctionAsyncInvocation>;
    concurrency?: pulumi.Input<number>;
    connectivity?: pulumi.Input<inputs.FunctionConnectivity>;
    content?: pulumi.Input<inputs.FunctionContent>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    entrypoint?: pulumi.Input<string>;
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    executionTimeout?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    functionId?: pulumi.Input<string>;
    imageSize?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logOptions?: pulumi.Input<inputs.FunctionLogOptions>;
    memory?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    package?: pulumi.Input<inputs.FunctionPackage>;
    runtime?: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.FunctionSecret>[]>;
    serviceAccountId?: pulumi.Input<string>;
    storageMounts?: pulumi.Input<pulumi.Input<inputs.FunctionStorageMount>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.FunctionTimeouts>;
    tmpfsSize?: pulumi.Input<number>;
    userHash?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Function resource.
 */
export interface FunctionArgs {
    asyncInvocation?: pulumi.Input<inputs.FunctionAsyncInvocation>;
    concurrency?: pulumi.Input<number>;
    connectivity?: pulumi.Input<inputs.FunctionConnectivity>;
    content?: pulumi.Input<inputs.FunctionContent>;
    description?: pulumi.Input<string>;
    entrypoint: pulumi.Input<string>;
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    executionTimeout?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    functionId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logOptions?: pulumi.Input<inputs.FunctionLogOptions>;
    memory: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    package?: pulumi.Input<inputs.FunctionPackage>;
    runtime: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.FunctionSecret>[]>;
    serviceAccountId?: pulumi.Input<string>;
    storageMounts?: pulumi.Input<pulumi.Input<inputs.FunctionStorageMount>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.FunctionTimeouts>;
    tmpfsSize?: pulumi.Input<number>;
    userHash: pulumi.Input<string>;
}
