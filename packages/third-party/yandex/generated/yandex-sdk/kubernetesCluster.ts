// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesCluster extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesClusterState, opts?: pulumi.CustomResourceOptions): KubernetesCluster {
        return new KubernetesCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/kubernetesCluster:KubernetesCluster';

    /**
     * Returns true if the given object is an instance of KubernetesCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesCluster.__pulumiType;
    }

    declare public readonly clusterIpv4Range: pulumi.Output<string>;
    declare public readonly clusterIpv6Range: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public /*out*/ readonly health: pulumi.Output<string>;
    declare public readonly kmsProvider: pulumi.Output<outputs.KubernetesClusterKmsProvider | undefined>;
    declare public readonly kubernetesClusterId: pulumi.Output<string>;
    declare public readonly labels: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly logGroupId: pulumi.Output<string>;
    declare public readonly master: pulumi.Output<outputs.KubernetesClusterMaster>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<string>;
    declare public readonly networkImplementation: pulumi.Output<outputs.KubernetesClusterNetworkImplementation | undefined>;
    declare public readonly networkPolicyProvider: pulumi.Output<string | undefined>;
    declare public readonly nodeIpv4CidrMaskSize: pulumi.Output<number | undefined>;
    declare public readonly nodeServiceAccountId: pulumi.Output<string>;
    declare public readonly releaseChannel: pulumi.Output<string>;
    declare public readonly serviceAccountId: pulumi.Output<string>;
    declare public readonly serviceIpv4Range: pulumi.Output<string>;
    declare public readonly serviceIpv6Range: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.KubernetesClusterTimeouts | undefined>;

    /**
     * Create a KubernetesCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesClusterArgs | KubernetesClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesClusterState | undefined;
            resourceInputs["clusterIpv4Range"] = state?.clusterIpv4Range;
            resourceInputs["clusterIpv6Range"] = state?.clusterIpv6Range;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["health"] = state?.health;
            resourceInputs["kmsProvider"] = state?.kmsProvider;
            resourceInputs["kubernetesClusterId"] = state?.kubernetesClusterId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["logGroupId"] = state?.logGroupId;
            resourceInputs["master"] = state?.master;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["networkImplementation"] = state?.networkImplementation;
            resourceInputs["networkPolicyProvider"] = state?.networkPolicyProvider;
            resourceInputs["nodeIpv4CidrMaskSize"] = state?.nodeIpv4CidrMaskSize;
            resourceInputs["nodeServiceAccountId"] = state?.nodeServiceAccountId;
            resourceInputs["releaseChannel"] = state?.releaseChannel;
            resourceInputs["serviceAccountId"] = state?.serviceAccountId;
            resourceInputs["serviceIpv4Range"] = state?.serviceIpv4Range;
            resourceInputs["serviceIpv6Range"] = state?.serviceIpv6Range;
            resourceInputs["status"] = state?.status;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as KubernetesClusterArgs | undefined;
            if (args?.master === undefined && !opts.urn) {
                throw new Error("Missing required property 'master'");
            }
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.nodeServiceAccountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodeServiceAccountId'");
            }
            if (args?.serviceAccountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            resourceInputs["clusterIpv4Range"] = args?.clusterIpv4Range;
            resourceInputs["clusterIpv6Range"] = args?.clusterIpv6Range;
            resourceInputs["description"] = args?.description;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["kmsProvider"] = args?.kmsProvider;
            resourceInputs["kubernetesClusterId"] = args?.kubernetesClusterId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["master"] = args?.master;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["networkImplementation"] = args?.networkImplementation;
            resourceInputs["networkPolicyProvider"] = args?.networkPolicyProvider;
            resourceInputs["nodeIpv4CidrMaskSize"] = args?.nodeIpv4CidrMaskSize;
            resourceInputs["nodeServiceAccountId"] = args?.nodeServiceAccountId;
            resourceInputs["releaseChannel"] = args?.releaseChannel;
            resourceInputs["serviceAccountId"] = args?.serviceAccountId;
            resourceInputs["serviceIpv4Range"] = args?.serviceIpv4Range;
            resourceInputs["serviceIpv6Range"] = args?.serviceIpv6Range;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["logGroupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesCluster resources.
 */
export interface KubernetesClusterState {
    clusterIpv4Range?: pulumi.Input<string>;
    clusterIpv6Range?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    health?: pulumi.Input<string>;
    kmsProvider?: pulumi.Input<inputs.KubernetesClusterKmsProvider>;
    kubernetesClusterId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logGroupId?: pulumi.Input<string>;
    master?: pulumi.Input<inputs.KubernetesClusterMaster>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    networkImplementation?: pulumi.Input<inputs.KubernetesClusterNetworkImplementation>;
    networkPolicyProvider?: pulumi.Input<string>;
    nodeIpv4CidrMaskSize?: pulumi.Input<number>;
    nodeServiceAccountId?: pulumi.Input<string>;
    releaseChannel?: pulumi.Input<string>;
    serviceAccountId?: pulumi.Input<string>;
    serviceIpv4Range?: pulumi.Input<string>;
    serviceIpv6Range?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KubernetesClusterTimeouts>;
}

/**
 * The set of arguments for constructing a KubernetesCluster resource.
 */
export interface KubernetesClusterArgs {
    clusterIpv4Range?: pulumi.Input<string>;
    clusterIpv6Range?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    kmsProvider?: pulumi.Input<inputs.KubernetesClusterKmsProvider>;
    kubernetesClusterId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    master: pulumi.Input<inputs.KubernetesClusterMaster>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    networkImplementation?: pulumi.Input<inputs.KubernetesClusterNetworkImplementation>;
    networkPolicyProvider?: pulumi.Input<string>;
    nodeIpv4CidrMaskSize?: pulumi.Input<number>;
    nodeServiceAccountId: pulumi.Input<string>;
    releaseChannel?: pulumi.Input<string>;
    serviceAccountId: pulumi.Input<string>;
    serviceIpv4Range?: pulumi.Input<string>;
    serviceIpv6Range?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KubernetesClusterTimeouts>;
}
