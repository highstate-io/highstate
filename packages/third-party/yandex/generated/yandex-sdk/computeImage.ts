// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeImage extends pulumi.CustomResource {
    /**
     * Get an existing ComputeImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeImageState, opts?: pulumi.CustomResourceOptions): ComputeImage {
        return new ComputeImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/computeImage:ComputeImage';

    /**
     * Returns true if the given object is an instance of ComputeImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeImage.__pulumiType;
    }

    declare public readonly computeImageId: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly family: pulumi.Output<string | undefined>;
    declare public readonly folderId: pulumi.Output<string>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly minDiskSize: pulumi.Output<number>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly osType: pulumi.Output<string>;
    declare public readonly pooled: pulumi.Output<boolean>;
    declare public readonly productIds: pulumi.Output<string[]>;
    declare public /*out*/ readonly size: pulumi.Output<number>;
    declare public readonly sourceDisk: pulumi.Output<string>;
    declare public readonly sourceFamily: pulumi.Output<string>;
    declare public readonly sourceImage: pulumi.Output<string>;
    declare public readonly sourceSnapshot: pulumi.Output<string>;
    declare public readonly sourceUrl: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.ComputeImageTimeouts | undefined>;

    /**
     * Create a ComputeImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ComputeImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeImageArgs | ComputeImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeImageState | undefined;
            resourceInputs["computeImageId"] = state?.computeImageId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["family"] = state?.family;
            resourceInputs["folderId"] = state?.folderId;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["minDiskSize"] = state?.minDiskSize;
            resourceInputs["name"] = state?.name;
            resourceInputs["osType"] = state?.osType;
            resourceInputs["pooled"] = state?.pooled;
            resourceInputs["productIds"] = state?.productIds;
            resourceInputs["size"] = state?.size;
            resourceInputs["sourceDisk"] = state?.sourceDisk;
            resourceInputs["sourceFamily"] = state?.sourceFamily;
            resourceInputs["sourceImage"] = state?.sourceImage;
            resourceInputs["sourceSnapshot"] = state?.sourceSnapshot;
            resourceInputs["sourceUrl"] = state?.sourceUrl;
            resourceInputs["status"] = state?.status;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as ComputeImageArgs | undefined;
            resourceInputs["computeImageId"] = args?.computeImageId;
            resourceInputs["description"] = args?.description;
            resourceInputs["family"] = args?.family;
            resourceInputs["folderId"] = args?.folderId;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["minDiskSize"] = args?.minDiskSize;
            resourceInputs["name"] = args?.name;
            resourceInputs["osType"] = args?.osType;
            resourceInputs["pooled"] = args?.pooled;
            resourceInputs["productIds"] = args?.productIds;
            resourceInputs["sourceDisk"] = args?.sourceDisk;
            resourceInputs["sourceFamily"] = args?.sourceFamily;
            resourceInputs["sourceImage"] = args?.sourceImage;
            resourceInputs["sourceSnapshot"] = args?.sourceSnapshot;
            resourceInputs["sourceUrl"] = args?.sourceUrl;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeImage resources.
 */
export interface ComputeImageState {
    computeImageId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    minDiskSize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    pooled?: pulumi.Input<boolean>;
    productIds?: pulumi.Input<pulumi.Input<string>[]>;
    size?: pulumi.Input<number>;
    sourceDisk?: pulumi.Input<string>;
    sourceFamily?: pulumi.Input<string>;
    sourceImage?: pulumi.Input<string>;
    sourceSnapshot?: pulumi.Input<string>;
    sourceUrl?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeImageTimeouts>;
}

/**
 * The set of arguments for constructing a ComputeImage resource.
 */
export interface ComputeImageArgs {
    computeImageId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    minDiskSize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    pooled?: pulumi.Input<boolean>;
    productIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourceDisk?: pulumi.Input<string>;
    sourceFamily?: pulumi.Input<string>;
    sourceImage?: pulumi.Input<string>;
    sourceSnapshot?: pulumi.Input<string>;
    sourceUrl?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeImageTimeouts>;
}
