/// The secret stores sensitive configuration values for instances, service accounts, and system components.
///
/// Secrets can be instance-owned (for unit configuration), service account-owned, or system-level
/// (like Pulumi passwords). 
///
/// Secrets persist through normal destroy (recreate) operations
/// and are only deleted when explicitly forgetting instance state with the deleteSecrets flag or when manually deleted.
///
/// Secret updates invalidate instance input hashes via inputHashNonce, triggering re-execution
/// during operations. But the content of the secrets itself do not contribute to the input hash.
///
/// System secrets like Pulumi passwords are created on-demand and persist for the whole project lifetime.
model Secret {
    /// The CUIDv2 of the secret.
    id String @id @default(cuid(2))

    /// The metadata of the secret managed by the backend.
    ///
    /// [GlobalCommonObjectMeta]
    meta Json

    /// The ID of the state of the instance owning this secret.
    stateId String?

    /// The name of the secret within the instance.
    ///
    /// Will be null if the secret is not owned by an instance.
    name String?

    /// The name of the secret within the project if the secret is a system secret.
    systemName String? @unique

    /// The ID of the service account owning this secret.
    serviceAccountId String?

    /// The content of the secret.
    ///
    /// ![unknown]
    content Json

    /// The time when the secret was created.
    createdAt DateTime @default(now())

    /// The time when the secret was last updated.
    updatedAt DateTime @updatedAt

    /// The instance this secret belongs to.
    state InstanceState? @relation(fields: [stateId], references: [id])

    /// The service account this secret belongs to.
    serviceAccount ServiceAccount? @relation(fields: [serviceAccountId], references: [id])

    @@unique([stateId, name]) // the name must be unique within the instance
}
