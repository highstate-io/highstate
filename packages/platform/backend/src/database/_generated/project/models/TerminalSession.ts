
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TerminalSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TerminalSession
 * The terminal session represents a single interactive connection to a terminal.
 * 
 * Each session tracks when it started and finished. All session output is preserved in logs.
 */
export type TerminalSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$TerminalSessionPayload>

export type AggregateTerminalSession = {
  _count: TerminalSessionCountAggregateOutputType | null
  _min: TerminalSessionMinAggregateOutputType | null
  _max: TerminalSessionMaxAggregateOutputType | null
}

export type TerminalSessionMinAggregateOutputType = {
  id: string | null
  terminalId: string | null
  startedAt: Date | null
  finishedAt: Date | null
}

export type TerminalSessionMaxAggregateOutputType = {
  id: string | null
  terminalId: string | null
  startedAt: Date | null
  finishedAt: Date | null
}

export type TerminalSessionCountAggregateOutputType = {
  id: number
  terminalId: number
  startedAt: number
  finishedAt: number
  _all: number
}


export type TerminalSessionMinAggregateInputType = {
  id?: true
  terminalId?: true
  startedAt?: true
  finishedAt?: true
}

export type TerminalSessionMaxAggregateInputType = {
  id?: true
  terminalId?: true
  startedAt?: true
  finishedAt?: true
}

export type TerminalSessionCountAggregateInputType = {
  id?: true
  terminalId?: true
  startedAt?: true
  finishedAt?: true
  _all?: true
}

export type TerminalSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TerminalSession to aggregate.
   */
  where?: Prisma.TerminalSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TerminalSessions to fetch.
   */
  orderBy?: Prisma.TerminalSessionOrderByWithRelationInput | Prisma.TerminalSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TerminalSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TerminalSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TerminalSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TerminalSessions
  **/
  _count?: true | TerminalSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TerminalSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TerminalSessionMaxAggregateInputType
}

export type GetTerminalSessionAggregateType<T extends TerminalSessionAggregateArgs> = {
      [P in keyof T & keyof AggregateTerminalSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTerminalSession[P]>
    : Prisma.GetScalarType<T[P], AggregateTerminalSession[P]>
}




export type TerminalSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TerminalSessionWhereInput
  orderBy?: Prisma.TerminalSessionOrderByWithAggregationInput | Prisma.TerminalSessionOrderByWithAggregationInput[]
  by: Prisma.TerminalSessionScalarFieldEnum[] | Prisma.TerminalSessionScalarFieldEnum
  having?: Prisma.TerminalSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TerminalSessionCountAggregateInputType | true
  _min?: TerminalSessionMinAggregateInputType
  _max?: TerminalSessionMaxAggregateInputType
}

export type TerminalSessionGroupByOutputType = {
  id: string
  terminalId: string
  startedAt: Date
  finishedAt: Date | null
  _count: TerminalSessionCountAggregateOutputType | null
  _min: TerminalSessionMinAggregateOutputType | null
  _max: TerminalSessionMaxAggregateOutputType | null
}

type GetTerminalSessionGroupByPayload<T extends TerminalSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TerminalSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TerminalSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TerminalSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TerminalSessionGroupByOutputType[P]>
      }
    >
  >



export type TerminalSessionWhereInput = {
  AND?: Prisma.TerminalSessionWhereInput | Prisma.TerminalSessionWhereInput[]
  OR?: Prisma.TerminalSessionWhereInput[]
  NOT?: Prisma.TerminalSessionWhereInput | Prisma.TerminalSessionWhereInput[]
  id?: Prisma.StringFilter<"TerminalSession"> | string
  terminalId?: Prisma.StringFilter<"TerminalSession"> | string
  startedAt?: Prisma.DateTimeFilter<"TerminalSession"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"TerminalSession"> | Date | string | null
  terminal?: Prisma.XOR<Prisma.TerminalScalarRelationFilter, Prisma.TerminalWhereInput>
  logs?: Prisma.TerminalSessionLogListRelationFilter
}

export type TerminalSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  terminalId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  terminal?: Prisma.TerminalOrderByWithRelationInput
  logs?: Prisma.TerminalSessionLogOrderByRelationAggregateInput
}

export type TerminalSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TerminalSessionWhereInput | Prisma.TerminalSessionWhereInput[]
  OR?: Prisma.TerminalSessionWhereInput[]
  NOT?: Prisma.TerminalSessionWhereInput | Prisma.TerminalSessionWhereInput[]
  terminalId?: Prisma.StringFilter<"TerminalSession"> | string
  startedAt?: Prisma.DateTimeFilter<"TerminalSession"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"TerminalSession"> | Date | string | null
  terminal?: Prisma.XOR<Prisma.TerminalScalarRelationFilter, Prisma.TerminalWhereInput>
  logs?: Prisma.TerminalSessionLogListRelationFilter
}, "id">

export type TerminalSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  terminalId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TerminalSessionCountOrderByAggregateInput
  _max?: Prisma.TerminalSessionMaxOrderByAggregateInput
  _min?: Prisma.TerminalSessionMinOrderByAggregateInput
}

export type TerminalSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.TerminalSessionScalarWhereWithAggregatesInput | Prisma.TerminalSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.TerminalSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TerminalSessionScalarWhereWithAggregatesInput | Prisma.TerminalSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TerminalSession"> | string
  terminalId?: Prisma.StringWithAggregatesFilter<"TerminalSession"> | string
  startedAt?: Prisma.DateTimeWithAggregatesFilter<"TerminalSession"> | Date | string
  finishedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"TerminalSession"> | Date | string | null
}

export type TerminalSessionCreateInput = {
  id?: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  terminal: Prisma.TerminalCreateNestedOneWithoutSessionsInput
  logs?: Prisma.TerminalSessionLogCreateNestedManyWithoutSessionInput
}

export type TerminalSessionUncheckedCreateInput = {
  id?: string
  terminalId: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  logs?: Prisma.TerminalSessionLogUncheckedCreateNestedManyWithoutSessionInput
}

export type TerminalSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminal?: Prisma.TerminalUpdateOneRequiredWithoutSessionsNestedInput
  logs?: Prisma.TerminalSessionLogUpdateManyWithoutSessionNestedInput
}

export type TerminalSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  terminalId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  logs?: Prisma.TerminalSessionLogUncheckedUpdateManyWithoutSessionNestedInput
}

export type TerminalSessionCreateManyInput = {
  id?: string
  terminalId: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
}

export type TerminalSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TerminalSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  terminalId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TerminalSessionListRelationFilter = {
  every?: Prisma.TerminalSessionWhereInput
  some?: Prisma.TerminalSessionWhereInput
  none?: Prisma.TerminalSessionWhereInput
}

export type TerminalSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TerminalSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  terminalId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
}

export type TerminalSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  terminalId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
}

export type TerminalSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  terminalId?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
}

export type TerminalSessionScalarRelationFilter = {
  is?: Prisma.TerminalSessionWhereInput
  isNot?: Prisma.TerminalSessionWhereInput
}

export type TerminalSessionCreateNestedManyWithoutTerminalInput = {
  create?: Prisma.XOR<Prisma.TerminalSessionCreateWithoutTerminalInput, Prisma.TerminalSessionUncheckedCreateWithoutTerminalInput> | Prisma.TerminalSessionCreateWithoutTerminalInput[] | Prisma.TerminalSessionUncheckedCreateWithoutTerminalInput[]
  connectOrCreate?: Prisma.TerminalSessionCreateOrConnectWithoutTerminalInput | Prisma.TerminalSessionCreateOrConnectWithoutTerminalInput[]
  createMany?: Prisma.TerminalSessionCreateManyTerminalInputEnvelope
  connect?: Prisma.TerminalSessionWhereUniqueInput | Prisma.TerminalSessionWhereUniqueInput[]
}

export type TerminalSessionUncheckedCreateNestedManyWithoutTerminalInput = {
  create?: Prisma.XOR<Prisma.TerminalSessionCreateWithoutTerminalInput, Prisma.TerminalSessionUncheckedCreateWithoutTerminalInput> | Prisma.TerminalSessionCreateWithoutTerminalInput[] | Prisma.TerminalSessionUncheckedCreateWithoutTerminalInput[]
  connectOrCreate?: Prisma.TerminalSessionCreateOrConnectWithoutTerminalInput | Prisma.TerminalSessionCreateOrConnectWithoutTerminalInput[]
  createMany?: Prisma.TerminalSessionCreateManyTerminalInputEnvelope
  connect?: Prisma.TerminalSessionWhereUniqueInput | Prisma.TerminalSessionWhereUniqueInput[]
}

export type TerminalSessionUpdateManyWithoutTerminalNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalSessionCreateWithoutTerminalInput, Prisma.TerminalSessionUncheckedCreateWithoutTerminalInput> | Prisma.TerminalSessionCreateWithoutTerminalInput[] | Prisma.TerminalSessionUncheckedCreateWithoutTerminalInput[]
  connectOrCreate?: Prisma.TerminalSessionCreateOrConnectWithoutTerminalInput | Prisma.TerminalSessionCreateOrConnectWithoutTerminalInput[]
  upsert?: Prisma.TerminalSessionUpsertWithWhereUniqueWithoutTerminalInput | Prisma.TerminalSessionUpsertWithWhereUniqueWithoutTerminalInput[]
  createMany?: Prisma.TerminalSessionCreateManyTerminalInputEnvelope
  set?: Prisma.TerminalSessionWhereUniqueInput | Prisma.TerminalSessionWhereUniqueInput[]
  disconnect?: Prisma.TerminalSessionWhereUniqueInput | Prisma.TerminalSessionWhereUniqueInput[]
  delete?: Prisma.TerminalSessionWhereUniqueInput | Prisma.TerminalSessionWhereUniqueInput[]
  connect?: Prisma.TerminalSessionWhereUniqueInput | Prisma.TerminalSessionWhereUniqueInput[]
  update?: Prisma.TerminalSessionUpdateWithWhereUniqueWithoutTerminalInput | Prisma.TerminalSessionUpdateWithWhereUniqueWithoutTerminalInput[]
  updateMany?: Prisma.TerminalSessionUpdateManyWithWhereWithoutTerminalInput | Prisma.TerminalSessionUpdateManyWithWhereWithoutTerminalInput[]
  deleteMany?: Prisma.TerminalSessionScalarWhereInput | Prisma.TerminalSessionScalarWhereInput[]
}

export type TerminalSessionUncheckedUpdateManyWithoutTerminalNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalSessionCreateWithoutTerminalInput, Prisma.TerminalSessionUncheckedCreateWithoutTerminalInput> | Prisma.TerminalSessionCreateWithoutTerminalInput[] | Prisma.TerminalSessionUncheckedCreateWithoutTerminalInput[]
  connectOrCreate?: Prisma.TerminalSessionCreateOrConnectWithoutTerminalInput | Prisma.TerminalSessionCreateOrConnectWithoutTerminalInput[]
  upsert?: Prisma.TerminalSessionUpsertWithWhereUniqueWithoutTerminalInput | Prisma.TerminalSessionUpsertWithWhereUniqueWithoutTerminalInput[]
  createMany?: Prisma.TerminalSessionCreateManyTerminalInputEnvelope
  set?: Prisma.TerminalSessionWhereUniqueInput | Prisma.TerminalSessionWhereUniqueInput[]
  disconnect?: Prisma.TerminalSessionWhereUniqueInput | Prisma.TerminalSessionWhereUniqueInput[]
  delete?: Prisma.TerminalSessionWhereUniqueInput | Prisma.TerminalSessionWhereUniqueInput[]
  connect?: Prisma.TerminalSessionWhereUniqueInput | Prisma.TerminalSessionWhereUniqueInput[]
  update?: Prisma.TerminalSessionUpdateWithWhereUniqueWithoutTerminalInput | Prisma.TerminalSessionUpdateWithWhereUniqueWithoutTerminalInput[]
  updateMany?: Prisma.TerminalSessionUpdateManyWithWhereWithoutTerminalInput | Prisma.TerminalSessionUpdateManyWithWhereWithoutTerminalInput[]
  deleteMany?: Prisma.TerminalSessionScalarWhereInput | Prisma.TerminalSessionScalarWhereInput[]
}

export type TerminalSessionCreateNestedOneWithoutLogsInput = {
  create?: Prisma.XOR<Prisma.TerminalSessionCreateWithoutLogsInput, Prisma.TerminalSessionUncheckedCreateWithoutLogsInput>
  connectOrCreate?: Prisma.TerminalSessionCreateOrConnectWithoutLogsInput
  connect?: Prisma.TerminalSessionWhereUniqueInput
}

export type TerminalSessionUpdateOneRequiredWithoutLogsNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalSessionCreateWithoutLogsInput, Prisma.TerminalSessionUncheckedCreateWithoutLogsInput>
  connectOrCreate?: Prisma.TerminalSessionCreateOrConnectWithoutLogsInput
  upsert?: Prisma.TerminalSessionUpsertWithoutLogsInput
  connect?: Prisma.TerminalSessionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TerminalSessionUpdateToOneWithWhereWithoutLogsInput, Prisma.TerminalSessionUpdateWithoutLogsInput>, Prisma.TerminalSessionUncheckedUpdateWithoutLogsInput>
}

export type TerminalSessionCreateWithoutTerminalInput = {
  id?: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  logs?: Prisma.TerminalSessionLogCreateNestedManyWithoutSessionInput
}

export type TerminalSessionUncheckedCreateWithoutTerminalInput = {
  id?: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  logs?: Prisma.TerminalSessionLogUncheckedCreateNestedManyWithoutSessionInput
}

export type TerminalSessionCreateOrConnectWithoutTerminalInput = {
  where: Prisma.TerminalSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.TerminalSessionCreateWithoutTerminalInput, Prisma.TerminalSessionUncheckedCreateWithoutTerminalInput>
}

export type TerminalSessionCreateManyTerminalInputEnvelope = {
  data: Prisma.TerminalSessionCreateManyTerminalInput | Prisma.TerminalSessionCreateManyTerminalInput[]
}

export type TerminalSessionUpsertWithWhereUniqueWithoutTerminalInput = {
  where: Prisma.TerminalSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.TerminalSessionUpdateWithoutTerminalInput, Prisma.TerminalSessionUncheckedUpdateWithoutTerminalInput>
  create: Prisma.XOR<Prisma.TerminalSessionCreateWithoutTerminalInput, Prisma.TerminalSessionUncheckedCreateWithoutTerminalInput>
}

export type TerminalSessionUpdateWithWhereUniqueWithoutTerminalInput = {
  where: Prisma.TerminalSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.TerminalSessionUpdateWithoutTerminalInput, Prisma.TerminalSessionUncheckedUpdateWithoutTerminalInput>
}

export type TerminalSessionUpdateManyWithWhereWithoutTerminalInput = {
  where: Prisma.TerminalSessionScalarWhereInput
  data: Prisma.XOR<Prisma.TerminalSessionUpdateManyMutationInput, Prisma.TerminalSessionUncheckedUpdateManyWithoutTerminalInput>
}

export type TerminalSessionScalarWhereInput = {
  AND?: Prisma.TerminalSessionScalarWhereInput | Prisma.TerminalSessionScalarWhereInput[]
  OR?: Prisma.TerminalSessionScalarWhereInput[]
  NOT?: Prisma.TerminalSessionScalarWhereInput | Prisma.TerminalSessionScalarWhereInput[]
  id?: Prisma.StringFilter<"TerminalSession"> | string
  terminalId?: Prisma.StringFilter<"TerminalSession"> | string
  startedAt?: Prisma.DateTimeFilter<"TerminalSession"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"TerminalSession"> | Date | string | null
}

export type TerminalSessionCreateWithoutLogsInput = {
  id?: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
  terminal: Prisma.TerminalCreateNestedOneWithoutSessionsInput
}

export type TerminalSessionUncheckedCreateWithoutLogsInput = {
  id?: string
  terminalId: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
}

export type TerminalSessionCreateOrConnectWithoutLogsInput = {
  where: Prisma.TerminalSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.TerminalSessionCreateWithoutLogsInput, Prisma.TerminalSessionUncheckedCreateWithoutLogsInput>
}

export type TerminalSessionUpsertWithoutLogsInput = {
  update: Prisma.XOR<Prisma.TerminalSessionUpdateWithoutLogsInput, Prisma.TerminalSessionUncheckedUpdateWithoutLogsInput>
  create: Prisma.XOR<Prisma.TerminalSessionCreateWithoutLogsInput, Prisma.TerminalSessionUncheckedCreateWithoutLogsInput>
  where?: Prisma.TerminalSessionWhereInput
}

export type TerminalSessionUpdateToOneWithWhereWithoutLogsInput = {
  where?: Prisma.TerminalSessionWhereInput
  data: Prisma.XOR<Prisma.TerminalSessionUpdateWithoutLogsInput, Prisma.TerminalSessionUncheckedUpdateWithoutLogsInput>
}

export type TerminalSessionUpdateWithoutLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terminal?: Prisma.TerminalUpdateOneRequiredWithoutSessionsNestedInput
}

export type TerminalSessionUncheckedUpdateWithoutLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  terminalId?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type TerminalSessionCreateManyTerminalInput = {
  id?: string
  startedAt?: Date | string
  finishedAt?: Date | string | null
}

export type TerminalSessionUpdateWithoutTerminalInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  logs?: Prisma.TerminalSessionLogUpdateManyWithoutSessionNestedInput
}

export type TerminalSessionUncheckedUpdateWithoutTerminalInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  logs?: Prisma.TerminalSessionLogUncheckedUpdateManyWithoutSessionNestedInput
}

export type TerminalSessionUncheckedUpdateManyWithoutTerminalInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}


/**
 * Count Type TerminalSessionCountOutputType
 */

export type TerminalSessionCountOutputType = {
  logs: number
}

export type TerminalSessionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  logs?: boolean | TerminalSessionCountOutputTypeCountLogsArgs
}

/**
 * TerminalSessionCountOutputType without action
 */
export type TerminalSessionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionCountOutputType
   */
  select?: Prisma.TerminalSessionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TerminalSessionCountOutputType without action
 */
export type TerminalSessionCountOutputTypeCountLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TerminalSessionLogWhereInput
}


export type TerminalSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  terminalId?: boolean
  startedAt?: boolean
  finishedAt?: boolean
  terminal?: boolean | Prisma.TerminalDefaultArgs<ExtArgs>
  logs?: boolean | Prisma.TerminalSession$logsArgs<ExtArgs>
  _count?: boolean | Prisma.TerminalSessionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["terminalSession"]>

export type TerminalSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  terminalId?: boolean
  startedAt?: boolean
  finishedAt?: boolean
  terminal?: boolean | Prisma.TerminalDefaultArgs<ExtArgs>
}, ExtArgs["result"]["terminalSession"]>

export type TerminalSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  terminalId?: boolean
  startedAt?: boolean
  finishedAt?: boolean
  terminal?: boolean | Prisma.TerminalDefaultArgs<ExtArgs>
}, ExtArgs["result"]["terminalSession"]>

export type TerminalSessionSelectScalar = {
  id?: boolean
  terminalId?: boolean
  startedAt?: boolean
  finishedAt?: boolean
}

export type TerminalSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "terminalId" | "startedAt" | "finishedAt", ExtArgs["result"]["terminalSession"]>
export type TerminalSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  terminal?: boolean | Prisma.TerminalDefaultArgs<ExtArgs>
  logs?: boolean | Prisma.TerminalSession$logsArgs<ExtArgs>
  _count?: boolean | Prisma.TerminalSessionCountOutputTypeDefaultArgs<ExtArgs>
}
export type TerminalSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  terminal?: boolean | Prisma.TerminalDefaultArgs<ExtArgs>
}
export type TerminalSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  terminal?: boolean | Prisma.TerminalDefaultArgs<ExtArgs>
}

export type $TerminalSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TerminalSession"
  objects: {
    /**
     * The terminal this session belongs to.
     */
    terminal: Prisma.$TerminalPayload<ExtArgs>
    /**
     * The logs of the terminal session.
     */
    logs: Prisma.$TerminalSessionLogPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the terminal session.
     */
    id: string
    /**
     * The ID of the terminal this session belongs to.
     */
    terminalId: string
    /**
     * The time when the terminal session started.
     */
    startedAt: Date
    /**
     * The time when the terminal session finished.
     */
    finishedAt: Date | null
  }, ExtArgs["result"]["terminalSession"]>
  composites: {}
}

export type TerminalSessionGetPayload<S extends boolean | null | undefined | TerminalSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload, S>

export type TerminalSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TerminalSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TerminalSessionCountAggregateInputType | true
  }

export interface TerminalSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TerminalSession'], meta: { name: 'TerminalSession' } }
  /**
   * Find zero or one TerminalSession that matches the filter.
   * @param {TerminalSessionFindUniqueArgs} args - Arguments to find a TerminalSession
   * @example
   * // Get one TerminalSession
   * const terminalSession = await prisma.terminalSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TerminalSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, TerminalSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TerminalSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TerminalSessionFindUniqueOrThrowArgs} args - Arguments to find a TerminalSession
   * @example
   * // Get one TerminalSession
   * const terminalSession = await prisma.terminalSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TerminalSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TerminalSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TerminalSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionFindFirstArgs} args - Arguments to find a TerminalSession
   * @example
   * // Get one TerminalSession
   * const terminalSession = await prisma.terminalSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TerminalSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, TerminalSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TerminalSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionFindFirstOrThrowArgs} args - Arguments to find a TerminalSession
   * @example
   * // Get one TerminalSession
   * const terminalSession = await prisma.terminalSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TerminalSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TerminalSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TerminalSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TerminalSessions
   * const terminalSessions = await prisma.terminalSession.findMany()
   * 
   * // Get first 10 TerminalSessions
   * const terminalSessions = await prisma.terminalSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const terminalSessionWithIdOnly = await prisma.terminalSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TerminalSessionFindManyArgs>(args?: Prisma.SelectSubset<T, TerminalSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TerminalSession.
   * @param {TerminalSessionCreateArgs} args - Arguments to create a TerminalSession.
   * @example
   * // Create one TerminalSession
   * const TerminalSession = await prisma.terminalSession.create({
   *   data: {
   *     // ... data to create a TerminalSession
   *   }
   * })
   * 
   */
  create<T extends TerminalSessionCreateArgs>(args: Prisma.SelectSubset<T, TerminalSessionCreateArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TerminalSessions.
   * @param {TerminalSessionCreateManyArgs} args - Arguments to create many TerminalSessions.
   * @example
   * // Create many TerminalSessions
   * const terminalSession = await prisma.terminalSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TerminalSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, TerminalSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TerminalSessions and returns the data saved in the database.
   * @param {TerminalSessionCreateManyAndReturnArgs} args - Arguments to create many TerminalSessions.
   * @example
   * // Create many TerminalSessions
   * const terminalSession = await prisma.terminalSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TerminalSessions and only return the `id`
   * const terminalSessionWithIdOnly = await prisma.terminalSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TerminalSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TerminalSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TerminalSession.
   * @param {TerminalSessionDeleteArgs} args - Arguments to delete one TerminalSession.
   * @example
   * // Delete one TerminalSession
   * const TerminalSession = await prisma.terminalSession.delete({
   *   where: {
   *     // ... filter to delete one TerminalSession
   *   }
   * })
   * 
   */
  delete<T extends TerminalSessionDeleteArgs>(args: Prisma.SelectSubset<T, TerminalSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TerminalSession.
   * @param {TerminalSessionUpdateArgs} args - Arguments to update one TerminalSession.
   * @example
   * // Update one TerminalSession
   * const terminalSession = await prisma.terminalSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TerminalSessionUpdateArgs>(args: Prisma.SelectSubset<T, TerminalSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TerminalSessions.
   * @param {TerminalSessionDeleteManyArgs} args - Arguments to filter TerminalSessions to delete.
   * @example
   * // Delete a few TerminalSessions
   * const { count } = await prisma.terminalSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TerminalSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, TerminalSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TerminalSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TerminalSessions
   * const terminalSession = await prisma.terminalSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TerminalSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, TerminalSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TerminalSessions and returns the data updated in the database.
   * @param {TerminalSessionUpdateManyAndReturnArgs} args - Arguments to update many TerminalSessions.
   * @example
   * // Update many TerminalSessions
   * const terminalSession = await prisma.terminalSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TerminalSessions and only return the `id`
   * const terminalSessionWithIdOnly = await prisma.terminalSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TerminalSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TerminalSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TerminalSession.
   * @param {TerminalSessionUpsertArgs} args - Arguments to update or create a TerminalSession.
   * @example
   * // Update or create a TerminalSession
   * const terminalSession = await prisma.terminalSession.upsert({
   *   create: {
   *     // ... data to create a TerminalSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TerminalSession we want to update
   *   }
   * })
   */
  upsert<T extends TerminalSessionUpsertArgs>(args: Prisma.SelectSubset<T, TerminalSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TerminalSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionCountArgs} args - Arguments to filter TerminalSessions to count.
   * @example
   * // Count the number of TerminalSessions
   * const count = await prisma.terminalSession.count({
   *   where: {
   *     // ... the filter for the TerminalSessions we want to count
   *   }
   * })
  **/
  count<T extends TerminalSessionCountArgs>(
    args?: Prisma.Subset<T, TerminalSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TerminalSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TerminalSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TerminalSessionAggregateArgs>(args: Prisma.Subset<T, TerminalSessionAggregateArgs>): Prisma.PrismaPromise<GetTerminalSessionAggregateType<T>>

  /**
   * Group by TerminalSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TerminalSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TerminalSessionGroupByArgs['orderBy'] }
      : { orderBy?: TerminalSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TerminalSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTerminalSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TerminalSession model
 */
readonly fields: TerminalSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TerminalSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TerminalSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  terminal<T extends Prisma.TerminalDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TerminalDefaultArgs<ExtArgs>>): Prisma.Prisma__TerminalClient<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  logs<T extends Prisma.TerminalSession$logsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TerminalSession$logsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TerminalSession model
 */
export interface TerminalSessionFieldRefs {
  readonly id: Prisma.FieldRef<"TerminalSession", 'String'>
  readonly terminalId: Prisma.FieldRef<"TerminalSession", 'String'>
  readonly startedAt: Prisma.FieldRef<"TerminalSession", 'DateTime'>
  readonly finishedAt: Prisma.FieldRef<"TerminalSession", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TerminalSession findUnique
 */
export type TerminalSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
  /**
   * Filter, which TerminalSession to fetch.
   */
  where: Prisma.TerminalSessionWhereUniqueInput
}

/**
 * TerminalSession findUniqueOrThrow
 */
export type TerminalSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
  /**
   * Filter, which TerminalSession to fetch.
   */
  where: Prisma.TerminalSessionWhereUniqueInput
}

/**
 * TerminalSession findFirst
 */
export type TerminalSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
  /**
   * Filter, which TerminalSession to fetch.
   */
  where?: Prisma.TerminalSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TerminalSessions to fetch.
   */
  orderBy?: Prisma.TerminalSessionOrderByWithRelationInput | Prisma.TerminalSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TerminalSessions.
   */
  cursor?: Prisma.TerminalSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TerminalSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TerminalSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TerminalSessions.
   */
  distinct?: Prisma.TerminalSessionScalarFieldEnum | Prisma.TerminalSessionScalarFieldEnum[]
}

/**
 * TerminalSession findFirstOrThrow
 */
export type TerminalSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
  /**
   * Filter, which TerminalSession to fetch.
   */
  where?: Prisma.TerminalSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TerminalSessions to fetch.
   */
  orderBy?: Prisma.TerminalSessionOrderByWithRelationInput | Prisma.TerminalSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TerminalSessions.
   */
  cursor?: Prisma.TerminalSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TerminalSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TerminalSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TerminalSessions.
   */
  distinct?: Prisma.TerminalSessionScalarFieldEnum | Prisma.TerminalSessionScalarFieldEnum[]
}

/**
 * TerminalSession findMany
 */
export type TerminalSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
  /**
   * Filter, which TerminalSessions to fetch.
   */
  where?: Prisma.TerminalSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TerminalSessions to fetch.
   */
  orderBy?: Prisma.TerminalSessionOrderByWithRelationInput | Prisma.TerminalSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TerminalSessions.
   */
  cursor?: Prisma.TerminalSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TerminalSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TerminalSessions.
   */
  skip?: number
  distinct?: Prisma.TerminalSessionScalarFieldEnum | Prisma.TerminalSessionScalarFieldEnum[]
}

/**
 * TerminalSession create
 */
export type TerminalSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a TerminalSession.
   */
  data: Prisma.XOR<Prisma.TerminalSessionCreateInput, Prisma.TerminalSessionUncheckedCreateInput>
}

/**
 * TerminalSession createMany
 */
export type TerminalSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TerminalSessions.
   */
  data: Prisma.TerminalSessionCreateManyInput | Prisma.TerminalSessionCreateManyInput[]
}

/**
 * TerminalSession createManyAndReturn
 */
export type TerminalSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * The data used to create many TerminalSessions.
   */
  data: Prisma.TerminalSessionCreateManyInput | Prisma.TerminalSessionCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TerminalSession update
 */
export type TerminalSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a TerminalSession.
   */
  data: Prisma.XOR<Prisma.TerminalSessionUpdateInput, Prisma.TerminalSessionUncheckedUpdateInput>
  /**
   * Choose, which TerminalSession to update.
   */
  where: Prisma.TerminalSessionWhereUniqueInput
}

/**
 * TerminalSession updateMany
 */
export type TerminalSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TerminalSessions.
   */
  data: Prisma.XOR<Prisma.TerminalSessionUpdateManyMutationInput, Prisma.TerminalSessionUncheckedUpdateManyInput>
  /**
   * Filter which TerminalSessions to update
   */
  where?: Prisma.TerminalSessionWhereInput
  /**
   * Limit how many TerminalSessions to update.
   */
  limit?: number
}

/**
 * TerminalSession updateManyAndReturn
 */
export type TerminalSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * The data used to update TerminalSessions.
   */
  data: Prisma.XOR<Prisma.TerminalSessionUpdateManyMutationInput, Prisma.TerminalSessionUncheckedUpdateManyInput>
  /**
   * Filter which TerminalSessions to update
   */
  where?: Prisma.TerminalSessionWhereInput
  /**
   * Limit how many TerminalSessions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TerminalSession upsert
 */
export type TerminalSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the TerminalSession to update in case it exists.
   */
  where: Prisma.TerminalSessionWhereUniqueInput
  /**
   * In case the TerminalSession found by the `where` argument doesn't exist, create a new TerminalSession with this data.
   */
  create: Prisma.XOR<Prisma.TerminalSessionCreateInput, Prisma.TerminalSessionUncheckedCreateInput>
  /**
   * In case the TerminalSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TerminalSessionUpdateInput, Prisma.TerminalSessionUncheckedUpdateInput>
}

/**
 * TerminalSession delete
 */
export type TerminalSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
  /**
   * Filter which TerminalSession to delete.
   */
  where: Prisma.TerminalSessionWhereUniqueInput
}

/**
 * TerminalSession deleteMany
 */
export type TerminalSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TerminalSessions to delete
   */
  where?: Prisma.TerminalSessionWhereInput
  /**
   * Limit how many TerminalSessions to delete.
   */
  limit?: number
}

/**
 * TerminalSession.logs
 */
export type TerminalSession$logsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
  where?: Prisma.TerminalSessionLogWhereInput
  orderBy?: Prisma.TerminalSessionLogOrderByWithRelationInput | Prisma.TerminalSessionLogOrderByWithRelationInput[]
  cursor?: Prisma.TerminalSessionLogWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TerminalSessionLogScalarFieldEnum | Prisma.TerminalSessionLogScalarFieldEnum[]
}

/**
 * TerminalSession without action
 */
export type TerminalSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
}
