
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TerminalSessionLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TerminalSessionLog
 * The terminal session log captures all input and output from a terminal session.
 * 
 * Logs are stored with ULID identifiers for timestamp ordering.
 */
export type TerminalSessionLogModel = runtime.Types.Result.DefaultSelection<Prisma.$TerminalSessionLogPayload>

export type AggregateTerminalSessionLog = {
  _count: TerminalSessionLogCountAggregateOutputType | null
  _min: TerminalSessionLogMinAggregateOutputType | null
  _max: TerminalSessionLogMaxAggregateOutputType | null
}

export type TerminalSessionLogMinAggregateOutputType = {
  id: string | null
  sessionId: string | null
  content: string | null
}

export type TerminalSessionLogMaxAggregateOutputType = {
  id: string | null
  sessionId: string | null
  content: string | null
}

export type TerminalSessionLogCountAggregateOutputType = {
  id: number
  sessionId: number
  content: number
  _all: number
}


export type TerminalSessionLogMinAggregateInputType = {
  id?: true
  sessionId?: true
  content?: true
}

export type TerminalSessionLogMaxAggregateInputType = {
  id?: true
  sessionId?: true
  content?: true
}

export type TerminalSessionLogCountAggregateInputType = {
  id?: true
  sessionId?: true
  content?: true
  _all?: true
}

export type TerminalSessionLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TerminalSessionLog to aggregate.
   */
  where?: Prisma.TerminalSessionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TerminalSessionLogs to fetch.
   */
  orderBy?: Prisma.TerminalSessionLogOrderByWithRelationInput | Prisma.TerminalSessionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TerminalSessionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TerminalSessionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TerminalSessionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TerminalSessionLogs
  **/
  _count?: true | TerminalSessionLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TerminalSessionLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TerminalSessionLogMaxAggregateInputType
}

export type GetTerminalSessionLogAggregateType<T extends TerminalSessionLogAggregateArgs> = {
      [P in keyof T & keyof AggregateTerminalSessionLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTerminalSessionLog[P]>
    : Prisma.GetScalarType<T[P], AggregateTerminalSessionLog[P]>
}




export type TerminalSessionLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TerminalSessionLogWhereInput
  orderBy?: Prisma.TerminalSessionLogOrderByWithAggregationInput | Prisma.TerminalSessionLogOrderByWithAggregationInput[]
  by: Prisma.TerminalSessionLogScalarFieldEnum[] | Prisma.TerminalSessionLogScalarFieldEnum
  having?: Prisma.TerminalSessionLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TerminalSessionLogCountAggregateInputType | true
  _min?: TerminalSessionLogMinAggregateInputType
  _max?: TerminalSessionLogMaxAggregateInputType
}

export type TerminalSessionLogGroupByOutputType = {
  id: string
  sessionId: string
  content: string
  _count: TerminalSessionLogCountAggregateOutputType | null
  _min: TerminalSessionLogMinAggregateOutputType | null
  _max: TerminalSessionLogMaxAggregateOutputType | null
}

type GetTerminalSessionLogGroupByPayload<T extends TerminalSessionLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TerminalSessionLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TerminalSessionLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TerminalSessionLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TerminalSessionLogGroupByOutputType[P]>
      }
    >
  >



export type TerminalSessionLogWhereInput = {
  AND?: Prisma.TerminalSessionLogWhereInput | Prisma.TerminalSessionLogWhereInput[]
  OR?: Prisma.TerminalSessionLogWhereInput[]
  NOT?: Prisma.TerminalSessionLogWhereInput | Prisma.TerminalSessionLogWhereInput[]
  id?: Prisma.StringFilter<"TerminalSessionLog"> | string
  sessionId?: Prisma.StringFilter<"TerminalSessionLog"> | string
  content?: Prisma.StringFilter<"TerminalSessionLog"> | string
  session?: Prisma.XOR<Prisma.TerminalSessionScalarRelationFilter, Prisma.TerminalSessionWhereInput>
}

export type TerminalSessionLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  session?: Prisma.TerminalSessionOrderByWithRelationInput
}

export type TerminalSessionLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TerminalSessionLogWhereInput | Prisma.TerminalSessionLogWhereInput[]
  OR?: Prisma.TerminalSessionLogWhereInput[]
  NOT?: Prisma.TerminalSessionLogWhereInput | Prisma.TerminalSessionLogWhereInput[]
  sessionId?: Prisma.StringFilter<"TerminalSessionLog"> | string
  content?: Prisma.StringFilter<"TerminalSessionLog"> | string
  session?: Prisma.XOR<Prisma.TerminalSessionScalarRelationFilter, Prisma.TerminalSessionWhereInput>
}, "id">

export type TerminalSessionLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  _count?: Prisma.TerminalSessionLogCountOrderByAggregateInput
  _max?: Prisma.TerminalSessionLogMaxOrderByAggregateInput
  _min?: Prisma.TerminalSessionLogMinOrderByAggregateInput
}

export type TerminalSessionLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.TerminalSessionLogScalarWhereWithAggregatesInput | Prisma.TerminalSessionLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.TerminalSessionLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TerminalSessionLogScalarWhereWithAggregatesInput | Prisma.TerminalSessionLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TerminalSessionLog"> | string
  sessionId?: Prisma.StringWithAggregatesFilter<"TerminalSessionLog"> | string
  content?: Prisma.StringWithAggregatesFilter<"TerminalSessionLog"> | string
}

export type TerminalSessionLogCreateInput = {
  id: string
  content: string
  session: Prisma.TerminalSessionCreateNestedOneWithoutLogsInput
}

export type TerminalSessionLogUncheckedCreateInput = {
  id: string
  sessionId: string
  content: string
}

export type TerminalSessionLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  session?: Prisma.TerminalSessionUpdateOneRequiredWithoutLogsNestedInput
}

export type TerminalSessionLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TerminalSessionLogCreateManyInput = {
  id: string
  sessionId: string
  content: string
}

export type TerminalSessionLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TerminalSessionLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  sessionId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TerminalSessionLogListRelationFilter = {
  every?: Prisma.TerminalSessionLogWhereInput
  some?: Prisma.TerminalSessionLogWhereInput
  none?: Prisma.TerminalSessionLogWhereInput
}

export type TerminalSessionLogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TerminalSessionLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type TerminalSessionLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type TerminalSessionLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sessionId?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type TerminalSessionLogCreateNestedManyWithoutSessionInput = {
  create?: Prisma.XOR<Prisma.TerminalSessionLogCreateWithoutSessionInput, Prisma.TerminalSessionLogUncheckedCreateWithoutSessionInput> | Prisma.TerminalSessionLogCreateWithoutSessionInput[] | Prisma.TerminalSessionLogUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.TerminalSessionLogCreateOrConnectWithoutSessionInput | Prisma.TerminalSessionLogCreateOrConnectWithoutSessionInput[]
  createMany?: Prisma.TerminalSessionLogCreateManySessionInputEnvelope
  connect?: Prisma.TerminalSessionLogWhereUniqueInput | Prisma.TerminalSessionLogWhereUniqueInput[]
}

export type TerminalSessionLogUncheckedCreateNestedManyWithoutSessionInput = {
  create?: Prisma.XOR<Prisma.TerminalSessionLogCreateWithoutSessionInput, Prisma.TerminalSessionLogUncheckedCreateWithoutSessionInput> | Prisma.TerminalSessionLogCreateWithoutSessionInput[] | Prisma.TerminalSessionLogUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.TerminalSessionLogCreateOrConnectWithoutSessionInput | Prisma.TerminalSessionLogCreateOrConnectWithoutSessionInput[]
  createMany?: Prisma.TerminalSessionLogCreateManySessionInputEnvelope
  connect?: Prisma.TerminalSessionLogWhereUniqueInput | Prisma.TerminalSessionLogWhereUniqueInput[]
}

export type TerminalSessionLogUpdateManyWithoutSessionNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalSessionLogCreateWithoutSessionInput, Prisma.TerminalSessionLogUncheckedCreateWithoutSessionInput> | Prisma.TerminalSessionLogCreateWithoutSessionInput[] | Prisma.TerminalSessionLogUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.TerminalSessionLogCreateOrConnectWithoutSessionInput | Prisma.TerminalSessionLogCreateOrConnectWithoutSessionInput[]
  upsert?: Prisma.TerminalSessionLogUpsertWithWhereUniqueWithoutSessionInput | Prisma.TerminalSessionLogUpsertWithWhereUniqueWithoutSessionInput[]
  createMany?: Prisma.TerminalSessionLogCreateManySessionInputEnvelope
  set?: Prisma.TerminalSessionLogWhereUniqueInput | Prisma.TerminalSessionLogWhereUniqueInput[]
  disconnect?: Prisma.TerminalSessionLogWhereUniqueInput | Prisma.TerminalSessionLogWhereUniqueInput[]
  delete?: Prisma.TerminalSessionLogWhereUniqueInput | Prisma.TerminalSessionLogWhereUniqueInput[]
  connect?: Prisma.TerminalSessionLogWhereUniqueInput | Prisma.TerminalSessionLogWhereUniqueInput[]
  update?: Prisma.TerminalSessionLogUpdateWithWhereUniqueWithoutSessionInput | Prisma.TerminalSessionLogUpdateWithWhereUniqueWithoutSessionInput[]
  updateMany?: Prisma.TerminalSessionLogUpdateManyWithWhereWithoutSessionInput | Prisma.TerminalSessionLogUpdateManyWithWhereWithoutSessionInput[]
  deleteMany?: Prisma.TerminalSessionLogScalarWhereInput | Prisma.TerminalSessionLogScalarWhereInput[]
}

export type TerminalSessionLogUncheckedUpdateManyWithoutSessionNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalSessionLogCreateWithoutSessionInput, Prisma.TerminalSessionLogUncheckedCreateWithoutSessionInput> | Prisma.TerminalSessionLogCreateWithoutSessionInput[] | Prisma.TerminalSessionLogUncheckedCreateWithoutSessionInput[]
  connectOrCreate?: Prisma.TerminalSessionLogCreateOrConnectWithoutSessionInput | Prisma.TerminalSessionLogCreateOrConnectWithoutSessionInput[]
  upsert?: Prisma.TerminalSessionLogUpsertWithWhereUniqueWithoutSessionInput | Prisma.TerminalSessionLogUpsertWithWhereUniqueWithoutSessionInput[]
  createMany?: Prisma.TerminalSessionLogCreateManySessionInputEnvelope
  set?: Prisma.TerminalSessionLogWhereUniqueInput | Prisma.TerminalSessionLogWhereUniqueInput[]
  disconnect?: Prisma.TerminalSessionLogWhereUniqueInput | Prisma.TerminalSessionLogWhereUniqueInput[]
  delete?: Prisma.TerminalSessionLogWhereUniqueInput | Prisma.TerminalSessionLogWhereUniqueInput[]
  connect?: Prisma.TerminalSessionLogWhereUniqueInput | Prisma.TerminalSessionLogWhereUniqueInput[]
  update?: Prisma.TerminalSessionLogUpdateWithWhereUniqueWithoutSessionInput | Prisma.TerminalSessionLogUpdateWithWhereUniqueWithoutSessionInput[]
  updateMany?: Prisma.TerminalSessionLogUpdateManyWithWhereWithoutSessionInput | Prisma.TerminalSessionLogUpdateManyWithWhereWithoutSessionInput[]
  deleteMany?: Prisma.TerminalSessionLogScalarWhereInput | Prisma.TerminalSessionLogScalarWhereInput[]
}

export type TerminalSessionLogCreateWithoutSessionInput = {
  id: string
  content: string
}

export type TerminalSessionLogUncheckedCreateWithoutSessionInput = {
  id: string
  content: string
}

export type TerminalSessionLogCreateOrConnectWithoutSessionInput = {
  where: Prisma.TerminalSessionLogWhereUniqueInput
  create: Prisma.XOR<Prisma.TerminalSessionLogCreateWithoutSessionInput, Prisma.TerminalSessionLogUncheckedCreateWithoutSessionInput>
}

export type TerminalSessionLogCreateManySessionInputEnvelope = {
  data: Prisma.TerminalSessionLogCreateManySessionInput | Prisma.TerminalSessionLogCreateManySessionInput[]
}

export type TerminalSessionLogUpsertWithWhereUniqueWithoutSessionInput = {
  where: Prisma.TerminalSessionLogWhereUniqueInput
  update: Prisma.XOR<Prisma.TerminalSessionLogUpdateWithoutSessionInput, Prisma.TerminalSessionLogUncheckedUpdateWithoutSessionInput>
  create: Prisma.XOR<Prisma.TerminalSessionLogCreateWithoutSessionInput, Prisma.TerminalSessionLogUncheckedCreateWithoutSessionInput>
}

export type TerminalSessionLogUpdateWithWhereUniqueWithoutSessionInput = {
  where: Prisma.TerminalSessionLogWhereUniqueInput
  data: Prisma.XOR<Prisma.TerminalSessionLogUpdateWithoutSessionInput, Prisma.TerminalSessionLogUncheckedUpdateWithoutSessionInput>
}

export type TerminalSessionLogUpdateManyWithWhereWithoutSessionInput = {
  where: Prisma.TerminalSessionLogScalarWhereInput
  data: Prisma.XOR<Prisma.TerminalSessionLogUpdateManyMutationInput, Prisma.TerminalSessionLogUncheckedUpdateManyWithoutSessionInput>
}

export type TerminalSessionLogScalarWhereInput = {
  AND?: Prisma.TerminalSessionLogScalarWhereInput | Prisma.TerminalSessionLogScalarWhereInput[]
  OR?: Prisma.TerminalSessionLogScalarWhereInput[]
  NOT?: Prisma.TerminalSessionLogScalarWhereInput | Prisma.TerminalSessionLogScalarWhereInput[]
  id?: Prisma.StringFilter<"TerminalSessionLog"> | string
  sessionId?: Prisma.StringFilter<"TerminalSessionLog"> | string
  content?: Prisma.StringFilter<"TerminalSessionLog"> | string
}

export type TerminalSessionLogCreateManySessionInput = {
  id: string
  content: string
}

export type TerminalSessionLogUpdateWithoutSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TerminalSessionLogUncheckedUpdateWithoutSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TerminalSessionLogUncheckedUpdateManyWithoutSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
}



export type TerminalSessionLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sessionId?: boolean
  content?: boolean
  session?: boolean | Prisma.TerminalSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["terminalSessionLog"]>

export type TerminalSessionLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sessionId?: boolean
  content?: boolean
  session?: boolean | Prisma.TerminalSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["terminalSessionLog"]>

export type TerminalSessionLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  sessionId?: boolean
  content?: boolean
  session?: boolean | Prisma.TerminalSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["terminalSessionLog"]>

export type TerminalSessionLogSelectScalar = {
  id?: boolean
  sessionId?: boolean
  content?: boolean
}

export type TerminalSessionLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "sessionId" | "content", ExtArgs["result"]["terminalSessionLog"]>
export type TerminalSessionLogInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  session?: boolean | Prisma.TerminalSessionDefaultArgs<ExtArgs>
}
export type TerminalSessionLogIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  session?: boolean | Prisma.TerminalSessionDefaultArgs<ExtArgs>
}
export type TerminalSessionLogIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  session?: boolean | Prisma.TerminalSessionDefaultArgs<ExtArgs>
}

export type $TerminalSessionLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TerminalSessionLog"
  objects: {
    /**
     * The terminal session this log belongs to.
     */
    session: Prisma.$TerminalSessionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The ULID of the session log. Also used to extract the timestamp.
     */
    id: string
    /**
     * The ID of the terminal session this log belongs to.
     */
    sessionId: string
    /**
     * The content of the log.
     */
    content: string
  }, ExtArgs["result"]["terminalSessionLog"]>
  composites: {}
}

export type TerminalSessionLogGetPayload<S extends boolean | null | undefined | TerminalSessionLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload, S>

export type TerminalSessionLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TerminalSessionLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TerminalSessionLogCountAggregateInputType | true
  }

export interface TerminalSessionLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TerminalSessionLog'], meta: { name: 'TerminalSessionLog' } }
  /**
   * Find zero or one TerminalSessionLog that matches the filter.
   * @param {TerminalSessionLogFindUniqueArgs} args - Arguments to find a TerminalSessionLog
   * @example
   * // Get one TerminalSessionLog
   * const terminalSessionLog = await prisma.terminalSessionLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TerminalSessionLogFindUniqueArgs>(args: Prisma.SelectSubset<T, TerminalSessionLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionLogClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TerminalSessionLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TerminalSessionLogFindUniqueOrThrowArgs} args - Arguments to find a TerminalSessionLog
   * @example
   * // Get one TerminalSessionLog
   * const terminalSessionLog = await prisma.terminalSessionLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TerminalSessionLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TerminalSessionLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionLogClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TerminalSessionLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionLogFindFirstArgs} args - Arguments to find a TerminalSessionLog
   * @example
   * // Get one TerminalSessionLog
   * const terminalSessionLog = await prisma.terminalSessionLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TerminalSessionLogFindFirstArgs>(args?: Prisma.SelectSubset<T, TerminalSessionLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionLogClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TerminalSessionLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionLogFindFirstOrThrowArgs} args - Arguments to find a TerminalSessionLog
   * @example
   * // Get one TerminalSessionLog
   * const terminalSessionLog = await prisma.terminalSessionLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TerminalSessionLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TerminalSessionLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionLogClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TerminalSessionLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TerminalSessionLogs
   * const terminalSessionLogs = await prisma.terminalSessionLog.findMany()
   * 
   * // Get first 10 TerminalSessionLogs
   * const terminalSessionLogs = await prisma.terminalSessionLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const terminalSessionLogWithIdOnly = await prisma.terminalSessionLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TerminalSessionLogFindManyArgs>(args?: Prisma.SelectSubset<T, TerminalSessionLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TerminalSessionLog.
   * @param {TerminalSessionLogCreateArgs} args - Arguments to create a TerminalSessionLog.
   * @example
   * // Create one TerminalSessionLog
   * const TerminalSessionLog = await prisma.terminalSessionLog.create({
   *   data: {
   *     // ... data to create a TerminalSessionLog
   *   }
   * })
   * 
   */
  create<T extends TerminalSessionLogCreateArgs>(args: Prisma.SelectSubset<T, TerminalSessionLogCreateArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionLogClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TerminalSessionLogs.
   * @param {TerminalSessionLogCreateManyArgs} args - Arguments to create many TerminalSessionLogs.
   * @example
   * // Create many TerminalSessionLogs
   * const terminalSessionLog = await prisma.terminalSessionLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TerminalSessionLogCreateManyArgs>(args?: Prisma.SelectSubset<T, TerminalSessionLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TerminalSessionLogs and returns the data saved in the database.
   * @param {TerminalSessionLogCreateManyAndReturnArgs} args - Arguments to create many TerminalSessionLogs.
   * @example
   * // Create many TerminalSessionLogs
   * const terminalSessionLog = await prisma.terminalSessionLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TerminalSessionLogs and only return the `id`
   * const terminalSessionLogWithIdOnly = await prisma.terminalSessionLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TerminalSessionLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TerminalSessionLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TerminalSessionLog.
   * @param {TerminalSessionLogDeleteArgs} args - Arguments to delete one TerminalSessionLog.
   * @example
   * // Delete one TerminalSessionLog
   * const TerminalSessionLog = await prisma.terminalSessionLog.delete({
   *   where: {
   *     // ... filter to delete one TerminalSessionLog
   *   }
   * })
   * 
   */
  delete<T extends TerminalSessionLogDeleteArgs>(args: Prisma.SelectSubset<T, TerminalSessionLogDeleteArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionLogClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TerminalSessionLog.
   * @param {TerminalSessionLogUpdateArgs} args - Arguments to update one TerminalSessionLog.
   * @example
   * // Update one TerminalSessionLog
   * const terminalSessionLog = await prisma.terminalSessionLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TerminalSessionLogUpdateArgs>(args: Prisma.SelectSubset<T, TerminalSessionLogUpdateArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionLogClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TerminalSessionLogs.
   * @param {TerminalSessionLogDeleteManyArgs} args - Arguments to filter TerminalSessionLogs to delete.
   * @example
   * // Delete a few TerminalSessionLogs
   * const { count } = await prisma.terminalSessionLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TerminalSessionLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, TerminalSessionLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TerminalSessionLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TerminalSessionLogs
   * const terminalSessionLog = await prisma.terminalSessionLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TerminalSessionLogUpdateManyArgs>(args: Prisma.SelectSubset<T, TerminalSessionLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TerminalSessionLogs and returns the data updated in the database.
   * @param {TerminalSessionLogUpdateManyAndReturnArgs} args - Arguments to update many TerminalSessionLogs.
   * @example
   * // Update many TerminalSessionLogs
   * const terminalSessionLog = await prisma.terminalSessionLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TerminalSessionLogs and only return the `id`
   * const terminalSessionLogWithIdOnly = await prisma.terminalSessionLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TerminalSessionLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TerminalSessionLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TerminalSessionLog.
   * @param {TerminalSessionLogUpsertArgs} args - Arguments to update or create a TerminalSessionLog.
   * @example
   * // Update or create a TerminalSessionLog
   * const terminalSessionLog = await prisma.terminalSessionLog.upsert({
   *   create: {
   *     // ... data to create a TerminalSessionLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TerminalSessionLog we want to update
   *   }
   * })
   */
  upsert<T extends TerminalSessionLogUpsertArgs>(args: Prisma.SelectSubset<T, TerminalSessionLogUpsertArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionLogClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TerminalSessionLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionLogCountArgs} args - Arguments to filter TerminalSessionLogs to count.
   * @example
   * // Count the number of TerminalSessionLogs
   * const count = await prisma.terminalSessionLog.count({
   *   where: {
   *     // ... the filter for the TerminalSessionLogs we want to count
   *   }
   * })
  **/
  count<T extends TerminalSessionLogCountArgs>(
    args?: Prisma.Subset<T, TerminalSessionLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TerminalSessionLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TerminalSessionLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TerminalSessionLogAggregateArgs>(args: Prisma.Subset<T, TerminalSessionLogAggregateArgs>): Prisma.PrismaPromise<GetTerminalSessionLogAggregateType<T>>

  /**
   * Group by TerminalSessionLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalSessionLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TerminalSessionLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TerminalSessionLogGroupByArgs['orderBy'] }
      : { orderBy?: TerminalSessionLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TerminalSessionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTerminalSessionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TerminalSessionLog model
 */
readonly fields: TerminalSessionLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TerminalSessionLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TerminalSessionLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  session<T extends Prisma.TerminalSessionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TerminalSessionDefaultArgs<ExtArgs>>): Prisma.Prisma__TerminalSessionClient<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TerminalSessionLog model
 */
export interface TerminalSessionLogFieldRefs {
  readonly id: Prisma.FieldRef<"TerminalSessionLog", 'String'>
  readonly sessionId: Prisma.FieldRef<"TerminalSessionLog", 'String'>
  readonly content: Prisma.FieldRef<"TerminalSessionLog", 'String'>
}
    

// Custom InputTypes
/**
 * TerminalSessionLog findUnique
 */
export type TerminalSessionLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
  /**
   * Filter, which TerminalSessionLog to fetch.
   */
  where: Prisma.TerminalSessionLogWhereUniqueInput
}

/**
 * TerminalSessionLog findUniqueOrThrow
 */
export type TerminalSessionLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
  /**
   * Filter, which TerminalSessionLog to fetch.
   */
  where: Prisma.TerminalSessionLogWhereUniqueInput
}

/**
 * TerminalSessionLog findFirst
 */
export type TerminalSessionLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
  /**
   * Filter, which TerminalSessionLog to fetch.
   */
  where?: Prisma.TerminalSessionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TerminalSessionLogs to fetch.
   */
  orderBy?: Prisma.TerminalSessionLogOrderByWithRelationInput | Prisma.TerminalSessionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TerminalSessionLogs.
   */
  cursor?: Prisma.TerminalSessionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TerminalSessionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TerminalSessionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TerminalSessionLogs.
   */
  distinct?: Prisma.TerminalSessionLogScalarFieldEnum | Prisma.TerminalSessionLogScalarFieldEnum[]
}

/**
 * TerminalSessionLog findFirstOrThrow
 */
export type TerminalSessionLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
  /**
   * Filter, which TerminalSessionLog to fetch.
   */
  where?: Prisma.TerminalSessionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TerminalSessionLogs to fetch.
   */
  orderBy?: Prisma.TerminalSessionLogOrderByWithRelationInput | Prisma.TerminalSessionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TerminalSessionLogs.
   */
  cursor?: Prisma.TerminalSessionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TerminalSessionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TerminalSessionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TerminalSessionLogs.
   */
  distinct?: Prisma.TerminalSessionLogScalarFieldEnum | Prisma.TerminalSessionLogScalarFieldEnum[]
}

/**
 * TerminalSessionLog findMany
 */
export type TerminalSessionLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
  /**
   * Filter, which TerminalSessionLogs to fetch.
   */
  where?: Prisma.TerminalSessionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TerminalSessionLogs to fetch.
   */
  orderBy?: Prisma.TerminalSessionLogOrderByWithRelationInput | Prisma.TerminalSessionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TerminalSessionLogs.
   */
  cursor?: Prisma.TerminalSessionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TerminalSessionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TerminalSessionLogs.
   */
  skip?: number
  distinct?: Prisma.TerminalSessionLogScalarFieldEnum | Prisma.TerminalSessionLogScalarFieldEnum[]
}

/**
 * TerminalSessionLog create
 */
export type TerminalSessionLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
  /**
   * The data needed to create a TerminalSessionLog.
   */
  data: Prisma.XOR<Prisma.TerminalSessionLogCreateInput, Prisma.TerminalSessionLogUncheckedCreateInput>
}

/**
 * TerminalSessionLog createMany
 */
export type TerminalSessionLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TerminalSessionLogs.
   */
  data: Prisma.TerminalSessionLogCreateManyInput | Prisma.TerminalSessionLogCreateManyInput[]
}

/**
 * TerminalSessionLog createManyAndReturn
 */
export type TerminalSessionLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * The data used to create many TerminalSessionLogs.
   */
  data: Prisma.TerminalSessionLogCreateManyInput | Prisma.TerminalSessionLogCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TerminalSessionLog update
 */
export type TerminalSessionLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
  /**
   * The data needed to update a TerminalSessionLog.
   */
  data: Prisma.XOR<Prisma.TerminalSessionLogUpdateInput, Prisma.TerminalSessionLogUncheckedUpdateInput>
  /**
   * Choose, which TerminalSessionLog to update.
   */
  where: Prisma.TerminalSessionLogWhereUniqueInput
}

/**
 * TerminalSessionLog updateMany
 */
export type TerminalSessionLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TerminalSessionLogs.
   */
  data: Prisma.XOR<Prisma.TerminalSessionLogUpdateManyMutationInput, Prisma.TerminalSessionLogUncheckedUpdateManyInput>
  /**
   * Filter which TerminalSessionLogs to update
   */
  where?: Prisma.TerminalSessionLogWhereInput
  /**
   * Limit how many TerminalSessionLogs to update.
   */
  limit?: number
}

/**
 * TerminalSessionLog updateManyAndReturn
 */
export type TerminalSessionLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * The data used to update TerminalSessionLogs.
   */
  data: Prisma.XOR<Prisma.TerminalSessionLogUpdateManyMutationInput, Prisma.TerminalSessionLogUncheckedUpdateManyInput>
  /**
   * Filter which TerminalSessionLogs to update
   */
  where?: Prisma.TerminalSessionLogWhereInput
  /**
   * Limit how many TerminalSessionLogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TerminalSessionLog upsert
 */
export type TerminalSessionLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
  /**
   * The filter to search for the TerminalSessionLog to update in case it exists.
   */
  where: Prisma.TerminalSessionLogWhereUniqueInput
  /**
   * In case the TerminalSessionLog found by the `where` argument doesn't exist, create a new TerminalSessionLog with this data.
   */
  create: Prisma.XOR<Prisma.TerminalSessionLogCreateInput, Prisma.TerminalSessionLogUncheckedCreateInput>
  /**
   * In case the TerminalSessionLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TerminalSessionLogUpdateInput, Prisma.TerminalSessionLogUncheckedUpdateInput>
}

/**
 * TerminalSessionLog delete
 */
export type TerminalSessionLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
  /**
   * Filter which TerminalSessionLog to delete.
   */
  where: Prisma.TerminalSessionLogWhereUniqueInput
}

/**
 * TerminalSessionLog deleteMany
 */
export type TerminalSessionLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TerminalSessionLogs to delete
   */
  where?: Prisma.TerminalSessionLogWhereInput
  /**
   * Limit how many TerminalSessionLogs to delete.
   */
  limit?: number
}

/**
 * TerminalSessionLog without action
 */
export type TerminalSessionLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSessionLog
   */
  select?: Prisma.TerminalSessionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSessionLog
   */
  omit?: Prisma.TerminalSessionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionLogInclude<ExtArgs> | null
}
