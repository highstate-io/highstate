
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `HubModel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model HubModel
 * The container for project hubs.
 * 
 * Only used when "database" project model storage is used.
 */
export type HubModelModel = runtime.Types.Result.DefaultSelection<Prisma.$HubModelPayload>

export type AggregateHubModel = {
  _count: HubModelCountAggregateOutputType | null
  _min: HubModelMinAggregateOutputType | null
  _max: HubModelMaxAggregateOutputType | null
}

export type HubModelMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type HubModelMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type HubModelCountAggregateOutputType = {
  id: number
  model: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type HubModelMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
}

export type HubModelMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
}

export type HubModelCountAggregateInputType = {
  id?: true
  model?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type HubModelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which HubModel to aggregate.
   */
  where?: Prisma.HubModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HubModels to fetch.
   */
  orderBy?: Prisma.HubModelOrderByWithRelationInput | Prisma.HubModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.HubModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HubModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HubModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned HubModels
  **/
  _count?: true | HubModelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: HubModelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: HubModelMaxAggregateInputType
}

export type GetHubModelAggregateType<T extends HubModelAggregateArgs> = {
      [P in keyof T & keyof AggregateHubModel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHubModel[P]>
    : Prisma.GetScalarType<T[P], AggregateHubModel[P]>
}




export type HubModelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.HubModelWhereInput
  orderBy?: Prisma.HubModelOrderByWithAggregationInput | Prisma.HubModelOrderByWithAggregationInput[]
  by: Prisma.HubModelScalarFieldEnum[] | Prisma.HubModelScalarFieldEnum
  having?: Prisma.HubModelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: HubModelCountAggregateInputType | true
  _min?: HubModelMinAggregateInputType
  _max?: HubModelMaxAggregateInputType
}

export type HubModelGroupByOutputType = {
  id: string
  model: PrismaJson.HubModel
  createdAt: Date
  updatedAt: Date
  _count: HubModelCountAggregateOutputType | null
  _min: HubModelMinAggregateOutputType | null
  _max: HubModelMaxAggregateOutputType | null
}

type GetHubModelGroupByPayload<T extends HubModelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HubModelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof HubModelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HubModelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HubModelGroupByOutputType[P]>
      }
    >
  >



export type HubModelWhereInput = {
  AND?: Prisma.HubModelWhereInput | Prisma.HubModelWhereInput[]
  OR?: Prisma.HubModelWhereInput[]
  NOT?: Prisma.HubModelWhereInput | Prisma.HubModelWhereInput[]
  id?: Prisma.StringFilter<"HubModel"> | string
  model?: Prisma.JsonFilter<"HubModel">
  createdAt?: Prisma.DateTimeFilter<"HubModel"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"HubModel"> | Date | string
}

export type HubModelOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  model?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HubModelWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.HubModelWhereInput | Prisma.HubModelWhereInput[]
  OR?: Prisma.HubModelWhereInput[]
  NOT?: Prisma.HubModelWhereInput | Prisma.HubModelWhereInput[]
  model?: Prisma.JsonFilter<"HubModel">
  createdAt?: Prisma.DateTimeFilter<"HubModel"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"HubModel"> | Date | string
}, "id">

export type HubModelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  model?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.HubModelCountOrderByAggregateInput
  _max?: Prisma.HubModelMaxOrderByAggregateInput
  _min?: Prisma.HubModelMinOrderByAggregateInput
}

export type HubModelScalarWhereWithAggregatesInput = {
  AND?: Prisma.HubModelScalarWhereWithAggregatesInput | Prisma.HubModelScalarWhereWithAggregatesInput[]
  OR?: Prisma.HubModelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.HubModelScalarWhereWithAggregatesInput | Prisma.HubModelScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"HubModel"> | string
  model?: Prisma.JsonWithAggregatesFilter<"HubModel">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"HubModel"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"HubModel"> | Date | string
}

export type HubModelCreateInput = {
  id: string
  model: PrismaJson.HubModel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HubModelUncheckedCreateInput = {
  id: string
  model: PrismaJson.HubModel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HubModelUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  model?: PrismaJson.HubModel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HubModelUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  model?: PrismaJson.HubModel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HubModelCreateManyInput = {
  id: string
  model: PrismaJson.HubModel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HubModelUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  model?: PrismaJson.HubModel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HubModelUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  model?: PrismaJson.HubModel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HubModelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  model?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HubModelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HubModelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type HubModelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  model?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["hubModel"]>

export type HubModelSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  model?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["hubModel"]>

export type HubModelSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  model?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["hubModel"]>

export type HubModelSelectScalar = {
  id?: boolean
  model?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type HubModelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "model" | "createdAt" | "updatedAt", ExtArgs["result"]["hubModel"]>

export type $HubModelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "HubModel"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the hub.
     */
    id: string
    /**
     * The model of the hub managed by the backend.
     * 
     * [HubModel]
     */
    model: PrismaJson.HubModel
    /**
     * The time when the hub model was created.
     */
    createdAt: Date
    /**
     * The time when the hub model was last updated.
     */
    updatedAt: Date
  }, ExtArgs["result"]["hubModel"]>
  composites: {}
}

export type HubModelGetPayload<S extends boolean | null | undefined | HubModelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$HubModelPayload, S>

export type HubModelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<HubModelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: HubModelCountAggregateInputType | true
  }

export interface HubModelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HubModel'], meta: { name: 'HubModel' } }
  /**
   * Find zero or one HubModel that matches the filter.
   * @param {HubModelFindUniqueArgs} args - Arguments to find a HubModel
   * @example
   * // Get one HubModel
   * const hubModel = await prisma.hubModel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HubModelFindUniqueArgs>(args: Prisma.SelectSubset<T, HubModelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__HubModelClient<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one HubModel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HubModelFindUniqueOrThrowArgs} args - Arguments to find a HubModel
   * @example
   * // Get one HubModel
   * const hubModel = await prisma.hubModel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HubModelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, HubModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__HubModelClient<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first HubModel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HubModelFindFirstArgs} args - Arguments to find a HubModel
   * @example
   * // Get one HubModel
   * const hubModel = await prisma.hubModel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HubModelFindFirstArgs>(args?: Prisma.SelectSubset<T, HubModelFindFirstArgs<ExtArgs>>): Prisma.Prisma__HubModelClient<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first HubModel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HubModelFindFirstOrThrowArgs} args - Arguments to find a HubModel
   * @example
   * // Get one HubModel
   * const hubModel = await prisma.hubModel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HubModelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, HubModelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__HubModelClient<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more HubModels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HubModelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all HubModels
   * const hubModels = await prisma.hubModel.findMany()
   * 
   * // Get first 10 HubModels
   * const hubModels = await prisma.hubModel.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const hubModelWithIdOnly = await prisma.hubModel.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends HubModelFindManyArgs>(args?: Prisma.SelectSubset<T, HubModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a HubModel.
   * @param {HubModelCreateArgs} args - Arguments to create a HubModel.
   * @example
   * // Create one HubModel
   * const HubModel = await prisma.hubModel.create({
   *   data: {
   *     // ... data to create a HubModel
   *   }
   * })
   * 
   */
  create<T extends HubModelCreateArgs>(args: Prisma.SelectSubset<T, HubModelCreateArgs<ExtArgs>>): Prisma.Prisma__HubModelClient<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many HubModels.
   * @param {HubModelCreateManyArgs} args - Arguments to create many HubModels.
   * @example
   * // Create many HubModels
   * const hubModel = await prisma.hubModel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends HubModelCreateManyArgs>(args?: Prisma.SelectSubset<T, HubModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many HubModels and returns the data saved in the database.
   * @param {HubModelCreateManyAndReturnArgs} args - Arguments to create many HubModels.
   * @example
   * // Create many HubModels
   * const hubModel = await prisma.hubModel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many HubModels and only return the `id`
   * const hubModelWithIdOnly = await prisma.hubModel.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends HubModelCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, HubModelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a HubModel.
   * @param {HubModelDeleteArgs} args - Arguments to delete one HubModel.
   * @example
   * // Delete one HubModel
   * const HubModel = await prisma.hubModel.delete({
   *   where: {
   *     // ... filter to delete one HubModel
   *   }
   * })
   * 
   */
  delete<T extends HubModelDeleteArgs>(args: Prisma.SelectSubset<T, HubModelDeleteArgs<ExtArgs>>): Prisma.Prisma__HubModelClient<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one HubModel.
   * @param {HubModelUpdateArgs} args - Arguments to update one HubModel.
   * @example
   * // Update one HubModel
   * const hubModel = await prisma.hubModel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends HubModelUpdateArgs>(args: Prisma.SelectSubset<T, HubModelUpdateArgs<ExtArgs>>): Prisma.Prisma__HubModelClient<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more HubModels.
   * @param {HubModelDeleteManyArgs} args - Arguments to filter HubModels to delete.
   * @example
   * // Delete a few HubModels
   * const { count } = await prisma.hubModel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends HubModelDeleteManyArgs>(args?: Prisma.SelectSubset<T, HubModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more HubModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HubModelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many HubModels
   * const hubModel = await prisma.hubModel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends HubModelUpdateManyArgs>(args: Prisma.SelectSubset<T, HubModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more HubModels and returns the data updated in the database.
   * @param {HubModelUpdateManyAndReturnArgs} args - Arguments to update many HubModels.
   * @example
   * // Update many HubModels
   * const hubModel = await prisma.hubModel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more HubModels and only return the `id`
   * const hubModelWithIdOnly = await prisma.hubModel.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends HubModelUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, HubModelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one HubModel.
   * @param {HubModelUpsertArgs} args - Arguments to update or create a HubModel.
   * @example
   * // Update or create a HubModel
   * const hubModel = await prisma.hubModel.upsert({
   *   create: {
   *     // ... data to create a HubModel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the HubModel we want to update
   *   }
   * })
   */
  upsert<T extends HubModelUpsertArgs>(args: Prisma.SelectSubset<T, HubModelUpsertArgs<ExtArgs>>): Prisma.Prisma__HubModelClient<runtime.Types.Result.GetResult<Prisma.$HubModelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of HubModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HubModelCountArgs} args - Arguments to filter HubModels to count.
   * @example
   * // Count the number of HubModels
   * const count = await prisma.hubModel.count({
   *   where: {
   *     // ... the filter for the HubModels we want to count
   *   }
   * })
  **/
  count<T extends HubModelCountArgs>(
    args?: Prisma.Subset<T, HubModelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], HubModelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a HubModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HubModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends HubModelAggregateArgs>(args: Prisma.Subset<T, HubModelAggregateArgs>): Prisma.PrismaPromise<GetHubModelAggregateType<T>>

  /**
   * Group by HubModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HubModelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends HubModelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HubModelGroupByArgs['orderBy'] }
      : { orderBy?: HubModelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, HubModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHubModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the HubModel model
 */
readonly fields: HubModelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for HubModel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HubModelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the HubModel model
 */
export interface HubModelFieldRefs {
  readonly id: Prisma.FieldRef<"HubModel", 'String'>
  readonly model: Prisma.FieldRef<"HubModel", 'Json'>
  readonly createdAt: Prisma.FieldRef<"HubModel", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"HubModel", 'DateTime'>
}
    

// Custom InputTypes
/**
 * HubModel findUnique
 */
export type HubModelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * Filter, which HubModel to fetch.
   */
  where: Prisma.HubModelWhereUniqueInput
}

/**
 * HubModel findUniqueOrThrow
 */
export type HubModelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * Filter, which HubModel to fetch.
   */
  where: Prisma.HubModelWhereUniqueInput
}

/**
 * HubModel findFirst
 */
export type HubModelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * Filter, which HubModel to fetch.
   */
  where?: Prisma.HubModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HubModels to fetch.
   */
  orderBy?: Prisma.HubModelOrderByWithRelationInput | Prisma.HubModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for HubModels.
   */
  cursor?: Prisma.HubModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HubModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HubModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of HubModels.
   */
  distinct?: Prisma.HubModelScalarFieldEnum | Prisma.HubModelScalarFieldEnum[]
}

/**
 * HubModel findFirstOrThrow
 */
export type HubModelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * Filter, which HubModel to fetch.
   */
  where?: Prisma.HubModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HubModels to fetch.
   */
  orderBy?: Prisma.HubModelOrderByWithRelationInput | Prisma.HubModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for HubModels.
   */
  cursor?: Prisma.HubModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HubModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HubModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of HubModels.
   */
  distinct?: Prisma.HubModelScalarFieldEnum | Prisma.HubModelScalarFieldEnum[]
}

/**
 * HubModel findMany
 */
export type HubModelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * Filter, which HubModels to fetch.
   */
  where?: Prisma.HubModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of HubModels to fetch.
   */
  orderBy?: Prisma.HubModelOrderByWithRelationInput | Prisma.HubModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing HubModels.
   */
  cursor?: Prisma.HubModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` HubModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` HubModels.
   */
  skip?: number
  distinct?: Prisma.HubModelScalarFieldEnum | Prisma.HubModelScalarFieldEnum[]
}

/**
 * HubModel create
 */
export type HubModelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * The data needed to create a HubModel.
   */
  data: Prisma.XOR<Prisma.HubModelCreateInput, Prisma.HubModelUncheckedCreateInput>
}

/**
 * HubModel createMany
 */
export type HubModelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many HubModels.
   */
  data: Prisma.HubModelCreateManyInput | Prisma.HubModelCreateManyInput[]
}

/**
 * HubModel createManyAndReturn
 */
export type HubModelCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * The data used to create many HubModels.
   */
  data: Prisma.HubModelCreateManyInput | Prisma.HubModelCreateManyInput[]
}

/**
 * HubModel update
 */
export type HubModelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * The data needed to update a HubModel.
   */
  data: Prisma.XOR<Prisma.HubModelUpdateInput, Prisma.HubModelUncheckedUpdateInput>
  /**
   * Choose, which HubModel to update.
   */
  where: Prisma.HubModelWhereUniqueInput
}

/**
 * HubModel updateMany
 */
export type HubModelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update HubModels.
   */
  data: Prisma.XOR<Prisma.HubModelUpdateManyMutationInput, Prisma.HubModelUncheckedUpdateManyInput>
  /**
   * Filter which HubModels to update
   */
  where?: Prisma.HubModelWhereInput
  /**
   * Limit how many HubModels to update.
   */
  limit?: number
}

/**
 * HubModel updateManyAndReturn
 */
export type HubModelUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * The data used to update HubModels.
   */
  data: Prisma.XOR<Prisma.HubModelUpdateManyMutationInput, Prisma.HubModelUncheckedUpdateManyInput>
  /**
   * Filter which HubModels to update
   */
  where?: Prisma.HubModelWhereInput
  /**
   * Limit how many HubModels to update.
   */
  limit?: number
}

/**
 * HubModel upsert
 */
export type HubModelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * The filter to search for the HubModel to update in case it exists.
   */
  where: Prisma.HubModelWhereUniqueInput
  /**
   * In case the HubModel found by the `where` argument doesn't exist, create a new HubModel with this data.
   */
  create: Prisma.XOR<Prisma.HubModelCreateInput, Prisma.HubModelUncheckedCreateInput>
  /**
   * In case the HubModel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.HubModelUpdateInput, Prisma.HubModelUncheckedUpdateInput>
}

/**
 * HubModel delete
 */
export type HubModelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
  /**
   * Filter which HubModel to delete.
   */
  where: Prisma.HubModelWhereUniqueInput
}

/**
 * HubModel deleteMany
 */
export type HubModelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which HubModels to delete
   */
  where?: Prisma.HubModelWhereInput
  /**
   * Limit how many HubModels to delete.
   */
  limit?: number
}

/**
 * HubModel without action
 */
export type HubModelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HubModel
   */
  select?: Prisma.HubModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the HubModel
   */
  omit?: Prisma.HubModelOmit<ExtArgs> | null
}
