
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Secret` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Secret
 * The secret stores sensitive configuration values for instances, service accounts, and system components.
 * 
 * Secrets can be instance-owned (for unit configuration), service account-owned, or system-level
 * (like Pulumi passwords). 
 * 
 * Secrets persist through normal destroy (recreate) operations
 * and are only deleted when explicitly forgetting instance state with the deleteSecrets flag or when manually deleted.
 * 
 * Secret updates invalidate instance input hashes via inputHashNonce, triggering re-execution
 * during operations. But the content of the secrets itself do not contribute to the input hash.
 * 
 * System secrets like Pulumi passwords are created on-demand and persist for the whole project lifetime.
 */
export type SecretModel = runtime.Types.Result.DefaultSelection<Prisma.$SecretPayload>

export type AggregateSecret = {
  _count: SecretCountAggregateOutputType | null
  _min: SecretMinAggregateOutputType | null
  _max: SecretMaxAggregateOutputType | null
}

export type SecretMinAggregateOutputType = {
  id: string | null
  stateId: string | null
  name: string | null
  systemName: string | null
  serviceAccountId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SecretMaxAggregateOutputType = {
  id: string | null
  stateId: string | null
  name: string | null
  systemName: string | null
  serviceAccountId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SecretCountAggregateOutputType = {
  id: number
  meta: number
  stateId: number
  name: number
  systemName: number
  serviceAccountId: number
  content: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SecretMinAggregateInputType = {
  id?: true
  stateId?: true
  name?: true
  systemName?: true
  serviceAccountId?: true
  createdAt?: true
  updatedAt?: true
}

export type SecretMaxAggregateInputType = {
  id?: true
  stateId?: true
  name?: true
  systemName?: true
  serviceAccountId?: true
  createdAt?: true
  updatedAt?: true
}

export type SecretCountAggregateInputType = {
  id?: true
  meta?: true
  stateId?: true
  name?: true
  systemName?: true
  serviceAccountId?: true
  content?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SecretAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Secret to aggregate.
   */
  where?: Prisma.SecretWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Secrets to fetch.
   */
  orderBy?: Prisma.SecretOrderByWithRelationInput | Prisma.SecretOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SecretWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Secrets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Secrets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Secrets
  **/
  _count?: true | SecretCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SecretMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SecretMaxAggregateInputType
}

export type GetSecretAggregateType<T extends SecretAggregateArgs> = {
      [P in keyof T & keyof AggregateSecret]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSecret[P]>
    : Prisma.GetScalarType<T[P], AggregateSecret[P]>
}




export type SecretGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SecretWhereInput
  orderBy?: Prisma.SecretOrderByWithAggregationInput | Prisma.SecretOrderByWithAggregationInput[]
  by: Prisma.SecretScalarFieldEnum[] | Prisma.SecretScalarFieldEnum
  having?: Prisma.SecretScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SecretCountAggregateInputType | true
  _min?: SecretMinAggregateInputType
  _max?: SecretMaxAggregateInputType
}

export type SecretGroupByOutputType = {
  id: string
  meta: PrismaJson.GlobalCommonObjectMeta
  stateId: string | null
  name: string | null
  systemName: string | null
  serviceAccountId: string | null
  content: (unknown)
  createdAt: Date
  updatedAt: Date
  _count: SecretCountAggregateOutputType | null
  _min: SecretMinAggregateOutputType | null
  _max: SecretMaxAggregateOutputType | null
}

type GetSecretGroupByPayload<T extends SecretGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SecretGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SecretGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SecretGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SecretGroupByOutputType[P]>
      }
    >
  >



export type SecretWhereInput = {
  AND?: Prisma.SecretWhereInput | Prisma.SecretWhereInput[]
  OR?: Prisma.SecretWhereInput[]
  NOT?: Prisma.SecretWhereInput | Prisma.SecretWhereInput[]
  id?: Prisma.StringFilter<"Secret"> | string
  meta?: Prisma.JsonFilter<"Secret">
  stateId?: Prisma.StringNullableFilter<"Secret"> | string | null
  name?: Prisma.StringNullableFilter<"Secret"> | string | null
  systemName?: Prisma.StringNullableFilter<"Secret"> | string | null
  serviceAccountId?: Prisma.StringNullableFilter<"Secret"> | string | null
  content?: Prisma.JsonFilter<"Secret">
  createdAt?: Prisma.DateTimeFilter<"Secret"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Secret"> | Date | string
  state?: Prisma.XOR<Prisma.InstanceStateNullableScalarRelationFilter, Prisma.InstanceStateWhereInput> | null
  serviceAccount?: Prisma.XOR<Prisma.ServiceAccountNullableScalarRelationFilter, Prisma.ServiceAccountWhereInput> | null
}

export type SecretOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  stateId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  systemName?: Prisma.SortOrderInput | Prisma.SortOrder
  serviceAccountId?: Prisma.SortOrderInput | Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  state?: Prisma.InstanceStateOrderByWithRelationInput
  serviceAccount?: Prisma.ServiceAccountOrderByWithRelationInput
}

export type SecretWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  systemName?: string
  stateId_name?: Prisma.SecretStateIdNameCompoundUniqueInput
  AND?: Prisma.SecretWhereInput | Prisma.SecretWhereInput[]
  OR?: Prisma.SecretWhereInput[]
  NOT?: Prisma.SecretWhereInput | Prisma.SecretWhereInput[]
  meta?: Prisma.JsonFilter<"Secret">
  stateId?: Prisma.StringNullableFilter<"Secret"> | string | null
  name?: Prisma.StringNullableFilter<"Secret"> | string | null
  serviceAccountId?: Prisma.StringNullableFilter<"Secret"> | string | null
  content?: Prisma.JsonFilter<"Secret">
  createdAt?: Prisma.DateTimeFilter<"Secret"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Secret"> | Date | string
  state?: Prisma.XOR<Prisma.InstanceStateNullableScalarRelationFilter, Prisma.InstanceStateWhereInput> | null
  serviceAccount?: Prisma.XOR<Prisma.ServiceAccountNullableScalarRelationFilter, Prisma.ServiceAccountWhereInput> | null
}, "id" | "systemName" | "stateId_name">

export type SecretOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  stateId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  systemName?: Prisma.SortOrderInput | Prisma.SortOrder
  serviceAccountId?: Prisma.SortOrderInput | Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SecretCountOrderByAggregateInput
  _max?: Prisma.SecretMaxOrderByAggregateInput
  _min?: Prisma.SecretMinOrderByAggregateInput
}

export type SecretScalarWhereWithAggregatesInput = {
  AND?: Prisma.SecretScalarWhereWithAggregatesInput | Prisma.SecretScalarWhereWithAggregatesInput[]
  OR?: Prisma.SecretScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SecretScalarWhereWithAggregatesInput | Prisma.SecretScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Secret"> | string
  meta?: Prisma.JsonWithAggregatesFilter<"Secret">
  stateId?: Prisma.StringNullableWithAggregatesFilter<"Secret"> | string | null
  name?: Prisma.StringNullableWithAggregatesFilter<"Secret"> | string | null
  systemName?: Prisma.StringNullableWithAggregatesFilter<"Secret"> | string | null
  serviceAccountId?: Prisma.StringNullableWithAggregatesFilter<"Secret"> | string | null
  content?: Prisma.JsonWithAggregatesFilter<"Secret">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Secret"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Secret"> | Date | string
}

export type SecretCreateInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  name?: string | null
  systemName?: string | null
  content: (unknown)
  createdAt?: Date | string
  updatedAt?: Date | string
  state?: Prisma.InstanceStateCreateNestedOneWithoutSecretsInput
  serviceAccount?: Prisma.ServiceAccountCreateNestedOneWithoutSecretsInput
}

export type SecretUncheckedCreateInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  stateId?: string | null
  name?: string | null
  systemName?: string | null
  serviceAccountId?: string | null
  content: (unknown)
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SecretUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  systemName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: (unknown)
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.InstanceStateUpdateOneWithoutSecretsNestedInput
  serviceAccount?: Prisma.ServiceAccountUpdateOneWithoutSecretsNestedInput
}

export type SecretUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  systemName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: (unknown)
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SecretCreateManyInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  stateId?: string | null
  name?: string | null
  systemName?: string | null
  serviceAccountId?: string | null
  content: (unknown)
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SecretUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  systemName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: (unknown)
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SecretUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  systemName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: (unknown)
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SecretListRelationFilter = {
  every?: Prisma.SecretWhereInput
  some?: Prisma.SecretWhereInput
  none?: Prisma.SecretWhereInput
}

export type SecretOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SecretStateIdNameCompoundUniqueInput = {
  stateId: string
  name: string
}

export type SecretCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  systemName?: Prisma.SortOrder
  serviceAccountId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SecretMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  systemName?: Prisma.SortOrder
  serviceAccountId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SecretMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  systemName?: Prisma.SortOrder
  serviceAccountId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SecretCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.SecretCreateWithoutStateInput, Prisma.SecretUncheckedCreateWithoutStateInput> | Prisma.SecretCreateWithoutStateInput[] | Prisma.SecretUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.SecretCreateOrConnectWithoutStateInput | Prisma.SecretCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.SecretCreateManyStateInputEnvelope
  connect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
}

export type SecretUncheckedCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.SecretCreateWithoutStateInput, Prisma.SecretUncheckedCreateWithoutStateInput> | Prisma.SecretCreateWithoutStateInput[] | Prisma.SecretUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.SecretCreateOrConnectWithoutStateInput | Prisma.SecretCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.SecretCreateManyStateInputEnvelope
  connect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
}

export type SecretUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.SecretCreateWithoutStateInput, Prisma.SecretUncheckedCreateWithoutStateInput> | Prisma.SecretCreateWithoutStateInput[] | Prisma.SecretUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.SecretCreateOrConnectWithoutStateInput | Prisma.SecretCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.SecretUpsertWithWhereUniqueWithoutStateInput | Prisma.SecretUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.SecretCreateManyStateInputEnvelope
  set?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  disconnect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  delete?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  connect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  update?: Prisma.SecretUpdateWithWhereUniqueWithoutStateInput | Prisma.SecretUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.SecretUpdateManyWithWhereWithoutStateInput | Prisma.SecretUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.SecretScalarWhereInput | Prisma.SecretScalarWhereInput[]
}

export type SecretUncheckedUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.SecretCreateWithoutStateInput, Prisma.SecretUncheckedCreateWithoutStateInput> | Prisma.SecretCreateWithoutStateInput[] | Prisma.SecretUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.SecretCreateOrConnectWithoutStateInput | Prisma.SecretCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.SecretUpsertWithWhereUniqueWithoutStateInput | Prisma.SecretUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.SecretCreateManyStateInputEnvelope
  set?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  disconnect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  delete?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  connect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  update?: Prisma.SecretUpdateWithWhereUniqueWithoutStateInput | Prisma.SecretUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.SecretUpdateManyWithWhereWithoutStateInput | Prisma.SecretUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.SecretScalarWhereInput | Prisma.SecretScalarWhereInput[]
}

export type SecretCreateNestedManyWithoutServiceAccountInput = {
  create?: Prisma.XOR<Prisma.SecretCreateWithoutServiceAccountInput, Prisma.SecretUncheckedCreateWithoutServiceAccountInput> | Prisma.SecretCreateWithoutServiceAccountInput[] | Prisma.SecretUncheckedCreateWithoutServiceAccountInput[]
  connectOrCreate?: Prisma.SecretCreateOrConnectWithoutServiceAccountInput | Prisma.SecretCreateOrConnectWithoutServiceAccountInput[]
  createMany?: Prisma.SecretCreateManyServiceAccountInputEnvelope
  connect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
}

export type SecretUncheckedCreateNestedManyWithoutServiceAccountInput = {
  create?: Prisma.XOR<Prisma.SecretCreateWithoutServiceAccountInput, Prisma.SecretUncheckedCreateWithoutServiceAccountInput> | Prisma.SecretCreateWithoutServiceAccountInput[] | Prisma.SecretUncheckedCreateWithoutServiceAccountInput[]
  connectOrCreate?: Prisma.SecretCreateOrConnectWithoutServiceAccountInput | Prisma.SecretCreateOrConnectWithoutServiceAccountInput[]
  createMany?: Prisma.SecretCreateManyServiceAccountInputEnvelope
  connect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
}

export type SecretUpdateManyWithoutServiceAccountNestedInput = {
  create?: Prisma.XOR<Prisma.SecretCreateWithoutServiceAccountInput, Prisma.SecretUncheckedCreateWithoutServiceAccountInput> | Prisma.SecretCreateWithoutServiceAccountInput[] | Prisma.SecretUncheckedCreateWithoutServiceAccountInput[]
  connectOrCreate?: Prisma.SecretCreateOrConnectWithoutServiceAccountInput | Prisma.SecretCreateOrConnectWithoutServiceAccountInput[]
  upsert?: Prisma.SecretUpsertWithWhereUniqueWithoutServiceAccountInput | Prisma.SecretUpsertWithWhereUniqueWithoutServiceAccountInput[]
  createMany?: Prisma.SecretCreateManyServiceAccountInputEnvelope
  set?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  disconnect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  delete?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  connect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  update?: Prisma.SecretUpdateWithWhereUniqueWithoutServiceAccountInput | Prisma.SecretUpdateWithWhereUniqueWithoutServiceAccountInput[]
  updateMany?: Prisma.SecretUpdateManyWithWhereWithoutServiceAccountInput | Prisma.SecretUpdateManyWithWhereWithoutServiceAccountInput[]
  deleteMany?: Prisma.SecretScalarWhereInput | Prisma.SecretScalarWhereInput[]
}

export type SecretUncheckedUpdateManyWithoutServiceAccountNestedInput = {
  create?: Prisma.XOR<Prisma.SecretCreateWithoutServiceAccountInput, Prisma.SecretUncheckedCreateWithoutServiceAccountInput> | Prisma.SecretCreateWithoutServiceAccountInput[] | Prisma.SecretUncheckedCreateWithoutServiceAccountInput[]
  connectOrCreate?: Prisma.SecretCreateOrConnectWithoutServiceAccountInput | Prisma.SecretCreateOrConnectWithoutServiceAccountInput[]
  upsert?: Prisma.SecretUpsertWithWhereUniqueWithoutServiceAccountInput | Prisma.SecretUpsertWithWhereUniqueWithoutServiceAccountInput[]
  createMany?: Prisma.SecretCreateManyServiceAccountInputEnvelope
  set?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  disconnect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  delete?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  connect?: Prisma.SecretWhereUniqueInput | Prisma.SecretWhereUniqueInput[]
  update?: Prisma.SecretUpdateWithWhereUniqueWithoutServiceAccountInput | Prisma.SecretUpdateWithWhereUniqueWithoutServiceAccountInput[]
  updateMany?: Prisma.SecretUpdateManyWithWhereWithoutServiceAccountInput | Prisma.SecretUpdateManyWithWhereWithoutServiceAccountInput[]
  deleteMany?: Prisma.SecretScalarWhereInput | Prisma.SecretScalarWhereInput[]
}

export type SecretCreateWithoutStateInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  name?: string | null
  systemName?: string | null
  content: (unknown)
  createdAt?: Date | string
  updatedAt?: Date | string
  serviceAccount?: Prisma.ServiceAccountCreateNestedOneWithoutSecretsInput
}

export type SecretUncheckedCreateWithoutStateInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  name?: string | null
  systemName?: string | null
  serviceAccountId?: string | null
  content: (unknown)
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SecretCreateOrConnectWithoutStateInput = {
  where: Prisma.SecretWhereUniqueInput
  create: Prisma.XOR<Prisma.SecretCreateWithoutStateInput, Prisma.SecretUncheckedCreateWithoutStateInput>
}

export type SecretCreateManyStateInputEnvelope = {
  data: Prisma.SecretCreateManyStateInput | Prisma.SecretCreateManyStateInput[]
}

export type SecretUpsertWithWhereUniqueWithoutStateInput = {
  where: Prisma.SecretWhereUniqueInput
  update: Prisma.XOR<Prisma.SecretUpdateWithoutStateInput, Prisma.SecretUncheckedUpdateWithoutStateInput>
  create: Prisma.XOR<Prisma.SecretCreateWithoutStateInput, Prisma.SecretUncheckedCreateWithoutStateInput>
}

export type SecretUpdateWithWhereUniqueWithoutStateInput = {
  where: Prisma.SecretWhereUniqueInput
  data: Prisma.XOR<Prisma.SecretUpdateWithoutStateInput, Prisma.SecretUncheckedUpdateWithoutStateInput>
}

export type SecretUpdateManyWithWhereWithoutStateInput = {
  where: Prisma.SecretScalarWhereInput
  data: Prisma.XOR<Prisma.SecretUpdateManyMutationInput, Prisma.SecretUncheckedUpdateManyWithoutStateInput>
}

export type SecretScalarWhereInput = {
  AND?: Prisma.SecretScalarWhereInput | Prisma.SecretScalarWhereInput[]
  OR?: Prisma.SecretScalarWhereInput[]
  NOT?: Prisma.SecretScalarWhereInput | Prisma.SecretScalarWhereInput[]
  id?: Prisma.StringFilter<"Secret"> | string
  meta?: Prisma.JsonFilter<"Secret">
  stateId?: Prisma.StringNullableFilter<"Secret"> | string | null
  name?: Prisma.StringNullableFilter<"Secret"> | string | null
  systemName?: Prisma.StringNullableFilter<"Secret"> | string | null
  serviceAccountId?: Prisma.StringNullableFilter<"Secret"> | string | null
  content?: Prisma.JsonFilter<"Secret">
  createdAt?: Prisma.DateTimeFilter<"Secret"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Secret"> | Date | string
}

export type SecretCreateWithoutServiceAccountInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  name?: string | null
  systemName?: string | null
  content: (unknown)
  createdAt?: Date | string
  updatedAt?: Date | string
  state?: Prisma.InstanceStateCreateNestedOneWithoutSecretsInput
}

export type SecretUncheckedCreateWithoutServiceAccountInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  stateId?: string | null
  name?: string | null
  systemName?: string | null
  content: (unknown)
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SecretCreateOrConnectWithoutServiceAccountInput = {
  where: Prisma.SecretWhereUniqueInput
  create: Prisma.XOR<Prisma.SecretCreateWithoutServiceAccountInput, Prisma.SecretUncheckedCreateWithoutServiceAccountInput>
}

export type SecretCreateManyServiceAccountInputEnvelope = {
  data: Prisma.SecretCreateManyServiceAccountInput | Prisma.SecretCreateManyServiceAccountInput[]
}

export type SecretUpsertWithWhereUniqueWithoutServiceAccountInput = {
  where: Prisma.SecretWhereUniqueInput
  update: Prisma.XOR<Prisma.SecretUpdateWithoutServiceAccountInput, Prisma.SecretUncheckedUpdateWithoutServiceAccountInput>
  create: Prisma.XOR<Prisma.SecretCreateWithoutServiceAccountInput, Prisma.SecretUncheckedCreateWithoutServiceAccountInput>
}

export type SecretUpdateWithWhereUniqueWithoutServiceAccountInput = {
  where: Prisma.SecretWhereUniqueInput
  data: Prisma.XOR<Prisma.SecretUpdateWithoutServiceAccountInput, Prisma.SecretUncheckedUpdateWithoutServiceAccountInput>
}

export type SecretUpdateManyWithWhereWithoutServiceAccountInput = {
  where: Prisma.SecretScalarWhereInput
  data: Prisma.XOR<Prisma.SecretUpdateManyMutationInput, Prisma.SecretUncheckedUpdateManyWithoutServiceAccountInput>
}

export type SecretCreateManyStateInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  name?: string | null
  systemName?: string | null
  serviceAccountId?: string | null
  content: (unknown)
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SecretUpdateWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  systemName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: (unknown)
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  serviceAccount?: Prisma.ServiceAccountUpdateOneWithoutSecretsNestedInput
}

export type SecretUncheckedUpdateWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  systemName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: (unknown)
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SecretUncheckedUpdateManyWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  systemName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SecretCreateManyServiceAccountInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  stateId?: string | null
  name?: string | null
  systemName?: string | null
  content: (unknown)
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SecretUpdateWithoutServiceAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  systemName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: (unknown)
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.InstanceStateUpdateOneWithoutSecretsNestedInput
}

export type SecretUncheckedUpdateWithoutServiceAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  systemName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: (unknown)
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SecretUncheckedUpdateManyWithoutServiceAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  systemName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type SecretSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  stateId?: boolean
  name?: boolean
  systemName?: boolean
  serviceAccountId?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  state?: boolean | Prisma.Secret$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Secret$serviceAccountArgs<ExtArgs>
}, ExtArgs["result"]["secret"]>

export type SecretSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  stateId?: boolean
  name?: boolean
  systemName?: boolean
  serviceAccountId?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  state?: boolean | Prisma.Secret$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Secret$serviceAccountArgs<ExtArgs>
}, ExtArgs["result"]["secret"]>

export type SecretSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  stateId?: boolean
  name?: boolean
  systemName?: boolean
  serviceAccountId?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  state?: boolean | Prisma.Secret$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Secret$serviceAccountArgs<ExtArgs>
}, ExtArgs["result"]["secret"]>

export type SecretSelectScalar = {
  id?: boolean
  meta?: boolean
  stateId?: boolean
  name?: boolean
  systemName?: boolean
  serviceAccountId?: boolean
  content?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SecretOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meta" | "stateId" | "name" | "systemName" | "serviceAccountId" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["secret"]>
export type SecretInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.Secret$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Secret$serviceAccountArgs<ExtArgs>
}
export type SecretIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.Secret$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Secret$serviceAccountArgs<ExtArgs>
}
export type SecretIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.Secret$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Secret$serviceAccountArgs<ExtArgs>
}

export type $SecretPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Secret"
  objects: {
    /**
     * The instance this secret belongs to.
     */
    state: Prisma.$InstanceStatePayload<ExtArgs> | null
    /**
     * The service account this secret belongs to.
     */
    serviceAccount: Prisma.$ServiceAccountPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the secret.
     */
    id: string
    /**
     * The metadata of the secret managed by the backend.
     * 
     * [GlobalCommonObjectMeta]
     */
    meta: PrismaJson.GlobalCommonObjectMeta
    /**
     * The ID of the state of the instance owning this secret.
     */
    stateId: string | null
    /**
     * The name of the secret within the instance.
     * 
     * Will be null if the secret is not owned by an instance.
     */
    name: string | null
    /**
     * The name of the secret within the project if the secret is a system secret.
     */
    systemName: string | null
    /**
     * The ID of the service account owning this secret.
     */
    serviceAccountId: string | null
    /**
     * The content of the secret.
     * 
     * ![unknown]
     */
    content: (unknown)
    /**
     * The time when the secret was created.
     */
    createdAt: Date
    /**
     * The time when the secret was last updated.
     */
    updatedAt: Date
  }, ExtArgs["result"]["secret"]>
  composites: {}
}

export type SecretGetPayload<S extends boolean | null | undefined | SecretDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SecretPayload, S>

export type SecretCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SecretFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SecretCountAggregateInputType | true
  }

export interface SecretDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Secret'], meta: { name: 'Secret' } }
  /**
   * Find zero or one Secret that matches the filter.
   * @param {SecretFindUniqueArgs} args - Arguments to find a Secret
   * @example
   * // Get one Secret
   * const secret = await prisma.secret.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SecretFindUniqueArgs>(args: Prisma.SelectSubset<T, SecretFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SecretClient<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Secret that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SecretFindUniqueOrThrowArgs} args - Arguments to find a Secret
   * @example
   * // Get one Secret
   * const secret = await prisma.secret.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SecretFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SecretFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SecretClient<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Secret that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecretFindFirstArgs} args - Arguments to find a Secret
   * @example
   * // Get one Secret
   * const secret = await prisma.secret.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SecretFindFirstArgs>(args?: Prisma.SelectSubset<T, SecretFindFirstArgs<ExtArgs>>): Prisma.Prisma__SecretClient<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Secret that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecretFindFirstOrThrowArgs} args - Arguments to find a Secret
   * @example
   * // Get one Secret
   * const secret = await prisma.secret.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SecretFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SecretFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SecretClient<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Secrets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecretFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Secrets
   * const secrets = await prisma.secret.findMany()
   * 
   * // Get first 10 Secrets
   * const secrets = await prisma.secret.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const secretWithIdOnly = await prisma.secret.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SecretFindManyArgs>(args?: Prisma.SelectSubset<T, SecretFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Secret.
   * @param {SecretCreateArgs} args - Arguments to create a Secret.
   * @example
   * // Create one Secret
   * const Secret = await prisma.secret.create({
   *   data: {
   *     // ... data to create a Secret
   *   }
   * })
   * 
   */
  create<T extends SecretCreateArgs>(args: Prisma.SelectSubset<T, SecretCreateArgs<ExtArgs>>): Prisma.Prisma__SecretClient<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Secrets.
   * @param {SecretCreateManyArgs} args - Arguments to create many Secrets.
   * @example
   * // Create many Secrets
   * const secret = await prisma.secret.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SecretCreateManyArgs>(args?: Prisma.SelectSubset<T, SecretCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Secrets and returns the data saved in the database.
   * @param {SecretCreateManyAndReturnArgs} args - Arguments to create many Secrets.
   * @example
   * // Create many Secrets
   * const secret = await prisma.secret.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Secrets and only return the `id`
   * const secretWithIdOnly = await prisma.secret.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SecretCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SecretCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Secret.
   * @param {SecretDeleteArgs} args - Arguments to delete one Secret.
   * @example
   * // Delete one Secret
   * const Secret = await prisma.secret.delete({
   *   where: {
   *     // ... filter to delete one Secret
   *   }
   * })
   * 
   */
  delete<T extends SecretDeleteArgs>(args: Prisma.SelectSubset<T, SecretDeleteArgs<ExtArgs>>): Prisma.Prisma__SecretClient<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Secret.
   * @param {SecretUpdateArgs} args - Arguments to update one Secret.
   * @example
   * // Update one Secret
   * const secret = await prisma.secret.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SecretUpdateArgs>(args: Prisma.SelectSubset<T, SecretUpdateArgs<ExtArgs>>): Prisma.Prisma__SecretClient<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Secrets.
   * @param {SecretDeleteManyArgs} args - Arguments to filter Secrets to delete.
   * @example
   * // Delete a few Secrets
   * const { count } = await prisma.secret.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SecretDeleteManyArgs>(args?: Prisma.SelectSubset<T, SecretDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Secrets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecretUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Secrets
   * const secret = await prisma.secret.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SecretUpdateManyArgs>(args: Prisma.SelectSubset<T, SecretUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Secrets and returns the data updated in the database.
   * @param {SecretUpdateManyAndReturnArgs} args - Arguments to update many Secrets.
   * @example
   * // Update many Secrets
   * const secret = await prisma.secret.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Secrets and only return the `id`
   * const secretWithIdOnly = await prisma.secret.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SecretUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SecretUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Secret.
   * @param {SecretUpsertArgs} args - Arguments to update or create a Secret.
   * @example
   * // Update or create a Secret
   * const secret = await prisma.secret.upsert({
   *   create: {
   *     // ... data to create a Secret
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Secret we want to update
   *   }
   * })
   */
  upsert<T extends SecretUpsertArgs>(args: Prisma.SelectSubset<T, SecretUpsertArgs<ExtArgs>>): Prisma.Prisma__SecretClient<runtime.Types.Result.GetResult<Prisma.$SecretPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Secrets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecretCountArgs} args - Arguments to filter Secrets to count.
   * @example
   * // Count the number of Secrets
   * const count = await prisma.secret.count({
   *   where: {
   *     // ... the filter for the Secrets we want to count
   *   }
   * })
  **/
  count<T extends SecretCountArgs>(
    args?: Prisma.Subset<T, SecretCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SecretCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Secret.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecretAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SecretAggregateArgs>(args: Prisma.Subset<T, SecretAggregateArgs>): Prisma.PrismaPromise<GetSecretAggregateType<T>>

  /**
   * Group by Secret.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SecretGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SecretGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SecretGroupByArgs['orderBy'] }
      : { orderBy?: SecretGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SecretGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSecretGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Secret model
 */
readonly fields: SecretFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Secret.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SecretClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  state<T extends Prisma.Secret$stateArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Secret$stateArgs<ExtArgs>>): Prisma.Prisma__InstanceStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  serviceAccount<T extends Prisma.Secret$serviceAccountArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Secret$serviceAccountArgs<ExtArgs>>): Prisma.Prisma__ServiceAccountClient<runtime.Types.Result.GetResult<Prisma.$ServiceAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Secret model
 */
export interface SecretFieldRefs {
  readonly id: Prisma.FieldRef<"Secret", 'String'>
  readonly meta: Prisma.FieldRef<"Secret", 'Json'>
  readonly stateId: Prisma.FieldRef<"Secret", 'String'>
  readonly name: Prisma.FieldRef<"Secret", 'String'>
  readonly systemName: Prisma.FieldRef<"Secret", 'String'>
  readonly serviceAccountId: Prisma.FieldRef<"Secret", 'String'>
  readonly content: Prisma.FieldRef<"Secret", 'Json'>
  readonly createdAt: Prisma.FieldRef<"Secret", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Secret", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Secret findUnique
 */
export type SecretFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretInclude<ExtArgs> | null
  /**
   * Filter, which Secret to fetch.
   */
  where: Prisma.SecretWhereUniqueInput
}

/**
 * Secret findUniqueOrThrow
 */
export type SecretFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretInclude<ExtArgs> | null
  /**
   * Filter, which Secret to fetch.
   */
  where: Prisma.SecretWhereUniqueInput
}

/**
 * Secret findFirst
 */
export type SecretFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretInclude<ExtArgs> | null
  /**
   * Filter, which Secret to fetch.
   */
  where?: Prisma.SecretWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Secrets to fetch.
   */
  orderBy?: Prisma.SecretOrderByWithRelationInput | Prisma.SecretOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Secrets.
   */
  cursor?: Prisma.SecretWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Secrets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Secrets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Secrets.
   */
  distinct?: Prisma.SecretScalarFieldEnum | Prisma.SecretScalarFieldEnum[]
}

/**
 * Secret findFirstOrThrow
 */
export type SecretFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretInclude<ExtArgs> | null
  /**
   * Filter, which Secret to fetch.
   */
  where?: Prisma.SecretWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Secrets to fetch.
   */
  orderBy?: Prisma.SecretOrderByWithRelationInput | Prisma.SecretOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Secrets.
   */
  cursor?: Prisma.SecretWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Secrets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Secrets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Secrets.
   */
  distinct?: Prisma.SecretScalarFieldEnum | Prisma.SecretScalarFieldEnum[]
}

/**
 * Secret findMany
 */
export type SecretFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretInclude<ExtArgs> | null
  /**
   * Filter, which Secrets to fetch.
   */
  where?: Prisma.SecretWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Secrets to fetch.
   */
  orderBy?: Prisma.SecretOrderByWithRelationInput | Prisma.SecretOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Secrets.
   */
  cursor?: Prisma.SecretWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Secrets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Secrets.
   */
  skip?: number
  distinct?: Prisma.SecretScalarFieldEnum | Prisma.SecretScalarFieldEnum[]
}

/**
 * Secret create
 */
export type SecretCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretInclude<ExtArgs> | null
  /**
   * The data needed to create a Secret.
   */
  data: Prisma.XOR<Prisma.SecretCreateInput, Prisma.SecretUncheckedCreateInput>
}

/**
 * Secret createMany
 */
export type SecretCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Secrets.
   */
  data: Prisma.SecretCreateManyInput | Prisma.SecretCreateManyInput[]
}

/**
 * Secret createManyAndReturn
 */
export type SecretCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * The data used to create many Secrets.
   */
  data: Prisma.SecretCreateManyInput | Prisma.SecretCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Secret update
 */
export type SecretUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretInclude<ExtArgs> | null
  /**
   * The data needed to update a Secret.
   */
  data: Prisma.XOR<Prisma.SecretUpdateInput, Prisma.SecretUncheckedUpdateInput>
  /**
   * Choose, which Secret to update.
   */
  where: Prisma.SecretWhereUniqueInput
}

/**
 * Secret updateMany
 */
export type SecretUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Secrets.
   */
  data: Prisma.XOR<Prisma.SecretUpdateManyMutationInput, Prisma.SecretUncheckedUpdateManyInput>
  /**
   * Filter which Secrets to update
   */
  where?: Prisma.SecretWhereInput
  /**
   * Limit how many Secrets to update.
   */
  limit?: number
}

/**
 * Secret updateManyAndReturn
 */
export type SecretUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * The data used to update Secrets.
   */
  data: Prisma.XOR<Prisma.SecretUpdateManyMutationInput, Prisma.SecretUncheckedUpdateManyInput>
  /**
   * Filter which Secrets to update
   */
  where?: Prisma.SecretWhereInput
  /**
   * Limit how many Secrets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Secret upsert
 */
export type SecretUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretInclude<ExtArgs> | null
  /**
   * The filter to search for the Secret to update in case it exists.
   */
  where: Prisma.SecretWhereUniqueInput
  /**
   * In case the Secret found by the `where` argument doesn't exist, create a new Secret with this data.
   */
  create: Prisma.XOR<Prisma.SecretCreateInput, Prisma.SecretUncheckedCreateInput>
  /**
   * In case the Secret was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SecretUpdateInput, Prisma.SecretUncheckedUpdateInput>
}

/**
 * Secret delete
 */
export type SecretDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretInclude<ExtArgs> | null
  /**
   * Filter which Secret to delete.
   */
  where: Prisma.SecretWhereUniqueInput
}

/**
 * Secret deleteMany
 */
export type SecretDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Secrets to delete
   */
  where?: Prisma.SecretWhereInput
  /**
   * Limit how many Secrets to delete.
   */
  limit?: number
}

/**
 * Secret.state
 */
export type Secret$stateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceState
   */
  select?: Prisma.InstanceStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceState
   */
  omit?: Prisma.InstanceStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceStateInclude<ExtArgs> | null
  where?: Prisma.InstanceStateWhereInput
}

/**
 * Secret.serviceAccount
 */
export type Secret$serviceAccountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceAccount
   */
  select?: Prisma.ServiceAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceAccount
   */
  omit?: Prisma.ServiceAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceAccountInclude<ExtArgs> | null
  where?: Prisma.ServiceAccountWhereInput
}

/**
 * Secret without action
 */
export type SecretDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Secret
   */
  select?: Prisma.SecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Secret
   */
  omit?: Prisma.SecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SecretInclude<ExtArgs> | null
}
