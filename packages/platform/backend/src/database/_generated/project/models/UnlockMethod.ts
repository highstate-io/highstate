
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UnlockMethod` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UnlockMethod
 * The unlock method enables decryption of project databases through user authentication.
 * 
 * Each project database is encrypted with a master key, which is then encrypted for each
 * unlock method's recipient using AGE encryption. Users authenticate (password or passkey)
 * to decrypt their specific AGE identity, which then decrypts the master key.
 * 
 * Multiple unlock methods can exist per project, allowing different authentication paths
 * to the same encrypted database. When unlock methods are added/removed, the master key
 * is re-encrypted for the new set of recipients.
 * 
 * The encryptedIdentity contains the AGE identity encrypted with the user's authentication
 * method (password-derived key or WebAuthn), while the recipient is the public key
 * corresponding to that identity.
 */
export type UnlockMethodModel = runtime.Types.Result.DefaultSelection<Prisma.$UnlockMethodPayload>

export type AggregateUnlockMethod = {
  _count: UnlockMethodCountAggregateOutputType | null
  _min: UnlockMethodMinAggregateOutputType | null
  _max: UnlockMethodMaxAggregateOutputType | null
}

export type UnlockMethodMinAggregateOutputType = {
  id: string | null
  type: $Enums.UnlockMethodType | null
  encryptedIdentity: string | null
  recipient: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UnlockMethodMaxAggregateOutputType = {
  id: string | null
  type: $Enums.UnlockMethodType | null
  encryptedIdentity: string | null
  recipient: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UnlockMethodCountAggregateOutputType = {
  id: number
  meta: number
  type: number
  encryptedIdentity: number
  recipient: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UnlockMethodMinAggregateInputType = {
  id?: true
  type?: true
  encryptedIdentity?: true
  recipient?: true
  createdAt?: true
  updatedAt?: true
}

export type UnlockMethodMaxAggregateInputType = {
  id?: true
  type?: true
  encryptedIdentity?: true
  recipient?: true
  createdAt?: true
  updatedAt?: true
}

export type UnlockMethodCountAggregateInputType = {
  id?: true
  meta?: true
  type?: true
  encryptedIdentity?: true
  recipient?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UnlockMethodAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UnlockMethod to aggregate.
   */
  where?: Prisma.UnlockMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UnlockMethods to fetch.
   */
  orderBy?: Prisma.UnlockMethodOrderByWithRelationInput | Prisma.UnlockMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UnlockMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UnlockMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UnlockMethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UnlockMethods
  **/
  _count?: true | UnlockMethodCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UnlockMethodMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UnlockMethodMaxAggregateInputType
}

export type GetUnlockMethodAggregateType<T extends UnlockMethodAggregateArgs> = {
      [P in keyof T & keyof AggregateUnlockMethod]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUnlockMethod[P]>
    : Prisma.GetScalarType<T[P], AggregateUnlockMethod[P]>
}




export type UnlockMethodGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UnlockMethodWhereInput
  orderBy?: Prisma.UnlockMethodOrderByWithAggregationInput | Prisma.UnlockMethodOrderByWithAggregationInput[]
  by: Prisma.UnlockMethodScalarFieldEnum[] | Prisma.UnlockMethodScalarFieldEnum
  having?: Prisma.UnlockMethodScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UnlockMethodCountAggregateInputType | true
  _min?: UnlockMethodMinAggregateInputType
  _max?: UnlockMethodMaxAggregateInputType
}

export type UnlockMethodGroupByOutputType = {
  id: string
  meta: PrismaJson.UnlockMethodMeta
  type: $Enums.UnlockMethodType
  encryptedIdentity: string
  recipient: string
  createdAt: Date
  updatedAt: Date
  _count: UnlockMethodCountAggregateOutputType | null
  _min: UnlockMethodMinAggregateOutputType | null
  _max: UnlockMethodMaxAggregateOutputType | null
}

type GetUnlockMethodGroupByPayload<T extends UnlockMethodGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UnlockMethodGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UnlockMethodGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UnlockMethodGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UnlockMethodGroupByOutputType[P]>
      }
    >
  >



export type UnlockMethodWhereInput = {
  AND?: Prisma.UnlockMethodWhereInput | Prisma.UnlockMethodWhereInput[]
  OR?: Prisma.UnlockMethodWhereInput[]
  NOT?: Prisma.UnlockMethodWhereInput | Prisma.UnlockMethodWhereInput[]
  id?: Prisma.StringFilter<"UnlockMethod"> | string
  meta?: Prisma.JsonFilter<"UnlockMethod">
  type?: Prisma.EnumUnlockMethodTypeFilter<"UnlockMethod"> | $Enums.UnlockMethodType
  encryptedIdentity?: Prisma.StringFilter<"UnlockMethod"> | string
  recipient?: Prisma.StringFilter<"UnlockMethod"> | string
  createdAt?: Prisma.DateTimeFilter<"UnlockMethod"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UnlockMethod"> | Date | string
}

export type UnlockMethodOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  type?: Prisma.SortOrder
  encryptedIdentity?: Prisma.SortOrder
  recipient?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UnlockMethodWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  recipient?: string
  AND?: Prisma.UnlockMethodWhereInput | Prisma.UnlockMethodWhereInput[]
  OR?: Prisma.UnlockMethodWhereInput[]
  NOT?: Prisma.UnlockMethodWhereInput | Prisma.UnlockMethodWhereInput[]
  meta?: Prisma.JsonFilter<"UnlockMethod">
  type?: Prisma.EnumUnlockMethodTypeFilter<"UnlockMethod"> | $Enums.UnlockMethodType
  encryptedIdentity?: Prisma.StringFilter<"UnlockMethod"> | string
  createdAt?: Prisma.DateTimeFilter<"UnlockMethod"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UnlockMethod"> | Date | string
}, "id" | "recipient">

export type UnlockMethodOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  type?: Prisma.SortOrder
  encryptedIdentity?: Prisma.SortOrder
  recipient?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UnlockMethodCountOrderByAggregateInput
  _max?: Prisma.UnlockMethodMaxOrderByAggregateInput
  _min?: Prisma.UnlockMethodMinOrderByAggregateInput
}

export type UnlockMethodScalarWhereWithAggregatesInput = {
  AND?: Prisma.UnlockMethodScalarWhereWithAggregatesInput | Prisma.UnlockMethodScalarWhereWithAggregatesInput[]
  OR?: Prisma.UnlockMethodScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UnlockMethodScalarWhereWithAggregatesInput | Prisma.UnlockMethodScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UnlockMethod"> | string
  meta?: Prisma.JsonWithAggregatesFilter<"UnlockMethod">
  type?: Prisma.EnumUnlockMethodTypeWithAggregatesFilter<"UnlockMethod"> | $Enums.UnlockMethodType
  encryptedIdentity?: Prisma.StringWithAggregatesFilter<"UnlockMethod"> | string
  recipient?: Prisma.StringWithAggregatesFilter<"UnlockMethod"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UnlockMethod"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UnlockMethod"> | Date | string
}

export type UnlockMethodCreateInput = {
  id?: string
  meta: PrismaJson.UnlockMethodMeta
  type: $Enums.UnlockMethodType
  encryptedIdentity: string
  recipient: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UnlockMethodUncheckedCreateInput = {
  id?: string
  meta: PrismaJson.UnlockMethodMeta
  type: $Enums.UnlockMethodType
  encryptedIdentity: string
  recipient: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UnlockMethodUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.UnlockMethodMeta
  type?: Prisma.EnumUnlockMethodTypeFieldUpdateOperationsInput | $Enums.UnlockMethodType
  encryptedIdentity?: Prisma.StringFieldUpdateOperationsInput | string
  recipient?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UnlockMethodUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.UnlockMethodMeta
  type?: Prisma.EnumUnlockMethodTypeFieldUpdateOperationsInput | $Enums.UnlockMethodType
  encryptedIdentity?: Prisma.StringFieldUpdateOperationsInput | string
  recipient?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UnlockMethodCreateManyInput = {
  id?: string
  meta: PrismaJson.UnlockMethodMeta
  type: $Enums.UnlockMethodType
  encryptedIdentity: string
  recipient: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UnlockMethodUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.UnlockMethodMeta
  type?: Prisma.EnumUnlockMethodTypeFieldUpdateOperationsInput | $Enums.UnlockMethodType
  encryptedIdentity?: Prisma.StringFieldUpdateOperationsInput | string
  recipient?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UnlockMethodUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.UnlockMethodMeta
  type?: Prisma.EnumUnlockMethodTypeFieldUpdateOperationsInput | $Enums.UnlockMethodType
  encryptedIdentity?: Prisma.StringFieldUpdateOperationsInput | string
  recipient?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UnlockMethodCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  type?: Prisma.SortOrder
  encryptedIdentity?: Prisma.SortOrder
  recipient?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UnlockMethodMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  encryptedIdentity?: Prisma.SortOrder
  recipient?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UnlockMethodMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  encryptedIdentity?: Prisma.SortOrder
  recipient?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EnumUnlockMethodTypeFieldUpdateOperationsInput = {
  set?: $Enums.UnlockMethodType
}



export type UnlockMethodSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  type?: boolean
  encryptedIdentity?: boolean
  recipient?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["unlockMethod"]>

export type UnlockMethodSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  type?: boolean
  encryptedIdentity?: boolean
  recipient?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["unlockMethod"]>

export type UnlockMethodSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  type?: boolean
  encryptedIdentity?: boolean
  recipient?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["unlockMethod"]>

export type UnlockMethodSelectScalar = {
  id?: boolean
  meta?: boolean
  type?: boolean
  encryptedIdentity?: boolean
  recipient?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UnlockMethodOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meta" | "type" | "encryptedIdentity" | "recipient" | "createdAt" | "updatedAt", ExtArgs["result"]["unlockMethod"]>

export type $UnlockMethodPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UnlockMethod"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the unlock method.
     */
    id: string
    /**
     * The metadata of the unlock method managed by the backend.
     * 
     * [UnlockMethodMeta]
     */
    meta: PrismaJson.UnlockMethodMeta
    /**
     * The type of unlock method.
     */
    type: $Enums.UnlockMethodType
    /**
     * The AGE identity encrypted and armored also with AGE.
     */
    encryptedIdentity: string
    /**
     * The AGE recipient for this unlock method.
     */
    recipient: string
    /**
     * The time when the unlock method was created.
     */
    createdAt: Date
    /**
     * The time when the unlock method was last updated.
     */
    updatedAt: Date
  }, ExtArgs["result"]["unlockMethod"]>
  composites: {}
}

export type UnlockMethodGetPayload<S extends boolean | null | undefined | UnlockMethodDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload, S>

export type UnlockMethodCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UnlockMethodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UnlockMethodCountAggregateInputType | true
  }

export interface UnlockMethodDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UnlockMethod'], meta: { name: 'UnlockMethod' } }
  /**
   * Find zero or one UnlockMethod that matches the filter.
   * @param {UnlockMethodFindUniqueArgs} args - Arguments to find a UnlockMethod
   * @example
   * // Get one UnlockMethod
   * const unlockMethod = await prisma.unlockMethod.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UnlockMethodFindUniqueArgs>(args: Prisma.SelectSubset<T, UnlockMethodFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UnlockMethod that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UnlockMethodFindUniqueOrThrowArgs} args - Arguments to find a UnlockMethod
   * @example
   * // Get one UnlockMethod
   * const unlockMethod = await prisma.unlockMethod.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UnlockMethodFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UnlockMethodFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UnlockMethod that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnlockMethodFindFirstArgs} args - Arguments to find a UnlockMethod
   * @example
   * // Get one UnlockMethod
   * const unlockMethod = await prisma.unlockMethod.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UnlockMethodFindFirstArgs>(args?: Prisma.SelectSubset<T, UnlockMethodFindFirstArgs<ExtArgs>>): Prisma.Prisma__UnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UnlockMethod that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnlockMethodFindFirstOrThrowArgs} args - Arguments to find a UnlockMethod
   * @example
   * // Get one UnlockMethod
   * const unlockMethod = await prisma.unlockMethod.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UnlockMethodFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UnlockMethodFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UnlockMethods that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnlockMethodFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UnlockMethods
   * const unlockMethods = await prisma.unlockMethod.findMany()
   * 
   * // Get first 10 UnlockMethods
   * const unlockMethods = await prisma.unlockMethod.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const unlockMethodWithIdOnly = await prisma.unlockMethod.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UnlockMethodFindManyArgs>(args?: Prisma.SelectSubset<T, UnlockMethodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UnlockMethod.
   * @param {UnlockMethodCreateArgs} args - Arguments to create a UnlockMethod.
   * @example
   * // Create one UnlockMethod
   * const UnlockMethod = await prisma.unlockMethod.create({
   *   data: {
   *     // ... data to create a UnlockMethod
   *   }
   * })
   * 
   */
  create<T extends UnlockMethodCreateArgs>(args: Prisma.SelectSubset<T, UnlockMethodCreateArgs<ExtArgs>>): Prisma.Prisma__UnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UnlockMethods.
   * @param {UnlockMethodCreateManyArgs} args - Arguments to create many UnlockMethods.
   * @example
   * // Create many UnlockMethods
   * const unlockMethod = await prisma.unlockMethod.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UnlockMethodCreateManyArgs>(args?: Prisma.SelectSubset<T, UnlockMethodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UnlockMethods and returns the data saved in the database.
   * @param {UnlockMethodCreateManyAndReturnArgs} args - Arguments to create many UnlockMethods.
   * @example
   * // Create many UnlockMethods
   * const unlockMethod = await prisma.unlockMethod.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UnlockMethods and only return the `id`
   * const unlockMethodWithIdOnly = await prisma.unlockMethod.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UnlockMethodCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UnlockMethodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UnlockMethod.
   * @param {UnlockMethodDeleteArgs} args - Arguments to delete one UnlockMethod.
   * @example
   * // Delete one UnlockMethod
   * const UnlockMethod = await prisma.unlockMethod.delete({
   *   where: {
   *     // ... filter to delete one UnlockMethod
   *   }
   * })
   * 
   */
  delete<T extends UnlockMethodDeleteArgs>(args: Prisma.SelectSubset<T, UnlockMethodDeleteArgs<ExtArgs>>): Prisma.Prisma__UnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UnlockMethod.
   * @param {UnlockMethodUpdateArgs} args - Arguments to update one UnlockMethod.
   * @example
   * // Update one UnlockMethod
   * const unlockMethod = await prisma.unlockMethod.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UnlockMethodUpdateArgs>(args: Prisma.SelectSubset<T, UnlockMethodUpdateArgs<ExtArgs>>): Prisma.Prisma__UnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UnlockMethods.
   * @param {UnlockMethodDeleteManyArgs} args - Arguments to filter UnlockMethods to delete.
   * @example
   * // Delete a few UnlockMethods
   * const { count } = await prisma.unlockMethod.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UnlockMethodDeleteManyArgs>(args?: Prisma.SelectSubset<T, UnlockMethodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UnlockMethods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnlockMethodUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UnlockMethods
   * const unlockMethod = await prisma.unlockMethod.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UnlockMethodUpdateManyArgs>(args: Prisma.SelectSubset<T, UnlockMethodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UnlockMethods and returns the data updated in the database.
   * @param {UnlockMethodUpdateManyAndReturnArgs} args - Arguments to update many UnlockMethods.
   * @example
   * // Update many UnlockMethods
   * const unlockMethod = await prisma.unlockMethod.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UnlockMethods and only return the `id`
   * const unlockMethodWithIdOnly = await prisma.unlockMethod.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UnlockMethodUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UnlockMethodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UnlockMethod.
   * @param {UnlockMethodUpsertArgs} args - Arguments to update or create a UnlockMethod.
   * @example
   * // Update or create a UnlockMethod
   * const unlockMethod = await prisma.unlockMethod.upsert({
   *   create: {
   *     // ... data to create a UnlockMethod
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UnlockMethod we want to update
   *   }
   * })
   */
  upsert<T extends UnlockMethodUpsertArgs>(args: Prisma.SelectSubset<T, UnlockMethodUpsertArgs<ExtArgs>>): Prisma.Prisma__UnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$UnlockMethodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UnlockMethods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnlockMethodCountArgs} args - Arguments to filter UnlockMethods to count.
   * @example
   * // Count the number of UnlockMethods
   * const count = await prisma.unlockMethod.count({
   *   where: {
   *     // ... the filter for the UnlockMethods we want to count
   *   }
   * })
  **/
  count<T extends UnlockMethodCountArgs>(
    args?: Prisma.Subset<T, UnlockMethodCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UnlockMethodCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UnlockMethod.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnlockMethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UnlockMethodAggregateArgs>(args: Prisma.Subset<T, UnlockMethodAggregateArgs>): Prisma.PrismaPromise<GetUnlockMethodAggregateType<T>>

  /**
   * Group by UnlockMethod.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UnlockMethodGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UnlockMethodGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UnlockMethodGroupByArgs['orderBy'] }
      : { orderBy?: UnlockMethodGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UnlockMethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnlockMethodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UnlockMethod model
 */
readonly fields: UnlockMethodFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UnlockMethod.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UnlockMethodClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UnlockMethod model
 */
export interface UnlockMethodFieldRefs {
  readonly id: Prisma.FieldRef<"UnlockMethod", 'String'>
  readonly meta: Prisma.FieldRef<"UnlockMethod", 'Json'>
  readonly type: Prisma.FieldRef<"UnlockMethod", 'UnlockMethodType'>
  readonly encryptedIdentity: Prisma.FieldRef<"UnlockMethod", 'String'>
  readonly recipient: Prisma.FieldRef<"UnlockMethod", 'String'>
  readonly createdAt: Prisma.FieldRef<"UnlockMethod", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UnlockMethod", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UnlockMethod findUnique
 */
export type UnlockMethodFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * Filter, which UnlockMethod to fetch.
   */
  where: Prisma.UnlockMethodWhereUniqueInput
}

/**
 * UnlockMethod findUniqueOrThrow
 */
export type UnlockMethodFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * Filter, which UnlockMethod to fetch.
   */
  where: Prisma.UnlockMethodWhereUniqueInput
}

/**
 * UnlockMethod findFirst
 */
export type UnlockMethodFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * Filter, which UnlockMethod to fetch.
   */
  where?: Prisma.UnlockMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UnlockMethods to fetch.
   */
  orderBy?: Prisma.UnlockMethodOrderByWithRelationInput | Prisma.UnlockMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UnlockMethods.
   */
  cursor?: Prisma.UnlockMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UnlockMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UnlockMethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UnlockMethods.
   */
  distinct?: Prisma.UnlockMethodScalarFieldEnum | Prisma.UnlockMethodScalarFieldEnum[]
}

/**
 * UnlockMethod findFirstOrThrow
 */
export type UnlockMethodFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * Filter, which UnlockMethod to fetch.
   */
  where?: Prisma.UnlockMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UnlockMethods to fetch.
   */
  orderBy?: Prisma.UnlockMethodOrderByWithRelationInput | Prisma.UnlockMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UnlockMethods.
   */
  cursor?: Prisma.UnlockMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UnlockMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UnlockMethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UnlockMethods.
   */
  distinct?: Prisma.UnlockMethodScalarFieldEnum | Prisma.UnlockMethodScalarFieldEnum[]
}

/**
 * UnlockMethod findMany
 */
export type UnlockMethodFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * Filter, which UnlockMethods to fetch.
   */
  where?: Prisma.UnlockMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UnlockMethods to fetch.
   */
  orderBy?: Prisma.UnlockMethodOrderByWithRelationInput | Prisma.UnlockMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UnlockMethods.
   */
  cursor?: Prisma.UnlockMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UnlockMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UnlockMethods.
   */
  skip?: number
  distinct?: Prisma.UnlockMethodScalarFieldEnum | Prisma.UnlockMethodScalarFieldEnum[]
}

/**
 * UnlockMethod create
 */
export type UnlockMethodCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * The data needed to create a UnlockMethod.
   */
  data: Prisma.XOR<Prisma.UnlockMethodCreateInput, Prisma.UnlockMethodUncheckedCreateInput>
}

/**
 * UnlockMethod createMany
 */
export type UnlockMethodCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UnlockMethods.
   */
  data: Prisma.UnlockMethodCreateManyInput | Prisma.UnlockMethodCreateManyInput[]
}

/**
 * UnlockMethod createManyAndReturn
 */
export type UnlockMethodCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * The data used to create many UnlockMethods.
   */
  data: Prisma.UnlockMethodCreateManyInput | Prisma.UnlockMethodCreateManyInput[]
}

/**
 * UnlockMethod update
 */
export type UnlockMethodUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * The data needed to update a UnlockMethod.
   */
  data: Prisma.XOR<Prisma.UnlockMethodUpdateInput, Prisma.UnlockMethodUncheckedUpdateInput>
  /**
   * Choose, which UnlockMethod to update.
   */
  where: Prisma.UnlockMethodWhereUniqueInput
}

/**
 * UnlockMethod updateMany
 */
export type UnlockMethodUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UnlockMethods.
   */
  data: Prisma.XOR<Prisma.UnlockMethodUpdateManyMutationInput, Prisma.UnlockMethodUncheckedUpdateManyInput>
  /**
   * Filter which UnlockMethods to update
   */
  where?: Prisma.UnlockMethodWhereInput
  /**
   * Limit how many UnlockMethods to update.
   */
  limit?: number
}

/**
 * UnlockMethod updateManyAndReturn
 */
export type UnlockMethodUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * The data used to update UnlockMethods.
   */
  data: Prisma.XOR<Prisma.UnlockMethodUpdateManyMutationInput, Prisma.UnlockMethodUncheckedUpdateManyInput>
  /**
   * Filter which UnlockMethods to update
   */
  where?: Prisma.UnlockMethodWhereInput
  /**
   * Limit how many UnlockMethods to update.
   */
  limit?: number
}

/**
 * UnlockMethod upsert
 */
export type UnlockMethodUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * The filter to search for the UnlockMethod to update in case it exists.
   */
  where: Prisma.UnlockMethodWhereUniqueInput
  /**
   * In case the UnlockMethod found by the `where` argument doesn't exist, create a new UnlockMethod with this data.
   */
  create: Prisma.XOR<Prisma.UnlockMethodCreateInput, Prisma.UnlockMethodUncheckedCreateInput>
  /**
   * In case the UnlockMethod was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UnlockMethodUpdateInput, Prisma.UnlockMethodUncheckedUpdateInput>
}

/**
 * UnlockMethod delete
 */
export type UnlockMethodDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
  /**
   * Filter which UnlockMethod to delete.
   */
  where: Prisma.UnlockMethodWhereUniqueInput
}

/**
 * UnlockMethod deleteMany
 */
export type UnlockMethodDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UnlockMethods to delete
   */
  where?: Prisma.UnlockMethodWhereInput
  /**
   * Limit how many UnlockMethods to delete.
   */
  limit?: number
}

/**
 * UnlockMethod without action
 */
export type UnlockMethodDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UnlockMethod
   */
  select?: Prisma.UnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UnlockMethod
   */
  omit?: Prisma.UnlockMethodOmit<ExtArgs> | null
}
