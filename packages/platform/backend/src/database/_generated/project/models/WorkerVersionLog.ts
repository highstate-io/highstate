
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WorkerVersionLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model WorkerVersionLog
 * The worker version log captures output from running worker containers.
 * 
 * Logs include both worker-generated output and system messages from the runtime.
 * The ULID identifier provides timestamp ordering. Logs are deleted with the worker version.
 */
export type WorkerVersionLogModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkerVersionLogPayload>

export type AggregateWorkerVersionLog = {
  _count: WorkerVersionLogCountAggregateOutputType | null
  _min: WorkerVersionLogMinAggregateOutputType | null
  _max: WorkerVersionLogMaxAggregateOutputType | null
}

export type WorkerVersionLogMinAggregateOutputType = {
  id: string | null
  workerVersionId: string | null
  content: string | null
  isSystem: boolean | null
}

export type WorkerVersionLogMaxAggregateOutputType = {
  id: string | null
  workerVersionId: string | null
  content: string | null
  isSystem: boolean | null
}

export type WorkerVersionLogCountAggregateOutputType = {
  id: number
  workerVersionId: number
  content: number
  isSystem: number
  _all: number
}


export type WorkerVersionLogMinAggregateInputType = {
  id?: true
  workerVersionId?: true
  content?: true
  isSystem?: true
}

export type WorkerVersionLogMaxAggregateInputType = {
  id?: true
  workerVersionId?: true
  content?: true
  isSystem?: true
}

export type WorkerVersionLogCountAggregateInputType = {
  id?: true
  workerVersionId?: true
  content?: true
  isSystem?: true
  _all?: true
}

export type WorkerVersionLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkerVersionLog to aggregate.
   */
  where?: Prisma.WorkerVersionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerVersionLogs to fetch.
   */
  orderBy?: Prisma.WorkerVersionLogOrderByWithRelationInput | Prisma.WorkerVersionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkerVersionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerVersionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerVersionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkerVersionLogs
  **/
  _count?: true | WorkerVersionLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkerVersionLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkerVersionLogMaxAggregateInputType
}

export type GetWorkerVersionLogAggregateType<T extends WorkerVersionLogAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkerVersionLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkerVersionLog[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkerVersionLog[P]>
}




export type WorkerVersionLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkerVersionLogWhereInput
  orderBy?: Prisma.WorkerVersionLogOrderByWithAggregationInput | Prisma.WorkerVersionLogOrderByWithAggregationInput[]
  by: Prisma.WorkerVersionLogScalarFieldEnum[] | Prisma.WorkerVersionLogScalarFieldEnum
  having?: Prisma.WorkerVersionLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkerVersionLogCountAggregateInputType | true
  _min?: WorkerVersionLogMinAggregateInputType
  _max?: WorkerVersionLogMaxAggregateInputType
}

export type WorkerVersionLogGroupByOutputType = {
  id: string
  workerVersionId: string
  content: string
  isSystem: boolean
  _count: WorkerVersionLogCountAggregateOutputType | null
  _min: WorkerVersionLogMinAggregateOutputType | null
  _max: WorkerVersionLogMaxAggregateOutputType | null
}

type GetWorkerVersionLogGroupByPayload<T extends WorkerVersionLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkerVersionLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkerVersionLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkerVersionLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkerVersionLogGroupByOutputType[P]>
      }
    >
  >



export type WorkerVersionLogWhereInput = {
  AND?: Prisma.WorkerVersionLogWhereInput | Prisma.WorkerVersionLogWhereInput[]
  OR?: Prisma.WorkerVersionLogWhereInput[]
  NOT?: Prisma.WorkerVersionLogWhereInput | Prisma.WorkerVersionLogWhereInput[]
  id?: Prisma.StringFilter<"WorkerVersionLog"> | string
  workerVersionId?: Prisma.StringFilter<"WorkerVersionLog"> | string
  content?: Prisma.StringFilter<"WorkerVersionLog"> | string
  isSystem?: Prisma.BoolFilter<"WorkerVersionLog"> | boolean
  workerVersion?: Prisma.XOR<Prisma.WorkerVersionScalarRelationFilter, Prisma.WorkerVersionWhereInput>
}

export type WorkerVersionLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  workerVersionId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  isSystem?: Prisma.SortOrder
  workerVersion?: Prisma.WorkerVersionOrderByWithRelationInput
}

export type WorkerVersionLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.WorkerVersionLogWhereInput | Prisma.WorkerVersionLogWhereInput[]
  OR?: Prisma.WorkerVersionLogWhereInput[]
  NOT?: Prisma.WorkerVersionLogWhereInput | Prisma.WorkerVersionLogWhereInput[]
  workerVersionId?: Prisma.StringFilter<"WorkerVersionLog"> | string
  content?: Prisma.StringFilter<"WorkerVersionLog"> | string
  isSystem?: Prisma.BoolFilter<"WorkerVersionLog"> | boolean
  workerVersion?: Prisma.XOR<Prisma.WorkerVersionScalarRelationFilter, Prisma.WorkerVersionWhereInput>
}, "id">

export type WorkerVersionLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  workerVersionId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  isSystem?: Prisma.SortOrder
  _count?: Prisma.WorkerVersionLogCountOrderByAggregateInput
  _max?: Prisma.WorkerVersionLogMaxOrderByAggregateInput
  _min?: Prisma.WorkerVersionLogMinOrderByAggregateInput
}

export type WorkerVersionLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkerVersionLogScalarWhereWithAggregatesInput | Prisma.WorkerVersionLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkerVersionLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkerVersionLogScalarWhereWithAggregatesInput | Prisma.WorkerVersionLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"WorkerVersionLog"> | string
  workerVersionId?: Prisma.StringWithAggregatesFilter<"WorkerVersionLog"> | string
  content?: Prisma.StringWithAggregatesFilter<"WorkerVersionLog"> | string
  isSystem?: Prisma.BoolWithAggregatesFilter<"WorkerVersionLog"> | boolean
}

export type WorkerVersionLogCreateInput = {
  id?: string
  content: string
  isSystem?: boolean
  workerVersion: Prisma.WorkerVersionCreateNestedOneWithoutLogsInput
}

export type WorkerVersionLogUncheckedCreateInput = {
  id?: string
  workerVersionId: string
  content: string
  isSystem?: boolean
}

export type WorkerVersionLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  workerVersion?: Prisma.WorkerVersionUpdateOneRequiredWithoutLogsNestedInput
}

export type WorkerVersionLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  workerVersionId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WorkerVersionLogCreateManyInput = {
  id?: string
  workerVersionId: string
  content: string
  isSystem?: boolean
}

export type WorkerVersionLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WorkerVersionLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  workerVersionId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WorkerVersionLogListRelationFilter = {
  every?: Prisma.WorkerVersionLogWhereInput
  some?: Prisma.WorkerVersionLogWhereInput
  none?: Prisma.WorkerVersionLogWhereInput
}

export type WorkerVersionLogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkerVersionLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workerVersionId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  isSystem?: Prisma.SortOrder
}

export type WorkerVersionLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workerVersionId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  isSystem?: Prisma.SortOrder
}

export type WorkerVersionLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workerVersionId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  isSystem?: Prisma.SortOrder
}

export type WorkerVersionLogCreateNestedManyWithoutWorkerVersionInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionLogCreateWithoutWorkerVersionInput, Prisma.WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput> | Prisma.WorkerVersionLogCreateWithoutWorkerVersionInput[] | Prisma.WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput[]
  connectOrCreate?: Prisma.WorkerVersionLogCreateOrConnectWithoutWorkerVersionInput | Prisma.WorkerVersionLogCreateOrConnectWithoutWorkerVersionInput[]
  createMany?: Prisma.WorkerVersionLogCreateManyWorkerVersionInputEnvelope
  connect?: Prisma.WorkerVersionLogWhereUniqueInput | Prisma.WorkerVersionLogWhereUniqueInput[]
}

export type WorkerVersionLogUncheckedCreateNestedManyWithoutWorkerVersionInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionLogCreateWithoutWorkerVersionInput, Prisma.WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput> | Prisma.WorkerVersionLogCreateWithoutWorkerVersionInput[] | Prisma.WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput[]
  connectOrCreate?: Prisma.WorkerVersionLogCreateOrConnectWithoutWorkerVersionInput | Prisma.WorkerVersionLogCreateOrConnectWithoutWorkerVersionInput[]
  createMany?: Prisma.WorkerVersionLogCreateManyWorkerVersionInputEnvelope
  connect?: Prisma.WorkerVersionLogWhereUniqueInput | Prisma.WorkerVersionLogWhereUniqueInput[]
}

export type WorkerVersionLogUpdateManyWithoutWorkerVersionNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionLogCreateWithoutWorkerVersionInput, Prisma.WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput> | Prisma.WorkerVersionLogCreateWithoutWorkerVersionInput[] | Prisma.WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput[]
  connectOrCreate?: Prisma.WorkerVersionLogCreateOrConnectWithoutWorkerVersionInput | Prisma.WorkerVersionLogCreateOrConnectWithoutWorkerVersionInput[]
  upsert?: Prisma.WorkerVersionLogUpsertWithWhereUniqueWithoutWorkerVersionInput | Prisma.WorkerVersionLogUpsertWithWhereUniqueWithoutWorkerVersionInput[]
  createMany?: Prisma.WorkerVersionLogCreateManyWorkerVersionInputEnvelope
  set?: Prisma.WorkerVersionLogWhereUniqueInput | Prisma.WorkerVersionLogWhereUniqueInput[]
  disconnect?: Prisma.WorkerVersionLogWhereUniqueInput | Prisma.WorkerVersionLogWhereUniqueInput[]
  delete?: Prisma.WorkerVersionLogWhereUniqueInput | Prisma.WorkerVersionLogWhereUniqueInput[]
  connect?: Prisma.WorkerVersionLogWhereUniqueInput | Prisma.WorkerVersionLogWhereUniqueInput[]
  update?: Prisma.WorkerVersionLogUpdateWithWhereUniqueWithoutWorkerVersionInput | Prisma.WorkerVersionLogUpdateWithWhereUniqueWithoutWorkerVersionInput[]
  updateMany?: Prisma.WorkerVersionLogUpdateManyWithWhereWithoutWorkerVersionInput | Prisma.WorkerVersionLogUpdateManyWithWhereWithoutWorkerVersionInput[]
  deleteMany?: Prisma.WorkerVersionLogScalarWhereInput | Prisma.WorkerVersionLogScalarWhereInput[]
}

export type WorkerVersionLogUncheckedUpdateManyWithoutWorkerVersionNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionLogCreateWithoutWorkerVersionInput, Prisma.WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput> | Prisma.WorkerVersionLogCreateWithoutWorkerVersionInput[] | Prisma.WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput[]
  connectOrCreate?: Prisma.WorkerVersionLogCreateOrConnectWithoutWorkerVersionInput | Prisma.WorkerVersionLogCreateOrConnectWithoutWorkerVersionInput[]
  upsert?: Prisma.WorkerVersionLogUpsertWithWhereUniqueWithoutWorkerVersionInput | Prisma.WorkerVersionLogUpsertWithWhereUniqueWithoutWorkerVersionInput[]
  createMany?: Prisma.WorkerVersionLogCreateManyWorkerVersionInputEnvelope
  set?: Prisma.WorkerVersionLogWhereUniqueInput | Prisma.WorkerVersionLogWhereUniqueInput[]
  disconnect?: Prisma.WorkerVersionLogWhereUniqueInput | Prisma.WorkerVersionLogWhereUniqueInput[]
  delete?: Prisma.WorkerVersionLogWhereUniqueInput | Prisma.WorkerVersionLogWhereUniqueInput[]
  connect?: Prisma.WorkerVersionLogWhereUniqueInput | Prisma.WorkerVersionLogWhereUniqueInput[]
  update?: Prisma.WorkerVersionLogUpdateWithWhereUniqueWithoutWorkerVersionInput | Prisma.WorkerVersionLogUpdateWithWhereUniqueWithoutWorkerVersionInput[]
  updateMany?: Prisma.WorkerVersionLogUpdateManyWithWhereWithoutWorkerVersionInput | Prisma.WorkerVersionLogUpdateManyWithWhereWithoutWorkerVersionInput[]
  deleteMany?: Prisma.WorkerVersionLogScalarWhereInput | Prisma.WorkerVersionLogScalarWhereInput[]
}

export type WorkerVersionLogCreateWithoutWorkerVersionInput = {
  id?: string
  content: string
  isSystem?: boolean
}

export type WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput = {
  id?: string
  content: string
  isSystem?: boolean
}

export type WorkerVersionLogCreateOrConnectWithoutWorkerVersionInput = {
  where: Prisma.WorkerVersionLogWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerVersionLogCreateWithoutWorkerVersionInput, Prisma.WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput>
}

export type WorkerVersionLogCreateManyWorkerVersionInputEnvelope = {
  data: Prisma.WorkerVersionLogCreateManyWorkerVersionInput | Prisma.WorkerVersionLogCreateManyWorkerVersionInput[]
}

export type WorkerVersionLogUpsertWithWhereUniqueWithoutWorkerVersionInput = {
  where: Prisma.WorkerVersionLogWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkerVersionLogUpdateWithoutWorkerVersionInput, Prisma.WorkerVersionLogUncheckedUpdateWithoutWorkerVersionInput>
  create: Prisma.XOR<Prisma.WorkerVersionLogCreateWithoutWorkerVersionInput, Prisma.WorkerVersionLogUncheckedCreateWithoutWorkerVersionInput>
}

export type WorkerVersionLogUpdateWithWhereUniqueWithoutWorkerVersionInput = {
  where: Prisma.WorkerVersionLogWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkerVersionLogUpdateWithoutWorkerVersionInput, Prisma.WorkerVersionLogUncheckedUpdateWithoutWorkerVersionInput>
}

export type WorkerVersionLogUpdateManyWithWhereWithoutWorkerVersionInput = {
  where: Prisma.WorkerVersionLogScalarWhereInput
  data: Prisma.XOR<Prisma.WorkerVersionLogUpdateManyMutationInput, Prisma.WorkerVersionLogUncheckedUpdateManyWithoutWorkerVersionInput>
}

export type WorkerVersionLogScalarWhereInput = {
  AND?: Prisma.WorkerVersionLogScalarWhereInput | Prisma.WorkerVersionLogScalarWhereInput[]
  OR?: Prisma.WorkerVersionLogScalarWhereInput[]
  NOT?: Prisma.WorkerVersionLogScalarWhereInput | Prisma.WorkerVersionLogScalarWhereInput[]
  id?: Prisma.StringFilter<"WorkerVersionLog"> | string
  workerVersionId?: Prisma.StringFilter<"WorkerVersionLog"> | string
  content?: Prisma.StringFilter<"WorkerVersionLog"> | string
  isSystem?: Prisma.BoolFilter<"WorkerVersionLog"> | boolean
}

export type WorkerVersionLogCreateManyWorkerVersionInput = {
  id?: string
  content: string
  isSystem?: boolean
}

export type WorkerVersionLogUpdateWithoutWorkerVersionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WorkerVersionLogUncheckedUpdateWithoutWorkerVersionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type WorkerVersionLogUncheckedUpdateManyWithoutWorkerVersionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type WorkerVersionLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  workerVersionId?: boolean
  content?: boolean
  isSystem?: boolean
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workerVersionLog"]>

export type WorkerVersionLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  workerVersionId?: boolean
  content?: boolean
  isSystem?: boolean
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workerVersionLog"]>

export type WorkerVersionLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  workerVersionId?: boolean
  content?: boolean
  isSystem?: boolean
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workerVersionLog"]>

export type WorkerVersionLogSelectScalar = {
  id?: boolean
  workerVersionId?: boolean
  content?: boolean
  isSystem?: boolean
}

export type WorkerVersionLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "workerVersionId" | "content" | "isSystem", ExtArgs["result"]["workerVersionLog"]>
export type WorkerVersionLogInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}
export type WorkerVersionLogIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}
export type WorkerVersionLogIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}

export type $WorkerVersionLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkerVersionLog"
  objects: {
    /**
     * The worker version that produced this log.
     */
    workerVersion: Prisma.$WorkerVersionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The ULID of the worker log. Also used to extract the timestamp.
     */
    id: string
    /**
     * The ID of the worker version that produced this log.
     */
    workerVersionId: string
    /**
     * The log content.
     */
    content: string
    /**
     * Whether this log is a system/runtime message (vs worker output).
     */
    isSystem: boolean
  }, ExtArgs["result"]["workerVersionLog"]>
  composites: {}
}

export type WorkerVersionLogGetPayload<S extends boolean | null | undefined | WorkerVersionLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload, S>

export type WorkerVersionLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkerVersionLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkerVersionLogCountAggregateInputType | true
  }

export interface WorkerVersionLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkerVersionLog'], meta: { name: 'WorkerVersionLog' } }
  /**
   * Find zero or one WorkerVersionLog that matches the filter.
   * @param {WorkerVersionLogFindUniqueArgs} args - Arguments to find a WorkerVersionLog
   * @example
   * // Get one WorkerVersionLog
   * const workerVersionLog = await prisma.workerVersionLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkerVersionLogFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkerVersionLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionLogClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkerVersionLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkerVersionLogFindUniqueOrThrowArgs} args - Arguments to find a WorkerVersionLog
   * @example
   * // Get one WorkerVersionLog
   * const workerVersionLog = await prisma.workerVersionLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkerVersionLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkerVersionLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionLogClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkerVersionLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionLogFindFirstArgs} args - Arguments to find a WorkerVersionLog
   * @example
   * // Get one WorkerVersionLog
   * const workerVersionLog = await prisma.workerVersionLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkerVersionLogFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkerVersionLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionLogClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkerVersionLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionLogFindFirstOrThrowArgs} args - Arguments to find a WorkerVersionLog
   * @example
   * // Get one WorkerVersionLog
   * const workerVersionLog = await prisma.workerVersionLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkerVersionLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkerVersionLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionLogClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkerVersionLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkerVersionLogs
   * const workerVersionLogs = await prisma.workerVersionLog.findMany()
   * 
   * // Get first 10 WorkerVersionLogs
   * const workerVersionLogs = await prisma.workerVersionLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workerVersionLogWithIdOnly = await prisma.workerVersionLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkerVersionLogFindManyArgs>(args?: Prisma.SelectSubset<T, WorkerVersionLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkerVersionLog.
   * @param {WorkerVersionLogCreateArgs} args - Arguments to create a WorkerVersionLog.
   * @example
   * // Create one WorkerVersionLog
   * const WorkerVersionLog = await prisma.workerVersionLog.create({
   *   data: {
   *     // ... data to create a WorkerVersionLog
   *   }
   * })
   * 
   */
  create<T extends WorkerVersionLogCreateArgs>(args: Prisma.SelectSubset<T, WorkerVersionLogCreateArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionLogClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkerVersionLogs.
   * @param {WorkerVersionLogCreateManyArgs} args - Arguments to create many WorkerVersionLogs.
   * @example
   * // Create many WorkerVersionLogs
   * const workerVersionLog = await prisma.workerVersionLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkerVersionLogCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkerVersionLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkerVersionLogs and returns the data saved in the database.
   * @param {WorkerVersionLogCreateManyAndReturnArgs} args - Arguments to create many WorkerVersionLogs.
   * @example
   * // Create many WorkerVersionLogs
   * const workerVersionLog = await prisma.workerVersionLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkerVersionLogs and only return the `id`
   * const workerVersionLogWithIdOnly = await prisma.workerVersionLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkerVersionLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkerVersionLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkerVersionLog.
   * @param {WorkerVersionLogDeleteArgs} args - Arguments to delete one WorkerVersionLog.
   * @example
   * // Delete one WorkerVersionLog
   * const WorkerVersionLog = await prisma.workerVersionLog.delete({
   *   where: {
   *     // ... filter to delete one WorkerVersionLog
   *   }
   * })
   * 
   */
  delete<T extends WorkerVersionLogDeleteArgs>(args: Prisma.SelectSubset<T, WorkerVersionLogDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionLogClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkerVersionLog.
   * @param {WorkerVersionLogUpdateArgs} args - Arguments to update one WorkerVersionLog.
   * @example
   * // Update one WorkerVersionLog
   * const workerVersionLog = await prisma.workerVersionLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkerVersionLogUpdateArgs>(args: Prisma.SelectSubset<T, WorkerVersionLogUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionLogClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkerVersionLogs.
   * @param {WorkerVersionLogDeleteManyArgs} args - Arguments to filter WorkerVersionLogs to delete.
   * @example
   * // Delete a few WorkerVersionLogs
   * const { count } = await prisma.workerVersionLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkerVersionLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkerVersionLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkerVersionLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkerVersionLogs
   * const workerVersionLog = await prisma.workerVersionLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkerVersionLogUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkerVersionLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkerVersionLogs and returns the data updated in the database.
   * @param {WorkerVersionLogUpdateManyAndReturnArgs} args - Arguments to update many WorkerVersionLogs.
   * @example
   * // Update many WorkerVersionLogs
   * const workerVersionLog = await prisma.workerVersionLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkerVersionLogs and only return the `id`
   * const workerVersionLogWithIdOnly = await prisma.workerVersionLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkerVersionLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkerVersionLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkerVersionLog.
   * @param {WorkerVersionLogUpsertArgs} args - Arguments to update or create a WorkerVersionLog.
   * @example
   * // Update or create a WorkerVersionLog
   * const workerVersionLog = await prisma.workerVersionLog.upsert({
   *   create: {
   *     // ... data to create a WorkerVersionLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkerVersionLog we want to update
   *   }
   * })
   */
  upsert<T extends WorkerVersionLogUpsertArgs>(args: Prisma.SelectSubset<T, WorkerVersionLogUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionLogClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkerVersionLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionLogCountArgs} args - Arguments to filter WorkerVersionLogs to count.
   * @example
   * // Count the number of WorkerVersionLogs
   * const count = await prisma.workerVersionLog.count({
   *   where: {
   *     // ... the filter for the WorkerVersionLogs we want to count
   *   }
   * })
  **/
  count<T extends WorkerVersionLogCountArgs>(
    args?: Prisma.Subset<T, WorkerVersionLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkerVersionLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkerVersionLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkerVersionLogAggregateArgs>(args: Prisma.Subset<T, WorkerVersionLogAggregateArgs>): Prisma.PrismaPromise<GetWorkerVersionLogAggregateType<T>>

  /**
   * Group by WorkerVersionLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkerVersionLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkerVersionLogGroupByArgs['orderBy'] }
      : { orderBy?: WorkerVersionLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkerVersionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkerVersionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkerVersionLog model
 */
readonly fields: WorkerVersionLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkerVersionLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkerVersionLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  workerVersion<T extends Prisma.WorkerVersionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkerVersionDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkerVersionLog model
 */
export interface WorkerVersionLogFieldRefs {
  readonly id: Prisma.FieldRef<"WorkerVersionLog", 'String'>
  readonly workerVersionId: Prisma.FieldRef<"WorkerVersionLog", 'String'>
  readonly content: Prisma.FieldRef<"WorkerVersionLog", 'String'>
  readonly isSystem: Prisma.FieldRef<"WorkerVersionLog", 'Boolean'>
}
    

// Custom InputTypes
/**
 * WorkerVersionLog findUnique
 */
export type WorkerVersionLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
  /**
   * Filter, which WorkerVersionLog to fetch.
   */
  where: Prisma.WorkerVersionLogWhereUniqueInput
}

/**
 * WorkerVersionLog findUniqueOrThrow
 */
export type WorkerVersionLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
  /**
   * Filter, which WorkerVersionLog to fetch.
   */
  where: Prisma.WorkerVersionLogWhereUniqueInput
}

/**
 * WorkerVersionLog findFirst
 */
export type WorkerVersionLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
  /**
   * Filter, which WorkerVersionLog to fetch.
   */
  where?: Prisma.WorkerVersionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerVersionLogs to fetch.
   */
  orderBy?: Prisma.WorkerVersionLogOrderByWithRelationInput | Prisma.WorkerVersionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkerVersionLogs.
   */
  cursor?: Prisma.WorkerVersionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerVersionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerVersionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkerVersionLogs.
   */
  distinct?: Prisma.WorkerVersionLogScalarFieldEnum | Prisma.WorkerVersionLogScalarFieldEnum[]
}

/**
 * WorkerVersionLog findFirstOrThrow
 */
export type WorkerVersionLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
  /**
   * Filter, which WorkerVersionLog to fetch.
   */
  where?: Prisma.WorkerVersionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerVersionLogs to fetch.
   */
  orderBy?: Prisma.WorkerVersionLogOrderByWithRelationInput | Prisma.WorkerVersionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkerVersionLogs.
   */
  cursor?: Prisma.WorkerVersionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerVersionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerVersionLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkerVersionLogs.
   */
  distinct?: Prisma.WorkerVersionLogScalarFieldEnum | Prisma.WorkerVersionLogScalarFieldEnum[]
}

/**
 * WorkerVersionLog findMany
 */
export type WorkerVersionLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
  /**
   * Filter, which WorkerVersionLogs to fetch.
   */
  where?: Prisma.WorkerVersionLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerVersionLogs to fetch.
   */
  orderBy?: Prisma.WorkerVersionLogOrderByWithRelationInput | Prisma.WorkerVersionLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkerVersionLogs.
   */
  cursor?: Prisma.WorkerVersionLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerVersionLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerVersionLogs.
   */
  skip?: number
  distinct?: Prisma.WorkerVersionLogScalarFieldEnum | Prisma.WorkerVersionLogScalarFieldEnum[]
}

/**
 * WorkerVersionLog create
 */
export type WorkerVersionLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkerVersionLog.
   */
  data: Prisma.XOR<Prisma.WorkerVersionLogCreateInput, Prisma.WorkerVersionLogUncheckedCreateInput>
}

/**
 * WorkerVersionLog createMany
 */
export type WorkerVersionLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkerVersionLogs.
   */
  data: Prisma.WorkerVersionLogCreateManyInput | Prisma.WorkerVersionLogCreateManyInput[]
}

/**
 * WorkerVersionLog createManyAndReturn
 */
export type WorkerVersionLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * The data used to create many WorkerVersionLogs.
   */
  data: Prisma.WorkerVersionLogCreateManyInput | Prisma.WorkerVersionLogCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkerVersionLog update
 */
export type WorkerVersionLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkerVersionLog.
   */
  data: Prisma.XOR<Prisma.WorkerVersionLogUpdateInput, Prisma.WorkerVersionLogUncheckedUpdateInput>
  /**
   * Choose, which WorkerVersionLog to update.
   */
  where: Prisma.WorkerVersionLogWhereUniqueInput
}

/**
 * WorkerVersionLog updateMany
 */
export type WorkerVersionLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkerVersionLogs.
   */
  data: Prisma.XOR<Prisma.WorkerVersionLogUpdateManyMutationInput, Prisma.WorkerVersionLogUncheckedUpdateManyInput>
  /**
   * Filter which WorkerVersionLogs to update
   */
  where?: Prisma.WorkerVersionLogWhereInput
  /**
   * Limit how many WorkerVersionLogs to update.
   */
  limit?: number
}

/**
 * WorkerVersionLog updateManyAndReturn
 */
export type WorkerVersionLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * The data used to update WorkerVersionLogs.
   */
  data: Prisma.XOR<Prisma.WorkerVersionLogUpdateManyMutationInput, Prisma.WorkerVersionLogUncheckedUpdateManyInput>
  /**
   * Filter which WorkerVersionLogs to update
   */
  where?: Prisma.WorkerVersionLogWhereInput
  /**
   * Limit how many WorkerVersionLogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkerVersionLog upsert
 */
export type WorkerVersionLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkerVersionLog to update in case it exists.
   */
  where: Prisma.WorkerVersionLogWhereUniqueInput
  /**
   * In case the WorkerVersionLog found by the `where` argument doesn't exist, create a new WorkerVersionLog with this data.
   */
  create: Prisma.XOR<Prisma.WorkerVersionLogCreateInput, Prisma.WorkerVersionLogUncheckedCreateInput>
  /**
   * In case the WorkerVersionLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkerVersionLogUpdateInput, Prisma.WorkerVersionLogUncheckedUpdateInput>
}

/**
 * WorkerVersionLog delete
 */
export type WorkerVersionLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
  /**
   * Filter which WorkerVersionLog to delete.
   */
  where: Prisma.WorkerVersionLogWhereUniqueInput
}

/**
 * WorkerVersionLog deleteMany
 */
export type WorkerVersionLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkerVersionLogs to delete
   */
  where?: Prisma.WorkerVersionLogWhereInput
  /**
   * Limit how many WorkerVersionLogs to delete.
   */
  limit?: number
}

/**
 * WorkerVersionLog without action
 */
export type WorkerVersionLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
}
