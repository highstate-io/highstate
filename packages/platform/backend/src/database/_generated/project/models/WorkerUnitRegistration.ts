
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WorkerUnitRegistration` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model WorkerUnitRegistration
 * The worker unit registration tracks which unit instances require specific worker versions.
 * 
 * Units declare worker dependencies through their outputs, creating registrations that
 * trigger the runtime to start corresponding worker containers. Each registration
 * includes parameters passed to the worker for unit-specific configuration.
 * 
 * Registrations are managed during operation execution - created when units declare workers
 * and removed when units are destroyed. Worker versions without registrations are garbage collected.
 */
export type WorkerUnitRegistrationModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkerUnitRegistrationPayload>

export type AggregateWorkerUnitRegistration = {
  _count: WorkerUnitRegistrationCountAggregateOutputType | null
  _min: WorkerUnitRegistrationMinAggregateOutputType | null
  _max: WorkerUnitRegistrationMaxAggregateOutputType | null
}

export type WorkerUnitRegistrationMinAggregateOutputType = {
  stateId: string | null
  name: string | null
  workerVersionId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkerUnitRegistrationMaxAggregateOutputType = {
  stateId: string | null
  name: string | null
  workerVersionId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkerUnitRegistrationCountAggregateOutputType = {
  stateId: number
  name: number
  params: number
  workerVersionId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WorkerUnitRegistrationMinAggregateInputType = {
  stateId?: true
  name?: true
  workerVersionId?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkerUnitRegistrationMaxAggregateInputType = {
  stateId?: true
  name?: true
  workerVersionId?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkerUnitRegistrationCountAggregateInputType = {
  stateId?: true
  name?: true
  params?: true
  workerVersionId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WorkerUnitRegistrationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkerUnitRegistration to aggregate.
   */
  where?: Prisma.WorkerUnitRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerUnitRegistrations to fetch.
   */
  orderBy?: Prisma.WorkerUnitRegistrationOrderByWithRelationInput | Prisma.WorkerUnitRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkerUnitRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerUnitRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerUnitRegistrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkerUnitRegistrations
  **/
  _count?: true | WorkerUnitRegistrationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkerUnitRegistrationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkerUnitRegistrationMaxAggregateInputType
}

export type GetWorkerUnitRegistrationAggregateType<T extends WorkerUnitRegistrationAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkerUnitRegistration]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkerUnitRegistration[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkerUnitRegistration[P]>
}




export type WorkerUnitRegistrationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkerUnitRegistrationWhereInput
  orderBy?: Prisma.WorkerUnitRegistrationOrderByWithAggregationInput | Prisma.WorkerUnitRegistrationOrderByWithAggregationInput[]
  by: Prisma.WorkerUnitRegistrationScalarFieldEnum[] | Prisma.WorkerUnitRegistrationScalarFieldEnum
  having?: Prisma.WorkerUnitRegistrationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkerUnitRegistrationCountAggregateInputType | true
  _min?: WorkerUnitRegistrationMinAggregateInputType
  _max?: WorkerUnitRegistrationMaxAggregateInputType
}

export type WorkerUnitRegistrationGroupByOutputType = {
  stateId: string
  name: string
  params: PrismaJson.WorkerUnitRegistrationParams
  workerVersionId: string
  createdAt: Date
  updatedAt: Date
  _count: WorkerUnitRegistrationCountAggregateOutputType | null
  _min: WorkerUnitRegistrationMinAggregateOutputType | null
  _max: WorkerUnitRegistrationMaxAggregateOutputType | null
}

type GetWorkerUnitRegistrationGroupByPayload<T extends WorkerUnitRegistrationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkerUnitRegistrationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkerUnitRegistrationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkerUnitRegistrationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkerUnitRegistrationGroupByOutputType[P]>
      }
    >
  >



export type WorkerUnitRegistrationWhereInput = {
  AND?: Prisma.WorkerUnitRegistrationWhereInput | Prisma.WorkerUnitRegistrationWhereInput[]
  OR?: Prisma.WorkerUnitRegistrationWhereInput[]
  NOT?: Prisma.WorkerUnitRegistrationWhereInput | Prisma.WorkerUnitRegistrationWhereInput[]
  stateId?: Prisma.StringFilter<"WorkerUnitRegistration"> | string
  name?: Prisma.StringFilter<"WorkerUnitRegistration"> | string
  params?: Prisma.JsonFilter<"WorkerUnitRegistration">
  workerVersionId?: Prisma.StringFilter<"WorkerUnitRegistration"> | string
  createdAt?: Prisma.DateTimeFilter<"WorkerUnitRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkerUnitRegistration"> | Date | string
  state?: Prisma.XOR<Prisma.InstanceStateScalarRelationFilter, Prisma.InstanceStateWhereInput>
  workerVersion?: Prisma.XOR<Prisma.WorkerVersionScalarRelationFilter, Prisma.WorkerVersionWhereInput>
}

export type WorkerUnitRegistrationOrderByWithRelationInput = {
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  params?: Prisma.SortOrder
  workerVersionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  state?: Prisma.InstanceStateOrderByWithRelationInput
  workerVersion?: Prisma.WorkerVersionOrderByWithRelationInput
}

export type WorkerUnitRegistrationWhereUniqueInput = Prisma.AtLeast<{
  stateId_name?: Prisma.WorkerUnitRegistrationStateIdNameCompoundUniqueInput
  AND?: Prisma.WorkerUnitRegistrationWhereInput | Prisma.WorkerUnitRegistrationWhereInput[]
  OR?: Prisma.WorkerUnitRegistrationWhereInput[]
  NOT?: Prisma.WorkerUnitRegistrationWhereInput | Prisma.WorkerUnitRegistrationWhereInput[]
  stateId?: Prisma.StringFilter<"WorkerUnitRegistration"> | string
  name?: Prisma.StringFilter<"WorkerUnitRegistration"> | string
  params?: Prisma.JsonFilter<"WorkerUnitRegistration">
  workerVersionId?: Prisma.StringFilter<"WorkerUnitRegistration"> | string
  createdAt?: Prisma.DateTimeFilter<"WorkerUnitRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkerUnitRegistration"> | Date | string
  state?: Prisma.XOR<Prisma.InstanceStateScalarRelationFilter, Prisma.InstanceStateWhereInput>
  workerVersion?: Prisma.XOR<Prisma.WorkerVersionScalarRelationFilter, Prisma.WorkerVersionWhereInput>
}, "stateId_name">

export type WorkerUnitRegistrationOrderByWithAggregationInput = {
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  params?: Prisma.SortOrder
  workerVersionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WorkerUnitRegistrationCountOrderByAggregateInput
  _max?: Prisma.WorkerUnitRegistrationMaxOrderByAggregateInput
  _min?: Prisma.WorkerUnitRegistrationMinOrderByAggregateInput
}

export type WorkerUnitRegistrationScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkerUnitRegistrationScalarWhereWithAggregatesInput | Prisma.WorkerUnitRegistrationScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkerUnitRegistrationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkerUnitRegistrationScalarWhereWithAggregatesInput | Prisma.WorkerUnitRegistrationScalarWhereWithAggregatesInput[]
  stateId?: Prisma.StringWithAggregatesFilter<"WorkerUnitRegistration"> | string
  name?: Prisma.StringWithAggregatesFilter<"WorkerUnitRegistration"> | string
  params?: Prisma.JsonWithAggregatesFilter<"WorkerUnitRegistration">
  workerVersionId?: Prisma.StringWithAggregatesFilter<"WorkerUnitRegistration"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkerUnitRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkerUnitRegistration"> | Date | string
}

export type WorkerUnitRegistrationCreateInput = {
  name: string
  params: PrismaJson.WorkerUnitRegistrationParams
  createdAt?: Date | string
  updatedAt?: Date | string
  state: Prisma.InstanceStateCreateNestedOneWithoutWorkerRegistrationsInput
  workerVersion: Prisma.WorkerVersionCreateNestedOneWithoutUnitRegistrationsInput
}

export type WorkerUnitRegistrationUncheckedCreateInput = {
  stateId: string
  name: string
  params: PrismaJson.WorkerUnitRegistrationParams
  workerVersionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkerUnitRegistrationUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  params?: PrismaJson.WorkerUnitRegistrationParams
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.InstanceStateUpdateOneRequiredWithoutWorkerRegistrationsNestedInput
  workerVersion?: Prisma.WorkerVersionUpdateOneRequiredWithoutUnitRegistrationsNestedInput
}

export type WorkerUnitRegistrationUncheckedUpdateInput = {
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  params?: PrismaJson.WorkerUnitRegistrationParams
  workerVersionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerUnitRegistrationCreateManyInput = {
  stateId: string
  name: string
  params: PrismaJson.WorkerUnitRegistrationParams
  workerVersionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkerUnitRegistrationUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  params?: PrismaJson.WorkerUnitRegistrationParams
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerUnitRegistrationUncheckedUpdateManyInput = {
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  params?: PrismaJson.WorkerUnitRegistrationParams
  workerVersionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerUnitRegistrationListRelationFilter = {
  every?: Prisma.WorkerUnitRegistrationWhereInput
  some?: Prisma.WorkerUnitRegistrationWhereInput
  none?: Prisma.WorkerUnitRegistrationWhereInput
}

export type WorkerUnitRegistrationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkerUnitRegistrationStateIdNameCompoundUniqueInput = {
  stateId: string
  name: string
}

export type WorkerUnitRegistrationCountOrderByAggregateInput = {
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  params?: Prisma.SortOrder
  workerVersionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkerUnitRegistrationMaxOrderByAggregateInput = {
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  workerVersionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkerUnitRegistrationMinOrderByAggregateInput = {
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  workerVersionId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkerUnitRegistrationCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutStateInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutStateInput> | Prisma.WorkerUnitRegistrationCreateWithoutStateInput[] | Prisma.WorkerUnitRegistrationUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.WorkerUnitRegistrationCreateOrConnectWithoutStateInput | Prisma.WorkerUnitRegistrationCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.WorkerUnitRegistrationCreateManyStateInputEnvelope
  connect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
}

export type WorkerUnitRegistrationUncheckedCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutStateInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutStateInput> | Prisma.WorkerUnitRegistrationCreateWithoutStateInput[] | Prisma.WorkerUnitRegistrationUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.WorkerUnitRegistrationCreateOrConnectWithoutStateInput | Prisma.WorkerUnitRegistrationCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.WorkerUnitRegistrationCreateManyStateInputEnvelope
  connect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
}

export type WorkerUnitRegistrationUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutStateInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutStateInput> | Prisma.WorkerUnitRegistrationCreateWithoutStateInput[] | Prisma.WorkerUnitRegistrationUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.WorkerUnitRegistrationCreateOrConnectWithoutStateInput | Prisma.WorkerUnitRegistrationCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.WorkerUnitRegistrationUpsertWithWhereUniqueWithoutStateInput | Prisma.WorkerUnitRegistrationUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.WorkerUnitRegistrationCreateManyStateInputEnvelope
  set?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  disconnect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  delete?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  connect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  update?: Prisma.WorkerUnitRegistrationUpdateWithWhereUniqueWithoutStateInput | Prisma.WorkerUnitRegistrationUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.WorkerUnitRegistrationUpdateManyWithWhereWithoutStateInput | Prisma.WorkerUnitRegistrationUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.WorkerUnitRegistrationScalarWhereInput | Prisma.WorkerUnitRegistrationScalarWhereInput[]
}

export type WorkerUnitRegistrationUncheckedUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutStateInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutStateInput> | Prisma.WorkerUnitRegistrationCreateWithoutStateInput[] | Prisma.WorkerUnitRegistrationUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.WorkerUnitRegistrationCreateOrConnectWithoutStateInput | Prisma.WorkerUnitRegistrationCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.WorkerUnitRegistrationUpsertWithWhereUniqueWithoutStateInput | Prisma.WorkerUnitRegistrationUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.WorkerUnitRegistrationCreateManyStateInputEnvelope
  set?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  disconnect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  delete?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  connect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  update?: Prisma.WorkerUnitRegistrationUpdateWithWhereUniqueWithoutStateInput | Prisma.WorkerUnitRegistrationUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.WorkerUnitRegistrationUpdateManyWithWhereWithoutStateInput | Prisma.WorkerUnitRegistrationUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.WorkerUnitRegistrationScalarWhereInput | Prisma.WorkerUnitRegistrationScalarWhereInput[]
}

export type WorkerUnitRegistrationCreateNestedManyWithoutWorkerVersionInput = {
  create?: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutWorkerVersionInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput> | Prisma.WorkerUnitRegistrationCreateWithoutWorkerVersionInput[] | Prisma.WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput[]
  connectOrCreate?: Prisma.WorkerUnitRegistrationCreateOrConnectWithoutWorkerVersionInput | Prisma.WorkerUnitRegistrationCreateOrConnectWithoutWorkerVersionInput[]
  createMany?: Prisma.WorkerUnitRegistrationCreateManyWorkerVersionInputEnvelope
  connect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
}

export type WorkerUnitRegistrationUncheckedCreateNestedManyWithoutWorkerVersionInput = {
  create?: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutWorkerVersionInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput> | Prisma.WorkerUnitRegistrationCreateWithoutWorkerVersionInput[] | Prisma.WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput[]
  connectOrCreate?: Prisma.WorkerUnitRegistrationCreateOrConnectWithoutWorkerVersionInput | Prisma.WorkerUnitRegistrationCreateOrConnectWithoutWorkerVersionInput[]
  createMany?: Prisma.WorkerUnitRegistrationCreateManyWorkerVersionInputEnvelope
  connect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
}

export type WorkerUnitRegistrationUpdateManyWithoutWorkerVersionNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutWorkerVersionInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput> | Prisma.WorkerUnitRegistrationCreateWithoutWorkerVersionInput[] | Prisma.WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput[]
  connectOrCreate?: Prisma.WorkerUnitRegistrationCreateOrConnectWithoutWorkerVersionInput | Prisma.WorkerUnitRegistrationCreateOrConnectWithoutWorkerVersionInput[]
  upsert?: Prisma.WorkerUnitRegistrationUpsertWithWhereUniqueWithoutWorkerVersionInput | Prisma.WorkerUnitRegistrationUpsertWithWhereUniqueWithoutWorkerVersionInput[]
  createMany?: Prisma.WorkerUnitRegistrationCreateManyWorkerVersionInputEnvelope
  set?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  disconnect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  delete?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  connect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  update?: Prisma.WorkerUnitRegistrationUpdateWithWhereUniqueWithoutWorkerVersionInput | Prisma.WorkerUnitRegistrationUpdateWithWhereUniqueWithoutWorkerVersionInput[]
  updateMany?: Prisma.WorkerUnitRegistrationUpdateManyWithWhereWithoutWorkerVersionInput | Prisma.WorkerUnitRegistrationUpdateManyWithWhereWithoutWorkerVersionInput[]
  deleteMany?: Prisma.WorkerUnitRegistrationScalarWhereInput | Prisma.WorkerUnitRegistrationScalarWhereInput[]
}

export type WorkerUnitRegistrationUncheckedUpdateManyWithoutWorkerVersionNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutWorkerVersionInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput> | Prisma.WorkerUnitRegistrationCreateWithoutWorkerVersionInput[] | Prisma.WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput[]
  connectOrCreate?: Prisma.WorkerUnitRegistrationCreateOrConnectWithoutWorkerVersionInput | Prisma.WorkerUnitRegistrationCreateOrConnectWithoutWorkerVersionInput[]
  upsert?: Prisma.WorkerUnitRegistrationUpsertWithWhereUniqueWithoutWorkerVersionInput | Prisma.WorkerUnitRegistrationUpsertWithWhereUniqueWithoutWorkerVersionInput[]
  createMany?: Prisma.WorkerUnitRegistrationCreateManyWorkerVersionInputEnvelope
  set?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  disconnect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  delete?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  connect?: Prisma.WorkerUnitRegistrationWhereUniqueInput | Prisma.WorkerUnitRegistrationWhereUniqueInput[]
  update?: Prisma.WorkerUnitRegistrationUpdateWithWhereUniqueWithoutWorkerVersionInput | Prisma.WorkerUnitRegistrationUpdateWithWhereUniqueWithoutWorkerVersionInput[]
  updateMany?: Prisma.WorkerUnitRegistrationUpdateManyWithWhereWithoutWorkerVersionInput | Prisma.WorkerUnitRegistrationUpdateManyWithWhereWithoutWorkerVersionInput[]
  deleteMany?: Prisma.WorkerUnitRegistrationScalarWhereInput | Prisma.WorkerUnitRegistrationScalarWhereInput[]
}

export type WorkerUnitRegistrationCreateWithoutStateInput = {
  name: string
  params: PrismaJson.WorkerUnitRegistrationParams
  createdAt?: Date | string
  updatedAt?: Date | string
  workerVersion: Prisma.WorkerVersionCreateNestedOneWithoutUnitRegistrationsInput
}

export type WorkerUnitRegistrationUncheckedCreateWithoutStateInput = {
  name: string
  params: PrismaJson.WorkerUnitRegistrationParams
  workerVersionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkerUnitRegistrationCreateOrConnectWithoutStateInput = {
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutStateInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutStateInput>
}

export type WorkerUnitRegistrationCreateManyStateInputEnvelope = {
  data: Prisma.WorkerUnitRegistrationCreateManyStateInput | Prisma.WorkerUnitRegistrationCreateManyStateInput[]
}

export type WorkerUnitRegistrationUpsertWithWhereUniqueWithoutStateInput = {
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkerUnitRegistrationUpdateWithoutStateInput, Prisma.WorkerUnitRegistrationUncheckedUpdateWithoutStateInput>
  create: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutStateInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutStateInput>
}

export type WorkerUnitRegistrationUpdateWithWhereUniqueWithoutStateInput = {
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkerUnitRegistrationUpdateWithoutStateInput, Prisma.WorkerUnitRegistrationUncheckedUpdateWithoutStateInput>
}

export type WorkerUnitRegistrationUpdateManyWithWhereWithoutStateInput = {
  where: Prisma.WorkerUnitRegistrationScalarWhereInput
  data: Prisma.XOR<Prisma.WorkerUnitRegistrationUpdateManyMutationInput, Prisma.WorkerUnitRegistrationUncheckedUpdateManyWithoutStateInput>
}

export type WorkerUnitRegistrationScalarWhereInput = {
  AND?: Prisma.WorkerUnitRegistrationScalarWhereInput | Prisma.WorkerUnitRegistrationScalarWhereInput[]
  OR?: Prisma.WorkerUnitRegistrationScalarWhereInput[]
  NOT?: Prisma.WorkerUnitRegistrationScalarWhereInput | Prisma.WorkerUnitRegistrationScalarWhereInput[]
  stateId?: Prisma.StringFilter<"WorkerUnitRegistration"> | string
  name?: Prisma.StringFilter<"WorkerUnitRegistration"> | string
  params?: Prisma.JsonFilter<"WorkerUnitRegistration">
  workerVersionId?: Prisma.StringFilter<"WorkerUnitRegistration"> | string
  createdAt?: Prisma.DateTimeFilter<"WorkerUnitRegistration"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkerUnitRegistration"> | Date | string
}

export type WorkerUnitRegistrationCreateWithoutWorkerVersionInput = {
  name: string
  params: PrismaJson.WorkerUnitRegistrationParams
  createdAt?: Date | string
  updatedAt?: Date | string
  state: Prisma.InstanceStateCreateNestedOneWithoutWorkerRegistrationsInput
}

export type WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput = {
  stateId: string
  name: string
  params: PrismaJson.WorkerUnitRegistrationParams
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkerUnitRegistrationCreateOrConnectWithoutWorkerVersionInput = {
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutWorkerVersionInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput>
}

export type WorkerUnitRegistrationCreateManyWorkerVersionInputEnvelope = {
  data: Prisma.WorkerUnitRegistrationCreateManyWorkerVersionInput | Prisma.WorkerUnitRegistrationCreateManyWorkerVersionInput[]
}

export type WorkerUnitRegistrationUpsertWithWhereUniqueWithoutWorkerVersionInput = {
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkerUnitRegistrationUpdateWithoutWorkerVersionInput, Prisma.WorkerUnitRegistrationUncheckedUpdateWithoutWorkerVersionInput>
  create: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateWithoutWorkerVersionInput, Prisma.WorkerUnitRegistrationUncheckedCreateWithoutWorkerVersionInput>
}

export type WorkerUnitRegistrationUpdateWithWhereUniqueWithoutWorkerVersionInput = {
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkerUnitRegistrationUpdateWithoutWorkerVersionInput, Prisma.WorkerUnitRegistrationUncheckedUpdateWithoutWorkerVersionInput>
}

export type WorkerUnitRegistrationUpdateManyWithWhereWithoutWorkerVersionInput = {
  where: Prisma.WorkerUnitRegistrationScalarWhereInput
  data: Prisma.XOR<Prisma.WorkerUnitRegistrationUpdateManyMutationInput, Prisma.WorkerUnitRegistrationUncheckedUpdateManyWithoutWorkerVersionInput>
}

export type WorkerUnitRegistrationCreateManyStateInput = {
  name: string
  params: PrismaJson.WorkerUnitRegistrationParams
  workerVersionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkerUnitRegistrationUpdateWithoutStateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  params?: PrismaJson.WorkerUnitRegistrationParams
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workerVersion?: Prisma.WorkerVersionUpdateOneRequiredWithoutUnitRegistrationsNestedInput
}

export type WorkerUnitRegistrationUncheckedUpdateWithoutStateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  params?: PrismaJson.WorkerUnitRegistrationParams
  workerVersionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerUnitRegistrationUncheckedUpdateManyWithoutStateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  params?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  workerVersionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerUnitRegistrationCreateManyWorkerVersionInput = {
  stateId: string
  name: string
  params: PrismaJson.WorkerUnitRegistrationParams
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkerUnitRegistrationUpdateWithoutWorkerVersionInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  params?: PrismaJson.WorkerUnitRegistrationParams
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.InstanceStateUpdateOneRequiredWithoutWorkerRegistrationsNestedInput
}

export type WorkerUnitRegistrationUncheckedUpdateWithoutWorkerVersionInput = {
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  params?: PrismaJson.WorkerUnitRegistrationParams
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerUnitRegistrationUncheckedUpdateManyWithoutWorkerVersionInput = {
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  params?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type WorkerUnitRegistrationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  stateId?: boolean
  name?: boolean
  params?: boolean
  workerVersionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workerUnitRegistration"]>

export type WorkerUnitRegistrationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  stateId?: boolean
  name?: boolean
  params?: boolean
  workerVersionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workerUnitRegistration"]>

export type WorkerUnitRegistrationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  stateId?: boolean
  name?: boolean
  params?: boolean
  workerVersionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workerUnitRegistration"]>

export type WorkerUnitRegistrationSelectScalar = {
  stateId?: boolean
  name?: boolean
  params?: boolean
  workerVersionId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WorkerUnitRegistrationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"stateId" | "name" | "params" | "workerVersionId" | "createdAt" | "updatedAt", ExtArgs["result"]["workerUnitRegistration"]>
export type WorkerUnitRegistrationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}
export type WorkerUnitRegistrationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}
export type WorkerUnitRegistrationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
  workerVersion?: boolean | Prisma.WorkerVersionDefaultArgs<ExtArgs>
}

export type $WorkerUnitRegistrationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkerUnitRegistration"
  objects: {
    /**
     * The unit instance requesting the registration.
     */
    state: Prisma.$InstanceStatePayload<ExtArgs>
    /**
     * The worker version this registration currently uses.
     */
    workerVersion: Prisma.$WorkerVersionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The ID of the state of the unit instance requesting the registration.
     */
    stateId: string
    /**
     * The name of the worker within the instance.
     */
    name: string
    /**
     * The parameters of the registration passed by the unit.
     * 
     * [WorkerUnitRegistrationParams]
     */
    params: PrismaJson.WorkerUnitRegistrationParams
    /**
     * The ID of the worker version this registration currently uses.
     */
    workerVersionId: string
    /**
     * The time this registration was created.
     */
    createdAt: Date
    /**
     * The time this registration was last updated.
     */
    updatedAt: Date
  }, ExtArgs["result"]["workerUnitRegistration"]>
  composites: {}
}

export type WorkerUnitRegistrationGetPayload<S extends boolean | null | undefined | WorkerUnitRegistrationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload, S>

export type WorkerUnitRegistrationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkerUnitRegistrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkerUnitRegistrationCountAggregateInputType | true
  }

export interface WorkerUnitRegistrationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkerUnitRegistration'], meta: { name: 'WorkerUnitRegistration' } }
  /**
   * Find zero or one WorkerUnitRegistration that matches the filter.
   * @param {WorkerUnitRegistrationFindUniqueArgs} args - Arguments to find a WorkerUnitRegistration
   * @example
   * // Get one WorkerUnitRegistration
   * const workerUnitRegistration = await prisma.workerUnitRegistration.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkerUnitRegistrationFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkerUnitRegistrationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkerUnitRegistrationClient<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkerUnitRegistration that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkerUnitRegistrationFindUniqueOrThrowArgs} args - Arguments to find a WorkerUnitRegistration
   * @example
   * // Get one WorkerUnitRegistration
   * const workerUnitRegistration = await prisma.workerUnitRegistration.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkerUnitRegistrationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkerUnitRegistrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkerUnitRegistrationClient<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkerUnitRegistration that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerUnitRegistrationFindFirstArgs} args - Arguments to find a WorkerUnitRegistration
   * @example
   * // Get one WorkerUnitRegistration
   * const workerUnitRegistration = await prisma.workerUnitRegistration.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkerUnitRegistrationFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkerUnitRegistrationFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkerUnitRegistrationClient<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkerUnitRegistration that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerUnitRegistrationFindFirstOrThrowArgs} args - Arguments to find a WorkerUnitRegistration
   * @example
   * // Get one WorkerUnitRegistration
   * const workerUnitRegistration = await prisma.workerUnitRegistration.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkerUnitRegistrationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkerUnitRegistrationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkerUnitRegistrationClient<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkerUnitRegistrations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerUnitRegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkerUnitRegistrations
   * const workerUnitRegistrations = await prisma.workerUnitRegistration.findMany()
   * 
   * // Get first 10 WorkerUnitRegistrations
   * const workerUnitRegistrations = await prisma.workerUnitRegistration.findMany({ take: 10 })
   * 
   * // Only select the `stateId`
   * const workerUnitRegistrationWithStateIdOnly = await prisma.workerUnitRegistration.findMany({ select: { stateId: true } })
   * 
   */
  findMany<T extends WorkerUnitRegistrationFindManyArgs>(args?: Prisma.SelectSubset<T, WorkerUnitRegistrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkerUnitRegistration.
   * @param {WorkerUnitRegistrationCreateArgs} args - Arguments to create a WorkerUnitRegistration.
   * @example
   * // Create one WorkerUnitRegistration
   * const WorkerUnitRegistration = await prisma.workerUnitRegistration.create({
   *   data: {
   *     // ... data to create a WorkerUnitRegistration
   *   }
   * })
   * 
   */
  create<T extends WorkerUnitRegistrationCreateArgs>(args: Prisma.SelectSubset<T, WorkerUnitRegistrationCreateArgs<ExtArgs>>): Prisma.Prisma__WorkerUnitRegistrationClient<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkerUnitRegistrations.
   * @param {WorkerUnitRegistrationCreateManyArgs} args - Arguments to create many WorkerUnitRegistrations.
   * @example
   * // Create many WorkerUnitRegistrations
   * const workerUnitRegistration = await prisma.workerUnitRegistration.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkerUnitRegistrationCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkerUnitRegistrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkerUnitRegistrations and returns the data saved in the database.
   * @param {WorkerUnitRegistrationCreateManyAndReturnArgs} args - Arguments to create many WorkerUnitRegistrations.
   * @example
   * // Create many WorkerUnitRegistrations
   * const workerUnitRegistration = await prisma.workerUnitRegistration.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkerUnitRegistrations and only return the `stateId`
   * const workerUnitRegistrationWithStateIdOnly = await prisma.workerUnitRegistration.createManyAndReturn({
   *   select: { stateId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkerUnitRegistrationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkerUnitRegistrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkerUnitRegistration.
   * @param {WorkerUnitRegistrationDeleteArgs} args - Arguments to delete one WorkerUnitRegistration.
   * @example
   * // Delete one WorkerUnitRegistration
   * const WorkerUnitRegistration = await prisma.workerUnitRegistration.delete({
   *   where: {
   *     // ... filter to delete one WorkerUnitRegistration
   *   }
   * })
   * 
   */
  delete<T extends WorkerUnitRegistrationDeleteArgs>(args: Prisma.SelectSubset<T, WorkerUnitRegistrationDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkerUnitRegistrationClient<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkerUnitRegistration.
   * @param {WorkerUnitRegistrationUpdateArgs} args - Arguments to update one WorkerUnitRegistration.
   * @example
   * // Update one WorkerUnitRegistration
   * const workerUnitRegistration = await prisma.workerUnitRegistration.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkerUnitRegistrationUpdateArgs>(args: Prisma.SelectSubset<T, WorkerUnitRegistrationUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkerUnitRegistrationClient<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkerUnitRegistrations.
   * @param {WorkerUnitRegistrationDeleteManyArgs} args - Arguments to filter WorkerUnitRegistrations to delete.
   * @example
   * // Delete a few WorkerUnitRegistrations
   * const { count } = await prisma.workerUnitRegistration.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkerUnitRegistrationDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkerUnitRegistrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkerUnitRegistrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerUnitRegistrationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkerUnitRegistrations
   * const workerUnitRegistration = await prisma.workerUnitRegistration.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkerUnitRegistrationUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkerUnitRegistrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkerUnitRegistrations and returns the data updated in the database.
   * @param {WorkerUnitRegistrationUpdateManyAndReturnArgs} args - Arguments to update many WorkerUnitRegistrations.
   * @example
   * // Update many WorkerUnitRegistrations
   * const workerUnitRegistration = await prisma.workerUnitRegistration.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkerUnitRegistrations and only return the `stateId`
   * const workerUnitRegistrationWithStateIdOnly = await prisma.workerUnitRegistration.updateManyAndReturn({
   *   select: { stateId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkerUnitRegistrationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkerUnitRegistrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkerUnitRegistration.
   * @param {WorkerUnitRegistrationUpsertArgs} args - Arguments to update or create a WorkerUnitRegistration.
   * @example
   * // Update or create a WorkerUnitRegistration
   * const workerUnitRegistration = await prisma.workerUnitRegistration.upsert({
   *   create: {
   *     // ... data to create a WorkerUnitRegistration
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkerUnitRegistration we want to update
   *   }
   * })
   */
  upsert<T extends WorkerUnitRegistrationUpsertArgs>(args: Prisma.SelectSubset<T, WorkerUnitRegistrationUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkerUnitRegistrationClient<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkerUnitRegistrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerUnitRegistrationCountArgs} args - Arguments to filter WorkerUnitRegistrations to count.
   * @example
   * // Count the number of WorkerUnitRegistrations
   * const count = await prisma.workerUnitRegistration.count({
   *   where: {
   *     // ... the filter for the WorkerUnitRegistrations we want to count
   *   }
   * })
  **/
  count<T extends WorkerUnitRegistrationCountArgs>(
    args?: Prisma.Subset<T, WorkerUnitRegistrationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkerUnitRegistrationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkerUnitRegistration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerUnitRegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkerUnitRegistrationAggregateArgs>(args: Prisma.Subset<T, WorkerUnitRegistrationAggregateArgs>): Prisma.PrismaPromise<GetWorkerUnitRegistrationAggregateType<T>>

  /**
   * Group by WorkerUnitRegistration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerUnitRegistrationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkerUnitRegistrationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkerUnitRegistrationGroupByArgs['orderBy'] }
      : { orderBy?: WorkerUnitRegistrationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkerUnitRegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkerUnitRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkerUnitRegistration model
 */
readonly fields: WorkerUnitRegistrationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkerUnitRegistration.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkerUnitRegistrationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  state<T extends Prisma.InstanceStateDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InstanceStateDefaultArgs<ExtArgs>>): Prisma.Prisma__InstanceStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  workerVersion<T extends Prisma.WorkerVersionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkerVersionDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkerUnitRegistration model
 */
export interface WorkerUnitRegistrationFieldRefs {
  readonly stateId: Prisma.FieldRef<"WorkerUnitRegistration", 'String'>
  readonly name: Prisma.FieldRef<"WorkerUnitRegistration", 'String'>
  readonly params: Prisma.FieldRef<"WorkerUnitRegistration", 'Json'>
  readonly workerVersionId: Prisma.FieldRef<"WorkerUnitRegistration", 'String'>
  readonly createdAt: Prisma.FieldRef<"WorkerUnitRegistration", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkerUnitRegistration", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WorkerUnitRegistration findUnique
 */
export type WorkerUnitRegistrationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which WorkerUnitRegistration to fetch.
   */
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
}

/**
 * WorkerUnitRegistration findUniqueOrThrow
 */
export type WorkerUnitRegistrationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which WorkerUnitRegistration to fetch.
   */
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
}

/**
 * WorkerUnitRegistration findFirst
 */
export type WorkerUnitRegistrationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which WorkerUnitRegistration to fetch.
   */
  where?: Prisma.WorkerUnitRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerUnitRegistrations to fetch.
   */
  orderBy?: Prisma.WorkerUnitRegistrationOrderByWithRelationInput | Prisma.WorkerUnitRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkerUnitRegistrations.
   */
  cursor?: Prisma.WorkerUnitRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerUnitRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerUnitRegistrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkerUnitRegistrations.
   */
  distinct?: Prisma.WorkerUnitRegistrationScalarFieldEnum | Prisma.WorkerUnitRegistrationScalarFieldEnum[]
}

/**
 * WorkerUnitRegistration findFirstOrThrow
 */
export type WorkerUnitRegistrationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which WorkerUnitRegistration to fetch.
   */
  where?: Prisma.WorkerUnitRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerUnitRegistrations to fetch.
   */
  orderBy?: Prisma.WorkerUnitRegistrationOrderByWithRelationInput | Prisma.WorkerUnitRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkerUnitRegistrations.
   */
  cursor?: Prisma.WorkerUnitRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerUnitRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerUnitRegistrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkerUnitRegistrations.
   */
  distinct?: Prisma.WorkerUnitRegistrationScalarFieldEnum | Prisma.WorkerUnitRegistrationScalarFieldEnum[]
}

/**
 * WorkerUnitRegistration findMany
 */
export type WorkerUnitRegistrationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
  /**
   * Filter, which WorkerUnitRegistrations to fetch.
   */
  where?: Prisma.WorkerUnitRegistrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerUnitRegistrations to fetch.
   */
  orderBy?: Prisma.WorkerUnitRegistrationOrderByWithRelationInput | Prisma.WorkerUnitRegistrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkerUnitRegistrations.
   */
  cursor?: Prisma.WorkerUnitRegistrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerUnitRegistrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerUnitRegistrations.
   */
  skip?: number
  distinct?: Prisma.WorkerUnitRegistrationScalarFieldEnum | Prisma.WorkerUnitRegistrationScalarFieldEnum[]
}

/**
 * WorkerUnitRegistration create
 */
export type WorkerUnitRegistrationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkerUnitRegistration.
   */
  data: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateInput, Prisma.WorkerUnitRegistrationUncheckedCreateInput>
}

/**
 * WorkerUnitRegistration createMany
 */
export type WorkerUnitRegistrationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkerUnitRegistrations.
   */
  data: Prisma.WorkerUnitRegistrationCreateManyInput | Prisma.WorkerUnitRegistrationCreateManyInput[]
}

/**
 * WorkerUnitRegistration createManyAndReturn
 */
export type WorkerUnitRegistrationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * The data used to create many WorkerUnitRegistrations.
   */
  data: Prisma.WorkerUnitRegistrationCreateManyInput | Prisma.WorkerUnitRegistrationCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkerUnitRegistration update
 */
export type WorkerUnitRegistrationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkerUnitRegistration.
   */
  data: Prisma.XOR<Prisma.WorkerUnitRegistrationUpdateInput, Prisma.WorkerUnitRegistrationUncheckedUpdateInput>
  /**
   * Choose, which WorkerUnitRegistration to update.
   */
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
}

/**
 * WorkerUnitRegistration updateMany
 */
export type WorkerUnitRegistrationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkerUnitRegistrations.
   */
  data: Prisma.XOR<Prisma.WorkerUnitRegistrationUpdateManyMutationInput, Prisma.WorkerUnitRegistrationUncheckedUpdateManyInput>
  /**
   * Filter which WorkerUnitRegistrations to update
   */
  where?: Prisma.WorkerUnitRegistrationWhereInput
  /**
   * Limit how many WorkerUnitRegistrations to update.
   */
  limit?: number
}

/**
 * WorkerUnitRegistration updateManyAndReturn
 */
export type WorkerUnitRegistrationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * The data used to update WorkerUnitRegistrations.
   */
  data: Prisma.XOR<Prisma.WorkerUnitRegistrationUpdateManyMutationInput, Prisma.WorkerUnitRegistrationUncheckedUpdateManyInput>
  /**
   * Filter which WorkerUnitRegistrations to update
   */
  where?: Prisma.WorkerUnitRegistrationWhereInput
  /**
   * Limit how many WorkerUnitRegistrations to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkerUnitRegistration upsert
 */
export type WorkerUnitRegistrationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkerUnitRegistration to update in case it exists.
   */
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
  /**
   * In case the WorkerUnitRegistration found by the `where` argument doesn't exist, create a new WorkerUnitRegistration with this data.
   */
  create: Prisma.XOR<Prisma.WorkerUnitRegistrationCreateInput, Prisma.WorkerUnitRegistrationUncheckedCreateInput>
  /**
   * In case the WorkerUnitRegistration was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkerUnitRegistrationUpdateInput, Prisma.WorkerUnitRegistrationUncheckedUpdateInput>
}

/**
 * WorkerUnitRegistration delete
 */
export type WorkerUnitRegistrationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
  /**
   * Filter which WorkerUnitRegistration to delete.
   */
  where: Prisma.WorkerUnitRegistrationWhereUniqueInput
}

/**
 * WorkerUnitRegistration deleteMany
 */
export type WorkerUnitRegistrationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkerUnitRegistrations to delete
   */
  where?: Prisma.WorkerUnitRegistrationWhereInput
  /**
   * Limit how many WorkerUnitRegistrations to delete.
   */
  limit?: number
}

/**
 * WorkerUnitRegistration without action
 */
export type WorkerUnitRegistrationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
}
