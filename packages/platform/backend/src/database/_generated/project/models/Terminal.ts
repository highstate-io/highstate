
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Terminal` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Terminal
 * The terminal provides interactive shell access to infrastructure resources.
 * 
 * Terminals can be created by units (owned by instances) or by service accounts.
 * Each terminal maintains a specification for creating containers that power the terminal,
 * including image, command, environment, and mounted files.
 * 
 * Instance-owned terminals are marked unavailable when the instance is destroyed, preserving session history.
 * Service account terminals persist independently.
 */
export type TerminalModel = runtime.Types.Result.DefaultSelection<Prisma.$TerminalPayload>

export type AggregateTerminal = {
  _count: TerminalCountAggregateOutputType | null
  _min: TerminalMinAggregateOutputType | null
  _max: TerminalMaxAggregateOutputType | null
}

export type TerminalMinAggregateOutputType = {
  id: string | null
  status: $Enums.TerminalStatus | null
  stateId: string | null
  name: string | null
  serviceAccountId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TerminalMaxAggregateOutputType = {
  id: string | null
  status: $Enums.TerminalStatus | null
  stateId: string | null
  name: string | null
  serviceAccountId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TerminalCountAggregateOutputType = {
  id: number
  meta: number
  status: number
  spec: number
  stateId: number
  name: number
  serviceAccountId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TerminalMinAggregateInputType = {
  id?: true
  status?: true
  stateId?: true
  name?: true
  serviceAccountId?: true
  createdAt?: true
  updatedAt?: true
}

export type TerminalMaxAggregateInputType = {
  id?: true
  status?: true
  stateId?: true
  name?: true
  serviceAccountId?: true
  createdAt?: true
  updatedAt?: true
}

export type TerminalCountAggregateInputType = {
  id?: true
  meta?: true
  status?: true
  spec?: true
  stateId?: true
  name?: true
  serviceAccountId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TerminalAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Terminal to aggregate.
   */
  where?: Prisma.TerminalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terminals to fetch.
   */
  orderBy?: Prisma.TerminalOrderByWithRelationInput | Prisma.TerminalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TerminalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terminals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terminals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Terminals
  **/
  _count?: true | TerminalCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TerminalMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TerminalMaxAggregateInputType
}

export type GetTerminalAggregateType<T extends TerminalAggregateArgs> = {
      [P in keyof T & keyof AggregateTerminal]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTerminal[P]>
    : Prisma.GetScalarType<T[P], AggregateTerminal[P]>
}




export type TerminalGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TerminalWhereInput
  orderBy?: Prisma.TerminalOrderByWithAggregationInput | Prisma.TerminalOrderByWithAggregationInput[]
  by: Prisma.TerminalScalarFieldEnum[] | Prisma.TerminalScalarFieldEnum
  having?: Prisma.TerminalScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TerminalCountAggregateInputType | true
  _min?: TerminalMinAggregateInputType
  _max?: TerminalMaxAggregateInputType
}

export type TerminalGroupByOutputType = {
  id: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  stateId: string | null
  name: string | null
  serviceAccountId: string | null
  createdAt: Date
  updatedAt: Date
  _count: TerminalCountAggregateOutputType | null
  _min: TerminalMinAggregateOutputType | null
  _max: TerminalMaxAggregateOutputType | null
}

type GetTerminalGroupByPayload<T extends TerminalGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TerminalGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TerminalGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TerminalGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TerminalGroupByOutputType[P]>
      }
    >
  >



export type TerminalWhereInput = {
  AND?: Prisma.TerminalWhereInput | Prisma.TerminalWhereInput[]
  OR?: Prisma.TerminalWhereInput[]
  NOT?: Prisma.TerminalWhereInput | Prisma.TerminalWhereInput[]
  id?: Prisma.StringFilter<"Terminal"> | string
  meta?: Prisma.JsonFilter<"Terminal">
  status?: Prisma.EnumTerminalStatusFilter<"Terminal"> | $Enums.TerminalStatus
  spec?: Prisma.JsonFilter<"Terminal">
  stateId?: Prisma.StringNullableFilter<"Terminal"> | string | null
  name?: Prisma.StringNullableFilter<"Terminal"> | string | null
  serviceAccountId?: Prisma.StringNullableFilter<"Terminal"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Terminal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Terminal"> | Date | string
  state?: Prisma.XOR<Prisma.InstanceStateNullableScalarRelationFilter, Prisma.InstanceStateWhereInput> | null
  serviceAccount?: Prisma.XOR<Prisma.ServiceAccountNullableScalarRelationFilter, Prisma.ServiceAccountWhereInput> | null
  sessions?: Prisma.TerminalSessionListRelationFilter
  artifacts?: Prisma.ArtifactListRelationFilter
}

export type TerminalOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  status?: Prisma.SortOrder
  spec?: Prisma.SortOrder
  stateId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  serviceAccountId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  state?: Prisma.InstanceStateOrderByWithRelationInput
  serviceAccount?: Prisma.ServiceAccountOrderByWithRelationInput
  sessions?: Prisma.TerminalSessionOrderByRelationAggregateInput
  artifacts?: Prisma.ArtifactOrderByRelationAggregateInput
}

export type TerminalWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  stateId_name?: Prisma.TerminalStateIdNameCompoundUniqueInput
  AND?: Prisma.TerminalWhereInput | Prisma.TerminalWhereInput[]
  OR?: Prisma.TerminalWhereInput[]
  NOT?: Prisma.TerminalWhereInput | Prisma.TerminalWhereInput[]
  meta?: Prisma.JsonFilter<"Terminal">
  status?: Prisma.EnumTerminalStatusFilter<"Terminal"> | $Enums.TerminalStatus
  spec?: Prisma.JsonFilter<"Terminal">
  stateId?: Prisma.StringNullableFilter<"Terminal"> | string | null
  name?: Prisma.StringNullableFilter<"Terminal"> | string | null
  serviceAccountId?: Prisma.StringNullableFilter<"Terminal"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Terminal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Terminal"> | Date | string
  state?: Prisma.XOR<Prisma.InstanceStateNullableScalarRelationFilter, Prisma.InstanceStateWhereInput> | null
  serviceAccount?: Prisma.XOR<Prisma.ServiceAccountNullableScalarRelationFilter, Prisma.ServiceAccountWhereInput> | null
  sessions?: Prisma.TerminalSessionListRelationFilter
  artifacts?: Prisma.ArtifactListRelationFilter
}, "id" | "stateId_name">

export type TerminalOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  status?: Prisma.SortOrder
  spec?: Prisma.SortOrder
  stateId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  serviceAccountId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TerminalCountOrderByAggregateInput
  _max?: Prisma.TerminalMaxOrderByAggregateInput
  _min?: Prisma.TerminalMinOrderByAggregateInput
}

export type TerminalScalarWhereWithAggregatesInput = {
  AND?: Prisma.TerminalScalarWhereWithAggregatesInput | Prisma.TerminalScalarWhereWithAggregatesInput[]
  OR?: Prisma.TerminalScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TerminalScalarWhereWithAggregatesInput | Prisma.TerminalScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Terminal"> | string
  meta?: Prisma.JsonWithAggregatesFilter<"Terminal">
  status?: Prisma.EnumTerminalStatusWithAggregatesFilter<"Terminal"> | $Enums.TerminalStatus
  spec?: Prisma.JsonWithAggregatesFilter<"Terminal">
  stateId?: Prisma.StringNullableWithAggregatesFilter<"Terminal"> | string | null
  name?: Prisma.StringNullableWithAggregatesFilter<"Terminal"> | string | null
  serviceAccountId?: Prisma.StringNullableWithAggregatesFilter<"Terminal"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Terminal"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Terminal"> | Date | string
}

export type TerminalCreateInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  state?: Prisma.InstanceStateCreateNestedOneWithoutTerminalsInput
  serviceAccount?: Prisma.ServiceAccountCreateNestedOneWithoutTerminalsInput
  sessions?: Prisma.TerminalSessionCreateNestedManyWithoutTerminalInput
  artifacts?: Prisma.ArtifactCreateNestedManyWithoutTerminalsInput
}

export type TerminalUncheckedCreateInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  stateId?: string | null
  name?: string | null
  serviceAccountId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sessions?: Prisma.TerminalSessionUncheckedCreateNestedManyWithoutTerminalInput
  artifacts?: Prisma.ArtifactUncheckedCreateNestedManyWithoutTerminalsInput
}

export type TerminalUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.InstanceStateUpdateOneWithoutTerminalsNestedInput
  serviceAccount?: Prisma.ServiceAccountUpdateOneWithoutTerminalsNestedInput
  sessions?: Prisma.TerminalSessionUpdateManyWithoutTerminalNestedInput
  artifacts?: Prisma.ArtifactUpdateManyWithoutTerminalsNestedInput
}

export type TerminalUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sessions?: Prisma.TerminalSessionUncheckedUpdateManyWithoutTerminalNestedInput
  artifacts?: Prisma.ArtifactUncheckedUpdateManyWithoutTerminalsNestedInput
}

export type TerminalCreateManyInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  stateId?: string | null
  name?: string | null
  serviceAccountId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TerminalUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TerminalUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TerminalListRelationFilter = {
  every?: Prisma.TerminalWhereInput
  some?: Prisma.TerminalWhereInput
  none?: Prisma.TerminalWhereInput
}

export type TerminalOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TerminalStateIdNameCompoundUniqueInput = {
  stateId: string
  name: string
}

export type TerminalCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  status?: Prisma.SortOrder
  spec?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  serviceAccountId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TerminalMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  serviceAccountId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TerminalMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  serviceAccountId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TerminalScalarRelationFilter = {
  is?: Prisma.TerminalWhereInput
  isNot?: Prisma.TerminalWhereInput
}

export type TerminalCreateNestedManyWithoutArtifactsInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutArtifactsInput, Prisma.TerminalUncheckedCreateWithoutArtifactsInput> | Prisma.TerminalCreateWithoutArtifactsInput[] | Prisma.TerminalUncheckedCreateWithoutArtifactsInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutArtifactsInput | Prisma.TerminalCreateOrConnectWithoutArtifactsInput[]
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
}

export type TerminalUncheckedCreateNestedManyWithoutArtifactsInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutArtifactsInput, Prisma.TerminalUncheckedCreateWithoutArtifactsInput> | Prisma.TerminalCreateWithoutArtifactsInput[] | Prisma.TerminalUncheckedCreateWithoutArtifactsInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutArtifactsInput | Prisma.TerminalCreateOrConnectWithoutArtifactsInput[]
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
}

export type TerminalUpdateManyWithoutArtifactsNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutArtifactsInput, Prisma.TerminalUncheckedCreateWithoutArtifactsInput> | Prisma.TerminalCreateWithoutArtifactsInput[] | Prisma.TerminalUncheckedCreateWithoutArtifactsInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutArtifactsInput | Prisma.TerminalCreateOrConnectWithoutArtifactsInput[]
  upsert?: Prisma.TerminalUpsertWithWhereUniqueWithoutArtifactsInput | Prisma.TerminalUpsertWithWhereUniqueWithoutArtifactsInput[]
  set?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  disconnect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  delete?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  update?: Prisma.TerminalUpdateWithWhereUniqueWithoutArtifactsInput | Prisma.TerminalUpdateWithWhereUniqueWithoutArtifactsInput[]
  updateMany?: Prisma.TerminalUpdateManyWithWhereWithoutArtifactsInput | Prisma.TerminalUpdateManyWithWhereWithoutArtifactsInput[]
  deleteMany?: Prisma.TerminalScalarWhereInput | Prisma.TerminalScalarWhereInput[]
}

export type TerminalUncheckedUpdateManyWithoutArtifactsNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutArtifactsInput, Prisma.TerminalUncheckedCreateWithoutArtifactsInput> | Prisma.TerminalCreateWithoutArtifactsInput[] | Prisma.TerminalUncheckedCreateWithoutArtifactsInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutArtifactsInput | Prisma.TerminalCreateOrConnectWithoutArtifactsInput[]
  upsert?: Prisma.TerminalUpsertWithWhereUniqueWithoutArtifactsInput | Prisma.TerminalUpsertWithWhereUniqueWithoutArtifactsInput[]
  set?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  disconnect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  delete?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  update?: Prisma.TerminalUpdateWithWhereUniqueWithoutArtifactsInput | Prisma.TerminalUpdateWithWhereUniqueWithoutArtifactsInput[]
  updateMany?: Prisma.TerminalUpdateManyWithWhereWithoutArtifactsInput | Prisma.TerminalUpdateManyWithWhereWithoutArtifactsInput[]
  deleteMany?: Prisma.TerminalScalarWhereInput | Prisma.TerminalScalarWhereInput[]
}

export type TerminalCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutStateInput, Prisma.TerminalUncheckedCreateWithoutStateInput> | Prisma.TerminalCreateWithoutStateInput[] | Prisma.TerminalUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutStateInput | Prisma.TerminalCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.TerminalCreateManyStateInputEnvelope
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
}

export type TerminalUncheckedCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutStateInput, Prisma.TerminalUncheckedCreateWithoutStateInput> | Prisma.TerminalCreateWithoutStateInput[] | Prisma.TerminalUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutStateInput | Prisma.TerminalCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.TerminalCreateManyStateInputEnvelope
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
}

export type TerminalUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutStateInput, Prisma.TerminalUncheckedCreateWithoutStateInput> | Prisma.TerminalCreateWithoutStateInput[] | Prisma.TerminalUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutStateInput | Prisma.TerminalCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.TerminalUpsertWithWhereUniqueWithoutStateInput | Prisma.TerminalUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.TerminalCreateManyStateInputEnvelope
  set?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  disconnect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  delete?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  update?: Prisma.TerminalUpdateWithWhereUniqueWithoutStateInput | Prisma.TerminalUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.TerminalUpdateManyWithWhereWithoutStateInput | Prisma.TerminalUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.TerminalScalarWhereInput | Prisma.TerminalScalarWhereInput[]
}

export type TerminalUncheckedUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutStateInput, Prisma.TerminalUncheckedCreateWithoutStateInput> | Prisma.TerminalCreateWithoutStateInput[] | Prisma.TerminalUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutStateInput | Prisma.TerminalCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.TerminalUpsertWithWhereUniqueWithoutStateInput | Prisma.TerminalUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.TerminalCreateManyStateInputEnvelope
  set?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  disconnect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  delete?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  update?: Prisma.TerminalUpdateWithWhereUniqueWithoutStateInput | Prisma.TerminalUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.TerminalUpdateManyWithWhereWithoutStateInput | Prisma.TerminalUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.TerminalScalarWhereInput | Prisma.TerminalScalarWhereInput[]
}

export type TerminalCreateNestedManyWithoutServiceAccountInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutServiceAccountInput, Prisma.TerminalUncheckedCreateWithoutServiceAccountInput> | Prisma.TerminalCreateWithoutServiceAccountInput[] | Prisma.TerminalUncheckedCreateWithoutServiceAccountInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutServiceAccountInput | Prisma.TerminalCreateOrConnectWithoutServiceAccountInput[]
  createMany?: Prisma.TerminalCreateManyServiceAccountInputEnvelope
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
}

export type TerminalUncheckedCreateNestedManyWithoutServiceAccountInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutServiceAccountInput, Prisma.TerminalUncheckedCreateWithoutServiceAccountInput> | Prisma.TerminalCreateWithoutServiceAccountInput[] | Prisma.TerminalUncheckedCreateWithoutServiceAccountInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutServiceAccountInput | Prisma.TerminalCreateOrConnectWithoutServiceAccountInput[]
  createMany?: Prisma.TerminalCreateManyServiceAccountInputEnvelope
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
}

export type TerminalUpdateManyWithoutServiceAccountNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutServiceAccountInput, Prisma.TerminalUncheckedCreateWithoutServiceAccountInput> | Prisma.TerminalCreateWithoutServiceAccountInput[] | Prisma.TerminalUncheckedCreateWithoutServiceAccountInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutServiceAccountInput | Prisma.TerminalCreateOrConnectWithoutServiceAccountInput[]
  upsert?: Prisma.TerminalUpsertWithWhereUniqueWithoutServiceAccountInput | Prisma.TerminalUpsertWithWhereUniqueWithoutServiceAccountInput[]
  createMany?: Prisma.TerminalCreateManyServiceAccountInputEnvelope
  set?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  disconnect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  delete?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  update?: Prisma.TerminalUpdateWithWhereUniqueWithoutServiceAccountInput | Prisma.TerminalUpdateWithWhereUniqueWithoutServiceAccountInput[]
  updateMany?: Prisma.TerminalUpdateManyWithWhereWithoutServiceAccountInput | Prisma.TerminalUpdateManyWithWhereWithoutServiceAccountInput[]
  deleteMany?: Prisma.TerminalScalarWhereInput | Prisma.TerminalScalarWhereInput[]
}

export type TerminalUncheckedUpdateManyWithoutServiceAccountNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutServiceAccountInput, Prisma.TerminalUncheckedCreateWithoutServiceAccountInput> | Prisma.TerminalCreateWithoutServiceAccountInput[] | Prisma.TerminalUncheckedCreateWithoutServiceAccountInput[]
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutServiceAccountInput | Prisma.TerminalCreateOrConnectWithoutServiceAccountInput[]
  upsert?: Prisma.TerminalUpsertWithWhereUniqueWithoutServiceAccountInput | Prisma.TerminalUpsertWithWhereUniqueWithoutServiceAccountInput[]
  createMany?: Prisma.TerminalCreateManyServiceAccountInputEnvelope
  set?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  disconnect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  delete?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  connect?: Prisma.TerminalWhereUniqueInput | Prisma.TerminalWhereUniqueInput[]
  update?: Prisma.TerminalUpdateWithWhereUniqueWithoutServiceAccountInput | Prisma.TerminalUpdateWithWhereUniqueWithoutServiceAccountInput[]
  updateMany?: Prisma.TerminalUpdateManyWithWhereWithoutServiceAccountInput | Prisma.TerminalUpdateManyWithWhereWithoutServiceAccountInput[]
  deleteMany?: Prisma.TerminalScalarWhereInput | Prisma.TerminalScalarWhereInput[]
}

export type EnumTerminalStatusFieldUpdateOperationsInput = {
  set?: $Enums.TerminalStatus
}

export type TerminalCreateNestedOneWithoutSessionsInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutSessionsInput, Prisma.TerminalUncheckedCreateWithoutSessionsInput>
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutSessionsInput
  connect?: Prisma.TerminalWhereUniqueInput
}

export type TerminalUpdateOneRequiredWithoutSessionsNestedInput = {
  create?: Prisma.XOR<Prisma.TerminalCreateWithoutSessionsInput, Prisma.TerminalUncheckedCreateWithoutSessionsInput>
  connectOrCreate?: Prisma.TerminalCreateOrConnectWithoutSessionsInput
  upsert?: Prisma.TerminalUpsertWithoutSessionsInput
  connect?: Prisma.TerminalWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TerminalUpdateToOneWithWhereWithoutSessionsInput, Prisma.TerminalUpdateWithoutSessionsInput>, Prisma.TerminalUncheckedUpdateWithoutSessionsInput>
}

export type TerminalCreateWithoutArtifactsInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  state?: Prisma.InstanceStateCreateNestedOneWithoutTerminalsInput
  serviceAccount?: Prisma.ServiceAccountCreateNestedOneWithoutTerminalsInput
  sessions?: Prisma.TerminalSessionCreateNestedManyWithoutTerminalInput
}

export type TerminalUncheckedCreateWithoutArtifactsInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  stateId?: string | null
  name?: string | null
  serviceAccountId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sessions?: Prisma.TerminalSessionUncheckedCreateNestedManyWithoutTerminalInput
}

export type TerminalCreateOrConnectWithoutArtifactsInput = {
  where: Prisma.TerminalWhereUniqueInput
  create: Prisma.XOR<Prisma.TerminalCreateWithoutArtifactsInput, Prisma.TerminalUncheckedCreateWithoutArtifactsInput>
}

export type TerminalUpsertWithWhereUniqueWithoutArtifactsInput = {
  where: Prisma.TerminalWhereUniqueInput
  update: Prisma.XOR<Prisma.TerminalUpdateWithoutArtifactsInput, Prisma.TerminalUncheckedUpdateWithoutArtifactsInput>
  create: Prisma.XOR<Prisma.TerminalCreateWithoutArtifactsInput, Prisma.TerminalUncheckedCreateWithoutArtifactsInput>
}

export type TerminalUpdateWithWhereUniqueWithoutArtifactsInput = {
  where: Prisma.TerminalWhereUniqueInput
  data: Prisma.XOR<Prisma.TerminalUpdateWithoutArtifactsInput, Prisma.TerminalUncheckedUpdateWithoutArtifactsInput>
}

export type TerminalUpdateManyWithWhereWithoutArtifactsInput = {
  where: Prisma.TerminalScalarWhereInput
  data: Prisma.XOR<Prisma.TerminalUpdateManyMutationInput, Prisma.TerminalUncheckedUpdateManyWithoutArtifactsInput>
}

export type TerminalScalarWhereInput = {
  AND?: Prisma.TerminalScalarWhereInput | Prisma.TerminalScalarWhereInput[]
  OR?: Prisma.TerminalScalarWhereInput[]
  NOT?: Prisma.TerminalScalarWhereInput | Prisma.TerminalScalarWhereInput[]
  id?: Prisma.StringFilter<"Terminal"> | string
  meta?: Prisma.JsonFilter<"Terminal">
  status?: Prisma.EnumTerminalStatusFilter<"Terminal"> | $Enums.TerminalStatus
  spec?: Prisma.JsonFilter<"Terminal">
  stateId?: Prisma.StringNullableFilter<"Terminal"> | string | null
  name?: Prisma.StringNullableFilter<"Terminal"> | string | null
  serviceAccountId?: Prisma.StringNullableFilter<"Terminal"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Terminal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Terminal"> | Date | string
}

export type TerminalCreateWithoutStateInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  serviceAccount?: Prisma.ServiceAccountCreateNestedOneWithoutTerminalsInput
  sessions?: Prisma.TerminalSessionCreateNestedManyWithoutTerminalInput
  artifacts?: Prisma.ArtifactCreateNestedManyWithoutTerminalsInput
}

export type TerminalUncheckedCreateWithoutStateInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  name?: string | null
  serviceAccountId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sessions?: Prisma.TerminalSessionUncheckedCreateNestedManyWithoutTerminalInput
  artifacts?: Prisma.ArtifactUncheckedCreateNestedManyWithoutTerminalsInput
}

export type TerminalCreateOrConnectWithoutStateInput = {
  where: Prisma.TerminalWhereUniqueInput
  create: Prisma.XOR<Prisma.TerminalCreateWithoutStateInput, Prisma.TerminalUncheckedCreateWithoutStateInput>
}

export type TerminalCreateManyStateInputEnvelope = {
  data: Prisma.TerminalCreateManyStateInput | Prisma.TerminalCreateManyStateInput[]
}

export type TerminalUpsertWithWhereUniqueWithoutStateInput = {
  where: Prisma.TerminalWhereUniqueInput
  update: Prisma.XOR<Prisma.TerminalUpdateWithoutStateInput, Prisma.TerminalUncheckedUpdateWithoutStateInput>
  create: Prisma.XOR<Prisma.TerminalCreateWithoutStateInput, Prisma.TerminalUncheckedCreateWithoutStateInput>
}

export type TerminalUpdateWithWhereUniqueWithoutStateInput = {
  where: Prisma.TerminalWhereUniqueInput
  data: Prisma.XOR<Prisma.TerminalUpdateWithoutStateInput, Prisma.TerminalUncheckedUpdateWithoutStateInput>
}

export type TerminalUpdateManyWithWhereWithoutStateInput = {
  where: Prisma.TerminalScalarWhereInput
  data: Prisma.XOR<Prisma.TerminalUpdateManyMutationInput, Prisma.TerminalUncheckedUpdateManyWithoutStateInput>
}

export type TerminalCreateWithoutServiceAccountInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  state?: Prisma.InstanceStateCreateNestedOneWithoutTerminalsInput
  sessions?: Prisma.TerminalSessionCreateNestedManyWithoutTerminalInput
  artifacts?: Prisma.ArtifactCreateNestedManyWithoutTerminalsInput
}

export type TerminalUncheckedCreateWithoutServiceAccountInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  stateId?: string | null
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  sessions?: Prisma.TerminalSessionUncheckedCreateNestedManyWithoutTerminalInput
  artifacts?: Prisma.ArtifactUncheckedCreateNestedManyWithoutTerminalsInput
}

export type TerminalCreateOrConnectWithoutServiceAccountInput = {
  where: Prisma.TerminalWhereUniqueInput
  create: Prisma.XOR<Prisma.TerminalCreateWithoutServiceAccountInput, Prisma.TerminalUncheckedCreateWithoutServiceAccountInput>
}

export type TerminalCreateManyServiceAccountInputEnvelope = {
  data: Prisma.TerminalCreateManyServiceAccountInput | Prisma.TerminalCreateManyServiceAccountInput[]
}

export type TerminalUpsertWithWhereUniqueWithoutServiceAccountInput = {
  where: Prisma.TerminalWhereUniqueInput
  update: Prisma.XOR<Prisma.TerminalUpdateWithoutServiceAccountInput, Prisma.TerminalUncheckedUpdateWithoutServiceAccountInput>
  create: Prisma.XOR<Prisma.TerminalCreateWithoutServiceAccountInput, Prisma.TerminalUncheckedCreateWithoutServiceAccountInput>
}

export type TerminalUpdateWithWhereUniqueWithoutServiceAccountInput = {
  where: Prisma.TerminalWhereUniqueInput
  data: Prisma.XOR<Prisma.TerminalUpdateWithoutServiceAccountInput, Prisma.TerminalUncheckedUpdateWithoutServiceAccountInput>
}

export type TerminalUpdateManyWithWhereWithoutServiceAccountInput = {
  where: Prisma.TerminalScalarWhereInput
  data: Prisma.XOR<Prisma.TerminalUpdateManyMutationInput, Prisma.TerminalUncheckedUpdateManyWithoutServiceAccountInput>
}

export type TerminalCreateWithoutSessionsInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  state?: Prisma.InstanceStateCreateNestedOneWithoutTerminalsInput
  serviceAccount?: Prisma.ServiceAccountCreateNestedOneWithoutTerminalsInput
  artifacts?: Prisma.ArtifactCreateNestedManyWithoutTerminalsInput
}

export type TerminalUncheckedCreateWithoutSessionsInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  stateId?: string | null
  name?: string | null
  serviceAccountId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  artifacts?: Prisma.ArtifactUncheckedCreateNestedManyWithoutTerminalsInput
}

export type TerminalCreateOrConnectWithoutSessionsInput = {
  where: Prisma.TerminalWhereUniqueInput
  create: Prisma.XOR<Prisma.TerminalCreateWithoutSessionsInput, Prisma.TerminalUncheckedCreateWithoutSessionsInput>
}

export type TerminalUpsertWithoutSessionsInput = {
  update: Prisma.XOR<Prisma.TerminalUpdateWithoutSessionsInput, Prisma.TerminalUncheckedUpdateWithoutSessionsInput>
  create: Prisma.XOR<Prisma.TerminalCreateWithoutSessionsInput, Prisma.TerminalUncheckedCreateWithoutSessionsInput>
  where?: Prisma.TerminalWhereInput
}

export type TerminalUpdateToOneWithWhereWithoutSessionsInput = {
  where?: Prisma.TerminalWhereInput
  data: Prisma.XOR<Prisma.TerminalUpdateWithoutSessionsInput, Prisma.TerminalUncheckedUpdateWithoutSessionsInput>
}

export type TerminalUpdateWithoutSessionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.InstanceStateUpdateOneWithoutTerminalsNestedInput
  serviceAccount?: Prisma.ServiceAccountUpdateOneWithoutTerminalsNestedInput
  artifacts?: Prisma.ArtifactUpdateManyWithoutTerminalsNestedInput
}

export type TerminalUncheckedUpdateWithoutSessionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  artifacts?: Prisma.ArtifactUncheckedUpdateManyWithoutTerminalsNestedInput
}

export type TerminalUpdateWithoutArtifactsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.InstanceStateUpdateOneWithoutTerminalsNestedInput
  serviceAccount?: Prisma.ServiceAccountUpdateOneWithoutTerminalsNestedInput
  sessions?: Prisma.TerminalSessionUpdateManyWithoutTerminalNestedInput
}

export type TerminalUncheckedUpdateWithoutArtifactsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sessions?: Prisma.TerminalSessionUncheckedUpdateManyWithoutTerminalNestedInput
}

export type TerminalUncheckedUpdateManyWithoutArtifactsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TerminalCreateManyStateInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  name?: string | null
  serviceAccountId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TerminalUpdateWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  serviceAccount?: Prisma.ServiceAccountUpdateOneWithoutTerminalsNestedInput
  sessions?: Prisma.TerminalSessionUpdateManyWithoutTerminalNestedInput
  artifacts?: Prisma.ArtifactUpdateManyWithoutTerminalsNestedInput
}

export type TerminalUncheckedUpdateWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sessions?: Prisma.TerminalSessionUncheckedUpdateManyWithoutTerminalNestedInput
  artifacts?: Prisma.ArtifactUncheckedUpdateManyWithoutTerminalsNestedInput
}

export type TerminalUncheckedUpdateManyWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  serviceAccountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TerminalCreateManyServiceAccountInput = {
  id?: string
  meta: PrismaJson.GlobalCommonObjectMeta
  status?: $Enums.TerminalStatus
  spec: PrismaJson.TerminalSpec
  stateId?: string | null
  name?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TerminalUpdateWithoutServiceAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.InstanceStateUpdateOneWithoutTerminalsNestedInput
  sessions?: Prisma.TerminalSessionUpdateManyWithoutTerminalNestedInput
  artifacts?: Prisma.ArtifactUpdateManyWithoutTerminalsNestedInput
}

export type TerminalUncheckedUpdateWithoutServiceAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.GlobalCommonObjectMeta
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: PrismaJson.TerminalSpec
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  sessions?: Prisma.TerminalSessionUncheckedUpdateManyWithoutTerminalNestedInput
  artifacts?: Prisma.ArtifactUncheckedUpdateManyWithoutTerminalsNestedInput
}

export type TerminalUncheckedUpdateManyWithoutServiceAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.EnumTerminalStatusFieldUpdateOperationsInput | $Enums.TerminalStatus
  spec?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type TerminalCountOutputType
 */

export type TerminalCountOutputType = {
  sessions: number
  artifacts: number
}

export type TerminalCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  sessions?: boolean | TerminalCountOutputTypeCountSessionsArgs
  artifacts?: boolean | TerminalCountOutputTypeCountArtifactsArgs
}

/**
 * TerminalCountOutputType without action
 */
export type TerminalCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalCountOutputType
   */
  select?: Prisma.TerminalCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TerminalCountOutputType without action
 */
export type TerminalCountOutputTypeCountSessionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TerminalSessionWhereInput
}

/**
 * TerminalCountOutputType without action
 */
export type TerminalCountOutputTypeCountArtifactsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ArtifactWhereInput
}


export type TerminalSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  status?: boolean
  spec?: boolean
  stateId?: boolean
  name?: boolean
  serviceAccountId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  state?: boolean | Prisma.Terminal$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Terminal$serviceAccountArgs<ExtArgs>
  sessions?: boolean | Prisma.Terminal$sessionsArgs<ExtArgs>
  artifacts?: boolean | Prisma.Terminal$artifactsArgs<ExtArgs>
  _count?: boolean | Prisma.TerminalCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["terminal"]>

export type TerminalSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  status?: boolean
  spec?: boolean
  stateId?: boolean
  name?: boolean
  serviceAccountId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  state?: boolean | Prisma.Terminal$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Terminal$serviceAccountArgs<ExtArgs>
}, ExtArgs["result"]["terminal"]>

export type TerminalSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  status?: boolean
  spec?: boolean
  stateId?: boolean
  name?: boolean
  serviceAccountId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  state?: boolean | Prisma.Terminal$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Terminal$serviceAccountArgs<ExtArgs>
}, ExtArgs["result"]["terminal"]>

export type TerminalSelectScalar = {
  id?: boolean
  meta?: boolean
  status?: boolean
  spec?: boolean
  stateId?: boolean
  name?: boolean
  serviceAccountId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TerminalOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meta" | "status" | "spec" | "stateId" | "name" | "serviceAccountId" | "createdAt" | "updatedAt", ExtArgs["result"]["terminal"]>
export type TerminalInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.Terminal$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Terminal$serviceAccountArgs<ExtArgs>
  sessions?: boolean | Prisma.Terminal$sessionsArgs<ExtArgs>
  artifacts?: boolean | Prisma.Terminal$artifactsArgs<ExtArgs>
  _count?: boolean | Prisma.TerminalCountOutputTypeDefaultArgs<ExtArgs>
}
export type TerminalIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.Terminal$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Terminal$serviceAccountArgs<ExtArgs>
}
export type TerminalIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.Terminal$stateArgs<ExtArgs>
  serviceAccount?: boolean | Prisma.Terminal$serviceAccountArgs<ExtArgs>
}

export type $TerminalPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Terminal"
  objects: {
    /**
     * The instance this terminal belongs to.
     */
    state: Prisma.$InstanceStatePayload<ExtArgs> | null
    /**
     * The service account this terminal belongs to.
     */
    serviceAccount: Prisma.$ServiceAccountPayload<ExtArgs> | null
    /**
     * The terminal sessions associated with this terminal.
     */
    sessions: Prisma.$TerminalSessionPayload<ExtArgs>[]
    /**
     * The artifacts used by this terminal.
     */
    artifacts: Prisma.$ArtifactPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the terminal.
     */
    id: string
    /**
     * The metadata of the terminal managed by the backend.
     * 
     * [GlobalCommonObjectMeta]
     */
    meta: PrismaJson.GlobalCommonObjectMeta
    /**
     * The status of the terminal.
     */
    status: $Enums.TerminalStatus
    /**
     * The specification for creating the container that powers this terminal.
     * 
     * Includes image, command, working directory, environment variables, and files.
     * 
     * [TerminalSpec]
     */
    spec: PrismaJson.TerminalSpec
    /**
     * The ID of the instance state owning this terminal.
     */
    stateId: string | null
    /**
     * The name of the terminal within the instance.
     * 
     * Will be null if the terminal is not owned by an instance.
     */
    name: string | null
    /**
     * The ID of the service account owning this terminal.
     */
    serviceAccountId: string | null
    /**
     * The time when the terminal was created.
     */
    createdAt: Date
    /**
     * The time when the terminal was last updated.
     */
    updatedAt: Date
  }, ExtArgs["result"]["terminal"]>
  composites: {}
}

export type TerminalGetPayload<S extends boolean | null | undefined | TerminalDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TerminalPayload, S>

export type TerminalCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TerminalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TerminalCountAggregateInputType | true
  }

export interface TerminalDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Terminal'], meta: { name: 'Terminal' } }
  /**
   * Find zero or one Terminal that matches the filter.
   * @param {TerminalFindUniqueArgs} args - Arguments to find a Terminal
   * @example
   * // Get one Terminal
   * const terminal = await prisma.terminal.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TerminalFindUniqueArgs>(args: Prisma.SelectSubset<T, TerminalFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TerminalClient<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Terminal that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TerminalFindUniqueOrThrowArgs} args - Arguments to find a Terminal
   * @example
   * // Get one Terminal
   * const terminal = await prisma.terminal.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TerminalFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TerminalFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TerminalClient<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Terminal that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalFindFirstArgs} args - Arguments to find a Terminal
   * @example
   * // Get one Terminal
   * const terminal = await prisma.terminal.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TerminalFindFirstArgs>(args?: Prisma.SelectSubset<T, TerminalFindFirstArgs<ExtArgs>>): Prisma.Prisma__TerminalClient<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Terminal that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalFindFirstOrThrowArgs} args - Arguments to find a Terminal
   * @example
   * // Get one Terminal
   * const terminal = await prisma.terminal.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TerminalFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TerminalFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TerminalClient<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Terminals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Terminals
   * const terminals = await prisma.terminal.findMany()
   * 
   * // Get first 10 Terminals
   * const terminals = await prisma.terminal.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const terminalWithIdOnly = await prisma.terminal.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TerminalFindManyArgs>(args?: Prisma.SelectSubset<T, TerminalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Terminal.
   * @param {TerminalCreateArgs} args - Arguments to create a Terminal.
   * @example
   * // Create one Terminal
   * const Terminal = await prisma.terminal.create({
   *   data: {
   *     // ... data to create a Terminal
   *   }
   * })
   * 
   */
  create<T extends TerminalCreateArgs>(args: Prisma.SelectSubset<T, TerminalCreateArgs<ExtArgs>>): Prisma.Prisma__TerminalClient<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Terminals.
   * @param {TerminalCreateManyArgs} args - Arguments to create many Terminals.
   * @example
   * // Create many Terminals
   * const terminal = await prisma.terminal.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TerminalCreateManyArgs>(args?: Prisma.SelectSubset<T, TerminalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Terminals and returns the data saved in the database.
   * @param {TerminalCreateManyAndReturnArgs} args - Arguments to create many Terminals.
   * @example
   * // Create many Terminals
   * const terminal = await prisma.terminal.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Terminals and only return the `id`
   * const terminalWithIdOnly = await prisma.terminal.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TerminalCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TerminalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Terminal.
   * @param {TerminalDeleteArgs} args - Arguments to delete one Terminal.
   * @example
   * // Delete one Terminal
   * const Terminal = await prisma.terminal.delete({
   *   where: {
   *     // ... filter to delete one Terminal
   *   }
   * })
   * 
   */
  delete<T extends TerminalDeleteArgs>(args: Prisma.SelectSubset<T, TerminalDeleteArgs<ExtArgs>>): Prisma.Prisma__TerminalClient<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Terminal.
   * @param {TerminalUpdateArgs} args - Arguments to update one Terminal.
   * @example
   * // Update one Terminal
   * const terminal = await prisma.terminal.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TerminalUpdateArgs>(args: Prisma.SelectSubset<T, TerminalUpdateArgs<ExtArgs>>): Prisma.Prisma__TerminalClient<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Terminals.
   * @param {TerminalDeleteManyArgs} args - Arguments to filter Terminals to delete.
   * @example
   * // Delete a few Terminals
   * const { count } = await prisma.terminal.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TerminalDeleteManyArgs>(args?: Prisma.SelectSubset<T, TerminalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Terminals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Terminals
   * const terminal = await prisma.terminal.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TerminalUpdateManyArgs>(args: Prisma.SelectSubset<T, TerminalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Terminals and returns the data updated in the database.
   * @param {TerminalUpdateManyAndReturnArgs} args - Arguments to update many Terminals.
   * @example
   * // Update many Terminals
   * const terminal = await prisma.terminal.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Terminals and only return the `id`
   * const terminalWithIdOnly = await prisma.terminal.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TerminalUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TerminalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Terminal.
   * @param {TerminalUpsertArgs} args - Arguments to update or create a Terminal.
   * @example
   * // Update or create a Terminal
   * const terminal = await prisma.terminal.upsert({
   *   create: {
   *     // ... data to create a Terminal
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Terminal we want to update
   *   }
   * })
   */
  upsert<T extends TerminalUpsertArgs>(args: Prisma.SelectSubset<T, TerminalUpsertArgs<ExtArgs>>): Prisma.Prisma__TerminalClient<runtime.Types.Result.GetResult<Prisma.$TerminalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Terminals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalCountArgs} args - Arguments to filter Terminals to count.
   * @example
   * // Count the number of Terminals
   * const count = await prisma.terminal.count({
   *   where: {
   *     // ... the filter for the Terminals we want to count
   *   }
   * })
  **/
  count<T extends TerminalCountArgs>(
    args?: Prisma.Subset<T, TerminalCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TerminalCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Terminal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TerminalAggregateArgs>(args: Prisma.Subset<T, TerminalAggregateArgs>): Prisma.PrismaPromise<GetTerminalAggregateType<T>>

  /**
   * Group by Terminal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TerminalGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TerminalGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TerminalGroupByArgs['orderBy'] }
      : { orderBy?: TerminalGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TerminalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTerminalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Terminal model
 */
readonly fields: TerminalFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Terminal.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TerminalClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  state<T extends Prisma.Terminal$stateArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Terminal$stateArgs<ExtArgs>>): Prisma.Prisma__InstanceStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  serviceAccount<T extends Prisma.Terminal$serviceAccountArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Terminal$serviceAccountArgs<ExtArgs>>): Prisma.Prisma__ServiceAccountClient<runtime.Types.Result.GetResult<Prisma.$ServiceAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  sessions<T extends Prisma.Terminal$sessionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Terminal$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TerminalSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  artifacts<T extends Prisma.Terminal$artifactsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Terminal$artifactsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ArtifactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Terminal model
 */
export interface TerminalFieldRefs {
  readonly id: Prisma.FieldRef<"Terminal", 'String'>
  readonly meta: Prisma.FieldRef<"Terminal", 'Json'>
  readonly status: Prisma.FieldRef<"Terminal", 'TerminalStatus'>
  readonly spec: Prisma.FieldRef<"Terminal", 'Json'>
  readonly stateId: Prisma.FieldRef<"Terminal", 'String'>
  readonly name: Prisma.FieldRef<"Terminal", 'String'>
  readonly serviceAccountId: Prisma.FieldRef<"Terminal", 'String'>
  readonly createdAt: Prisma.FieldRef<"Terminal", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Terminal", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Terminal findUnique
 */
export type TerminalFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalInclude<ExtArgs> | null
  /**
   * Filter, which Terminal to fetch.
   */
  where: Prisma.TerminalWhereUniqueInput
}

/**
 * Terminal findUniqueOrThrow
 */
export type TerminalFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalInclude<ExtArgs> | null
  /**
   * Filter, which Terminal to fetch.
   */
  where: Prisma.TerminalWhereUniqueInput
}

/**
 * Terminal findFirst
 */
export type TerminalFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalInclude<ExtArgs> | null
  /**
   * Filter, which Terminal to fetch.
   */
  where?: Prisma.TerminalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terminals to fetch.
   */
  orderBy?: Prisma.TerminalOrderByWithRelationInput | Prisma.TerminalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Terminals.
   */
  cursor?: Prisma.TerminalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terminals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terminals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Terminals.
   */
  distinct?: Prisma.TerminalScalarFieldEnum | Prisma.TerminalScalarFieldEnum[]
}

/**
 * Terminal findFirstOrThrow
 */
export type TerminalFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalInclude<ExtArgs> | null
  /**
   * Filter, which Terminal to fetch.
   */
  where?: Prisma.TerminalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terminals to fetch.
   */
  orderBy?: Prisma.TerminalOrderByWithRelationInput | Prisma.TerminalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Terminals.
   */
  cursor?: Prisma.TerminalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terminals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terminals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Terminals.
   */
  distinct?: Prisma.TerminalScalarFieldEnum | Prisma.TerminalScalarFieldEnum[]
}

/**
 * Terminal findMany
 */
export type TerminalFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalInclude<ExtArgs> | null
  /**
   * Filter, which Terminals to fetch.
   */
  where?: Prisma.TerminalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Terminals to fetch.
   */
  orderBy?: Prisma.TerminalOrderByWithRelationInput | Prisma.TerminalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Terminals.
   */
  cursor?: Prisma.TerminalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Terminals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Terminals.
   */
  skip?: number
  distinct?: Prisma.TerminalScalarFieldEnum | Prisma.TerminalScalarFieldEnum[]
}

/**
 * Terminal create
 */
export type TerminalCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalInclude<ExtArgs> | null
  /**
   * The data needed to create a Terminal.
   */
  data: Prisma.XOR<Prisma.TerminalCreateInput, Prisma.TerminalUncheckedCreateInput>
}

/**
 * Terminal createMany
 */
export type TerminalCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Terminals.
   */
  data: Prisma.TerminalCreateManyInput | Prisma.TerminalCreateManyInput[]
}

/**
 * Terminal createManyAndReturn
 */
export type TerminalCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * The data used to create many Terminals.
   */
  data: Prisma.TerminalCreateManyInput | Prisma.TerminalCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Terminal update
 */
export type TerminalUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalInclude<ExtArgs> | null
  /**
   * The data needed to update a Terminal.
   */
  data: Prisma.XOR<Prisma.TerminalUpdateInput, Prisma.TerminalUncheckedUpdateInput>
  /**
   * Choose, which Terminal to update.
   */
  where: Prisma.TerminalWhereUniqueInput
}

/**
 * Terminal updateMany
 */
export type TerminalUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Terminals.
   */
  data: Prisma.XOR<Prisma.TerminalUpdateManyMutationInput, Prisma.TerminalUncheckedUpdateManyInput>
  /**
   * Filter which Terminals to update
   */
  where?: Prisma.TerminalWhereInput
  /**
   * Limit how many Terminals to update.
   */
  limit?: number
}

/**
 * Terminal updateManyAndReturn
 */
export type TerminalUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * The data used to update Terminals.
   */
  data: Prisma.XOR<Prisma.TerminalUpdateManyMutationInput, Prisma.TerminalUncheckedUpdateManyInput>
  /**
   * Filter which Terminals to update
   */
  where?: Prisma.TerminalWhereInput
  /**
   * Limit how many Terminals to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Terminal upsert
 */
export type TerminalUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalInclude<ExtArgs> | null
  /**
   * The filter to search for the Terminal to update in case it exists.
   */
  where: Prisma.TerminalWhereUniqueInput
  /**
   * In case the Terminal found by the `where` argument doesn't exist, create a new Terminal with this data.
   */
  create: Prisma.XOR<Prisma.TerminalCreateInput, Prisma.TerminalUncheckedCreateInput>
  /**
   * In case the Terminal was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TerminalUpdateInput, Prisma.TerminalUncheckedUpdateInput>
}

/**
 * Terminal delete
 */
export type TerminalDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalInclude<ExtArgs> | null
  /**
   * Filter which Terminal to delete.
   */
  where: Prisma.TerminalWhereUniqueInput
}

/**
 * Terminal deleteMany
 */
export type TerminalDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Terminals to delete
   */
  where?: Prisma.TerminalWhereInput
  /**
   * Limit how many Terminals to delete.
   */
  limit?: number
}

/**
 * Terminal.state
 */
export type Terminal$stateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceState
   */
  select?: Prisma.InstanceStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceState
   */
  omit?: Prisma.InstanceStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceStateInclude<ExtArgs> | null
  where?: Prisma.InstanceStateWhereInput
}

/**
 * Terminal.serviceAccount
 */
export type Terminal$serviceAccountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceAccount
   */
  select?: Prisma.ServiceAccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceAccount
   */
  omit?: Prisma.ServiceAccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceAccountInclude<ExtArgs> | null
  where?: Prisma.ServiceAccountWhereInput
}

/**
 * Terminal.sessions
 */
export type Terminal$sessionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TerminalSession
   */
  select?: Prisma.TerminalSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TerminalSession
   */
  omit?: Prisma.TerminalSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalSessionInclude<ExtArgs> | null
  where?: Prisma.TerminalSessionWhereInput
  orderBy?: Prisma.TerminalSessionOrderByWithRelationInput | Prisma.TerminalSessionOrderByWithRelationInput[]
  cursor?: Prisma.TerminalSessionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TerminalSessionScalarFieldEnum | Prisma.TerminalSessionScalarFieldEnum[]
}

/**
 * Terminal.artifacts
 */
export type Terminal$artifactsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Artifact
   */
  select?: Prisma.ArtifactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Artifact
   */
  omit?: Prisma.ArtifactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArtifactInclude<ExtArgs> | null
  where?: Prisma.ArtifactWhereInput
  orderBy?: Prisma.ArtifactOrderByWithRelationInput | Prisma.ArtifactOrderByWithRelationInput[]
  cursor?: Prisma.ArtifactWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ArtifactScalarFieldEnum | Prisma.ArtifactScalarFieldEnum[]
}

/**
 * Terminal without action
 */
export type TerminalDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Terminal
   */
  select?: Prisma.TerminalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Terminal
   */
  omit?: Prisma.TerminalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TerminalInclude<ExtArgs> | null
}
