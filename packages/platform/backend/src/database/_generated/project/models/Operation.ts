
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Operation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Operation
 * 
 */
export type OperationModel = runtime.Types.Result.DefaultSelection<Prisma.$OperationPayload>

export type AggregateOperation = {
  _count: OperationCountAggregateOutputType | null
  _min: OperationMinAggregateOutputType | null
  _max: OperationMaxAggregateOutputType | null
}

export type OperationMinAggregateOutputType = {
  id: string | null
  type: $Enums.OperationType | null
  status: $Enums.OperationStatus | null
  startedAt: Date | null
  updatedAt: Date | null
  finishedAt: Date | null
}

export type OperationMaxAggregateOutputType = {
  id: string | null
  type: $Enums.OperationType | null
  status: $Enums.OperationStatus | null
  startedAt: Date | null
  updatedAt: Date | null
  finishedAt: Date | null
}

export type OperationCountAggregateOutputType = {
  id: number
  meta: number
  type: number
  status: number
  options: number
  requestedInstanceIds: number
  phases: number
  startedAt: number
  updatedAt: number
  finishedAt: number
  _all: number
}


export type OperationMinAggregateInputType = {
  id?: true
  type?: true
  status?: true
  startedAt?: true
  updatedAt?: true
  finishedAt?: true
}

export type OperationMaxAggregateInputType = {
  id?: true
  type?: true
  status?: true
  startedAt?: true
  updatedAt?: true
  finishedAt?: true
}

export type OperationCountAggregateInputType = {
  id?: true
  meta?: true
  type?: true
  status?: true
  options?: true
  requestedInstanceIds?: true
  phases?: true
  startedAt?: true
  updatedAt?: true
  finishedAt?: true
  _all?: true
}

export type OperationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Operation to aggregate.
   */
  where?: Prisma.OperationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Operations to fetch.
   */
  orderBy?: Prisma.OperationOrderByWithRelationInput | Prisma.OperationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OperationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Operations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Operations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Operations
  **/
  _count?: true | OperationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OperationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OperationMaxAggregateInputType
}

export type GetOperationAggregateType<T extends OperationAggregateArgs> = {
      [P in keyof T & keyof AggregateOperation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOperation[P]>
    : Prisma.GetScalarType<T[P], AggregateOperation[P]>
}




export type OperationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OperationWhereInput
  orderBy?: Prisma.OperationOrderByWithAggregationInput | Prisma.OperationOrderByWithAggregationInput[]
  by: Prisma.OperationScalarFieldEnum[] | Prisma.OperationScalarFieldEnum
  having?: Prisma.OperationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OperationCountAggregateInputType | true
  _min?: OperationMinAggregateInputType
  _max?: OperationMaxAggregateInputType
}

export type OperationGroupByOutputType = {
  id: string
  meta: PrismaJson.OperationMeta
  type: $Enums.OperationType
  status: $Enums.OperationStatus
  options: PrismaJson.OperationOptions
  requestedInstanceIds: PrismaJson.InstanceIds
  phases: PrismaJson.OperationPhase[] | null
  startedAt: Date
  updatedAt: Date
  finishedAt: Date | null
  _count: OperationCountAggregateOutputType | null
  _min: OperationMinAggregateOutputType | null
  _max: OperationMaxAggregateOutputType | null
}

type GetOperationGroupByPayload<T extends OperationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OperationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OperationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OperationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OperationGroupByOutputType[P]>
      }
    >
  >



export type OperationWhereInput = {
  AND?: Prisma.OperationWhereInput | Prisma.OperationWhereInput[]
  OR?: Prisma.OperationWhereInput[]
  NOT?: Prisma.OperationWhereInput | Prisma.OperationWhereInput[]
  id?: Prisma.StringFilter<"Operation"> | string
  meta?: Prisma.JsonFilter<"Operation">
  type?: Prisma.EnumOperationTypeFilter<"Operation"> | $Enums.OperationType
  status?: Prisma.EnumOperationStatusFilter<"Operation"> | $Enums.OperationStatus
  options?: Prisma.JsonFilter<"Operation">
  requestedInstanceIds?: Prisma.JsonFilter<"Operation">
  phases?: Prisma.JsonNullableFilter<"Operation">
  startedAt?: Prisma.DateTimeFilter<"Operation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Operation"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"Operation"> | Date | string | null
  operationStates?: Prisma.InstanceOperationStateListRelationFilter
  logs?: Prisma.OperationLogListRelationFilter
}

export type OperationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  options?: Prisma.SortOrder
  requestedInstanceIds?: Prisma.SortOrder
  phases?: Prisma.SortOrderInput | Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  operationStates?: Prisma.InstanceOperationStateOrderByRelationAggregateInput
  logs?: Prisma.OperationLogOrderByRelationAggregateInput
}

export type OperationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.OperationWhereInput | Prisma.OperationWhereInput[]
  OR?: Prisma.OperationWhereInput[]
  NOT?: Prisma.OperationWhereInput | Prisma.OperationWhereInput[]
  meta?: Prisma.JsonFilter<"Operation">
  type?: Prisma.EnumOperationTypeFilter<"Operation"> | $Enums.OperationType
  status?: Prisma.EnumOperationStatusFilter<"Operation"> | $Enums.OperationStatus
  options?: Prisma.JsonFilter<"Operation">
  requestedInstanceIds?: Prisma.JsonFilter<"Operation">
  phases?: Prisma.JsonNullableFilter<"Operation">
  startedAt?: Prisma.DateTimeFilter<"Operation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Operation"> | Date | string
  finishedAt?: Prisma.DateTimeNullableFilter<"Operation"> | Date | string | null
  operationStates?: Prisma.InstanceOperationStateListRelationFilter
  logs?: Prisma.OperationLogListRelationFilter
}, "id">

export type OperationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  options?: Prisma.SortOrder
  requestedInstanceIds?: Prisma.SortOrder
  phases?: Prisma.SortOrderInput | Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.OperationCountOrderByAggregateInput
  _max?: Prisma.OperationMaxOrderByAggregateInput
  _min?: Prisma.OperationMinOrderByAggregateInput
}

export type OperationScalarWhereWithAggregatesInput = {
  AND?: Prisma.OperationScalarWhereWithAggregatesInput | Prisma.OperationScalarWhereWithAggregatesInput[]
  OR?: Prisma.OperationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OperationScalarWhereWithAggregatesInput | Prisma.OperationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Operation"> | string
  meta?: Prisma.JsonWithAggregatesFilter<"Operation">
  type?: Prisma.EnumOperationTypeWithAggregatesFilter<"Operation"> | $Enums.OperationType
  status?: Prisma.EnumOperationStatusWithAggregatesFilter<"Operation"> | $Enums.OperationStatus
  options?: Prisma.JsonWithAggregatesFilter<"Operation">
  requestedInstanceIds?: Prisma.JsonWithAggregatesFilter<"Operation">
  phases?: Prisma.JsonNullableWithAggregatesFilter<"Operation">
  startedAt?: Prisma.DateTimeWithAggregatesFilter<"Operation"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Operation"> | Date | string
  finishedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Operation"> | Date | string | null
}

export type OperationCreateInput = {
  id?: string
  meta: PrismaJson.OperationMeta
  type: $Enums.OperationType
  status?: $Enums.OperationStatus
  options: PrismaJson.OperationOptions
  requestedInstanceIds: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Date | string
  updatedAt?: Date | string
  finishedAt?: Date | string | null
  operationStates?: Prisma.InstanceOperationStateCreateNestedManyWithoutOperationInput
  logs?: Prisma.OperationLogCreateNestedManyWithoutOperationInput
}

export type OperationUncheckedCreateInput = {
  id?: string
  meta: PrismaJson.OperationMeta
  type: $Enums.OperationType
  status?: $Enums.OperationStatus
  options: PrismaJson.OperationOptions
  requestedInstanceIds: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Date | string
  updatedAt?: Date | string
  finishedAt?: Date | string | null
  operationStates?: Prisma.InstanceOperationStateUncheckedCreateNestedManyWithoutOperationInput
  logs?: Prisma.OperationLogUncheckedCreateNestedManyWithoutOperationInput
}

export type OperationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.OperationMeta
  type?: Prisma.EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
  status?: Prisma.EnumOperationStatusFieldUpdateOperationsInput | $Enums.OperationStatus
  options?: PrismaJson.OperationOptions
  requestedInstanceIds?: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  operationStates?: Prisma.InstanceOperationStateUpdateManyWithoutOperationNestedInput
  logs?: Prisma.OperationLogUpdateManyWithoutOperationNestedInput
}

export type OperationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.OperationMeta
  type?: Prisma.EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
  status?: Prisma.EnumOperationStatusFieldUpdateOperationsInput | $Enums.OperationStatus
  options?: PrismaJson.OperationOptions
  requestedInstanceIds?: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  operationStates?: Prisma.InstanceOperationStateUncheckedUpdateManyWithoutOperationNestedInput
  logs?: Prisma.OperationLogUncheckedUpdateManyWithoutOperationNestedInput
}

export type OperationCreateManyInput = {
  id?: string
  meta: PrismaJson.OperationMeta
  type: $Enums.OperationType
  status?: $Enums.OperationStatus
  options: PrismaJson.OperationOptions
  requestedInstanceIds: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Date | string
  updatedAt?: Date | string
  finishedAt?: Date | string | null
}

export type OperationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.OperationMeta
  type?: Prisma.EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
  status?: Prisma.EnumOperationStatusFieldUpdateOperationsInput | $Enums.OperationStatus
  options?: PrismaJson.OperationOptions
  requestedInstanceIds?: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type OperationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.OperationMeta
  type?: Prisma.EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
  status?: Prisma.EnumOperationStatusFieldUpdateOperationsInput | $Enums.OperationStatus
  options?: PrismaJson.OperationOptions
  requestedInstanceIds?: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type OperationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  options?: Prisma.SortOrder
  requestedInstanceIds?: Prisma.SortOrder
  phases?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
}

export type OperationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
}

export type OperationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  finishedAt?: Prisma.SortOrder
}

export type OperationScalarRelationFilter = {
  is?: Prisma.OperationWhereInput
  isNot?: Prisma.OperationWhereInput
}

export type EnumOperationTypeFieldUpdateOperationsInput = {
  set?: $Enums.OperationType
}

export type EnumOperationStatusFieldUpdateOperationsInput = {
  set?: $Enums.OperationStatus
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type OperationCreateNestedOneWithoutOperationStatesInput = {
  create?: Prisma.XOR<Prisma.OperationCreateWithoutOperationStatesInput, Prisma.OperationUncheckedCreateWithoutOperationStatesInput>
  connectOrCreate?: Prisma.OperationCreateOrConnectWithoutOperationStatesInput
  connect?: Prisma.OperationWhereUniqueInput
}

export type OperationUpdateOneRequiredWithoutOperationStatesNestedInput = {
  create?: Prisma.XOR<Prisma.OperationCreateWithoutOperationStatesInput, Prisma.OperationUncheckedCreateWithoutOperationStatesInput>
  connectOrCreate?: Prisma.OperationCreateOrConnectWithoutOperationStatesInput
  upsert?: Prisma.OperationUpsertWithoutOperationStatesInput
  connect?: Prisma.OperationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OperationUpdateToOneWithWhereWithoutOperationStatesInput, Prisma.OperationUpdateWithoutOperationStatesInput>, Prisma.OperationUncheckedUpdateWithoutOperationStatesInput>
}

export type OperationCreateNestedOneWithoutLogsInput = {
  create?: Prisma.XOR<Prisma.OperationCreateWithoutLogsInput, Prisma.OperationUncheckedCreateWithoutLogsInput>
  connectOrCreate?: Prisma.OperationCreateOrConnectWithoutLogsInput
  connect?: Prisma.OperationWhereUniqueInput
}

export type OperationUpdateOneRequiredWithoutLogsNestedInput = {
  create?: Prisma.XOR<Prisma.OperationCreateWithoutLogsInput, Prisma.OperationUncheckedCreateWithoutLogsInput>
  connectOrCreate?: Prisma.OperationCreateOrConnectWithoutLogsInput
  upsert?: Prisma.OperationUpsertWithoutLogsInput
  connect?: Prisma.OperationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OperationUpdateToOneWithWhereWithoutLogsInput, Prisma.OperationUpdateWithoutLogsInput>, Prisma.OperationUncheckedUpdateWithoutLogsInput>
}

export type OperationCreateWithoutOperationStatesInput = {
  id?: string
  meta: PrismaJson.OperationMeta
  type: $Enums.OperationType
  status?: $Enums.OperationStatus
  options: PrismaJson.OperationOptions
  requestedInstanceIds: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Date | string
  updatedAt?: Date | string
  finishedAt?: Date | string | null
  logs?: Prisma.OperationLogCreateNestedManyWithoutOperationInput
}

export type OperationUncheckedCreateWithoutOperationStatesInput = {
  id?: string
  meta: PrismaJson.OperationMeta
  type: $Enums.OperationType
  status?: $Enums.OperationStatus
  options: PrismaJson.OperationOptions
  requestedInstanceIds: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Date | string
  updatedAt?: Date | string
  finishedAt?: Date | string | null
  logs?: Prisma.OperationLogUncheckedCreateNestedManyWithoutOperationInput
}

export type OperationCreateOrConnectWithoutOperationStatesInput = {
  where: Prisma.OperationWhereUniqueInput
  create: Prisma.XOR<Prisma.OperationCreateWithoutOperationStatesInput, Prisma.OperationUncheckedCreateWithoutOperationStatesInput>
}

export type OperationUpsertWithoutOperationStatesInput = {
  update: Prisma.XOR<Prisma.OperationUpdateWithoutOperationStatesInput, Prisma.OperationUncheckedUpdateWithoutOperationStatesInput>
  create: Prisma.XOR<Prisma.OperationCreateWithoutOperationStatesInput, Prisma.OperationUncheckedCreateWithoutOperationStatesInput>
  where?: Prisma.OperationWhereInput
}

export type OperationUpdateToOneWithWhereWithoutOperationStatesInput = {
  where?: Prisma.OperationWhereInput
  data: Prisma.XOR<Prisma.OperationUpdateWithoutOperationStatesInput, Prisma.OperationUncheckedUpdateWithoutOperationStatesInput>
}

export type OperationUpdateWithoutOperationStatesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.OperationMeta
  type?: Prisma.EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
  status?: Prisma.EnumOperationStatusFieldUpdateOperationsInput | $Enums.OperationStatus
  options?: PrismaJson.OperationOptions
  requestedInstanceIds?: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  logs?: Prisma.OperationLogUpdateManyWithoutOperationNestedInput
}

export type OperationUncheckedUpdateWithoutOperationStatesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.OperationMeta
  type?: Prisma.EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
  status?: Prisma.EnumOperationStatusFieldUpdateOperationsInput | $Enums.OperationStatus
  options?: PrismaJson.OperationOptions
  requestedInstanceIds?: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  logs?: Prisma.OperationLogUncheckedUpdateManyWithoutOperationNestedInput
}

export type OperationCreateWithoutLogsInput = {
  id?: string
  meta: PrismaJson.OperationMeta
  type: $Enums.OperationType
  status?: $Enums.OperationStatus
  options: PrismaJson.OperationOptions
  requestedInstanceIds: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Date | string
  updatedAt?: Date | string
  finishedAt?: Date | string | null
  operationStates?: Prisma.InstanceOperationStateCreateNestedManyWithoutOperationInput
}

export type OperationUncheckedCreateWithoutLogsInput = {
  id?: string
  meta: PrismaJson.OperationMeta
  type: $Enums.OperationType
  status?: $Enums.OperationStatus
  options: PrismaJson.OperationOptions
  requestedInstanceIds: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Date | string
  updatedAt?: Date | string
  finishedAt?: Date | string | null
  operationStates?: Prisma.InstanceOperationStateUncheckedCreateNestedManyWithoutOperationInput
}

export type OperationCreateOrConnectWithoutLogsInput = {
  where: Prisma.OperationWhereUniqueInput
  create: Prisma.XOR<Prisma.OperationCreateWithoutLogsInput, Prisma.OperationUncheckedCreateWithoutLogsInput>
}

export type OperationUpsertWithoutLogsInput = {
  update: Prisma.XOR<Prisma.OperationUpdateWithoutLogsInput, Prisma.OperationUncheckedUpdateWithoutLogsInput>
  create: Prisma.XOR<Prisma.OperationCreateWithoutLogsInput, Prisma.OperationUncheckedCreateWithoutLogsInput>
  where?: Prisma.OperationWhereInput
}

export type OperationUpdateToOneWithWhereWithoutLogsInput = {
  where?: Prisma.OperationWhereInput
  data: Prisma.XOR<Prisma.OperationUpdateWithoutLogsInput, Prisma.OperationUncheckedUpdateWithoutLogsInput>
}

export type OperationUpdateWithoutLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.OperationMeta
  type?: Prisma.EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
  status?: Prisma.EnumOperationStatusFieldUpdateOperationsInput | $Enums.OperationStatus
  options?: PrismaJson.OperationOptions
  requestedInstanceIds?: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  operationStates?: Prisma.InstanceOperationStateUpdateManyWithoutOperationNestedInput
}

export type OperationUncheckedUpdateWithoutLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.OperationMeta
  type?: Prisma.EnumOperationTypeFieldUpdateOperationsInput | $Enums.OperationType
  status?: Prisma.EnumOperationStatusFieldUpdateOperationsInput | $Enums.OperationStatus
  options?: PrismaJson.OperationOptions
  requestedInstanceIds?: PrismaJson.InstanceIds
  phases?: PrismaJson.OperationPhase[] | Prisma.NullableJsonNullValueInput
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  finishedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  operationStates?: Prisma.InstanceOperationStateUncheckedUpdateManyWithoutOperationNestedInput
}


/**
 * Count Type OperationCountOutputType
 */

export type OperationCountOutputType = {
  operationStates: number
  logs: number
}

export type OperationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operationStates?: boolean | OperationCountOutputTypeCountOperationStatesArgs
  logs?: boolean | OperationCountOutputTypeCountLogsArgs
}

/**
 * OperationCountOutputType without action
 */
export type OperationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationCountOutputType
   */
  select?: Prisma.OperationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * OperationCountOutputType without action
 */
export type OperationCountOutputTypeCountOperationStatesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InstanceOperationStateWhereInput
}

/**
 * OperationCountOutputType without action
 */
export type OperationCountOutputTypeCountLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OperationLogWhereInput
}


export type OperationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  type?: boolean
  status?: boolean
  options?: boolean
  requestedInstanceIds?: boolean
  phases?: boolean
  startedAt?: boolean
  updatedAt?: boolean
  finishedAt?: boolean
  operationStates?: boolean | Prisma.Operation$operationStatesArgs<ExtArgs>
  logs?: boolean | Prisma.Operation$logsArgs<ExtArgs>
  _count?: boolean | Prisma.OperationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["operation"]>

export type OperationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  type?: boolean
  status?: boolean
  options?: boolean
  requestedInstanceIds?: boolean
  phases?: boolean
  startedAt?: boolean
  updatedAt?: boolean
  finishedAt?: boolean
}, ExtArgs["result"]["operation"]>

export type OperationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  type?: boolean
  status?: boolean
  options?: boolean
  requestedInstanceIds?: boolean
  phases?: boolean
  startedAt?: boolean
  updatedAt?: boolean
  finishedAt?: boolean
}, ExtArgs["result"]["operation"]>

export type OperationSelectScalar = {
  id?: boolean
  meta?: boolean
  type?: boolean
  status?: boolean
  options?: boolean
  requestedInstanceIds?: boolean
  phases?: boolean
  startedAt?: boolean
  updatedAt?: boolean
  finishedAt?: boolean
}

export type OperationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meta" | "type" | "status" | "options" | "requestedInstanceIds" | "phases" | "startedAt" | "updatedAt" | "finishedAt", ExtArgs["result"]["operation"]>
export type OperationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operationStates?: boolean | Prisma.Operation$operationStatesArgs<ExtArgs>
  logs?: boolean | Prisma.Operation$logsArgs<ExtArgs>
  _count?: boolean | Prisma.OperationCountOutputTypeDefaultArgs<ExtArgs>
}
export type OperationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type OperationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $OperationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Operation"
  objects: {
    /**
     * The operation states associated with this operation.
     */
    operationStates: Prisma.$InstanceOperationStatePayload<ExtArgs>[]
    /**
     * The logs of the operation.
     */
    logs: Prisma.$OperationLogPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the operation.
     */
    id: string
    /**
     * The metadata of the operation.
     * 
     * [OperationMeta]
     */
    meta: PrismaJson.OperationMeta
    /**
     * The type of the operation.
     */
    type: $Enums.OperationType
    /**
     * The status of the operation.
     */
    status: $Enums.OperationStatus
    /**
     * The options of the operation.
     * 
     * [OperationOptions]
     */
    options: PrismaJson.OperationOptions
    /**
     * The IDs of the instances that were exlicitly requested to operate on.
     * 
     * [InstanceIds]
     */
    requestedInstanceIds: PrismaJson.InstanceIds
    /**
     * The execution phases of the operation.
     * 
     * [OperationPhase[]]
     */
    phases: PrismaJson.OperationPhase[] | null
    /**
     * The time when the operation started.
     */
    startedAt: Date
    /**
     * The time when the operation was last updated.
     */
    updatedAt: Date
    /**
     * The time when the operation finished.
     */
    finishedAt: Date | null
  }, ExtArgs["result"]["operation"]>
  composites: {}
}

export type OperationGetPayload<S extends boolean | null | undefined | OperationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OperationPayload, S>

export type OperationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OperationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OperationCountAggregateInputType | true
  }

export interface OperationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Operation'], meta: { name: 'Operation' } }
  /**
   * Find zero or one Operation that matches the filter.
   * @param {OperationFindUniqueArgs} args - Arguments to find a Operation
   * @example
   * // Get one Operation
   * const operation = await prisma.operation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OperationFindUniqueArgs>(args: Prisma.SelectSubset<T, OperationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OperationClient<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Operation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OperationFindUniqueOrThrowArgs} args - Arguments to find a Operation
   * @example
   * // Get one Operation
   * const operation = await prisma.operation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OperationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OperationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OperationClient<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Operation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationFindFirstArgs} args - Arguments to find a Operation
   * @example
   * // Get one Operation
   * const operation = await prisma.operation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OperationFindFirstArgs>(args?: Prisma.SelectSubset<T, OperationFindFirstArgs<ExtArgs>>): Prisma.Prisma__OperationClient<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Operation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationFindFirstOrThrowArgs} args - Arguments to find a Operation
   * @example
   * // Get one Operation
   * const operation = await prisma.operation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OperationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OperationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OperationClient<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Operations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Operations
   * const operations = await prisma.operation.findMany()
   * 
   * // Get first 10 Operations
   * const operations = await prisma.operation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const operationWithIdOnly = await prisma.operation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OperationFindManyArgs>(args?: Prisma.SelectSubset<T, OperationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Operation.
   * @param {OperationCreateArgs} args - Arguments to create a Operation.
   * @example
   * // Create one Operation
   * const Operation = await prisma.operation.create({
   *   data: {
   *     // ... data to create a Operation
   *   }
   * })
   * 
   */
  create<T extends OperationCreateArgs>(args: Prisma.SelectSubset<T, OperationCreateArgs<ExtArgs>>): Prisma.Prisma__OperationClient<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Operations.
   * @param {OperationCreateManyArgs} args - Arguments to create many Operations.
   * @example
   * // Create many Operations
   * const operation = await prisma.operation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OperationCreateManyArgs>(args?: Prisma.SelectSubset<T, OperationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Operations and returns the data saved in the database.
   * @param {OperationCreateManyAndReturnArgs} args - Arguments to create many Operations.
   * @example
   * // Create many Operations
   * const operation = await prisma.operation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Operations and only return the `id`
   * const operationWithIdOnly = await prisma.operation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OperationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OperationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Operation.
   * @param {OperationDeleteArgs} args - Arguments to delete one Operation.
   * @example
   * // Delete one Operation
   * const Operation = await prisma.operation.delete({
   *   where: {
   *     // ... filter to delete one Operation
   *   }
   * })
   * 
   */
  delete<T extends OperationDeleteArgs>(args: Prisma.SelectSubset<T, OperationDeleteArgs<ExtArgs>>): Prisma.Prisma__OperationClient<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Operation.
   * @param {OperationUpdateArgs} args - Arguments to update one Operation.
   * @example
   * // Update one Operation
   * const operation = await prisma.operation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OperationUpdateArgs>(args: Prisma.SelectSubset<T, OperationUpdateArgs<ExtArgs>>): Prisma.Prisma__OperationClient<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Operations.
   * @param {OperationDeleteManyArgs} args - Arguments to filter Operations to delete.
   * @example
   * // Delete a few Operations
   * const { count } = await prisma.operation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OperationDeleteManyArgs>(args?: Prisma.SelectSubset<T, OperationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Operations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Operations
   * const operation = await prisma.operation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OperationUpdateManyArgs>(args: Prisma.SelectSubset<T, OperationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Operations and returns the data updated in the database.
   * @param {OperationUpdateManyAndReturnArgs} args - Arguments to update many Operations.
   * @example
   * // Update many Operations
   * const operation = await prisma.operation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Operations and only return the `id`
   * const operationWithIdOnly = await prisma.operation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OperationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OperationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Operation.
   * @param {OperationUpsertArgs} args - Arguments to update or create a Operation.
   * @example
   * // Update or create a Operation
   * const operation = await prisma.operation.upsert({
   *   create: {
   *     // ... data to create a Operation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Operation we want to update
   *   }
   * })
   */
  upsert<T extends OperationUpsertArgs>(args: Prisma.SelectSubset<T, OperationUpsertArgs<ExtArgs>>): Prisma.Prisma__OperationClient<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Operations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationCountArgs} args - Arguments to filter Operations to count.
   * @example
   * // Count the number of Operations
   * const count = await prisma.operation.count({
   *   where: {
   *     // ... the filter for the Operations we want to count
   *   }
   * })
  **/
  count<T extends OperationCountArgs>(
    args?: Prisma.Subset<T, OperationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OperationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Operation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OperationAggregateArgs>(args: Prisma.Subset<T, OperationAggregateArgs>): Prisma.PrismaPromise<GetOperationAggregateType<T>>

  /**
   * Group by Operation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OperationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OperationGroupByArgs['orderBy'] }
      : { orderBy?: OperationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OperationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Operation model
 */
readonly fields: OperationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Operation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OperationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  operationStates<T extends Prisma.Operation$operationStatesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Operation$operationStatesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstanceOperationStatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  logs<T extends Prisma.Operation$logsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Operation$logsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Operation model
 */
export interface OperationFieldRefs {
  readonly id: Prisma.FieldRef<"Operation", 'String'>
  readonly meta: Prisma.FieldRef<"Operation", 'Json'>
  readonly type: Prisma.FieldRef<"Operation", 'OperationType'>
  readonly status: Prisma.FieldRef<"Operation", 'OperationStatus'>
  readonly options: Prisma.FieldRef<"Operation", 'Json'>
  readonly requestedInstanceIds: Prisma.FieldRef<"Operation", 'Json'>
  readonly phases: Prisma.FieldRef<"Operation", 'Json'>
  readonly startedAt: Prisma.FieldRef<"Operation", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Operation", 'DateTime'>
  readonly finishedAt: Prisma.FieldRef<"Operation", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Operation findUnique
 */
export type OperationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationInclude<ExtArgs> | null
  /**
   * Filter, which Operation to fetch.
   */
  where: Prisma.OperationWhereUniqueInput
}

/**
 * Operation findUniqueOrThrow
 */
export type OperationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationInclude<ExtArgs> | null
  /**
   * Filter, which Operation to fetch.
   */
  where: Prisma.OperationWhereUniqueInput
}

/**
 * Operation findFirst
 */
export type OperationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationInclude<ExtArgs> | null
  /**
   * Filter, which Operation to fetch.
   */
  where?: Prisma.OperationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Operations to fetch.
   */
  orderBy?: Prisma.OperationOrderByWithRelationInput | Prisma.OperationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Operations.
   */
  cursor?: Prisma.OperationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Operations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Operations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Operations.
   */
  distinct?: Prisma.OperationScalarFieldEnum | Prisma.OperationScalarFieldEnum[]
}

/**
 * Operation findFirstOrThrow
 */
export type OperationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationInclude<ExtArgs> | null
  /**
   * Filter, which Operation to fetch.
   */
  where?: Prisma.OperationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Operations to fetch.
   */
  orderBy?: Prisma.OperationOrderByWithRelationInput | Prisma.OperationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Operations.
   */
  cursor?: Prisma.OperationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Operations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Operations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Operations.
   */
  distinct?: Prisma.OperationScalarFieldEnum | Prisma.OperationScalarFieldEnum[]
}

/**
 * Operation findMany
 */
export type OperationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationInclude<ExtArgs> | null
  /**
   * Filter, which Operations to fetch.
   */
  where?: Prisma.OperationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Operations to fetch.
   */
  orderBy?: Prisma.OperationOrderByWithRelationInput | Prisma.OperationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Operations.
   */
  cursor?: Prisma.OperationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Operations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Operations.
   */
  skip?: number
  distinct?: Prisma.OperationScalarFieldEnum | Prisma.OperationScalarFieldEnum[]
}

/**
 * Operation create
 */
export type OperationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationInclude<ExtArgs> | null
  /**
   * The data needed to create a Operation.
   */
  data: Prisma.XOR<Prisma.OperationCreateInput, Prisma.OperationUncheckedCreateInput>
}

/**
 * Operation createMany
 */
export type OperationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Operations.
   */
  data: Prisma.OperationCreateManyInput | Prisma.OperationCreateManyInput[]
}

/**
 * Operation createManyAndReturn
 */
export type OperationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * The data used to create many Operations.
   */
  data: Prisma.OperationCreateManyInput | Prisma.OperationCreateManyInput[]
}

/**
 * Operation update
 */
export type OperationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationInclude<ExtArgs> | null
  /**
   * The data needed to update a Operation.
   */
  data: Prisma.XOR<Prisma.OperationUpdateInput, Prisma.OperationUncheckedUpdateInput>
  /**
   * Choose, which Operation to update.
   */
  where: Prisma.OperationWhereUniqueInput
}

/**
 * Operation updateMany
 */
export type OperationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Operations.
   */
  data: Prisma.XOR<Prisma.OperationUpdateManyMutationInput, Prisma.OperationUncheckedUpdateManyInput>
  /**
   * Filter which Operations to update
   */
  where?: Prisma.OperationWhereInput
  /**
   * Limit how many Operations to update.
   */
  limit?: number
}

/**
 * Operation updateManyAndReturn
 */
export type OperationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * The data used to update Operations.
   */
  data: Prisma.XOR<Prisma.OperationUpdateManyMutationInput, Prisma.OperationUncheckedUpdateManyInput>
  /**
   * Filter which Operations to update
   */
  where?: Prisma.OperationWhereInput
  /**
   * Limit how many Operations to update.
   */
  limit?: number
}

/**
 * Operation upsert
 */
export type OperationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationInclude<ExtArgs> | null
  /**
   * The filter to search for the Operation to update in case it exists.
   */
  where: Prisma.OperationWhereUniqueInput
  /**
   * In case the Operation found by the `where` argument doesn't exist, create a new Operation with this data.
   */
  create: Prisma.XOR<Prisma.OperationCreateInput, Prisma.OperationUncheckedCreateInput>
  /**
   * In case the Operation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OperationUpdateInput, Prisma.OperationUncheckedUpdateInput>
}

/**
 * Operation delete
 */
export type OperationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationInclude<ExtArgs> | null
  /**
   * Filter which Operation to delete.
   */
  where: Prisma.OperationWhereUniqueInput
}

/**
 * Operation deleteMany
 */
export type OperationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Operations to delete
   */
  where?: Prisma.OperationWhereInput
  /**
   * Limit how many Operations to delete.
   */
  limit?: number
}

/**
 * Operation.operationStates
 */
export type Operation$operationStatesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceOperationState
   */
  select?: Prisma.InstanceOperationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceOperationState
   */
  omit?: Prisma.InstanceOperationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceOperationStateInclude<ExtArgs> | null
  where?: Prisma.InstanceOperationStateWhereInput
  orderBy?: Prisma.InstanceOperationStateOrderByWithRelationInput | Prisma.InstanceOperationStateOrderByWithRelationInput[]
  cursor?: Prisma.InstanceOperationStateWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InstanceOperationStateScalarFieldEnum | Prisma.InstanceOperationStateScalarFieldEnum[]
}

/**
 * Operation.logs
 */
export type Operation$logsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
  where?: Prisma.OperationLogWhereInput
  orderBy?: Prisma.OperationLogOrderByWithRelationInput | Prisma.OperationLogOrderByWithRelationInput[]
  cursor?: Prisma.OperationLogWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OperationLogScalarFieldEnum | Prisma.OperationLogScalarFieldEnum[]
}

/**
 * Operation without action
 */
export type OperationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Operation
   */
  select?: Prisma.OperationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Operation
   */
  omit?: Prisma.OperationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationInclude<ExtArgs> | null
}
