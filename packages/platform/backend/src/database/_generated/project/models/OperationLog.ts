
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `OperationLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model OperationLog
 * 
 */
export type OperationLogModel = runtime.Types.Result.DefaultSelection<Prisma.$OperationLogPayload>

export type AggregateOperationLog = {
  _count: OperationLogCountAggregateOutputType | null
  _min: OperationLogMinAggregateOutputType | null
  _max: OperationLogMaxAggregateOutputType | null
}

export type OperationLogMinAggregateOutputType = {
  id: string | null
  operationId: string | null
  stateId: string | null
  isSystem: boolean | null
  content: string | null
}

export type OperationLogMaxAggregateOutputType = {
  id: string | null
  operationId: string | null
  stateId: string | null
  isSystem: boolean | null
  content: string | null
}

export type OperationLogCountAggregateOutputType = {
  id: number
  operationId: number
  stateId: number
  isSystem: number
  content: number
  _all: number
}


export type OperationLogMinAggregateInputType = {
  id?: true
  operationId?: true
  stateId?: true
  isSystem?: true
  content?: true
}

export type OperationLogMaxAggregateInputType = {
  id?: true
  operationId?: true
  stateId?: true
  isSystem?: true
  content?: true
}

export type OperationLogCountAggregateInputType = {
  id?: true
  operationId?: true
  stateId?: true
  isSystem?: true
  content?: true
  _all?: true
}

export type OperationLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OperationLog to aggregate.
   */
  where?: Prisma.OperationLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OperationLogs to fetch.
   */
  orderBy?: Prisma.OperationLogOrderByWithRelationInput | Prisma.OperationLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OperationLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OperationLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OperationLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OperationLogs
  **/
  _count?: true | OperationLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OperationLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OperationLogMaxAggregateInputType
}

export type GetOperationLogAggregateType<T extends OperationLogAggregateArgs> = {
      [P in keyof T & keyof AggregateOperationLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOperationLog[P]>
    : Prisma.GetScalarType<T[P], AggregateOperationLog[P]>
}




export type OperationLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OperationLogWhereInput
  orderBy?: Prisma.OperationLogOrderByWithAggregationInput | Prisma.OperationLogOrderByWithAggregationInput[]
  by: Prisma.OperationLogScalarFieldEnum[] | Prisma.OperationLogScalarFieldEnum
  having?: Prisma.OperationLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OperationLogCountAggregateInputType | true
  _min?: OperationLogMinAggregateInputType
  _max?: OperationLogMaxAggregateInputType
}

export type OperationLogGroupByOutputType = {
  id: string
  operationId: string
  stateId: string | null
  isSystem: boolean
  content: string
  _count: OperationLogCountAggregateOutputType | null
  _min: OperationLogMinAggregateOutputType | null
  _max: OperationLogMaxAggregateOutputType | null
}

type GetOperationLogGroupByPayload<T extends OperationLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OperationLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OperationLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OperationLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OperationLogGroupByOutputType[P]>
      }
    >
  >



export type OperationLogWhereInput = {
  AND?: Prisma.OperationLogWhereInput | Prisma.OperationLogWhereInput[]
  OR?: Prisma.OperationLogWhereInput[]
  NOT?: Prisma.OperationLogWhereInput | Prisma.OperationLogWhereInput[]
  id?: Prisma.StringFilter<"OperationLog"> | string
  operationId?: Prisma.StringFilter<"OperationLog"> | string
  stateId?: Prisma.StringNullableFilter<"OperationLog"> | string | null
  isSystem?: Prisma.BoolFilter<"OperationLog"> | boolean
  content?: Prisma.StringFilter<"OperationLog"> | string
  operation?: Prisma.XOR<Prisma.OperationScalarRelationFilter, Prisma.OperationWhereInput>
  state?: Prisma.XOR<Prisma.InstanceStateNullableScalarRelationFilter, Prisma.InstanceStateWhereInput> | null
}

export type OperationLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  operationId?: Prisma.SortOrder
  stateId?: Prisma.SortOrderInput | Prisma.SortOrder
  isSystem?: Prisma.SortOrder
  content?: Prisma.SortOrder
  operation?: Prisma.OperationOrderByWithRelationInput
  state?: Prisma.InstanceStateOrderByWithRelationInput
}

export type OperationLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.OperationLogWhereInput | Prisma.OperationLogWhereInput[]
  OR?: Prisma.OperationLogWhereInput[]
  NOT?: Prisma.OperationLogWhereInput | Prisma.OperationLogWhereInput[]
  operationId?: Prisma.StringFilter<"OperationLog"> | string
  stateId?: Prisma.StringNullableFilter<"OperationLog"> | string | null
  isSystem?: Prisma.BoolFilter<"OperationLog"> | boolean
  content?: Prisma.StringFilter<"OperationLog"> | string
  operation?: Prisma.XOR<Prisma.OperationScalarRelationFilter, Prisma.OperationWhereInput>
  state?: Prisma.XOR<Prisma.InstanceStateNullableScalarRelationFilter, Prisma.InstanceStateWhereInput> | null
}, "id">

export type OperationLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  operationId?: Prisma.SortOrder
  stateId?: Prisma.SortOrderInput | Prisma.SortOrder
  isSystem?: Prisma.SortOrder
  content?: Prisma.SortOrder
  _count?: Prisma.OperationLogCountOrderByAggregateInput
  _max?: Prisma.OperationLogMaxOrderByAggregateInput
  _min?: Prisma.OperationLogMinOrderByAggregateInput
}

export type OperationLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.OperationLogScalarWhereWithAggregatesInput | Prisma.OperationLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.OperationLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OperationLogScalarWhereWithAggregatesInput | Prisma.OperationLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"OperationLog"> | string
  operationId?: Prisma.StringWithAggregatesFilter<"OperationLog"> | string
  stateId?: Prisma.StringNullableWithAggregatesFilter<"OperationLog"> | string | null
  isSystem?: Prisma.BoolWithAggregatesFilter<"OperationLog"> | boolean
  content?: Prisma.StringWithAggregatesFilter<"OperationLog"> | string
}

export type OperationLogCreateInput = {
  id: string
  isSystem?: boolean
  content: string
  operation: Prisma.OperationCreateNestedOneWithoutLogsInput
  state?: Prisma.InstanceStateCreateNestedOneWithoutOperationLogsInput
}

export type OperationLogUncheckedCreateInput = {
  id: string
  operationId: string
  stateId?: string | null
  isSystem?: boolean
  content: string
}

export type OperationLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  operation?: Prisma.OperationUpdateOneRequiredWithoutLogsNestedInput
  state?: Prisma.InstanceStateUpdateOneWithoutOperationLogsNestedInput
}

export type OperationLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  operationId?: Prisma.StringFieldUpdateOperationsInput | string
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperationLogCreateManyInput = {
  id: string
  operationId: string
  stateId?: string | null
  isSystem?: boolean
  content: string
}

export type OperationLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperationLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  operationId?: Prisma.StringFieldUpdateOperationsInput | string
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperationLogListRelationFilter = {
  every?: Prisma.OperationLogWhereInput
  some?: Prisma.OperationLogWhereInput
  none?: Prisma.OperationLogWhereInput
}

export type OperationLogOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OperationLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  operationId?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  isSystem?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type OperationLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  operationId?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  isSystem?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type OperationLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  operationId?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  isSystem?: Prisma.SortOrder
  content?: Prisma.SortOrder
}

export type OperationLogCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.OperationLogCreateWithoutStateInput, Prisma.OperationLogUncheckedCreateWithoutStateInput> | Prisma.OperationLogCreateWithoutStateInput[] | Prisma.OperationLogUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.OperationLogCreateOrConnectWithoutStateInput | Prisma.OperationLogCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.OperationLogCreateManyStateInputEnvelope
  connect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
}

export type OperationLogUncheckedCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.OperationLogCreateWithoutStateInput, Prisma.OperationLogUncheckedCreateWithoutStateInput> | Prisma.OperationLogCreateWithoutStateInput[] | Prisma.OperationLogUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.OperationLogCreateOrConnectWithoutStateInput | Prisma.OperationLogCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.OperationLogCreateManyStateInputEnvelope
  connect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
}

export type OperationLogUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.OperationLogCreateWithoutStateInput, Prisma.OperationLogUncheckedCreateWithoutStateInput> | Prisma.OperationLogCreateWithoutStateInput[] | Prisma.OperationLogUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.OperationLogCreateOrConnectWithoutStateInput | Prisma.OperationLogCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.OperationLogUpsertWithWhereUniqueWithoutStateInput | Prisma.OperationLogUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.OperationLogCreateManyStateInputEnvelope
  set?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  disconnect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  delete?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  connect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  update?: Prisma.OperationLogUpdateWithWhereUniqueWithoutStateInput | Prisma.OperationLogUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.OperationLogUpdateManyWithWhereWithoutStateInput | Prisma.OperationLogUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.OperationLogScalarWhereInput | Prisma.OperationLogScalarWhereInput[]
}

export type OperationLogUncheckedUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.OperationLogCreateWithoutStateInput, Prisma.OperationLogUncheckedCreateWithoutStateInput> | Prisma.OperationLogCreateWithoutStateInput[] | Prisma.OperationLogUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.OperationLogCreateOrConnectWithoutStateInput | Prisma.OperationLogCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.OperationLogUpsertWithWhereUniqueWithoutStateInput | Prisma.OperationLogUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.OperationLogCreateManyStateInputEnvelope
  set?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  disconnect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  delete?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  connect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  update?: Prisma.OperationLogUpdateWithWhereUniqueWithoutStateInput | Prisma.OperationLogUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.OperationLogUpdateManyWithWhereWithoutStateInput | Prisma.OperationLogUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.OperationLogScalarWhereInput | Prisma.OperationLogScalarWhereInput[]
}

export type OperationLogCreateNestedManyWithoutOperationInput = {
  create?: Prisma.XOR<Prisma.OperationLogCreateWithoutOperationInput, Prisma.OperationLogUncheckedCreateWithoutOperationInput> | Prisma.OperationLogCreateWithoutOperationInput[] | Prisma.OperationLogUncheckedCreateWithoutOperationInput[]
  connectOrCreate?: Prisma.OperationLogCreateOrConnectWithoutOperationInput | Prisma.OperationLogCreateOrConnectWithoutOperationInput[]
  createMany?: Prisma.OperationLogCreateManyOperationInputEnvelope
  connect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
}

export type OperationLogUncheckedCreateNestedManyWithoutOperationInput = {
  create?: Prisma.XOR<Prisma.OperationLogCreateWithoutOperationInput, Prisma.OperationLogUncheckedCreateWithoutOperationInput> | Prisma.OperationLogCreateWithoutOperationInput[] | Prisma.OperationLogUncheckedCreateWithoutOperationInput[]
  connectOrCreate?: Prisma.OperationLogCreateOrConnectWithoutOperationInput | Prisma.OperationLogCreateOrConnectWithoutOperationInput[]
  createMany?: Prisma.OperationLogCreateManyOperationInputEnvelope
  connect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
}

export type OperationLogUpdateManyWithoutOperationNestedInput = {
  create?: Prisma.XOR<Prisma.OperationLogCreateWithoutOperationInput, Prisma.OperationLogUncheckedCreateWithoutOperationInput> | Prisma.OperationLogCreateWithoutOperationInput[] | Prisma.OperationLogUncheckedCreateWithoutOperationInput[]
  connectOrCreate?: Prisma.OperationLogCreateOrConnectWithoutOperationInput | Prisma.OperationLogCreateOrConnectWithoutOperationInput[]
  upsert?: Prisma.OperationLogUpsertWithWhereUniqueWithoutOperationInput | Prisma.OperationLogUpsertWithWhereUniqueWithoutOperationInput[]
  createMany?: Prisma.OperationLogCreateManyOperationInputEnvelope
  set?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  disconnect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  delete?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  connect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  update?: Prisma.OperationLogUpdateWithWhereUniqueWithoutOperationInput | Prisma.OperationLogUpdateWithWhereUniqueWithoutOperationInput[]
  updateMany?: Prisma.OperationLogUpdateManyWithWhereWithoutOperationInput | Prisma.OperationLogUpdateManyWithWhereWithoutOperationInput[]
  deleteMany?: Prisma.OperationLogScalarWhereInput | Prisma.OperationLogScalarWhereInput[]
}

export type OperationLogUncheckedUpdateManyWithoutOperationNestedInput = {
  create?: Prisma.XOR<Prisma.OperationLogCreateWithoutOperationInput, Prisma.OperationLogUncheckedCreateWithoutOperationInput> | Prisma.OperationLogCreateWithoutOperationInput[] | Prisma.OperationLogUncheckedCreateWithoutOperationInput[]
  connectOrCreate?: Prisma.OperationLogCreateOrConnectWithoutOperationInput | Prisma.OperationLogCreateOrConnectWithoutOperationInput[]
  upsert?: Prisma.OperationLogUpsertWithWhereUniqueWithoutOperationInput | Prisma.OperationLogUpsertWithWhereUniqueWithoutOperationInput[]
  createMany?: Prisma.OperationLogCreateManyOperationInputEnvelope
  set?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  disconnect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  delete?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  connect?: Prisma.OperationLogWhereUniqueInput | Prisma.OperationLogWhereUniqueInput[]
  update?: Prisma.OperationLogUpdateWithWhereUniqueWithoutOperationInput | Prisma.OperationLogUpdateWithWhereUniqueWithoutOperationInput[]
  updateMany?: Prisma.OperationLogUpdateManyWithWhereWithoutOperationInput | Prisma.OperationLogUpdateManyWithWhereWithoutOperationInput[]
  deleteMany?: Prisma.OperationLogScalarWhereInput | Prisma.OperationLogScalarWhereInput[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type OperationLogCreateWithoutStateInput = {
  id: string
  isSystem?: boolean
  content: string
  operation: Prisma.OperationCreateNestedOneWithoutLogsInput
}

export type OperationLogUncheckedCreateWithoutStateInput = {
  id: string
  operationId: string
  isSystem?: boolean
  content: string
}

export type OperationLogCreateOrConnectWithoutStateInput = {
  where: Prisma.OperationLogWhereUniqueInput
  create: Prisma.XOR<Prisma.OperationLogCreateWithoutStateInput, Prisma.OperationLogUncheckedCreateWithoutStateInput>
}

export type OperationLogCreateManyStateInputEnvelope = {
  data: Prisma.OperationLogCreateManyStateInput | Prisma.OperationLogCreateManyStateInput[]
}

export type OperationLogUpsertWithWhereUniqueWithoutStateInput = {
  where: Prisma.OperationLogWhereUniqueInput
  update: Prisma.XOR<Prisma.OperationLogUpdateWithoutStateInput, Prisma.OperationLogUncheckedUpdateWithoutStateInput>
  create: Prisma.XOR<Prisma.OperationLogCreateWithoutStateInput, Prisma.OperationLogUncheckedCreateWithoutStateInput>
}

export type OperationLogUpdateWithWhereUniqueWithoutStateInput = {
  where: Prisma.OperationLogWhereUniqueInput
  data: Prisma.XOR<Prisma.OperationLogUpdateWithoutStateInput, Prisma.OperationLogUncheckedUpdateWithoutStateInput>
}

export type OperationLogUpdateManyWithWhereWithoutStateInput = {
  where: Prisma.OperationLogScalarWhereInput
  data: Prisma.XOR<Prisma.OperationLogUpdateManyMutationInput, Prisma.OperationLogUncheckedUpdateManyWithoutStateInput>
}

export type OperationLogScalarWhereInput = {
  AND?: Prisma.OperationLogScalarWhereInput | Prisma.OperationLogScalarWhereInput[]
  OR?: Prisma.OperationLogScalarWhereInput[]
  NOT?: Prisma.OperationLogScalarWhereInput | Prisma.OperationLogScalarWhereInput[]
  id?: Prisma.StringFilter<"OperationLog"> | string
  operationId?: Prisma.StringFilter<"OperationLog"> | string
  stateId?: Prisma.StringNullableFilter<"OperationLog"> | string | null
  isSystem?: Prisma.BoolFilter<"OperationLog"> | boolean
  content?: Prisma.StringFilter<"OperationLog"> | string
}

export type OperationLogCreateWithoutOperationInput = {
  id: string
  isSystem?: boolean
  content: string
  state?: Prisma.InstanceStateCreateNestedOneWithoutOperationLogsInput
}

export type OperationLogUncheckedCreateWithoutOperationInput = {
  id: string
  stateId?: string | null
  isSystem?: boolean
  content: string
}

export type OperationLogCreateOrConnectWithoutOperationInput = {
  where: Prisma.OperationLogWhereUniqueInput
  create: Prisma.XOR<Prisma.OperationLogCreateWithoutOperationInput, Prisma.OperationLogUncheckedCreateWithoutOperationInput>
}

export type OperationLogCreateManyOperationInputEnvelope = {
  data: Prisma.OperationLogCreateManyOperationInput | Prisma.OperationLogCreateManyOperationInput[]
}

export type OperationLogUpsertWithWhereUniqueWithoutOperationInput = {
  where: Prisma.OperationLogWhereUniqueInput
  update: Prisma.XOR<Prisma.OperationLogUpdateWithoutOperationInput, Prisma.OperationLogUncheckedUpdateWithoutOperationInput>
  create: Prisma.XOR<Prisma.OperationLogCreateWithoutOperationInput, Prisma.OperationLogUncheckedCreateWithoutOperationInput>
}

export type OperationLogUpdateWithWhereUniqueWithoutOperationInput = {
  where: Prisma.OperationLogWhereUniqueInput
  data: Prisma.XOR<Prisma.OperationLogUpdateWithoutOperationInput, Prisma.OperationLogUncheckedUpdateWithoutOperationInput>
}

export type OperationLogUpdateManyWithWhereWithoutOperationInput = {
  where: Prisma.OperationLogScalarWhereInput
  data: Prisma.XOR<Prisma.OperationLogUpdateManyMutationInput, Prisma.OperationLogUncheckedUpdateManyWithoutOperationInput>
}

export type OperationLogCreateManyStateInput = {
  id: string
  operationId: string
  isSystem?: boolean
  content: string
}

export type OperationLogUpdateWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  operation?: Prisma.OperationUpdateOneRequiredWithoutLogsNestedInput
}

export type OperationLogUncheckedUpdateWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  operationId?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperationLogUncheckedUpdateManyWithoutStateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  operationId?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperationLogCreateManyOperationInput = {
  id: string
  stateId?: string | null
  isSystem?: boolean
  content: string
}

export type OperationLogUpdateWithoutOperationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.InstanceStateUpdateOneWithoutOperationLogsNestedInput
}

export type OperationLogUncheckedUpdateWithoutOperationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OperationLogUncheckedUpdateManyWithoutOperationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  stateId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isSystem?: Prisma.BoolFieldUpdateOperationsInput | boolean
  content?: Prisma.StringFieldUpdateOperationsInput | string
}



export type OperationLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  operationId?: boolean
  stateId?: boolean
  isSystem?: boolean
  content?: boolean
  operation?: boolean | Prisma.OperationDefaultArgs<ExtArgs>
  state?: boolean | Prisma.OperationLog$stateArgs<ExtArgs>
}, ExtArgs["result"]["operationLog"]>

export type OperationLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  operationId?: boolean
  stateId?: boolean
  isSystem?: boolean
  content?: boolean
  operation?: boolean | Prisma.OperationDefaultArgs<ExtArgs>
  state?: boolean | Prisma.OperationLog$stateArgs<ExtArgs>
}, ExtArgs["result"]["operationLog"]>

export type OperationLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  operationId?: boolean
  stateId?: boolean
  isSystem?: boolean
  content?: boolean
  operation?: boolean | Prisma.OperationDefaultArgs<ExtArgs>
  state?: boolean | Prisma.OperationLog$stateArgs<ExtArgs>
}, ExtArgs["result"]["operationLog"]>

export type OperationLogSelectScalar = {
  id?: boolean
  operationId?: boolean
  stateId?: boolean
  isSystem?: boolean
  content?: boolean
}

export type OperationLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "operationId" | "stateId" | "isSystem" | "content", ExtArgs["result"]["operationLog"]>
export type OperationLogInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operation?: boolean | Prisma.OperationDefaultArgs<ExtArgs>
  state?: boolean | Prisma.OperationLog$stateArgs<ExtArgs>
}
export type OperationLogIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operation?: boolean | Prisma.OperationDefaultArgs<ExtArgs>
  state?: boolean | Prisma.OperationLog$stateArgs<ExtArgs>
}
export type OperationLogIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  operation?: boolean | Prisma.OperationDefaultArgs<ExtArgs>
  state?: boolean | Prisma.OperationLog$stateArgs<ExtArgs>
}

export type $OperationLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OperationLog"
  objects: {
    /**
     * The operation this log belongs to.
     */
    operation: Prisma.$OperationPayload<ExtArgs>
    /**
     * The instance this log produced by.
     * Can be `null` if the log is not associated with any instance.
     */
    state: Prisma.$InstanceStatePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The ULID of the log. Also used to extract the timestamp.
     */
    id: string
    /**
     * The ID of the operation this log belongs to.
     */
    operationId: string
    /**
     * The ID of the instance state this log produced by.
     * Can be `null` if the log is not associated with any instance.
     */
    stateId: string | null
    /**
     * Whether this log is a system/runtime message (vs unit output).
     */
    isSystem: boolean
    /**
     * The content of the log.
     */
    content: string
  }, ExtArgs["result"]["operationLog"]>
  composites: {}
}

export type OperationLogGetPayload<S extends boolean | null | undefined | OperationLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OperationLogPayload, S>

export type OperationLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OperationLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OperationLogCountAggregateInputType | true
  }

export interface OperationLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OperationLog'], meta: { name: 'OperationLog' } }
  /**
   * Find zero or one OperationLog that matches the filter.
   * @param {OperationLogFindUniqueArgs} args - Arguments to find a OperationLog
   * @example
   * // Get one OperationLog
   * const operationLog = await prisma.operationLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OperationLogFindUniqueArgs>(args: Prisma.SelectSubset<T, OperationLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OperationLogClient<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OperationLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OperationLogFindUniqueOrThrowArgs} args - Arguments to find a OperationLog
   * @example
   * // Get one OperationLog
   * const operationLog = await prisma.operationLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OperationLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OperationLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OperationLogClient<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OperationLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationLogFindFirstArgs} args - Arguments to find a OperationLog
   * @example
   * // Get one OperationLog
   * const operationLog = await prisma.operationLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OperationLogFindFirstArgs>(args?: Prisma.SelectSubset<T, OperationLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__OperationLogClient<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OperationLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationLogFindFirstOrThrowArgs} args - Arguments to find a OperationLog
   * @example
   * // Get one OperationLog
   * const operationLog = await prisma.operationLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OperationLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OperationLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OperationLogClient<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OperationLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OperationLogs
   * const operationLogs = await prisma.operationLog.findMany()
   * 
   * // Get first 10 OperationLogs
   * const operationLogs = await prisma.operationLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const operationLogWithIdOnly = await prisma.operationLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OperationLogFindManyArgs>(args?: Prisma.SelectSubset<T, OperationLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OperationLog.
   * @param {OperationLogCreateArgs} args - Arguments to create a OperationLog.
   * @example
   * // Create one OperationLog
   * const OperationLog = await prisma.operationLog.create({
   *   data: {
   *     // ... data to create a OperationLog
   *   }
   * })
   * 
   */
  create<T extends OperationLogCreateArgs>(args: Prisma.SelectSubset<T, OperationLogCreateArgs<ExtArgs>>): Prisma.Prisma__OperationLogClient<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OperationLogs.
   * @param {OperationLogCreateManyArgs} args - Arguments to create many OperationLogs.
   * @example
   * // Create many OperationLogs
   * const operationLog = await prisma.operationLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OperationLogCreateManyArgs>(args?: Prisma.SelectSubset<T, OperationLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OperationLogs and returns the data saved in the database.
   * @param {OperationLogCreateManyAndReturnArgs} args - Arguments to create many OperationLogs.
   * @example
   * // Create many OperationLogs
   * const operationLog = await prisma.operationLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many OperationLogs and only return the `id`
   * const operationLogWithIdOnly = await prisma.operationLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OperationLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OperationLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a OperationLog.
   * @param {OperationLogDeleteArgs} args - Arguments to delete one OperationLog.
   * @example
   * // Delete one OperationLog
   * const OperationLog = await prisma.operationLog.delete({
   *   where: {
   *     // ... filter to delete one OperationLog
   *   }
   * })
   * 
   */
  delete<T extends OperationLogDeleteArgs>(args: Prisma.SelectSubset<T, OperationLogDeleteArgs<ExtArgs>>): Prisma.Prisma__OperationLogClient<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OperationLog.
   * @param {OperationLogUpdateArgs} args - Arguments to update one OperationLog.
   * @example
   * // Update one OperationLog
   * const operationLog = await prisma.operationLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OperationLogUpdateArgs>(args: Prisma.SelectSubset<T, OperationLogUpdateArgs<ExtArgs>>): Prisma.Prisma__OperationLogClient<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OperationLogs.
   * @param {OperationLogDeleteManyArgs} args - Arguments to filter OperationLogs to delete.
   * @example
   * // Delete a few OperationLogs
   * const { count } = await prisma.operationLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OperationLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, OperationLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OperationLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OperationLogs
   * const operationLog = await prisma.operationLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OperationLogUpdateManyArgs>(args: Prisma.SelectSubset<T, OperationLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OperationLogs and returns the data updated in the database.
   * @param {OperationLogUpdateManyAndReturnArgs} args - Arguments to update many OperationLogs.
   * @example
   * // Update many OperationLogs
   * const operationLog = await prisma.operationLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more OperationLogs and only return the `id`
   * const operationLogWithIdOnly = await prisma.operationLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OperationLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OperationLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one OperationLog.
   * @param {OperationLogUpsertArgs} args - Arguments to update or create a OperationLog.
   * @example
   * // Update or create a OperationLog
   * const operationLog = await prisma.operationLog.upsert({
   *   create: {
   *     // ... data to create a OperationLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OperationLog we want to update
   *   }
   * })
   */
  upsert<T extends OperationLogUpsertArgs>(args: Prisma.SelectSubset<T, OperationLogUpsertArgs<ExtArgs>>): Prisma.Prisma__OperationLogClient<runtime.Types.Result.GetResult<Prisma.$OperationLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of OperationLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationLogCountArgs} args - Arguments to filter OperationLogs to count.
   * @example
   * // Count the number of OperationLogs
   * const count = await prisma.operationLog.count({
   *   where: {
   *     // ... the filter for the OperationLogs we want to count
   *   }
   * })
  **/
  count<T extends OperationLogCountArgs>(
    args?: Prisma.Subset<T, OperationLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OperationLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OperationLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OperationLogAggregateArgs>(args: Prisma.Subset<T, OperationLogAggregateArgs>): Prisma.PrismaPromise<GetOperationLogAggregateType<T>>

  /**
   * Group by OperationLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OperationLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OperationLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OperationLogGroupByArgs['orderBy'] }
      : { orderBy?: OperationLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OperationLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperationLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OperationLog model
 */
readonly fields: OperationLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OperationLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OperationLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  operation<T extends Prisma.OperationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OperationDefaultArgs<ExtArgs>>): Prisma.Prisma__OperationClient<runtime.Types.Result.GetResult<Prisma.$OperationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  state<T extends Prisma.OperationLog$stateArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OperationLog$stateArgs<ExtArgs>>): Prisma.Prisma__InstanceStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OperationLog model
 */
export interface OperationLogFieldRefs {
  readonly id: Prisma.FieldRef<"OperationLog", 'String'>
  readonly operationId: Prisma.FieldRef<"OperationLog", 'String'>
  readonly stateId: Prisma.FieldRef<"OperationLog", 'String'>
  readonly isSystem: Prisma.FieldRef<"OperationLog", 'Boolean'>
  readonly content: Prisma.FieldRef<"OperationLog", 'String'>
}
    

// Custom InputTypes
/**
 * OperationLog findUnique
 */
export type OperationLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
  /**
   * Filter, which OperationLog to fetch.
   */
  where: Prisma.OperationLogWhereUniqueInput
}

/**
 * OperationLog findUniqueOrThrow
 */
export type OperationLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
  /**
   * Filter, which OperationLog to fetch.
   */
  where: Prisma.OperationLogWhereUniqueInput
}

/**
 * OperationLog findFirst
 */
export type OperationLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
  /**
   * Filter, which OperationLog to fetch.
   */
  where?: Prisma.OperationLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OperationLogs to fetch.
   */
  orderBy?: Prisma.OperationLogOrderByWithRelationInput | Prisma.OperationLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OperationLogs.
   */
  cursor?: Prisma.OperationLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OperationLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OperationLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OperationLogs.
   */
  distinct?: Prisma.OperationLogScalarFieldEnum | Prisma.OperationLogScalarFieldEnum[]
}

/**
 * OperationLog findFirstOrThrow
 */
export type OperationLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
  /**
   * Filter, which OperationLog to fetch.
   */
  where?: Prisma.OperationLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OperationLogs to fetch.
   */
  orderBy?: Prisma.OperationLogOrderByWithRelationInput | Prisma.OperationLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OperationLogs.
   */
  cursor?: Prisma.OperationLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OperationLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OperationLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OperationLogs.
   */
  distinct?: Prisma.OperationLogScalarFieldEnum | Prisma.OperationLogScalarFieldEnum[]
}

/**
 * OperationLog findMany
 */
export type OperationLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
  /**
   * Filter, which OperationLogs to fetch.
   */
  where?: Prisma.OperationLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OperationLogs to fetch.
   */
  orderBy?: Prisma.OperationLogOrderByWithRelationInput | Prisma.OperationLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OperationLogs.
   */
  cursor?: Prisma.OperationLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OperationLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OperationLogs.
   */
  skip?: number
  distinct?: Prisma.OperationLogScalarFieldEnum | Prisma.OperationLogScalarFieldEnum[]
}

/**
 * OperationLog create
 */
export type OperationLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
  /**
   * The data needed to create a OperationLog.
   */
  data: Prisma.XOR<Prisma.OperationLogCreateInput, Prisma.OperationLogUncheckedCreateInput>
}

/**
 * OperationLog createMany
 */
export type OperationLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OperationLogs.
   */
  data: Prisma.OperationLogCreateManyInput | Prisma.OperationLogCreateManyInput[]
}

/**
 * OperationLog createManyAndReturn
 */
export type OperationLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * The data used to create many OperationLogs.
   */
  data: Prisma.OperationLogCreateManyInput | Prisma.OperationLogCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * OperationLog update
 */
export type OperationLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
  /**
   * The data needed to update a OperationLog.
   */
  data: Prisma.XOR<Prisma.OperationLogUpdateInput, Prisma.OperationLogUncheckedUpdateInput>
  /**
   * Choose, which OperationLog to update.
   */
  where: Prisma.OperationLogWhereUniqueInput
}

/**
 * OperationLog updateMany
 */
export type OperationLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OperationLogs.
   */
  data: Prisma.XOR<Prisma.OperationLogUpdateManyMutationInput, Prisma.OperationLogUncheckedUpdateManyInput>
  /**
   * Filter which OperationLogs to update
   */
  where?: Prisma.OperationLogWhereInput
  /**
   * Limit how many OperationLogs to update.
   */
  limit?: number
}

/**
 * OperationLog updateManyAndReturn
 */
export type OperationLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * The data used to update OperationLogs.
   */
  data: Prisma.XOR<Prisma.OperationLogUpdateManyMutationInput, Prisma.OperationLogUncheckedUpdateManyInput>
  /**
   * Filter which OperationLogs to update
   */
  where?: Prisma.OperationLogWhereInput
  /**
   * Limit how many OperationLogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * OperationLog upsert
 */
export type OperationLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
  /**
   * The filter to search for the OperationLog to update in case it exists.
   */
  where: Prisma.OperationLogWhereUniqueInput
  /**
   * In case the OperationLog found by the `where` argument doesn't exist, create a new OperationLog with this data.
   */
  create: Prisma.XOR<Prisma.OperationLogCreateInput, Prisma.OperationLogUncheckedCreateInput>
  /**
   * In case the OperationLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OperationLogUpdateInput, Prisma.OperationLogUncheckedUpdateInput>
}

/**
 * OperationLog delete
 */
export type OperationLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
  /**
   * Filter which OperationLog to delete.
   */
  where: Prisma.OperationLogWhereUniqueInput
}

/**
 * OperationLog deleteMany
 */
export type OperationLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OperationLogs to delete
   */
  where?: Prisma.OperationLogWhereInput
  /**
   * Limit how many OperationLogs to delete.
   */
  limit?: number
}

/**
 * OperationLog.state
 */
export type OperationLog$stateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceState
   */
  select?: Prisma.InstanceStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceState
   */
  omit?: Prisma.InstanceStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceStateInclude<ExtArgs> | null
  where?: Prisma.InstanceStateWhereInput
}

/**
 * OperationLog without action
 */
export type OperationLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OperationLog
   */
  select?: Prisma.OperationLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OperationLog
   */
  omit?: Prisma.OperationLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OperationLogInclude<ExtArgs> | null
}
