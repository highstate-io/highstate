
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `InstanceLock` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model InstanceLock
 * 
 */
export type InstanceLockModel = runtime.Types.Result.DefaultSelection<Prisma.$InstanceLockPayload>

export type AggregateInstanceLock = {
  _count: InstanceLockCountAggregateOutputType | null
  _min: InstanceLockMinAggregateOutputType | null
  _max: InstanceLockMaxAggregateOutputType | null
}

export type InstanceLockMinAggregateOutputType = {
  stateId: string | null
  token: string | null
  acquiredAt: Date | null
}

export type InstanceLockMaxAggregateOutputType = {
  stateId: string | null
  token: string | null
  acquiredAt: Date | null
}

export type InstanceLockCountAggregateOutputType = {
  stateId: number
  meta: number
  token: number
  acquiredAt: number
  _all: number
}


export type InstanceLockMinAggregateInputType = {
  stateId?: true
  token?: true
  acquiredAt?: true
}

export type InstanceLockMaxAggregateInputType = {
  stateId?: true
  token?: true
  acquiredAt?: true
}

export type InstanceLockCountAggregateInputType = {
  stateId?: true
  meta?: true
  token?: true
  acquiredAt?: true
  _all?: true
}

export type InstanceLockAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InstanceLock to aggregate.
   */
  where?: Prisma.InstanceLockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceLocks to fetch.
   */
  orderBy?: Prisma.InstanceLockOrderByWithRelationInput | Prisma.InstanceLockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InstanceLockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceLocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceLocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InstanceLocks
  **/
  _count?: true | InstanceLockCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InstanceLockMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InstanceLockMaxAggregateInputType
}

export type GetInstanceLockAggregateType<T extends InstanceLockAggregateArgs> = {
      [P in keyof T & keyof AggregateInstanceLock]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInstanceLock[P]>
    : Prisma.GetScalarType<T[P], AggregateInstanceLock[P]>
}




export type InstanceLockGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InstanceLockWhereInput
  orderBy?: Prisma.InstanceLockOrderByWithAggregationInput | Prisma.InstanceLockOrderByWithAggregationInput[]
  by: Prisma.InstanceLockScalarFieldEnum[] | Prisma.InstanceLockScalarFieldEnum
  having?: Prisma.InstanceLockScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InstanceLockCountAggregateInputType | true
  _min?: InstanceLockMinAggregateInputType
  _max?: InstanceLockMaxAggregateInputType
}

export type InstanceLockGroupByOutputType = {
  stateId: string
  meta: PrismaJson.CommonObjectMeta
  token: string
  acquiredAt: Date
  _count: InstanceLockCountAggregateOutputType | null
  _min: InstanceLockMinAggregateOutputType | null
  _max: InstanceLockMaxAggregateOutputType | null
}

type GetInstanceLockGroupByPayload<T extends InstanceLockGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InstanceLockGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InstanceLockGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InstanceLockGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InstanceLockGroupByOutputType[P]>
      }
    >
  >



export type InstanceLockWhereInput = {
  AND?: Prisma.InstanceLockWhereInput | Prisma.InstanceLockWhereInput[]
  OR?: Prisma.InstanceLockWhereInput[]
  NOT?: Prisma.InstanceLockWhereInput | Prisma.InstanceLockWhereInput[]
  stateId?: Prisma.StringFilter<"InstanceLock"> | string
  meta?: Prisma.JsonFilter<"InstanceLock">
  token?: Prisma.StringFilter<"InstanceLock"> | string
  acquiredAt?: Prisma.DateTimeFilter<"InstanceLock"> | Date | string
  state?: Prisma.XOR<Prisma.InstanceStateScalarRelationFilter, Prisma.InstanceStateWhereInput>
}

export type InstanceLockOrderByWithRelationInput = {
  stateId?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  token?: Prisma.SortOrder
  acquiredAt?: Prisma.SortOrder
  state?: Prisma.InstanceStateOrderByWithRelationInput
}

export type InstanceLockWhereUniqueInput = Prisma.AtLeast<{
  stateId?: string
  AND?: Prisma.InstanceLockWhereInput | Prisma.InstanceLockWhereInput[]
  OR?: Prisma.InstanceLockWhereInput[]
  NOT?: Prisma.InstanceLockWhereInput | Prisma.InstanceLockWhereInput[]
  meta?: Prisma.JsonFilter<"InstanceLock">
  token?: Prisma.StringFilter<"InstanceLock"> | string
  acquiredAt?: Prisma.DateTimeFilter<"InstanceLock"> | Date | string
  state?: Prisma.XOR<Prisma.InstanceStateScalarRelationFilter, Prisma.InstanceStateWhereInput>
}, "stateId">

export type InstanceLockOrderByWithAggregationInput = {
  stateId?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  token?: Prisma.SortOrder
  acquiredAt?: Prisma.SortOrder
  _count?: Prisma.InstanceLockCountOrderByAggregateInput
  _max?: Prisma.InstanceLockMaxOrderByAggregateInput
  _min?: Prisma.InstanceLockMinOrderByAggregateInput
}

export type InstanceLockScalarWhereWithAggregatesInput = {
  AND?: Prisma.InstanceLockScalarWhereWithAggregatesInput | Prisma.InstanceLockScalarWhereWithAggregatesInput[]
  OR?: Prisma.InstanceLockScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InstanceLockScalarWhereWithAggregatesInput | Prisma.InstanceLockScalarWhereWithAggregatesInput[]
  stateId?: Prisma.StringWithAggregatesFilter<"InstanceLock"> | string
  meta?: Prisma.JsonWithAggregatesFilter<"InstanceLock">
  token?: Prisma.StringWithAggregatesFilter<"InstanceLock"> | string
  acquiredAt?: Prisma.DateTimeWithAggregatesFilter<"InstanceLock"> | Date | string
}

export type InstanceLockCreateInput = {
  meta: PrismaJson.CommonObjectMeta
  token: string
  acquiredAt?: Date | string
  state: Prisma.InstanceStateCreateNestedOneWithoutLockInput
}

export type InstanceLockUncheckedCreateInput = {
  stateId: string
  meta: PrismaJson.CommonObjectMeta
  token: string
  acquiredAt?: Date | string
}

export type InstanceLockUpdateInput = {
  meta?: PrismaJson.CommonObjectMeta
  token?: Prisma.StringFieldUpdateOperationsInput | string
  acquiredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.InstanceStateUpdateOneRequiredWithoutLockNestedInput
}

export type InstanceLockUncheckedUpdateInput = {
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  token?: Prisma.StringFieldUpdateOperationsInput | string
  acquiredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceLockCreateManyInput = {
  stateId: string
  meta: PrismaJson.CommonObjectMeta
  token: string
  acquiredAt?: Date | string
}

export type InstanceLockUpdateManyMutationInput = {
  meta?: PrismaJson.CommonObjectMeta
  token?: Prisma.StringFieldUpdateOperationsInput | string
  acquiredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceLockUncheckedUpdateManyInput = {
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  token?: Prisma.StringFieldUpdateOperationsInput | string
  acquiredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceLockNullableScalarRelationFilter = {
  is?: Prisma.InstanceLockWhereInput | null
  isNot?: Prisma.InstanceLockWhereInput | null
}

export type InstanceLockCountOrderByAggregateInput = {
  stateId?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  token?: Prisma.SortOrder
  acquiredAt?: Prisma.SortOrder
}

export type InstanceLockMaxOrderByAggregateInput = {
  stateId?: Prisma.SortOrder
  token?: Prisma.SortOrder
  acquiredAt?: Prisma.SortOrder
}

export type InstanceLockMinOrderByAggregateInput = {
  stateId?: Prisma.SortOrder
  token?: Prisma.SortOrder
  acquiredAt?: Prisma.SortOrder
}

export type InstanceLockCreateNestedOneWithoutStateInput = {
  create?: Prisma.XOR<Prisma.InstanceLockCreateWithoutStateInput, Prisma.InstanceLockUncheckedCreateWithoutStateInput>
  connectOrCreate?: Prisma.InstanceLockCreateOrConnectWithoutStateInput
  connect?: Prisma.InstanceLockWhereUniqueInput
}

export type InstanceLockUncheckedCreateNestedOneWithoutStateInput = {
  create?: Prisma.XOR<Prisma.InstanceLockCreateWithoutStateInput, Prisma.InstanceLockUncheckedCreateWithoutStateInput>
  connectOrCreate?: Prisma.InstanceLockCreateOrConnectWithoutStateInput
  connect?: Prisma.InstanceLockWhereUniqueInput
}

export type InstanceLockUpdateOneWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.InstanceLockCreateWithoutStateInput, Prisma.InstanceLockUncheckedCreateWithoutStateInput>
  connectOrCreate?: Prisma.InstanceLockCreateOrConnectWithoutStateInput
  upsert?: Prisma.InstanceLockUpsertWithoutStateInput
  disconnect?: Prisma.InstanceLockWhereInput | boolean
  delete?: Prisma.InstanceLockWhereInput | boolean
  connect?: Prisma.InstanceLockWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InstanceLockUpdateToOneWithWhereWithoutStateInput, Prisma.InstanceLockUpdateWithoutStateInput>, Prisma.InstanceLockUncheckedUpdateWithoutStateInput>
}

export type InstanceLockUncheckedUpdateOneWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.InstanceLockCreateWithoutStateInput, Prisma.InstanceLockUncheckedCreateWithoutStateInput>
  connectOrCreate?: Prisma.InstanceLockCreateOrConnectWithoutStateInput
  upsert?: Prisma.InstanceLockUpsertWithoutStateInput
  disconnect?: Prisma.InstanceLockWhereInput | boolean
  delete?: Prisma.InstanceLockWhereInput | boolean
  connect?: Prisma.InstanceLockWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InstanceLockUpdateToOneWithWhereWithoutStateInput, Prisma.InstanceLockUpdateWithoutStateInput>, Prisma.InstanceLockUncheckedUpdateWithoutStateInput>
}

export type InstanceLockCreateWithoutStateInput = {
  meta: PrismaJson.CommonObjectMeta
  token: string
  acquiredAt?: Date | string
}

export type InstanceLockUncheckedCreateWithoutStateInput = {
  meta: PrismaJson.CommonObjectMeta
  token: string
  acquiredAt?: Date | string
}

export type InstanceLockCreateOrConnectWithoutStateInput = {
  where: Prisma.InstanceLockWhereUniqueInput
  create: Prisma.XOR<Prisma.InstanceLockCreateWithoutStateInput, Prisma.InstanceLockUncheckedCreateWithoutStateInput>
}

export type InstanceLockUpsertWithoutStateInput = {
  update: Prisma.XOR<Prisma.InstanceLockUpdateWithoutStateInput, Prisma.InstanceLockUncheckedUpdateWithoutStateInput>
  create: Prisma.XOR<Prisma.InstanceLockCreateWithoutStateInput, Prisma.InstanceLockUncheckedCreateWithoutStateInput>
  where?: Prisma.InstanceLockWhereInput
}

export type InstanceLockUpdateToOneWithWhereWithoutStateInput = {
  where?: Prisma.InstanceLockWhereInput
  data: Prisma.XOR<Prisma.InstanceLockUpdateWithoutStateInput, Prisma.InstanceLockUncheckedUpdateWithoutStateInput>
}

export type InstanceLockUpdateWithoutStateInput = {
  meta?: PrismaJson.CommonObjectMeta
  token?: Prisma.StringFieldUpdateOperationsInput | string
  acquiredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceLockUncheckedUpdateWithoutStateInput = {
  meta?: PrismaJson.CommonObjectMeta
  token?: Prisma.StringFieldUpdateOperationsInput | string
  acquiredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type InstanceLockSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  stateId?: boolean
  meta?: boolean
  token?: boolean
  acquiredAt?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["instanceLock"]>

export type InstanceLockSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  stateId?: boolean
  meta?: boolean
  token?: boolean
  acquiredAt?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["instanceLock"]>

export type InstanceLockSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  stateId?: boolean
  meta?: boolean
  token?: boolean
  acquiredAt?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["instanceLock"]>

export type InstanceLockSelectScalar = {
  stateId?: boolean
  meta?: boolean
  token?: boolean
  acquiredAt?: boolean
}

export type InstanceLockOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"stateId" | "meta" | "token" | "acquiredAt", ExtArgs["result"]["instanceLock"]>
export type InstanceLockInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}
export type InstanceLockIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}
export type InstanceLockIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}

export type $InstanceLockPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InstanceLock"
  objects: {
    /**
     * The instance being locked.
     */
    state: Prisma.$InstanceStatePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The ID of the instance state being locked.
     */
    stateId: string
    /**
     * The metadata of the lock managed by the backend.
     * 
     * [CommonObjectMeta]
     */
    meta: PrismaJson.CommonObjectMeta
    /**
     * The CUIDv2 token to ensure ownership of the lock.
     */
    token: string
    /**
     * The time when the lock was acquired.
     */
    acquiredAt: Date
  }, ExtArgs["result"]["instanceLock"]>
  composites: {}
}

export type InstanceLockGetPayload<S extends boolean | null | undefined | InstanceLockDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload, S>

export type InstanceLockCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InstanceLockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InstanceLockCountAggregateInputType | true
  }

export interface InstanceLockDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InstanceLock'], meta: { name: 'InstanceLock' } }
  /**
   * Find zero or one InstanceLock that matches the filter.
   * @param {InstanceLockFindUniqueArgs} args - Arguments to find a InstanceLock
   * @example
   * // Get one InstanceLock
   * const instanceLock = await prisma.instanceLock.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InstanceLockFindUniqueArgs>(args: Prisma.SelectSubset<T, InstanceLockFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InstanceLockClient<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InstanceLock that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InstanceLockFindUniqueOrThrowArgs} args - Arguments to find a InstanceLock
   * @example
   * // Get one InstanceLock
   * const instanceLock = await prisma.instanceLock.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InstanceLockFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InstanceLockFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InstanceLockClient<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InstanceLock that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceLockFindFirstArgs} args - Arguments to find a InstanceLock
   * @example
   * // Get one InstanceLock
   * const instanceLock = await prisma.instanceLock.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InstanceLockFindFirstArgs>(args?: Prisma.SelectSubset<T, InstanceLockFindFirstArgs<ExtArgs>>): Prisma.Prisma__InstanceLockClient<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InstanceLock that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceLockFindFirstOrThrowArgs} args - Arguments to find a InstanceLock
   * @example
   * // Get one InstanceLock
   * const instanceLock = await prisma.instanceLock.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InstanceLockFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InstanceLockFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InstanceLockClient<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InstanceLocks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceLockFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InstanceLocks
   * const instanceLocks = await prisma.instanceLock.findMany()
   * 
   * // Get first 10 InstanceLocks
   * const instanceLocks = await prisma.instanceLock.findMany({ take: 10 })
   * 
   * // Only select the `stateId`
   * const instanceLockWithStateIdOnly = await prisma.instanceLock.findMany({ select: { stateId: true } })
   * 
   */
  findMany<T extends InstanceLockFindManyArgs>(args?: Prisma.SelectSubset<T, InstanceLockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InstanceLock.
   * @param {InstanceLockCreateArgs} args - Arguments to create a InstanceLock.
   * @example
   * // Create one InstanceLock
   * const InstanceLock = await prisma.instanceLock.create({
   *   data: {
   *     // ... data to create a InstanceLock
   *   }
   * })
   * 
   */
  create<T extends InstanceLockCreateArgs>(args: Prisma.SelectSubset<T, InstanceLockCreateArgs<ExtArgs>>): Prisma.Prisma__InstanceLockClient<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InstanceLocks.
   * @param {InstanceLockCreateManyArgs} args - Arguments to create many InstanceLocks.
   * @example
   * // Create many InstanceLocks
   * const instanceLock = await prisma.instanceLock.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InstanceLockCreateManyArgs>(args?: Prisma.SelectSubset<T, InstanceLockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InstanceLocks and returns the data saved in the database.
   * @param {InstanceLockCreateManyAndReturnArgs} args - Arguments to create many InstanceLocks.
   * @example
   * // Create many InstanceLocks
   * const instanceLock = await prisma.instanceLock.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InstanceLocks and only return the `stateId`
   * const instanceLockWithStateIdOnly = await prisma.instanceLock.createManyAndReturn({
   *   select: { stateId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InstanceLockCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InstanceLockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InstanceLock.
   * @param {InstanceLockDeleteArgs} args - Arguments to delete one InstanceLock.
   * @example
   * // Delete one InstanceLock
   * const InstanceLock = await prisma.instanceLock.delete({
   *   where: {
   *     // ... filter to delete one InstanceLock
   *   }
   * })
   * 
   */
  delete<T extends InstanceLockDeleteArgs>(args: Prisma.SelectSubset<T, InstanceLockDeleteArgs<ExtArgs>>): Prisma.Prisma__InstanceLockClient<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InstanceLock.
   * @param {InstanceLockUpdateArgs} args - Arguments to update one InstanceLock.
   * @example
   * // Update one InstanceLock
   * const instanceLock = await prisma.instanceLock.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InstanceLockUpdateArgs>(args: Prisma.SelectSubset<T, InstanceLockUpdateArgs<ExtArgs>>): Prisma.Prisma__InstanceLockClient<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InstanceLocks.
   * @param {InstanceLockDeleteManyArgs} args - Arguments to filter InstanceLocks to delete.
   * @example
   * // Delete a few InstanceLocks
   * const { count } = await prisma.instanceLock.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InstanceLockDeleteManyArgs>(args?: Prisma.SelectSubset<T, InstanceLockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InstanceLocks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceLockUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InstanceLocks
   * const instanceLock = await prisma.instanceLock.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InstanceLockUpdateManyArgs>(args: Prisma.SelectSubset<T, InstanceLockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InstanceLocks and returns the data updated in the database.
   * @param {InstanceLockUpdateManyAndReturnArgs} args - Arguments to update many InstanceLocks.
   * @example
   * // Update many InstanceLocks
   * const instanceLock = await prisma.instanceLock.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InstanceLocks and only return the `stateId`
   * const instanceLockWithStateIdOnly = await prisma.instanceLock.updateManyAndReturn({
   *   select: { stateId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InstanceLockUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InstanceLockUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InstanceLock.
   * @param {InstanceLockUpsertArgs} args - Arguments to update or create a InstanceLock.
   * @example
   * // Update or create a InstanceLock
   * const instanceLock = await prisma.instanceLock.upsert({
   *   create: {
   *     // ... data to create a InstanceLock
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InstanceLock we want to update
   *   }
   * })
   */
  upsert<T extends InstanceLockUpsertArgs>(args: Prisma.SelectSubset<T, InstanceLockUpsertArgs<ExtArgs>>): Prisma.Prisma__InstanceLockClient<runtime.Types.Result.GetResult<Prisma.$InstanceLockPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InstanceLocks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceLockCountArgs} args - Arguments to filter InstanceLocks to count.
   * @example
   * // Count the number of InstanceLocks
   * const count = await prisma.instanceLock.count({
   *   where: {
   *     // ... the filter for the InstanceLocks we want to count
   *   }
   * })
  **/
  count<T extends InstanceLockCountArgs>(
    args?: Prisma.Subset<T, InstanceLockCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InstanceLockCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InstanceLock.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceLockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InstanceLockAggregateArgs>(args: Prisma.Subset<T, InstanceLockAggregateArgs>): Prisma.PrismaPromise<GetInstanceLockAggregateType<T>>

  /**
   * Group by InstanceLock.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceLockGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InstanceLockGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InstanceLockGroupByArgs['orderBy'] }
      : { orderBy?: InstanceLockGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InstanceLockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstanceLockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InstanceLock model
 */
readonly fields: InstanceLockFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InstanceLock.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InstanceLockClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  state<T extends Prisma.InstanceStateDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InstanceStateDefaultArgs<ExtArgs>>): Prisma.Prisma__InstanceStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InstanceLock model
 */
export interface InstanceLockFieldRefs {
  readonly stateId: Prisma.FieldRef<"InstanceLock", 'String'>
  readonly meta: Prisma.FieldRef<"InstanceLock", 'Json'>
  readonly token: Prisma.FieldRef<"InstanceLock", 'String'>
  readonly acquiredAt: Prisma.FieldRef<"InstanceLock", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InstanceLock findUnique
 */
export type InstanceLockFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockInclude<ExtArgs> | null
  /**
   * Filter, which InstanceLock to fetch.
   */
  where: Prisma.InstanceLockWhereUniqueInput
}

/**
 * InstanceLock findUniqueOrThrow
 */
export type InstanceLockFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockInclude<ExtArgs> | null
  /**
   * Filter, which InstanceLock to fetch.
   */
  where: Prisma.InstanceLockWhereUniqueInput
}

/**
 * InstanceLock findFirst
 */
export type InstanceLockFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockInclude<ExtArgs> | null
  /**
   * Filter, which InstanceLock to fetch.
   */
  where?: Prisma.InstanceLockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceLocks to fetch.
   */
  orderBy?: Prisma.InstanceLockOrderByWithRelationInput | Prisma.InstanceLockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InstanceLocks.
   */
  cursor?: Prisma.InstanceLockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceLocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceLocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InstanceLocks.
   */
  distinct?: Prisma.InstanceLockScalarFieldEnum | Prisma.InstanceLockScalarFieldEnum[]
}

/**
 * InstanceLock findFirstOrThrow
 */
export type InstanceLockFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockInclude<ExtArgs> | null
  /**
   * Filter, which InstanceLock to fetch.
   */
  where?: Prisma.InstanceLockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceLocks to fetch.
   */
  orderBy?: Prisma.InstanceLockOrderByWithRelationInput | Prisma.InstanceLockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InstanceLocks.
   */
  cursor?: Prisma.InstanceLockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceLocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceLocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InstanceLocks.
   */
  distinct?: Prisma.InstanceLockScalarFieldEnum | Prisma.InstanceLockScalarFieldEnum[]
}

/**
 * InstanceLock findMany
 */
export type InstanceLockFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockInclude<ExtArgs> | null
  /**
   * Filter, which InstanceLocks to fetch.
   */
  where?: Prisma.InstanceLockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceLocks to fetch.
   */
  orderBy?: Prisma.InstanceLockOrderByWithRelationInput | Prisma.InstanceLockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InstanceLocks.
   */
  cursor?: Prisma.InstanceLockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceLocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceLocks.
   */
  skip?: number
  distinct?: Prisma.InstanceLockScalarFieldEnum | Prisma.InstanceLockScalarFieldEnum[]
}

/**
 * InstanceLock create
 */
export type InstanceLockCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockInclude<ExtArgs> | null
  /**
   * The data needed to create a InstanceLock.
   */
  data: Prisma.XOR<Prisma.InstanceLockCreateInput, Prisma.InstanceLockUncheckedCreateInput>
}

/**
 * InstanceLock createMany
 */
export type InstanceLockCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InstanceLocks.
   */
  data: Prisma.InstanceLockCreateManyInput | Prisma.InstanceLockCreateManyInput[]
}

/**
 * InstanceLock createManyAndReturn
 */
export type InstanceLockCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * The data used to create many InstanceLocks.
   */
  data: Prisma.InstanceLockCreateManyInput | Prisma.InstanceLockCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * InstanceLock update
 */
export type InstanceLockUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockInclude<ExtArgs> | null
  /**
   * The data needed to update a InstanceLock.
   */
  data: Prisma.XOR<Prisma.InstanceLockUpdateInput, Prisma.InstanceLockUncheckedUpdateInput>
  /**
   * Choose, which InstanceLock to update.
   */
  where: Prisma.InstanceLockWhereUniqueInput
}

/**
 * InstanceLock updateMany
 */
export type InstanceLockUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InstanceLocks.
   */
  data: Prisma.XOR<Prisma.InstanceLockUpdateManyMutationInput, Prisma.InstanceLockUncheckedUpdateManyInput>
  /**
   * Filter which InstanceLocks to update
   */
  where?: Prisma.InstanceLockWhereInput
  /**
   * Limit how many InstanceLocks to update.
   */
  limit?: number
}

/**
 * InstanceLock updateManyAndReturn
 */
export type InstanceLockUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * The data used to update InstanceLocks.
   */
  data: Prisma.XOR<Prisma.InstanceLockUpdateManyMutationInput, Prisma.InstanceLockUncheckedUpdateManyInput>
  /**
   * Filter which InstanceLocks to update
   */
  where?: Prisma.InstanceLockWhereInput
  /**
   * Limit how many InstanceLocks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * InstanceLock upsert
 */
export type InstanceLockUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockInclude<ExtArgs> | null
  /**
   * The filter to search for the InstanceLock to update in case it exists.
   */
  where: Prisma.InstanceLockWhereUniqueInput
  /**
   * In case the InstanceLock found by the `where` argument doesn't exist, create a new InstanceLock with this data.
   */
  create: Prisma.XOR<Prisma.InstanceLockCreateInput, Prisma.InstanceLockUncheckedCreateInput>
  /**
   * In case the InstanceLock was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InstanceLockUpdateInput, Prisma.InstanceLockUncheckedUpdateInput>
}

/**
 * InstanceLock delete
 */
export type InstanceLockDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockInclude<ExtArgs> | null
  /**
   * Filter which InstanceLock to delete.
   */
  where: Prisma.InstanceLockWhereUniqueInput
}

/**
 * InstanceLock deleteMany
 */
export type InstanceLockDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InstanceLocks to delete
   */
  where?: Prisma.InstanceLockWhereInput
  /**
   * Limit how many InstanceLocks to delete.
   */
  limit?: number
}

/**
 * InstanceLock without action
 */
export type InstanceLockDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceLock
   */
  select?: Prisma.InstanceLockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceLock
   */
  omit?: Prisma.InstanceLockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceLockInclude<ExtArgs> | null
}
