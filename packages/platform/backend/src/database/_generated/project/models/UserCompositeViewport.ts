
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserCompositeViewport` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserCompositeViewport
 * 
 */
export type UserCompositeViewportModel = runtime.Types.Result.DefaultSelection<Prisma.$UserCompositeViewportPayload>

export type AggregateUserCompositeViewport = {
  _count: UserCompositeViewportCountAggregateOutputType | null
  _min: UserCompositeViewportMinAggregateOutputType | null
  _max: UserCompositeViewportMaxAggregateOutputType | null
}

export type UserCompositeViewportMinAggregateOutputType = {
  userId: string | null
  stateId: string | null
}

export type UserCompositeViewportMaxAggregateOutputType = {
  userId: string | null
  stateId: string | null
}

export type UserCompositeViewportCountAggregateOutputType = {
  userId: number
  stateId: number
  viewport: number
  _all: number
}


export type UserCompositeViewportMinAggregateInputType = {
  userId?: true
  stateId?: true
}

export type UserCompositeViewportMaxAggregateInputType = {
  userId?: true
  stateId?: true
}

export type UserCompositeViewportCountAggregateInputType = {
  userId?: true
  stateId?: true
  viewport?: true
  _all?: true
}

export type UserCompositeViewportAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserCompositeViewport to aggregate.
   */
  where?: Prisma.UserCompositeViewportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserCompositeViewports to fetch.
   */
  orderBy?: Prisma.UserCompositeViewportOrderByWithRelationInput | Prisma.UserCompositeViewportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserCompositeViewportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserCompositeViewports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserCompositeViewports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserCompositeViewports
  **/
  _count?: true | UserCompositeViewportCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserCompositeViewportMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserCompositeViewportMaxAggregateInputType
}

export type GetUserCompositeViewportAggregateType<T extends UserCompositeViewportAggregateArgs> = {
      [P in keyof T & keyof AggregateUserCompositeViewport]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserCompositeViewport[P]>
    : Prisma.GetScalarType<T[P], AggregateUserCompositeViewport[P]>
}




export type UserCompositeViewportGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserCompositeViewportWhereInput
  orderBy?: Prisma.UserCompositeViewportOrderByWithAggregationInput | Prisma.UserCompositeViewportOrderByWithAggregationInput[]
  by: Prisma.UserCompositeViewportScalarFieldEnum[] | Prisma.UserCompositeViewportScalarFieldEnum
  having?: Prisma.UserCompositeViewportScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserCompositeViewportCountAggregateInputType | true
  _min?: UserCompositeViewportMinAggregateInputType
  _max?: UserCompositeViewportMaxAggregateInputType
}

export type UserCompositeViewportGroupByOutputType = {
  userId: string
  stateId: string
  viewport: (unknown)
  _count: UserCompositeViewportCountAggregateOutputType | null
  _min: UserCompositeViewportMinAggregateOutputType | null
  _max: UserCompositeViewportMaxAggregateOutputType | null
}

type GetUserCompositeViewportGroupByPayload<T extends UserCompositeViewportGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserCompositeViewportGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserCompositeViewportGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserCompositeViewportGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserCompositeViewportGroupByOutputType[P]>
      }
    >
  >



export type UserCompositeViewportWhereInput = {
  AND?: Prisma.UserCompositeViewportWhereInput | Prisma.UserCompositeViewportWhereInput[]
  OR?: Prisma.UserCompositeViewportWhereInput[]
  NOT?: Prisma.UserCompositeViewportWhereInput | Prisma.UserCompositeViewportWhereInput[]
  userId?: Prisma.StringFilter<"UserCompositeViewport"> | string
  stateId?: Prisma.StringFilter<"UserCompositeViewport"> | string
  viewport?: Prisma.JsonFilter<"UserCompositeViewport">
  state?: Prisma.XOR<Prisma.InstanceStateScalarRelationFilter, Prisma.InstanceStateWhereInput>
}

export type UserCompositeViewportOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  viewport?: Prisma.SortOrder
  state?: Prisma.InstanceStateOrderByWithRelationInput
}

export type UserCompositeViewportWhereUniqueInput = Prisma.AtLeast<{
  userId_stateId?: Prisma.UserCompositeViewportUserIdStateIdCompoundUniqueInput
  AND?: Prisma.UserCompositeViewportWhereInput | Prisma.UserCompositeViewportWhereInput[]
  OR?: Prisma.UserCompositeViewportWhereInput[]
  NOT?: Prisma.UserCompositeViewportWhereInput | Prisma.UserCompositeViewportWhereInput[]
  userId?: Prisma.StringFilter<"UserCompositeViewport"> | string
  stateId?: Prisma.StringFilter<"UserCompositeViewport"> | string
  viewport?: Prisma.JsonFilter<"UserCompositeViewport">
  state?: Prisma.XOR<Prisma.InstanceStateScalarRelationFilter, Prisma.InstanceStateWhereInput>
}, "userId_stateId">

export type UserCompositeViewportOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  viewport?: Prisma.SortOrder
  _count?: Prisma.UserCompositeViewportCountOrderByAggregateInput
  _max?: Prisma.UserCompositeViewportMaxOrderByAggregateInput
  _min?: Prisma.UserCompositeViewportMinOrderByAggregateInput
}

export type UserCompositeViewportScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserCompositeViewportScalarWhereWithAggregatesInput | Prisma.UserCompositeViewportScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserCompositeViewportScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserCompositeViewportScalarWhereWithAggregatesInput | Prisma.UserCompositeViewportScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"UserCompositeViewport"> | string
  stateId?: Prisma.StringWithAggregatesFilter<"UserCompositeViewport"> | string
  viewport?: Prisma.JsonWithAggregatesFilter<"UserCompositeViewport">
}

export type UserCompositeViewportCreateInput = {
  userId: string
  viewport: (unknown)
  state: Prisma.InstanceStateCreateNestedOneWithoutUserViewportsInput
}

export type UserCompositeViewportUncheckedCreateInput = {
  userId: string
  stateId: string
  viewport: (unknown)
}

export type UserCompositeViewportUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: (unknown)
  state?: Prisma.InstanceStateUpdateOneRequiredWithoutUserViewportsNestedInput
}

export type UserCompositeViewportUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: (unknown)
}

export type UserCompositeViewportCreateManyInput = {
  userId: string
  stateId: string
  viewport: (unknown)
}

export type UserCompositeViewportUpdateManyMutationInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: (unknown)
}

export type UserCompositeViewportUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: (unknown)
}

export type UserCompositeViewportListRelationFilter = {
  every?: Prisma.UserCompositeViewportWhereInput
  some?: Prisma.UserCompositeViewportWhereInput
  none?: Prisma.UserCompositeViewportWhereInput
}

export type UserCompositeViewportOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserCompositeViewportUserIdStateIdCompoundUniqueInput = {
  userId: string
  stateId: string
}

export type UserCompositeViewportCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
  viewport?: Prisma.SortOrder
}

export type UserCompositeViewportMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
}

export type UserCompositeViewportMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  stateId?: Prisma.SortOrder
}

export type UserCompositeViewportCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.UserCompositeViewportCreateWithoutStateInput, Prisma.UserCompositeViewportUncheckedCreateWithoutStateInput> | Prisma.UserCompositeViewportCreateWithoutStateInput[] | Prisma.UserCompositeViewportUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.UserCompositeViewportCreateOrConnectWithoutStateInput | Prisma.UserCompositeViewportCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.UserCompositeViewportCreateManyStateInputEnvelope
  connect?: Prisma.UserCompositeViewportWhereUniqueInput | Prisma.UserCompositeViewportWhereUniqueInput[]
}

export type UserCompositeViewportUncheckedCreateNestedManyWithoutStateInput = {
  create?: Prisma.XOR<Prisma.UserCompositeViewportCreateWithoutStateInput, Prisma.UserCompositeViewportUncheckedCreateWithoutStateInput> | Prisma.UserCompositeViewportCreateWithoutStateInput[] | Prisma.UserCompositeViewportUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.UserCompositeViewportCreateOrConnectWithoutStateInput | Prisma.UserCompositeViewportCreateOrConnectWithoutStateInput[]
  createMany?: Prisma.UserCompositeViewportCreateManyStateInputEnvelope
  connect?: Prisma.UserCompositeViewportWhereUniqueInput | Prisma.UserCompositeViewportWhereUniqueInput[]
}

export type UserCompositeViewportUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.UserCompositeViewportCreateWithoutStateInput, Prisma.UserCompositeViewportUncheckedCreateWithoutStateInput> | Prisma.UserCompositeViewportCreateWithoutStateInput[] | Prisma.UserCompositeViewportUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.UserCompositeViewportCreateOrConnectWithoutStateInput | Prisma.UserCompositeViewportCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.UserCompositeViewportUpsertWithWhereUniqueWithoutStateInput | Prisma.UserCompositeViewportUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.UserCompositeViewportCreateManyStateInputEnvelope
  set?: Prisma.UserCompositeViewportWhereUniqueInput | Prisma.UserCompositeViewportWhereUniqueInput[]
  disconnect?: Prisma.UserCompositeViewportWhereUniqueInput | Prisma.UserCompositeViewportWhereUniqueInput[]
  delete?: Prisma.UserCompositeViewportWhereUniqueInput | Prisma.UserCompositeViewportWhereUniqueInput[]
  connect?: Prisma.UserCompositeViewportWhereUniqueInput | Prisma.UserCompositeViewportWhereUniqueInput[]
  update?: Prisma.UserCompositeViewportUpdateWithWhereUniqueWithoutStateInput | Prisma.UserCompositeViewportUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.UserCompositeViewportUpdateManyWithWhereWithoutStateInput | Prisma.UserCompositeViewportUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.UserCompositeViewportScalarWhereInput | Prisma.UserCompositeViewportScalarWhereInput[]
}

export type UserCompositeViewportUncheckedUpdateManyWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.UserCompositeViewportCreateWithoutStateInput, Prisma.UserCompositeViewportUncheckedCreateWithoutStateInput> | Prisma.UserCompositeViewportCreateWithoutStateInput[] | Prisma.UserCompositeViewportUncheckedCreateWithoutStateInput[]
  connectOrCreate?: Prisma.UserCompositeViewportCreateOrConnectWithoutStateInput | Prisma.UserCompositeViewportCreateOrConnectWithoutStateInput[]
  upsert?: Prisma.UserCompositeViewportUpsertWithWhereUniqueWithoutStateInput | Prisma.UserCompositeViewportUpsertWithWhereUniqueWithoutStateInput[]
  createMany?: Prisma.UserCompositeViewportCreateManyStateInputEnvelope
  set?: Prisma.UserCompositeViewportWhereUniqueInput | Prisma.UserCompositeViewportWhereUniqueInput[]
  disconnect?: Prisma.UserCompositeViewportWhereUniqueInput | Prisma.UserCompositeViewportWhereUniqueInput[]
  delete?: Prisma.UserCompositeViewportWhereUniqueInput | Prisma.UserCompositeViewportWhereUniqueInput[]
  connect?: Prisma.UserCompositeViewportWhereUniqueInput | Prisma.UserCompositeViewportWhereUniqueInput[]
  update?: Prisma.UserCompositeViewportUpdateWithWhereUniqueWithoutStateInput | Prisma.UserCompositeViewportUpdateWithWhereUniqueWithoutStateInput[]
  updateMany?: Prisma.UserCompositeViewportUpdateManyWithWhereWithoutStateInput | Prisma.UserCompositeViewportUpdateManyWithWhereWithoutStateInput[]
  deleteMany?: Prisma.UserCompositeViewportScalarWhereInput | Prisma.UserCompositeViewportScalarWhereInput[]
}

export type UserCompositeViewportCreateWithoutStateInput = {
  userId: string
  viewport: (unknown)
}

export type UserCompositeViewportUncheckedCreateWithoutStateInput = {
  userId: string
  viewport: (unknown)
}

export type UserCompositeViewportCreateOrConnectWithoutStateInput = {
  where: Prisma.UserCompositeViewportWhereUniqueInput
  create: Prisma.XOR<Prisma.UserCompositeViewportCreateWithoutStateInput, Prisma.UserCompositeViewportUncheckedCreateWithoutStateInput>
}

export type UserCompositeViewportCreateManyStateInputEnvelope = {
  data: Prisma.UserCompositeViewportCreateManyStateInput | Prisma.UserCompositeViewportCreateManyStateInput[]
}

export type UserCompositeViewportUpsertWithWhereUniqueWithoutStateInput = {
  where: Prisma.UserCompositeViewportWhereUniqueInput
  update: Prisma.XOR<Prisma.UserCompositeViewportUpdateWithoutStateInput, Prisma.UserCompositeViewportUncheckedUpdateWithoutStateInput>
  create: Prisma.XOR<Prisma.UserCompositeViewportCreateWithoutStateInput, Prisma.UserCompositeViewportUncheckedCreateWithoutStateInput>
}

export type UserCompositeViewportUpdateWithWhereUniqueWithoutStateInput = {
  where: Prisma.UserCompositeViewportWhereUniqueInput
  data: Prisma.XOR<Prisma.UserCompositeViewportUpdateWithoutStateInput, Prisma.UserCompositeViewportUncheckedUpdateWithoutStateInput>
}

export type UserCompositeViewportUpdateManyWithWhereWithoutStateInput = {
  where: Prisma.UserCompositeViewportScalarWhereInput
  data: Prisma.XOR<Prisma.UserCompositeViewportUpdateManyMutationInput, Prisma.UserCompositeViewportUncheckedUpdateManyWithoutStateInput>
}

export type UserCompositeViewportScalarWhereInput = {
  AND?: Prisma.UserCompositeViewportScalarWhereInput | Prisma.UserCompositeViewportScalarWhereInput[]
  OR?: Prisma.UserCompositeViewportScalarWhereInput[]
  NOT?: Prisma.UserCompositeViewportScalarWhereInput | Prisma.UserCompositeViewportScalarWhereInput[]
  userId?: Prisma.StringFilter<"UserCompositeViewport"> | string
  stateId?: Prisma.StringFilter<"UserCompositeViewport"> | string
  viewport?: Prisma.JsonFilter<"UserCompositeViewport">
}

export type UserCompositeViewportCreateManyStateInput = {
  userId: string
  viewport: (unknown)
}

export type UserCompositeViewportUpdateWithoutStateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: (unknown)
}

export type UserCompositeViewportUncheckedUpdateWithoutStateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: (unknown)
}

export type UserCompositeViewportUncheckedUpdateManyWithoutStateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}



export type UserCompositeViewportSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  stateId?: boolean
  viewport?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userCompositeViewport"]>

export type UserCompositeViewportSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  stateId?: boolean
  viewport?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userCompositeViewport"]>

export type UserCompositeViewportSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  stateId?: boolean
  viewport?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userCompositeViewport"]>

export type UserCompositeViewportSelectScalar = {
  userId?: boolean
  stateId?: boolean
  viewport?: boolean
}

export type UserCompositeViewportOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "stateId" | "viewport", ExtArgs["result"]["userCompositeViewport"]>
export type UserCompositeViewportInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}
export type UserCompositeViewportIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}
export type UserCompositeViewportIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}

export type $UserCompositeViewportPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserCompositeViewport"
  objects: {
    /**
     * The instance state to which this viewport belongs.
     */
    state: Prisma.$InstanceStatePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The opaque ID of the user to which this viewport belongs.
     */
    userId: string
    /**
     * The ID of the state of the composite instance to which this viewport belongs.
     */
    stateId: string
    /**
     * The viewport of the user composite instance managed by the frontend.
     * 
     * ![unknown]
     */
    viewport: (unknown)
  }, ExtArgs["result"]["userCompositeViewport"]>
  composites: {}
}

export type UserCompositeViewportGetPayload<S extends boolean | null | undefined | UserCompositeViewportDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload, S>

export type UserCompositeViewportCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserCompositeViewportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserCompositeViewportCountAggregateInputType | true
  }

export interface UserCompositeViewportDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCompositeViewport'], meta: { name: 'UserCompositeViewport' } }
  /**
   * Find zero or one UserCompositeViewport that matches the filter.
   * @param {UserCompositeViewportFindUniqueArgs} args - Arguments to find a UserCompositeViewport
   * @example
   * // Get one UserCompositeViewport
   * const userCompositeViewport = await prisma.userCompositeViewport.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserCompositeViewportFindUniqueArgs>(args: Prisma.SelectSubset<T, UserCompositeViewportFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserCompositeViewportClient<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserCompositeViewport that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserCompositeViewportFindUniqueOrThrowArgs} args - Arguments to find a UserCompositeViewport
   * @example
   * // Get one UserCompositeViewport
   * const userCompositeViewport = await prisma.userCompositeViewport.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserCompositeViewportFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserCompositeViewportFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserCompositeViewportClient<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserCompositeViewport that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCompositeViewportFindFirstArgs} args - Arguments to find a UserCompositeViewport
   * @example
   * // Get one UserCompositeViewport
   * const userCompositeViewport = await prisma.userCompositeViewport.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserCompositeViewportFindFirstArgs>(args?: Prisma.SelectSubset<T, UserCompositeViewportFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserCompositeViewportClient<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserCompositeViewport that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCompositeViewportFindFirstOrThrowArgs} args - Arguments to find a UserCompositeViewport
   * @example
   * // Get one UserCompositeViewport
   * const userCompositeViewport = await prisma.userCompositeViewport.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserCompositeViewportFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserCompositeViewportFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserCompositeViewportClient<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserCompositeViewports that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCompositeViewportFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserCompositeViewports
   * const userCompositeViewports = await prisma.userCompositeViewport.findMany()
   * 
   * // Get first 10 UserCompositeViewports
   * const userCompositeViewports = await prisma.userCompositeViewport.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const userCompositeViewportWithUserIdOnly = await prisma.userCompositeViewport.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UserCompositeViewportFindManyArgs>(args?: Prisma.SelectSubset<T, UserCompositeViewportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserCompositeViewport.
   * @param {UserCompositeViewportCreateArgs} args - Arguments to create a UserCompositeViewport.
   * @example
   * // Create one UserCompositeViewport
   * const UserCompositeViewport = await prisma.userCompositeViewport.create({
   *   data: {
   *     // ... data to create a UserCompositeViewport
   *   }
   * })
   * 
   */
  create<T extends UserCompositeViewportCreateArgs>(args: Prisma.SelectSubset<T, UserCompositeViewportCreateArgs<ExtArgs>>): Prisma.Prisma__UserCompositeViewportClient<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserCompositeViewports.
   * @param {UserCompositeViewportCreateManyArgs} args - Arguments to create many UserCompositeViewports.
   * @example
   * // Create many UserCompositeViewports
   * const userCompositeViewport = await prisma.userCompositeViewport.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserCompositeViewportCreateManyArgs>(args?: Prisma.SelectSubset<T, UserCompositeViewportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserCompositeViewports and returns the data saved in the database.
   * @param {UserCompositeViewportCreateManyAndReturnArgs} args - Arguments to create many UserCompositeViewports.
   * @example
   * // Create many UserCompositeViewports
   * const userCompositeViewport = await prisma.userCompositeViewport.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserCompositeViewports and only return the `userId`
   * const userCompositeViewportWithUserIdOnly = await prisma.userCompositeViewport.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserCompositeViewportCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserCompositeViewportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserCompositeViewport.
   * @param {UserCompositeViewportDeleteArgs} args - Arguments to delete one UserCompositeViewport.
   * @example
   * // Delete one UserCompositeViewport
   * const UserCompositeViewport = await prisma.userCompositeViewport.delete({
   *   where: {
   *     // ... filter to delete one UserCompositeViewport
   *   }
   * })
   * 
   */
  delete<T extends UserCompositeViewportDeleteArgs>(args: Prisma.SelectSubset<T, UserCompositeViewportDeleteArgs<ExtArgs>>): Prisma.Prisma__UserCompositeViewportClient<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserCompositeViewport.
   * @param {UserCompositeViewportUpdateArgs} args - Arguments to update one UserCompositeViewport.
   * @example
   * // Update one UserCompositeViewport
   * const userCompositeViewport = await prisma.userCompositeViewport.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserCompositeViewportUpdateArgs>(args: Prisma.SelectSubset<T, UserCompositeViewportUpdateArgs<ExtArgs>>): Prisma.Prisma__UserCompositeViewportClient<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserCompositeViewports.
   * @param {UserCompositeViewportDeleteManyArgs} args - Arguments to filter UserCompositeViewports to delete.
   * @example
   * // Delete a few UserCompositeViewports
   * const { count } = await prisma.userCompositeViewport.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserCompositeViewportDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserCompositeViewportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserCompositeViewports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCompositeViewportUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserCompositeViewports
   * const userCompositeViewport = await prisma.userCompositeViewport.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserCompositeViewportUpdateManyArgs>(args: Prisma.SelectSubset<T, UserCompositeViewportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserCompositeViewports and returns the data updated in the database.
   * @param {UserCompositeViewportUpdateManyAndReturnArgs} args - Arguments to update many UserCompositeViewports.
   * @example
   * // Update many UserCompositeViewports
   * const userCompositeViewport = await prisma.userCompositeViewport.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserCompositeViewports and only return the `userId`
   * const userCompositeViewportWithUserIdOnly = await prisma.userCompositeViewport.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserCompositeViewportUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserCompositeViewportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserCompositeViewport.
   * @param {UserCompositeViewportUpsertArgs} args - Arguments to update or create a UserCompositeViewport.
   * @example
   * // Update or create a UserCompositeViewport
   * const userCompositeViewport = await prisma.userCompositeViewport.upsert({
   *   create: {
   *     // ... data to create a UserCompositeViewport
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserCompositeViewport we want to update
   *   }
   * })
   */
  upsert<T extends UserCompositeViewportUpsertArgs>(args: Prisma.SelectSubset<T, UserCompositeViewportUpsertArgs<ExtArgs>>): Prisma.Prisma__UserCompositeViewportClient<runtime.Types.Result.GetResult<Prisma.$UserCompositeViewportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserCompositeViewports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCompositeViewportCountArgs} args - Arguments to filter UserCompositeViewports to count.
   * @example
   * // Count the number of UserCompositeViewports
   * const count = await prisma.userCompositeViewport.count({
   *   where: {
   *     // ... the filter for the UserCompositeViewports we want to count
   *   }
   * })
  **/
  count<T extends UserCompositeViewportCountArgs>(
    args?: Prisma.Subset<T, UserCompositeViewportCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserCompositeViewportCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserCompositeViewport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCompositeViewportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserCompositeViewportAggregateArgs>(args: Prisma.Subset<T, UserCompositeViewportAggregateArgs>): Prisma.PrismaPromise<GetUserCompositeViewportAggregateType<T>>

  /**
   * Group by UserCompositeViewport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserCompositeViewportGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserCompositeViewportGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserCompositeViewportGroupByArgs['orderBy'] }
      : { orderBy?: UserCompositeViewportGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserCompositeViewportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCompositeViewportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserCompositeViewport model
 */
readonly fields: UserCompositeViewportFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserCompositeViewport.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserCompositeViewportClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  state<T extends Prisma.InstanceStateDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InstanceStateDefaultArgs<ExtArgs>>): Prisma.Prisma__InstanceStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserCompositeViewport model
 */
export interface UserCompositeViewportFieldRefs {
  readonly userId: Prisma.FieldRef<"UserCompositeViewport", 'String'>
  readonly stateId: Prisma.FieldRef<"UserCompositeViewport", 'String'>
  readonly viewport: Prisma.FieldRef<"UserCompositeViewport", 'Json'>
}
    

// Custom InputTypes
/**
 * UserCompositeViewport findUnique
 */
export type UserCompositeViewportFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportInclude<ExtArgs> | null
  /**
   * Filter, which UserCompositeViewport to fetch.
   */
  where: Prisma.UserCompositeViewportWhereUniqueInput
}

/**
 * UserCompositeViewport findUniqueOrThrow
 */
export type UserCompositeViewportFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportInclude<ExtArgs> | null
  /**
   * Filter, which UserCompositeViewport to fetch.
   */
  where: Prisma.UserCompositeViewportWhereUniqueInput
}

/**
 * UserCompositeViewport findFirst
 */
export type UserCompositeViewportFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportInclude<ExtArgs> | null
  /**
   * Filter, which UserCompositeViewport to fetch.
   */
  where?: Prisma.UserCompositeViewportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserCompositeViewports to fetch.
   */
  orderBy?: Prisma.UserCompositeViewportOrderByWithRelationInput | Prisma.UserCompositeViewportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserCompositeViewports.
   */
  cursor?: Prisma.UserCompositeViewportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserCompositeViewports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserCompositeViewports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserCompositeViewports.
   */
  distinct?: Prisma.UserCompositeViewportScalarFieldEnum | Prisma.UserCompositeViewportScalarFieldEnum[]
}

/**
 * UserCompositeViewport findFirstOrThrow
 */
export type UserCompositeViewportFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportInclude<ExtArgs> | null
  /**
   * Filter, which UserCompositeViewport to fetch.
   */
  where?: Prisma.UserCompositeViewportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserCompositeViewports to fetch.
   */
  orderBy?: Prisma.UserCompositeViewportOrderByWithRelationInput | Prisma.UserCompositeViewportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserCompositeViewports.
   */
  cursor?: Prisma.UserCompositeViewportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserCompositeViewports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserCompositeViewports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserCompositeViewports.
   */
  distinct?: Prisma.UserCompositeViewportScalarFieldEnum | Prisma.UserCompositeViewportScalarFieldEnum[]
}

/**
 * UserCompositeViewport findMany
 */
export type UserCompositeViewportFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportInclude<ExtArgs> | null
  /**
   * Filter, which UserCompositeViewports to fetch.
   */
  where?: Prisma.UserCompositeViewportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserCompositeViewports to fetch.
   */
  orderBy?: Prisma.UserCompositeViewportOrderByWithRelationInput | Prisma.UserCompositeViewportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserCompositeViewports.
   */
  cursor?: Prisma.UserCompositeViewportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserCompositeViewports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserCompositeViewports.
   */
  skip?: number
  distinct?: Prisma.UserCompositeViewportScalarFieldEnum | Prisma.UserCompositeViewportScalarFieldEnum[]
}

/**
 * UserCompositeViewport create
 */
export type UserCompositeViewportCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportInclude<ExtArgs> | null
  /**
   * The data needed to create a UserCompositeViewport.
   */
  data: Prisma.XOR<Prisma.UserCompositeViewportCreateInput, Prisma.UserCompositeViewportUncheckedCreateInput>
}

/**
 * UserCompositeViewport createMany
 */
export type UserCompositeViewportCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserCompositeViewports.
   */
  data: Prisma.UserCompositeViewportCreateManyInput | Prisma.UserCompositeViewportCreateManyInput[]
}

/**
 * UserCompositeViewport createManyAndReturn
 */
export type UserCompositeViewportCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * The data used to create many UserCompositeViewports.
   */
  data: Prisma.UserCompositeViewportCreateManyInput | Prisma.UserCompositeViewportCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserCompositeViewport update
 */
export type UserCompositeViewportUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportInclude<ExtArgs> | null
  /**
   * The data needed to update a UserCompositeViewport.
   */
  data: Prisma.XOR<Prisma.UserCompositeViewportUpdateInput, Prisma.UserCompositeViewportUncheckedUpdateInput>
  /**
   * Choose, which UserCompositeViewport to update.
   */
  where: Prisma.UserCompositeViewportWhereUniqueInput
}

/**
 * UserCompositeViewport updateMany
 */
export type UserCompositeViewportUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserCompositeViewports.
   */
  data: Prisma.XOR<Prisma.UserCompositeViewportUpdateManyMutationInput, Prisma.UserCompositeViewportUncheckedUpdateManyInput>
  /**
   * Filter which UserCompositeViewports to update
   */
  where?: Prisma.UserCompositeViewportWhereInput
  /**
   * Limit how many UserCompositeViewports to update.
   */
  limit?: number
}

/**
 * UserCompositeViewport updateManyAndReturn
 */
export type UserCompositeViewportUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * The data used to update UserCompositeViewports.
   */
  data: Prisma.XOR<Prisma.UserCompositeViewportUpdateManyMutationInput, Prisma.UserCompositeViewportUncheckedUpdateManyInput>
  /**
   * Filter which UserCompositeViewports to update
   */
  where?: Prisma.UserCompositeViewportWhereInput
  /**
   * Limit how many UserCompositeViewports to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserCompositeViewport upsert
 */
export type UserCompositeViewportUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportInclude<ExtArgs> | null
  /**
   * The filter to search for the UserCompositeViewport to update in case it exists.
   */
  where: Prisma.UserCompositeViewportWhereUniqueInput
  /**
   * In case the UserCompositeViewport found by the `where` argument doesn't exist, create a new UserCompositeViewport with this data.
   */
  create: Prisma.XOR<Prisma.UserCompositeViewportCreateInput, Prisma.UserCompositeViewportUncheckedCreateInput>
  /**
   * In case the UserCompositeViewport was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserCompositeViewportUpdateInput, Prisma.UserCompositeViewportUncheckedUpdateInput>
}

/**
 * UserCompositeViewport delete
 */
export type UserCompositeViewportDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportInclude<ExtArgs> | null
  /**
   * Filter which UserCompositeViewport to delete.
   */
  where: Prisma.UserCompositeViewportWhereUniqueInput
}

/**
 * UserCompositeViewport deleteMany
 */
export type UserCompositeViewportDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserCompositeViewports to delete
   */
  where?: Prisma.UserCompositeViewportWhereInput
  /**
   * Limit how many UserCompositeViewports to delete.
   */
  limit?: number
}

/**
 * UserCompositeViewport without action
 */
export type UserCompositeViewportDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserCompositeViewport
   */
  select?: Prisma.UserCompositeViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserCompositeViewport
   */
  omit?: Prisma.UserCompositeViewportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserCompositeViewportInclude<ExtArgs> | null
}
