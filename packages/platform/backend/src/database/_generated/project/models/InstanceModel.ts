
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `InstanceModel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model InstanceModel
 * The container for project instances. 
 * 
 * Only used when "database" project model storage is used.
 */
export type InstanceModelModel = runtime.Types.Result.DefaultSelection<Prisma.$InstanceModelPayload>

export type AggregateInstanceModel = {
  _count: InstanceModelCountAggregateOutputType | null
  _min: InstanceModelMinAggregateOutputType | null
  _max: InstanceModelMaxAggregateOutputType | null
}

export type InstanceModelMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InstanceModelMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InstanceModelCountAggregateOutputType = {
  id: number
  model: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InstanceModelMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
}

export type InstanceModelMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
}

export type InstanceModelCountAggregateInputType = {
  id?: true
  model?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InstanceModelAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InstanceModel to aggregate.
   */
  where?: Prisma.InstanceModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceModels to fetch.
   */
  orderBy?: Prisma.InstanceModelOrderByWithRelationInput | Prisma.InstanceModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InstanceModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InstanceModels
  **/
  _count?: true | InstanceModelCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InstanceModelMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InstanceModelMaxAggregateInputType
}

export type GetInstanceModelAggregateType<T extends InstanceModelAggregateArgs> = {
      [P in keyof T & keyof AggregateInstanceModel]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInstanceModel[P]>
    : Prisma.GetScalarType<T[P], AggregateInstanceModel[P]>
}




export type InstanceModelGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InstanceModelWhereInput
  orderBy?: Prisma.InstanceModelOrderByWithAggregationInput | Prisma.InstanceModelOrderByWithAggregationInput[]
  by: Prisma.InstanceModelScalarFieldEnum[] | Prisma.InstanceModelScalarFieldEnum
  having?: Prisma.InstanceModelScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InstanceModelCountAggregateInputType | true
  _min?: InstanceModelMinAggregateInputType
  _max?: InstanceModelMaxAggregateInputType
}

export type InstanceModelGroupByOutputType = {
  id: string
  model: PrismaJson.InstanceModel
  createdAt: Date
  updatedAt: Date
  _count: InstanceModelCountAggregateOutputType | null
  _min: InstanceModelMinAggregateOutputType | null
  _max: InstanceModelMaxAggregateOutputType | null
}

type GetInstanceModelGroupByPayload<T extends InstanceModelGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InstanceModelGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InstanceModelGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InstanceModelGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InstanceModelGroupByOutputType[P]>
      }
    >
  >



export type InstanceModelWhereInput = {
  AND?: Prisma.InstanceModelWhereInput | Prisma.InstanceModelWhereInput[]
  OR?: Prisma.InstanceModelWhereInput[]
  NOT?: Prisma.InstanceModelWhereInput | Prisma.InstanceModelWhereInput[]
  id?: Prisma.StringFilter<"InstanceModel"> | string
  model?: Prisma.JsonFilter<"InstanceModel">
  createdAt?: Prisma.DateTimeFilter<"InstanceModel"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InstanceModel"> | Date | string
}

export type InstanceModelOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  model?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InstanceModelWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InstanceModelWhereInput | Prisma.InstanceModelWhereInput[]
  OR?: Prisma.InstanceModelWhereInput[]
  NOT?: Prisma.InstanceModelWhereInput | Prisma.InstanceModelWhereInput[]
  model?: Prisma.JsonFilter<"InstanceModel">
  createdAt?: Prisma.DateTimeFilter<"InstanceModel"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"InstanceModel"> | Date | string
}, "id">

export type InstanceModelOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  model?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InstanceModelCountOrderByAggregateInput
  _max?: Prisma.InstanceModelMaxOrderByAggregateInput
  _min?: Prisma.InstanceModelMinOrderByAggregateInput
}

export type InstanceModelScalarWhereWithAggregatesInput = {
  AND?: Prisma.InstanceModelScalarWhereWithAggregatesInput | Prisma.InstanceModelScalarWhereWithAggregatesInput[]
  OR?: Prisma.InstanceModelScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InstanceModelScalarWhereWithAggregatesInput | Prisma.InstanceModelScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"InstanceModel"> | string
  model?: Prisma.JsonWithAggregatesFilter<"InstanceModel">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"InstanceModel"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"InstanceModel"> | Date | string
}

export type InstanceModelCreateInput = {
  id: string
  model: PrismaJson.InstanceModel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InstanceModelUncheckedCreateInput = {
  id: string
  model: PrismaJson.InstanceModel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InstanceModelUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  model?: PrismaJson.InstanceModel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceModelUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  model?: PrismaJson.InstanceModel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceModelCreateManyInput = {
  id: string
  model: PrismaJson.InstanceModel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InstanceModelUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  model?: PrismaJson.InstanceModel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceModelUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  model?: PrismaJson.InstanceModel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceModelCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  model?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InstanceModelMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InstanceModelMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type InstanceModelSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  model?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["instanceModel"]>

export type InstanceModelSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  model?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["instanceModel"]>

export type InstanceModelSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  model?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["instanceModel"]>

export type InstanceModelSelectScalar = {
  id?: boolean
  model?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InstanceModelOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "model" | "createdAt" | "updatedAt", ExtArgs["result"]["instanceModel"]>

export type $InstanceModelPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InstanceModel"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The ID of the instance in the format of `{type}:{name}`.
     */
    id: string
    /**
     * The model of the instance managed by the backend.
     * 
     * [InstanceModel]
     */
    model: PrismaJson.InstanceModel
    /**
     * The time when the instance model was created.
     */
    createdAt: Date
    /**
     * The time when the instance model was last updated.
     */
    updatedAt: Date
  }, ExtArgs["result"]["instanceModel"]>
  composites: {}
}

export type InstanceModelGetPayload<S extends boolean | null | undefined | InstanceModelDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload, S>

export type InstanceModelCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InstanceModelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InstanceModelCountAggregateInputType | true
  }

export interface InstanceModelDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InstanceModel'], meta: { name: 'InstanceModel' } }
  /**
   * Find zero or one InstanceModel that matches the filter.
   * @param {InstanceModelFindUniqueArgs} args - Arguments to find a InstanceModel
   * @example
   * // Get one InstanceModel
   * const instanceModel = await prisma.instanceModel.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InstanceModelFindUniqueArgs>(args: Prisma.SelectSubset<T, InstanceModelFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InstanceModelClient<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InstanceModel that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InstanceModelFindUniqueOrThrowArgs} args - Arguments to find a InstanceModel
   * @example
   * // Get one InstanceModel
   * const instanceModel = await prisma.instanceModel.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InstanceModelFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InstanceModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InstanceModelClient<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InstanceModel that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceModelFindFirstArgs} args - Arguments to find a InstanceModel
   * @example
   * // Get one InstanceModel
   * const instanceModel = await prisma.instanceModel.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InstanceModelFindFirstArgs>(args?: Prisma.SelectSubset<T, InstanceModelFindFirstArgs<ExtArgs>>): Prisma.Prisma__InstanceModelClient<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InstanceModel that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceModelFindFirstOrThrowArgs} args - Arguments to find a InstanceModel
   * @example
   * // Get one InstanceModel
   * const instanceModel = await prisma.instanceModel.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InstanceModelFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InstanceModelFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InstanceModelClient<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InstanceModels that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceModelFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InstanceModels
   * const instanceModels = await prisma.instanceModel.findMany()
   * 
   * // Get first 10 InstanceModels
   * const instanceModels = await prisma.instanceModel.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const instanceModelWithIdOnly = await prisma.instanceModel.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InstanceModelFindManyArgs>(args?: Prisma.SelectSubset<T, InstanceModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InstanceModel.
   * @param {InstanceModelCreateArgs} args - Arguments to create a InstanceModel.
   * @example
   * // Create one InstanceModel
   * const InstanceModel = await prisma.instanceModel.create({
   *   data: {
   *     // ... data to create a InstanceModel
   *   }
   * })
   * 
   */
  create<T extends InstanceModelCreateArgs>(args: Prisma.SelectSubset<T, InstanceModelCreateArgs<ExtArgs>>): Prisma.Prisma__InstanceModelClient<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InstanceModels.
   * @param {InstanceModelCreateManyArgs} args - Arguments to create many InstanceModels.
   * @example
   * // Create many InstanceModels
   * const instanceModel = await prisma.instanceModel.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InstanceModelCreateManyArgs>(args?: Prisma.SelectSubset<T, InstanceModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InstanceModels and returns the data saved in the database.
   * @param {InstanceModelCreateManyAndReturnArgs} args - Arguments to create many InstanceModels.
   * @example
   * // Create many InstanceModels
   * const instanceModel = await prisma.instanceModel.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InstanceModels and only return the `id`
   * const instanceModelWithIdOnly = await prisma.instanceModel.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InstanceModelCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InstanceModelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InstanceModel.
   * @param {InstanceModelDeleteArgs} args - Arguments to delete one InstanceModel.
   * @example
   * // Delete one InstanceModel
   * const InstanceModel = await prisma.instanceModel.delete({
   *   where: {
   *     // ... filter to delete one InstanceModel
   *   }
   * })
   * 
   */
  delete<T extends InstanceModelDeleteArgs>(args: Prisma.SelectSubset<T, InstanceModelDeleteArgs<ExtArgs>>): Prisma.Prisma__InstanceModelClient<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InstanceModel.
   * @param {InstanceModelUpdateArgs} args - Arguments to update one InstanceModel.
   * @example
   * // Update one InstanceModel
   * const instanceModel = await prisma.instanceModel.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InstanceModelUpdateArgs>(args: Prisma.SelectSubset<T, InstanceModelUpdateArgs<ExtArgs>>): Prisma.Prisma__InstanceModelClient<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InstanceModels.
   * @param {InstanceModelDeleteManyArgs} args - Arguments to filter InstanceModels to delete.
   * @example
   * // Delete a few InstanceModels
   * const { count } = await prisma.instanceModel.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InstanceModelDeleteManyArgs>(args?: Prisma.SelectSubset<T, InstanceModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InstanceModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceModelUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InstanceModels
   * const instanceModel = await prisma.instanceModel.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InstanceModelUpdateManyArgs>(args: Prisma.SelectSubset<T, InstanceModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InstanceModels and returns the data updated in the database.
   * @param {InstanceModelUpdateManyAndReturnArgs} args - Arguments to update many InstanceModels.
   * @example
   * // Update many InstanceModels
   * const instanceModel = await prisma.instanceModel.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InstanceModels and only return the `id`
   * const instanceModelWithIdOnly = await prisma.instanceModel.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InstanceModelUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InstanceModelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InstanceModel.
   * @param {InstanceModelUpsertArgs} args - Arguments to update or create a InstanceModel.
   * @example
   * // Update or create a InstanceModel
   * const instanceModel = await prisma.instanceModel.upsert({
   *   create: {
   *     // ... data to create a InstanceModel
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InstanceModel we want to update
   *   }
   * })
   */
  upsert<T extends InstanceModelUpsertArgs>(args: Prisma.SelectSubset<T, InstanceModelUpsertArgs<ExtArgs>>): Prisma.Prisma__InstanceModelClient<runtime.Types.Result.GetResult<Prisma.$InstanceModelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InstanceModels.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceModelCountArgs} args - Arguments to filter InstanceModels to count.
   * @example
   * // Count the number of InstanceModels
   * const count = await prisma.instanceModel.count({
   *   where: {
   *     // ... the filter for the InstanceModels we want to count
   *   }
   * })
  **/
  count<T extends InstanceModelCountArgs>(
    args?: Prisma.Subset<T, InstanceModelCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InstanceModelCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InstanceModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InstanceModelAggregateArgs>(args: Prisma.Subset<T, InstanceModelAggregateArgs>): Prisma.PrismaPromise<GetInstanceModelAggregateType<T>>

  /**
   * Group by InstanceModel.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceModelGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InstanceModelGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InstanceModelGroupByArgs['orderBy'] }
      : { orderBy?: InstanceModelGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InstanceModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstanceModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InstanceModel model
 */
readonly fields: InstanceModelFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InstanceModel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InstanceModelClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InstanceModel model
 */
export interface InstanceModelFieldRefs {
  readonly id: Prisma.FieldRef<"InstanceModel", 'String'>
  readonly model: Prisma.FieldRef<"InstanceModel", 'Json'>
  readonly createdAt: Prisma.FieldRef<"InstanceModel", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"InstanceModel", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InstanceModel findUnique
 */
export type InstanceModelFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * Filter, which InstanceModel to fetch.
   */
  where: Prisma.InstanceModelWhereUniqueInput
}

/**
 * InstanceModel findUniqueOrThrow
 */
export type InstanceModelFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * Filter, which InstanceModel to fetch.
   */
  where: Prisma.InstanceModelWhereUniqueInput
}

/**
 * InstanceModel findFirst
 */
export type InstanceModelFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * Filter, which InstanceModel to fetch.
   */
  where?: Prisma.InstanceModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceModels to fetch.
   */
  orderBy?: Prisma.InstanceModelOrderByWithRelationInput | Prisma.InstanceModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InstanceModels.
   */
  cursor?: Prisma.InstanceModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InstanceModels.
   */
  distinct?: Prisma.InstanceModelScalarFieldEnum | Prisma.InstanceModelScalarFieldEnum[]
}

/**
 * InstanceModel findFirstOrThrow
 */
export type InstanceModelFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * Filter, which InstanceModel to fetch.
   */
  where?: Prisma.InstanceModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceModels to fetch.
   */
  orderBy?: Prisma.InstanceModelOrderByWithRelationInput | Prisma.InstanceModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InstanceModels.
   */
  cursor?: Prisma.InstanceModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceModels.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InstanceModels.
   */
  distinct?: Prisma.InstanceModelScalarFieldEnum | Prisma.InstanceModelScalarFieldEnum[]
}

/**
 * InstanceModel findMany
 */
export type InstanceModelFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * Filter, which InstanceModels to fetch.
   */
  where?: Prisma.InstanceModelWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceModels to fetch.
   */
  orderBy?: Prisma.InstanceModelOrderByWithRelationInput | Prisma.InstanceModelOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InstanceModels.
   */
  cursor?: Prisma.InstanceModelWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceModels from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceModels.
   */
  skip?: number
  distinct?: Prisma.InstanceModelScalarFieldEnum | Prisma.InstanceModelScalarFieldEnum[]
}

/**
 * InstanceModel create
 */
export type InstanceModelCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * The data needed to create a InstanceModel.
   */
  data: Prisma.XOR<Prisma.InstanceModelCreateInput, Prisma.InstanceModelUncheckedCreateInput>
}

/**
 * InstanceModel createMany
 */
export type InstanceModelCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InstanceModels.
   */
  data: Prisma.InstanceModelCreateManyInput | Prisma.InstanceModelCreateManyInput[]
}

/**
 * InstanceModel createManyAndReturn
 */
export type InstanceModelCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * The data used to create many InstanceModels.
   */
  data: Prisma.InstanceModelCreateManyInput | Prisma.InstanceModelCreateManyInput[]
}

/**
 * InstanceModel update
 */
export type InstanceModelUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * The data needed to update a InstanceModel.
   */
  data: Prisma.XOR<Prisma.InstanceModelUpdateInput, Prisma.InstanceModelUncheckedUpdateInput>
  /**
   * Choose, which InstanceModel to update.
   */
  where: Prisma.InstanceModelWhereUniqueInput
}

/**
 * InstanceModel updateMany
 */
export type InstanceModelUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InstanceModels.
   */
  data: Prisma.XOR<Prisma.InstanceModelUpdateManyMutationInput, Prisma.InstanceModelUncheckedUpdateManyInput>
  /**
   * Filter which InstanceModels to update
   */
  where?: Prisma.InstanceModelWhereInput
  /**
   * Limit how many InstanceModels to update.
   */
  limit?: number
}

/**
 * InstanceModel updateManyAndReturn
 */
export type InstanceModelUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * The data used to update InstanceModels.
   */
  data: Prisma.XOR<Prisma.InstanceModelUpdateManyMutationInput, Prisma.InstanceModelUncheckedUpdateManyInput>
  /**
   * Filter which InstanceModels to update
   */
  where?: Prisma.InstanceModelWhereInput
  /**
   * Limit how many InstanceModels to update.
   */
  limit?: number
}

/**
 * InstanceModel upsert
 */
export type InstanceModelUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * The filter to search for the InstanceModel to update in case it exists.
   */
  where: Prisma.InstanceModelWhereUniqueInput
  /**
   * In case the InstanceModel found by the `where` argument doesn't exist, create a new InstanceModel with this data.
   */
  create: Prisma.XOR<Prisma.InstanceModelCreateInput, Prisma.InstanceModelUncheckedCreateInput>
  /**
   * In case the InstanceModel was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InstanceModelUpdateInput, Prisma.InstanceModelUncheckedUpdateInput>
}

/**
 * InstanceModel delete
 */
export type InstanceModelDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
  /**
   * Filter which InstanceModel to delete.
   */
  where: Prisma.InstanceModelWhereUniqueInput
}

/**
 * InstanceModel deleteMany
 */
export type InstanceModelDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InstanceModels to delete
   */
  where?: Prisma.InstanceModelWhereInput
  /**
   * Limit how many InstanceModels to delete.
   */
  limit?: number
}

/**
 * InstanceModel without action
 */
export type InstanceModelDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceModel
   */
  select?: Prisma.InstanceModelSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceModel
   */
  omit?: Prisma.InstanceModelOmit<ExtArgs> | null
}
