
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WorkerVersion` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model WorkerVersion
 * The worker version represents a specific container image digest of a worker.
 * 
 * Each version corresponds to an immutable container image identified by its SHA256 digest.
 * Versions are automatically created when units reference new image digests and deleted
 * when no longer referenced by any unit registrations.
 * 
 * Each version has its own API key for isolation, but all versions of a worker
 * share the same service account and thus the same access scope within the platform.
 * The runtime starts containers when registrations exist and stops them when removed.
 */
export type WorkerVersionModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkerVersionPayload>

export type AggregateWorkerVersion = {
  _count: WorkerVersionCountAggregateOutputType | null
  _min: WorkerVersionMinAggregateOutputType | null
  _max: WorkerVersionMaxAggregateOutputType | null
}

export type WorkerVersionMinAggregateOutputType = {
  id: string | null
  status: $Enums.WorkerVersionStatus | null
  enabled: boolean | null
  runtimeId: string | null
  workerId: string | null
  digest: string | null
  apiKeyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkerVersionMaxAggregateOutputType = {
  id: string | null
  status: $Enums.WorkerVersionStatus | null
  enabled: boolean | null
  runtimeId: string | null
  workerId: string | null
  digest: string | null
  apiKeyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type WorkerVersionCountAggregateOutputType = {
  id: number
  meta: number
  status: number
  enabled: number
  runtimeId: number
  workerId: number
  digest: number
  apiKeyId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type WorkerVersionMinAggregateInputType = {
  id?: true
  status?: true
  enabled?: true
  runtimeId?: true
  workerId?: true
  digest?: true
  apiKeyId?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkerVersionMaxAggregateInputType = {
  id?: true
  status?: true
  enabled?: true
  runtimeId?: true
  workerId?: true
  digest?: true
  apiKeyId?: true
  createdAt?: true
  updatedAt?: true
}

export type WorkerVersionCountAggregateInputType = {
  id?: true
  meta?: true
  status?: true
  enabled?: true
  runtimeId?: true
  workerId?: true
  digest?: true
  apiKeyId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type WorkerVersionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkerVersion to aggregate.
   */
  where?: Prisma.WorkerVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerVersions to fetch.
   */
  orderBy?: Prisma.WorkerVersionOrderByWithRelationInput | Prisma.WorkerVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkerVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkerVersions
  **/
  _count?: true | WorkerVersionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkerVersionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkerVersionMaxAggregateInputType
}

export type GetWorkerVersionAggregateType<T extends WorkerVersionAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkerVersion]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkerVersion[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkerVersion[P]>
}




export type WorkerVersionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkerVersionWhereInput
  orderBy?: Prisma.WorkerVersionOrderByWithAggregationInput | Prisma.WorkerVersionOrderByWithAggregationInput[]
  by: Prisma.WorkerVersionScalarFieldEnum[] | Prisma.WorkerVersionScalarFieldEnum
  having?: Prisma.WorkerVersionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkerVersionCountAggregateInputType | true
  _min?: WorkerVersionMinAggregateInputType
  _max?: WorkerVersionMaxAggregateInputType
}

export type WorkerVersionGroupByOutputType = {
  id: string
  meta: PrismaJson.CommonObjectMeta
  status: $Enums.WorkerVersionStatus
  enabled: boolean
  runtimeId: string | null
  workerId: string
  digest: string
  apiKeyId: string
  createdAt: Date
  updatedAt: Date
  _count: WorkerVersionCountAggregateOutputType | null
  _min: WorkerVersionMinAggregateOutputType | null
  _max: WorkerVersionMaxAggregateOutputType | null
}

type GetWorkerVersionGroupByPayload<T extends WorkerVersionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkerVersionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkerVersionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkerVersionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkerVersionGroupByOutputType[P]>
      }
    >
  >



export type WorkerVersionWhereInput = {
  AND?: Prisma.WorkerVersionWhereInput | Prisma.WorkerVersionWhereInput[]
  OR?: Prisma.WorkerVersionWhereInput[]
  NOT?: Prisma.WorkerVersionWhereInput | Prisma.WorkerVersionWhereInput[]
  id?: Prisma.StringFilter<"WorkerVersion"> | string
  meta?: Prisma.JsonFilter<"WorkerVersion">
  status?: Prisma.EnumWorkerVersionStatusFilter<"WorkerVersion"> | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFilter<"WorkerVersion"> | boolean
  runtimeId?: Prisma.StringNullableFilter<"WorkerVersion"> | string | null
  workerId?: Prisma.StringFilter<"WorkerVersion"> | string
  digest?: Prisma.StringFilter<"WorkerVersion"> | string
  apiKeyId?: Prisma.StringFilter<"WorkerVersion"> | string
  createdAt?: Prisma.DateTimeFilter<"WorkerVersion"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkerVersion"> | Date | string
  worker?: Prisma.XOR<Prisma.WorkerScalarRelationFilter, Prisma.WorkerWhereInput>
  apiKey?: Prisma.XOR<Prisma.ApiKeyScalarRelationFilter, Prisma.ApiKeyWhereInput>
  unitRegistrations?: Prisma.WorkerUnitRegistrationListRelationFilter
  logs?: Prisma.WorkerVersionLogListRelationFilter
}

export type WorkerVersionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
  runtimeId?: Prisma.SortOrderInput | Prisma.SortOrder
  workerId?: Prisma.SortOrder
  digest?: Prisma.SortOrder
  apiKeyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  worker?: Prisma.WorkerOrderByWithRelationInput
  apiKey?: Prisma.ApiKeyOrderByWithRelationInput
  unitRegistrations?: Prisma.WorkerUnitRegistrationOrderByRelationAggregateInput
  logs?: Prisma.WorkerVersionLogOrderByRelationAggregateInput
}

export type WorkerVersionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  digest?: string
  apiKeyId?: string
  AND?: Prisma.WorkerVersionWhereInput | Prisma.WorkerVersionWhereInput[]
  OR?: Prisma.WorkerVersionWhereInput[]
  NOT?: Prisma.WorkerVersionWhereInput | Prisma.WorkerVersionWhereInput[]
  meta?: Prisma.JsonFilter<"WorkerVersion">
  status?: Prisma.EnumWorkerVersionStatusFilter<"WorkerVersion"> | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFilter<"WorkerVersion"> | boolean
  runtimeId?: Prisma.StringNullableFilter<"WorkerVersion"> | string | null
  workerId?: Prisma.StringFilter<"WorkerVersion"> | string
  createdAt?: Prisma.DateTimeFilter<"WorkerVersion"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkerVersion"> | Date | string
  worker?: Prisma.XOR<Prisma.WorkerScalarRelationFilter, Prisma.WorkerWhereInput>
  apiKey?: Prisma.XOR<Prisma.ApiKeyScalarRelationFilter, Prisma.ApiKeyWhereInput>
  unitRegistrations?: Prisma.WorkerUnitRegistrationListRelationFilter
  logs?: Prisma.WorkerVersionLogListRelationFilter
}, "id" | "digest" | "apiKeyId">

export type WorkerVersionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
  runtimeId?: Prisma.SortOrderInput | Prisma.SortOrder
  workerId?: Prisma.SortOrder
  digest?: Prisma.SortOrder
  apiKeyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.WorkerVersionCountOrderByAggregateInput
  _max?: Prisma.WorkerVersionMaxOrderByAggregateInput
  _min?: Prisma.WorkerVersionMinOrderByAggregateInput
}

export type WorkerVersionScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkerVersionScalarWhereWithAggregatesInput | Prisma.WorkerVersionScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkerVersionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkerVersionScalarWhereWithAggregatesInput | Prisma.WorkerVersionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"WorkerVersion"> | string
  meta?: Prisma.JsonWithAggregatesFilter<"WorkerVersion">
  status?: Prisma.EnumWorkerVersionStatusWithAggregatesFilter<"WorkerVersion"> | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolWithAggregatesFilter<"WorkerVersion"> | boolean
  runtimeId?: Prisma.StringNullableWithAggregatesFilter<"WorkerVersion"> | string | null
  workerId?: Prisma.StringWithAggregatesFilter<"WorkerVersion"> | string
  digest?: Prisma.StringWithAggregatesFilter<"WorkerVersion"> | string
  apiKeyId?: Prisma.StringWithAggregatesFilter<"WorkerVersion"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkerVersion"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkerVersion"> | Date | string
}

export type WorkerVersionCreateInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  digest: string
  createdAt?: Date | string
  updatedAt?: Date | string
  worker: Prisma.WorkerCreateNestedOneWithoutVersionsInput
  apiKey: Prisma.ApiKeyCreateNestedOneWithoutWorkerInput
  unitRegistrations?: Prisma.WorkerUnitRegistrationCreateNestedManyWithoutWorkerVersionInput
  logs?: Prisma.WorkerVersionLogCreateNestedManyWithoutWorkerVersionInput
}

export type WorkerVersionUncheckedCreateInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  workerId: string
  digest: string
  apiKeyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  unitRegistrations?: Prisma.WorkerUnitRegistrationUncheckedCreateNestedManyWithoutWorkerVersionInput
  logs?: Prisma.WorkerVersionLogUncheckedCreateNestedManyWithoutWorkerVersionInput
}

export type WorkerVersionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  worker?: Prisma.WorkerUpdateOneRequiredWithoutVersionsNestedInput
  apiKey?: Prisma.ApiKeyUpdateOneRequiredWithoutWorkerNestedInput
  unitRegistrations?: Prisma.WorkerUnitRegistrationUpdateManyWithoutWorkerVersionNestedInput
  logs?: Prisma.WorkerVersionLogUpdateManyWithoutWorkerVersionNestedInput
}

export type WorkerVersionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.StringFieldUpdateOperationsInput | string
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  apiKeyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  unitRegistrations?: Prisma.WorkerUnitRegistrationUncheckedUpdateManyWithoutWorkerVersionNestedInput
  logs?: Prisma.WorkerVersionLogUncheckedUpdateManyWithoutWorkerVersionNestedInput
}

export type WorkerVersionCreateManyInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  workerId: string
  digest: string
  apiKeyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkerVersionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerVersionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.StringFieldUpdateOperationsInput | string
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  apiKeyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkerVersionNullableScalarRelationFilter = {
  is?: Prisma.WorkerVersionWhereInput | null
  isNot?: Prisma.WorkerVersionWhereInput | null
}

export type WorkerVersionListRelationFilter = {
  every?: Prisma.WorkerVersionWhereInput
  some?: Prisma.WorkerVersionWhereInput
  none?: Prisma.WorkerVersionWhereInput
}

export type WorkerVersionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkerVersionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
  runtimeId?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  digest?: Prisma.SortOrder
  apiKeyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkerVersionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
  runtimeId?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  digest?: Prisma.SortOrder
  apiKeyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkerVersionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  enabled?: Prisma.SortOrder
  runtimeId?: Prisma.SortOrder
  workerId?: Prisma.SortOrder
  digest?: Prisma.SortOrder
  apiKeyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type WorkerVersionScalarRelationFilter = {
  is?: Prisma.WorkerVersionWhereInput
  isNot?: Prisma.WorkerVersionWhereInput
}

export type WorkerVersionCreateNestedOneWithoutApiKeyInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutApiKeyInput, Prisma.WorkerVersionUncheckedCreateWithoutApiKeyInput>
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutApiKeyInput
  connect?: Prisma.WorkerVersionWhereUniqueInput
}

export type WorkerVersionUncheckedCreateNestedOneWithoutApiKeyInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutApiKeyInput, Prisma.WorkerVersionUncheckedCreateWithoutApiKeyInput>
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutApiKeyInput
  connect?: Prisma.WorkerVersionWhereUniqueInput
}

export type WorkerVersionUpdateOneWithoutApiKeyNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutApiKeyInput, Prisma.WorkerVersionUncheckedCreateWithoutApiKeyInput>
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutApiKeyInput
  upsert?: Prisma.WorkerVersionUpsertWithoutApiKeyInput
  disconnect?: Prisma.WorkerVersionWhereInput | boolean
  delete?: Prisma.WorkerVersionWhereInput | boolean
  connect?: Prisma.WorkerVersionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkerVersionUpdateToOneWithWhereWithoutApiKeyInput, Prisma.WorkerVersionUpdateWithoutApiKeyInput>, Prisma.WorkerVersionUncheckedUpdateWithoutApiKeyInput>
}

export type WorkerVersionUncheckedUpdateOneWithoutApiKeyNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutApiKeyInput, Prisma.WorkerVersionUncheckedCreateWithoutApiKeyInput>
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutApiKeyInput
  upsert?: Prisma.WorkerVersionUpsertWithoutApiKeyInput
  disconnect?: Prisma.WorkerVersionWhereInput | boolean
  delete?: Prisma.WorkerVersionWhereInput | boolean
  connect?: Prisma.WorkerVersionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkerVersionUpdateToOneWithWhereWithoutApiKeyInput, Prisma.WorkerVersionUpdateWithoutApiKeyInput>, Prisma.WorkerVersionUncheckedUpdateWithoutApiKeyInput>
}

export type WorkerVersionCreateNestedManyWithoutWorkerInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutWorkerInput, Prisma.WorkerVersionUncheckedCreateWithoutWorkerInput> | Prisma.WorkerVersionCreateWithoutWorkerInput[] | Prisma.WorkerVersionUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutWorkerInput | Prisma.WorkerVersionCreateOrConnectWithoutWorkerInput[]
  createMany?: Prisma.WorkerVersionCreateManyWorkerInputEnvelope
  connect?: Prisma.WorkerVersionWhereUniqueInput | Prisma.WorkerVersionWhereUniqueInput[]
}

export type WorkerVersionUncheckedCreateNestedManyWithoutWorkerInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutWorkerInput, Prisma.WorkerVersionUncheckedCreateWithoutWorkerInput> | Prisma.WorkerVersionCreateWithoutWorkerInput[] | Prisma.WorkerVersionUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutWorkerInput | Prisma.WorkerVersionCreateOrConnectWithoutWorkerInput[]
  createMany?: Prisma.WorkerVersionCreateManyWorkerInputEnvelope
  connect?: Prisma.WorkerVersionWhereUniqueInput | Prisma.WorkerVersionWhereUniqueInput[]
}

export type WorkerVersionUpdateManyWithoutWorkerNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutWorkerInput, Prisma.WorkerVersionUncheckedCreateWithoutWorkerInput> | Prisma.WorkerVersionCreateWithoutWorkerInput[] | Prisma.WorkerVersionUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutWorkerInput | Prisma.WorkerVersionCreateOrConnectWithoutWorkerInput[]
  upsert?: Prisma.WorkerVersionUpsertWithWhereUniqueWithoutWorkerInput | Prisma.WorkerVersionUpsertWithWhereUniqueWithoutWorkerInput[]
  createMany?: Prisma.WorkerVersionCreateManyWorkerInputEnvelope
  set?: Prisma.WorkerVersionWhereUniqueInput | Prisma.WorkerVersionWhereUniqueInput[]
  disconnect?: Prisma.WorkerVersionWhereUniqueInput | Prisma.WorkerVersionWhereUniqueInput[]
  delete?: Prisma.WorkerVersionWhereUniqueInput | Prisma.WorkerVersionWhereUniqueInput[]
  connect?: Prisma.WorkerVersionWhereUniqueInput | Prisma.WorkerVersionWhereUniqueInput[]
  update?: Prisma.WorkerVersionUpdateWithWhereUniqueWithoutWorkerInput | Prisma.WorkerVersionUpdateWithWhereUniqueWithoutWorkerInput[]
  updateMany?: Prisma.WorkerVersionUpdateManyWithWhereWithoutWorkerInput | Prisma.WorkerVersionUpdateManyWithWhereWithoutWorkerInput[]
  deleteMany?: Prisma.WorkerVersionScalarWhereInput | Prisma.WorkerVersionScalarWhereInput[]
}

export type WorkerVersionUncheckedUpdateManyWithoutWorkerNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutWorkerInput, Prisma.WorkerVersionUncheckedCreateWithoutWorkerInput> | Prisma.WorkerVersionCreateWithoutWorkerInput[] | Prisma.WorkerVersionUncheckedCreateWithoutWorkerInput[]
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutWorkerInput | Prisma.WorkerVersionCreateOrConnectWithoutWorkerInput[]
  upsert?: Prisma.WorkerVersionUpsertWithWhereUniqueWithoutWorkerInput | Prisma.WorkerVersionUpsertWithWhereUniqueWithoutWorkerInput[]
  createMany?: Prisma.WorkerVersionCreateManyWorkerInputEnvelope
  set?: Prisma.WorkerVersionWhereUniqueInput | Prisma.WorkerVersionWhereUniqueInput[]
  disconnect?: Prisma.WorkerVersionWhereUniqueInput | Prisma.WorkerVersionWhereUniqueInput[]
  delete?: Prisma.WorkerVersionWhereUniqueInput | Prisma.WorkerVersionWhereUniqueInput[]
  connect?: Prisma.WorkerVersionWhereUniqueInput | Prisma.WorkerVersionWhereUniqueInput[]
  update?: Prisma.WorkerVersionUpdateWithWhereUniqueWithoutWorkerInput | Prisma.WorkerVersionUpdateWithWhereUniqueWithoutWorkerInput[]
  updateMany?: Prisma.WorkerVersionUpdateManyWithWhereWithoutWorkerInput | Prisma.WorkerVersionUpdateManyWithWhereWithoutWorkerInput[]
  deleteMany?: Prisma.WorkerVersionScalarWhereInput | Prisma.WorkerVersionScalarWhereInput[]
}

export type EnumWorkerVersionStatusFieldUpdateOperationsInput = {
  set?: $Enums.WorkerVersionStatus
}

export type WorkerVersionCreateNestedOneWithoutUnitRegistrationsInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutUnitRegistrationsInput, Prisma.WorkerVersionUncheckedCreateWithoutUnitRegistrationsInput>
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutUnitRegistrationsInput
  connect?: Prisma.WorkerVersionWhereUniqueInput
}

export type WorkerVersionUpdateOneRequiredWithoutUnitRegistrationsNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutUnitRegistrationsInput, Prisma.WorkerVersionUncheckedCreateWithoutUnitRegistrationsInput>
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutUnitRegistrationsInput
  upsert?: Prisma.WorkerVersionUpsertWithoutUnitRegistrationsInput
  connect?: Prisma.WorkerVersionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkerVersionUpdateToOneWithWhereWithoutUnitRegistrationsInput, Prisma.WorkerVersionUpdateWithoutUnitRegistrationsInput>, Prisma.WorkerVersionUncheckedUpdateWithoutUnitRegistrationsInput>
}

export type WorkerVersionCreateNestedOneWithoutLogsInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutLogsInput, Prisma.WorkerVersionUncheckedCreateWithoutLogsInput>
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutLogsInput
  connect?: Prisma.WorkerVersionWhereUniqueInput
}

export type WorkerVersionUpdateOneRequiredWithoutLogsNestedInput = {
  create?: Prisma.XOR<Prisma.WorkerVersionCreateWithoutLogsInput, Prisma.WorkerVersionUncheckedCreateWithoutLogsInput>
  connectOrCreate?: Prisma.WorkerVersionCreateOrConnectWithoutLogsInput
  upsert?: Prisma.WorkerVersionUpsertWithoutLogsInput
  connect?: Prisma.WorkerVersionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkerVersionUpdateToOneWithWhereWithoutLogsInput, Prisma.WorkerVersionUpdateWithoutLogsInput>, Prisma.WorkerVersionUncheckedUpdateWithoutLogsInput>
}

export type WorkerVersionCreateWithoutApiKeyInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  digest: string
  createdAt?: Date | string
  updatedAt?: Date | string
  worker: Prisma.WorkerCreateNestedOneWithoutVersionsInput
  unitRegistrations?: Prisma.WorkerUnitRegistrationCreateNestedManyWithoutWorkerVersionInput
  logs?: Prisma.WorkerVersionLogCreateNestedManyWithoutWorkerVersionInput
}

export type WorkerVersionUncheckedCreateWithoutApiKeyInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  workerId: string
  digest: string
  createdAt?: Date | string
  updatedAt?: Date | string
  unitRegistrations?: Prisma.WorkerUnitRegistrationUncheckedCreateNestedManyWithoutWorkerVersionInput
  logs?: Prisma.WorkerVersionLogUncheckedCreateNestedManyWithoutWorkerVersionInput
}

export type WorkerVersionCreateOrConnectWithoutApiKeyInput = {
  where: Prisma.WorkerVersionWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerVersionCreateWithoutApiKeyInput, Prisma.WorkerVersionUncheckedCreateWithoutApiKeyInput>
}

export type WorkerVersionUpsertWithoutApiKeyInput = {
  update: Prisma.XOR<Prisma.WorkerVersionUpdateWithoutApiKeyInput, Prisma.WorkerVersionUncheckedUpdateWithoutApiKeyInput>
  create: Prisma.XOR<Prisma.WorkerVersionCreateWithoutApiKeyInput, Prisma.WorkerVersionUncheckedCreateWithoutApiKeyInput>
  where?: Prisma.WorkerVersionWhereInput
}

export type WorkerVersionUpdateToOneWithWhereWithoutApiKeyInput = {
  where?: Prisma.WorkerVersionWhereInput
  data: Prisma.XOR<Prisma.WorkerVersionUpdateWithoutApiKeyInput, Prisma.WorkerVersionUncheckedUpdateWithoutApiKeyInput>
}

export type WorkerVersionUpdateWithoutApiKeyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  worker?: Prisma.WorkerUpdateOneRequiredWithoutVersionsNestedInput
  unitRegistrations?: Prisma.WorkerUnitRegistrationUpdateManyWithoutWorkerVersionNestedInput
  logs?: Prisma.WorkerVersionLogUpdateManyWithoutWorkerVersionNestedInput
}

export type WorkerVersionUncheckedUpdateWithoutApiKeyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.StringFieldUpdateOperationsInput | string
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  unitRegistrations?: Prisma.WorkerUnitRegistrationUncheckedUpdateManyWithoutWorkerVersionNestedInput
  logs?: Prisma.WorkerVersionLogUncheckedUpdateManyWithoutWorkerVersionNestedInput
}

export type WorkerVersionCreateWithoutWorkerInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  digest: string
  createdAt?: Date | string
  updatedAt?: Date | string
  apiKey: Prisma.ApiKeyCreateNestedOneWithoutWorkerInput
  unitRegistrations?: Prisma.WorkerUnitRegistrationCreateNestedManyWithoutWorkerVersionInput
  logs?: Prisma.WorkerVersionLogCreateNestedManyWithoutWorkerVersionInput
}

export type WorkerVersionUncheckedCreateWithoutWorkerInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  digest: string
  apiKeyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  unitRegistrations?: Prisma.WorkerUnitRegistrationUncheckedCreateNestedManyWithoutWorkerVersionInput
  logs?: Prisma.WorkerVersionLogUncheckedCreateNestedManyWithoutWorkerVersionInput
}

export type WorkerVersionCreateOrConnectWithoutWorkerInput = {
  where: Prisma.WorkerVersionWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerVersionCreateWithoutWorkerInput, Prisma.WorkerVersionUncheckedCreateWithoutWorkerInput>
}

export type WorkerVersionCreateManyWorkerInputEnvelope = {
  data: Prisma.WorkerVersionCreateManyWorkerInput | Prisma.WorkerVersionCreateManyWorkerInput[]
}

export type WorkerVersionUpsertWithWhereUniqueWithoutWorkerInput = {
  where: Prisma.WorkerVersionWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkerVersionUpdateWithoutWorkerInput, Prisma.WorkerVersionUncheckedUpdateWithoutWorkerInput>
  create: Prisma.XOR<Prisma.WorkerVersionCreateWithoutWorkerInput, Prisma.WorkerVersionUncheckedCreateWithoutWorkerInput>
}

export type WorkerVersionUpdateWithWhereUniqueWithoutWorkerInput = {
  where: Prisma.WorkerVersionWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkerVersionUpdateWithoutWorkerInput, Prisma.WorkerVersionUncheckedUpdateWithoutWorkerInput>
}

export type WorkerVersionUpdateManyWithWhereWithoutWorkerInput = {
  where: Prisma.WorkerVersionScalarWhereInput
  data: Prisma.XOR<Prisma.WorkerVersionUpdateManyMutationInput, Prisma.WorkerVersionUncheckedUpdateManyWithoutWorkerInput>
}

export type WorkerVersionScalarWhereInput = {
  AND?: Prisma.WorkerVersionScalarWhereInput | Prisma.WorkerVersionScalarWhereInput[]
  OR?: Prisma.WorkerVersionScalarWhereInput[]
  NOT?: Prisma.WorkerVersionScalarWhereInput | Prisma.WorkerVersionScalarWhereInput[]
  id?: Prisma.StringFilter<"WorkerVersion"> | string
  meta?: Prisma.JsonFilter<"WorkerVersion">
  status?: Prisma.EnumWorkerVersionStatusFilter<"WorkerVersion"> | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFilter<"WorkerVersion"> | boolean
  runtimeId?: Prisma.StringNullableFilter<"WorkerVersion"> | string | null
  workerId?: Prisma.StringFilter<"WorkerVersion"> | string
  digest?: Prisma.StringFilter<"WorkerVersion"> | string
  apiKeyId?: Prisma.StringFilter<"WorkerVersion"> | string
  createdAt?: Prisma.DateTimeFilter<"WorkerVersion"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkerVersion"> | Date | string
}

export type WorkerVersionCreateWithoutUnitRegistrationsInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  digest: string
  createdAt?: Date | string
  updatedAt?: Date | string
  worker: Prisma.WorkerCreateNestedOneWithoutVersionsInput
  apiKey: Prisma.ApiKeyCreateNestedOneWithoutWorkerInput
  logs?: Prisma.WorkerVersionLogCreateNestedManyWithoutWorkerVersionInput
}

export type WorkerVersionUncheckedCreateWithoutUnitRegistrationsInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  workerId: string
  digest: string
  apiKeyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  logs?: Prisma.WorkerVersionLogUncheckedCreateNestedManyWithoutWorkerVersionInput
}

export type WorkerVersionCreateOrConnectWithoutUnitRegistrationsInput = {
  where: Prisma.WorkerVersionWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerVersionCreateWithoutUnitRegistrationsInput, Prisma.WorkerVersionUncheckedCreateWithoutUnitRegistrationsInput>
}

export type WorkerVersionUpsertWithoutUnitRegistrationsInput = {
  update: Prisma.XOR<Prisma.WorkerVersionUpdateWithoutUnitRegistrationsInput, Prisma.WorkerVersionUncheckedUpdateWithoutUnitRegistrationsInput>
  create: Prisma.XOR<Prisma.WorkerVersionCreateWithoutUnitRegistrationsInput, Prisma.WorkerVersionUncheckedCreateWithoutUnitRegistrationsInput>
  where?: Prisma.WorkerVersionWhereInput
}

export type WorkerVersionUpdateToOneWithWhereWithoutUnitRegistrationsInput = {
  where?: Prisma.WorkerVersionWhereInput
  data: Prisma.XOR<Prisma.WorkerVersionUpdateWithoutUnitRegistrationsInput, Prisma.WorkerVersionUncheckedUpdateWithoutUnitRegistrationsInput>
}

export type WorkerVersionUpdateWithoutUnitRegistrationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  worker?: Prisma.WorkerUpdateOneRequiredWithoutVersionsNestedInput
  apiKey?: Prisma.ApiKeyUpdateOneRequiredWithoutWorkerNestedInput
  logs?: Prisma.WorkerVersionLogUpdateManyWithoutWorkerVersionNestedInput
}

export type WorkerVersionUncheckedUpdateWithoutUnitRegistrationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.StringFieldUpdateOperationsInput | string
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  apiKeyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  logs?: Prisma.WorkerVersionLogUncheckedUpdateManyWithoutWorkerVersionNestedInput
}

export type WorkerVersionCreateWithoutLogsInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  digest: string
  createdAt?: Date | string
  updatedAt?: Date | string
  worker: Prisma.WorkerCreateNestedOneWithoutVersionsInput
  apiKey: Prisma.ApiKeyCreateNestedOneWithoutWorkerInput
  unitRegistrations?: Prisma.WorkerUnitRegistrationCreateNestedManyWithoutWorkerVersionInput
}

export type WorkerVersionUncheckedCreateWithoutLogsInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  workerId: string
  digest: string
  apiKeyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  unitRegistrations?: Prisma.WorkerUnitRegistrationUncheckedCreateNestedManyWithoutWorkerVersionInput
}

export type WorkerVersionCreateOrConnectWithoutLogsInput = {
  where: Prisma.WorkerVersionWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkerVersionCreateWithoutLogsInput, Prisma.WorkerVersionUncheckedCreateWithoutLogsInput>
}

export type WorkerVersionUpsertWithoutLogsInput = {
  update: Prisma.XOR<Prisma.WorkerVersionUpdateWithoutLogsInput, Prisma.WorkerVersionUncheckedUpdateWithoutLogsInput>
  create: Prisma.XOR<Prisma.WorkerVersionCreateWithoutLogsInput, Prisma.WorkerVersionUncheckedCreateWithoutLogsInput>
  where?: Prisma.WorkerVersionWhereInput
}

export type WorkerVersionUpdateToOneWithWhereWithoutLogsInput = {
  where?: Prisma.WorkerVersionWhereInput
  data: Prisma.XOR<Prisma.WorkerVersionUpdateWithoutLogsInput, Prisma.WorkerVersionUncheckedUpdateWithoutLogsInput>
}

export type WorkerVersionUpdateWithoutLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  worker?: Prisma.WorkerUpdateOneRequiredWithoutVersionsNestedInput
  apiKey?: Prisma.ApiKeyUpdateOneRequiredWithoutWorkerNestedInput
  unitRegistrations?: Prisma.WorkerUnitRegistrationUpdateManyWithoutWorkerVersionNestedInput
}

export type WorkerVersionUncheckedUpdateWithoutLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  workerId?: Prisma.StringFieldUpdateOperationsInput | string
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  apiKeyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  unitRegistrations?: Prisma.WorkerUnitRegistrationUncheckedUpdateManyWithoutWorkerVersionNestedInput
}

export type WorkerVersionCreateManyWorkerInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  status?: $Enums.WorkerVersionStatus
  enabled?: boolean
  runtimeId?: string | null
  digest: string
  apiKeyId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type WorkerVersionUpdateWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  apiKey?: Prisma.ApiKeyUpdateOneRequiredWithoutWorkerNestedInput
  unitRegistrations?: Prisma.WorkerUnitRegistrationUpdateManyWithoutWorkerVersionNestedInput
  logs?: Prisma.WorkerVersionLogUpdateManyWithoutWorkerVersionNestedInput
}

export type WorkerVersionUncheckedUpdateWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  apiKeyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  unitRegistrations?: Prisma.WorkerUnitRegistrationUncheckedUpdateManyWithoutWorkerVersionNestedInput
  logs?: Prisma.WorkerVersionLogUncheckedUpdateManyWithoutWorkerVersionNestedInput
}

export type WorkerVersionUncheckedUpdateManyWithoutWorkerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  status?: Prisma.EnumWorkerVersionStatusFieldUpdateOperationsInput | $Enums.WorkerVersionStatus
  enabled?: Prisma.BoolFieldUpdateOperationsInput | boolean
  runtimeId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  digest?: Prisma.StringFieldUpdateOperationsInput | string
  apiKeyId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type WorkerVersionCountOutputType
 */

export type WorkerVersionCountOutputType = {
  unitRegistrations: number
  logs: number
}

export type WorkerVersionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  unitRegistrations?: boolean | WorkerVersionCountOutputTypeCountUnitRegistrationsArgs
  logs?: boolean | WorkerVersionCountOutputTypeCountLogsArgs
}

/**
 * WorkerVersionCountOutputType without action
 */
export type WorkerVersionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionCountOutputType
   */
  select?: Prisma.WorkerVersionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * WorkerVersionCountOutputType without action
 */
export type WorkerVersionCountOutputTypeCountUnitRegistrationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkerUnitRegistrationWhereInput
}

/**
 * WorkerVersionCountOutputType without action
 */
export type WorkerVersionCountOutputTypeCountLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkerVersionLogWhereInput
}


export type WorkerVersionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  status?: boolean
  enabled?: boolean
  runtimeId?: boolean
  workerId?: boolean
  digest?: boolean
  apiKeyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  apiKey?: boolean | Prisma.ApiKeyDefaultArgs<ExtArgs>
  unitRegistrations?: boolean | Prisma.WorkerVersion$unitRegistrationsArgs<ExtArgs>
  logs?: boolean | Prisma.WorkerVersion$logsArgs<ExtArgs>
  _count?: boolean | Prisma.WorkerVersionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workerVersion"]>

export type WorkerVersionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  status?: boolean
  enabled?: boolean
  runtimeId?: boolean
  workerId?: boolean
  digest?: boolean
  apiKeyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  apiKey?: boolean | Prisma.ApiKeyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workerVersion"]>

export type WorkerVersionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  status?: boolean
  enabled?: boolean
  runtimeId?: boolean
  workerId?: boolean
  digest?: boolean
  apiKeyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  apiKey?: boolean | Prisma.ApiKeyDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workerVersion"]>

export type WorkerVersionSelectScalar = {
  id?: boolean
  meta?: boolean
  status?: boolean
  enabled?: boolean
  runtimeId?: boolean
  workerId?: boolean
  digest?: boolean
  apiKeyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type WorkerVersionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meta" | "status" | "enabled" | "runtimeId" | "workerId" | "digest" | "apiKeyId" | "createdAt" | "updatedAt", ExtArgs["result"]["workerVersion"]>
export type WorkerVersionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  apiKey?: boolean | Prisma.ApiKeyDefaultArgs<ExtArgs>
  unitRegistrations?: boolean | Prisma.WorkerVersion$unitRegistrationsArgs<ExtArgs>
  logs?: boolean | Prisma.WorkerVersion$logsArgs<ExtArgs>
  _count?: boolean | Prisma.WorkerVersionCountOutputTypeDefaultArgs<ExtArgs>
}
export type WorkerVersionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  apiKey?: boolean | Prisma.ApiKeyDefaultArgs<ExtArgs>
}
export type WorkerVersionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  worker?: boolean | Prisma.WorkerDefaultArgs<ExtArgs>
  apiKey?: boolean | Prisma.ApiKeyDefaultArgs<ExtArgs>
}

export type $WorkerVersionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkerVersion"
  objects: {
    /**
     * The worker this version belongs to.
     */
    worker: Prisma.$WorkerPayload<ExtArgs>
    /**
     * The API key this worker version uses.
     */
    apiKey: Prisma.$ApiKeyPayload<ExtArgs>
    /**
     * The unit registrations for this worker version.
     */
    unitRegistrations: Prisma.$WorkerUnitRegistrationPayload<ExtArgs>[]
    /**
     * The logs produced by this worker version.
     */
    logs: Prisma.$WorkerVersionLogPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the worker version.
     */
    id: string
    /**
     * The metadata of the worker version managed by the backend.
     * 
     * [CommonObjectMeta]
     */
    meta: PrismaJson.CommonObjectMeta
    /**
     * The current status of the worker version reported by the runtime.
     */
    status: $Enums.WorkerVersionStatus
    /**
     * Whether this worker version is enabled and will be launched when project is unclocked.
     */
    enabled: boolean
    /**
     * The ID of the runtime where this worker version currently runs.
     */
    runtimeId: string | null
    /**
     * The ID of the worker this version belongs to.
     */
    workerId: string
    /**
     * The digest of the worker version used to identify it.
     * The format is raw SHA256 digest without the `sha256:` prefix in lowercase hex.
     */
    digest: string
    /**
     * The ID of the API key this worker version uses.
     */
    apiKeyId: string
    /**
     * The time this worker version was created.
     */
    createdAt: Date
    /**
     * The time this worker version was last updated.
     */
    updatedAt: Date
  }, ExtArgs["result"]["workerVersion"]>
  composites: {}
}

export type WorkerVersionGetPayload<S extends boolean | null | undefined | WorkerVersionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload, S>

export type WorkerVersionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkerVersionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkerVersionCountAggregateInputType | true
  }

export interface WorkerVersionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkerVersion'], meta: { name: 'WorkerVersion' } }
  /**
   * Find zero or one WorkerVersion that matches the filter.
   * @param {WorkerVersionFindUniqueArgs} args - Arguments to find a WorkerVersion
   * @example
   * // Get one WorkerVersion
   * const workerVersion = await prisma.workerVersion.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkerVersionFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkerVersionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkerVersion that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkerVersionFindUniqueOrThrowArgs} args - Arguments to find a WorkerVersion
   * @example
   * // Get one WorkerVersion
   * const workerVersion = await prisma.workerVersion.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkerVersionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkerVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkerVersion that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionFindFirstArgs} args - Arguments to find a WorkerVersion
   * @example
   * // Get one WorkerVersion
   * const workerVersion = await prisma.workerVersion.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkerVersionFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkerVersionFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkerVersion that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionFindFirstOrThrowArgs} args - Arguments to find a WorkerVersion
   * @example
   * // Get one WorkerVersion
   * const workerVersion = await prisma.workerVersion.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkerVersionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkerVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkerVersions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkerVersions
   * const workerVersions = await prisma.workerVersion.findMany()
   * 
   * // Get first 10 WorkerVersions
   * const workerVersions = await prisma.workerVersion.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workerVersionWithIdOnly = await prisma.workerVersion.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkerVersionFindManyArgs>(args?: Prisma.SelectSubset<T, WorkerVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkerVersion.
   * @param {WorkerVersionCreateArgs} args - Arguments to create a WorkerVersion.
   * @example
   * // Create one WorkerVersion
   * const WorkerVersion = await prisma.workerVersion.create({
   *   data: {
   *     // ... data to create a WorkerVersion
   *   }
   * })
   * 
   */
  create<T extends WorkerVersionCreateArgs>(args: Prisma.SelectSubset<T, WorkerVersionCreateArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkerVersions.
   * @param {WorkerVersionCreateManyArgs} args - Arguments to create many WorkerVersions.
   * @example
   * // Create many WorkerVersions
   * const workerVersion = await prisma.workerVersion.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkerVersionCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkerVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkerVersions and returns the data saved in the database.
   * @param {WorkerVersionCreateManyAndReturnArgs} args - Arguments to create many WorkerVersions.
   * @example
   * // Create many WorkerVersions
   * const workerVersion = await prisma.workerVersion.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkerVersions and only return the `id`
   * const workerVersionWithIdOnly = await prisma.workerVersion.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkerVersionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkerVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkerVersion.
   * @param {WorkerVersionDeleteArgs} args - Arguments to delete one WorkerVersion.
   * @example
   * // Delete one WorkerVersion
   * const WorkerVersion = await prisma.workerVersion.delete({
   *   where: {
   *     // ... filter to delete one WorkerVersion
   *   }
   * })
   * 
   */
  delete<T extends WorkerVersionDeleteArgs>(args: Prisma.SelectSubset<T, WorkerVersionDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkerVersion.
   * @param {WorkerVersionUpdateArgs} args - Arguments to update one WorkerVersion.
   * @example
   * // Update one WorkerVersion
   * const workerVersion = await prisma.workerVersion.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkerVersionUpdateArgs>(args: Prisma.SelectSubset<T, WorkerVersionUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkerVersions.
   * @param {WorkerVersionDeleteManyArgs} args - Arguments to filter WorkerVersions to delete.
   * @example
   * // Delete a few WorkerVersions
   * const { count } = await prisma.workerVersion.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkerVersionDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkerVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkerVersions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkerVersions
   * const workerVersion = await prisma.workerVersion.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkerVersionUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkerVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkerVersions and returns the data updated in the database.
   * @param {WorkerVersionUpdateManyAndReturnArgs} args - Arguments to update many WorkerVersions.
   * @example
   * // Update many WorkerVersions
   * const workerVersion = await prisma.workerVersion.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkerVersions and only return the `id`
   * const workerVersionWithIdOnly = await prisma.workerVersion.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkerVersionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkerVersionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkerVersion.
   * @param {WorkerVersionUpsertArgs} args - Arguments to update or create a WorkerVersion.
   * @example
   * // Update or create a WorkerVersion
   * const workerVersion = await prisma.workerVersion.upsert({
   *   create: {
   *     // ... data to create a WorkerVersion
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkerVersion we want to update
   *   }
   * })
   */
  upsert<T extends WorkerVersionUpsertArgs>(args: Prisma.SelectSubset<T, WorkerVersionUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkerVersionClient<runtime.Types.Result.GetResult<Prisma.$WorkerVersionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkerVersions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionCountArgs} args - Arguments to filter WorkerVersions to count.
   * @example
   * // Count the number of WorkerVersions
   * const count = await prisma.workerVersion.count({
   *   where: {
   *     // ... the filter for the WorkerVersions we want to count
   *   }
   * })
  **/
  count<T extends WorkerVersionCountArgs>(
    args?: Prisma.Subset<T, WorkerVersionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkerVersionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkerVersion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkerVersionAggregateArgs>(args: Prisma.Subset<T, WorkerVersionAggregateArgs>): Prisma.PrismaPromise<GetWorkerVersionAggregateType<T>>

  /**
   * Group by WorkerVersion.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkerVersionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkerVersionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkerVersionGroupByArgs['orderBy'] }
      : { orderBy?: WorkerVersionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkerVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkerVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkerVersion model
 */
readonly fields: WorkerVersionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkerVersion.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkerVersionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  worker<T extends Prisma.WorkerDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkerDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkerClient<runtime.Types.Result.GetResult<Prisma.$WorkerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  apiKey<T extends Prisma.ApiKeyDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ApiKeyDefaultArgs<ExtArgs>>): Prisma.Prisma__ApiKeyClient<runtime.Types.Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  unitRegistrations<T extends Prisma.WorkerVersion$unitRegistrationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkerVersion$unitRegistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerUnitRegistrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  logs<T extends Prisma.WorkerVersion$logsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkerVersion$logsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkerVersionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkerVersion model
 */
export interface WorkerVersionFieldRefs {
  readonly id: Prisma.FieldRef<"WorkerVersion", 'String'>
  readonly meta: Prisma.FieldRef<"WorkerVersion", 'Json'>
  readonly status: Prisma.FieldRef<"WorkerVersion", 'WorkerVersionStatus'>
  readonly enabled: Prisma.FieldRef<"WorkerVersion", 'Boolean'>
  readonly runtimeId: Prisma.FieldRef<"WorkerVersion", 'String'>
  readonly workerId: Prisma.FieldRef<"WorkerVersion", 'String'>
  readonly digest: Prisma.FieldRef<"WorkerVersion", 'String'>
  readonly apiKeyId: Prisma.FieldRef<"WorkerVersion", 'String'>
  readonly createdAt: Prisma.FieldRef<"WorkerVersion", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkerVersion", 'DateTime'>
}
    

// Custom InputTypes
/**
 * WorkerVersion findUnique
 */
export type WorkerVersionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionInclude<ExtArgs> | null
  /**
   * Filter, which WorkerVersion to fetch.
   */
  where: Prisma.WorkerVersionWhereUniqueInput
}

/**
 * WorkerVersion findUniqueOrThrow
 */
export type WorkerVersionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionInclude<ExtArgs> | null
  /**
   * Filter, which WorkerVersion to fetch.
   */
  where: Prisma.WorkerVersionWhereUniqueInput
}

/**
 * WorkerVersion findFirst
 */
export type WorkerVersionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionInclude<ExtArgs> | null
  /**
   * Filter, which WorkerVersion to fetch.
   */
  where?: Prisma.WorkerVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerVersions to fetch.
   */
  orderBy?: Prisma.WorkerVersionOrderByWithRelationInput | Prisma.WorkerVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkerVersions.
   */
  cursor?: Prisma.WorkerVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkerVersions.
   */
  distinct?: Prisma.WorkerVersionScalarFieldEnum | Prisma.WorkerVersionScalarFieldEnum[]
}

/**
 * WorkerVersion findFirstOrThrow
 */
export type WorkerVersionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionInclude<ExtArgs> | null
  /**
   * Filter, which WorkerVersion to fetch.
   */
  where?: Prisma.WorkerVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerVersions to fetch.
   */
  orderBy?: Prisma.WorkerVersionOrderByWithRelationInput | Prisma.WorkerVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkerVersions.
   */
  cursor?: Prisma.WorkerVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerVersions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkerVersions.
   */
  distinct?: Prisma.WorkerVersionScalarFieldEnum | Prisma.WorkerVersionScalarFieldEnum[]
}

/**
 * WorkerVersion findMany
 */
export type WorkerVersionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionInclude<ExtArgs> | null
  /**
   * Filter, which WorkerVersions to fetch.
   */
  where?: Prisma.WorkerVersionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkerVersions to fetch.
   */
  orderBy?: Prisma.WorkerVersionOrderByWithRelationInput | Prisma.WorkerVersionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkerVersions.
   */
  cursor?: Prisma.WorkerVersionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkerVersions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkerVersions.
   */
  skip?: number
  distinct?: Prisma.WorkerVersionScalarFieldEnum | Prisma.WorkerVersionScalarFieldEnum[]
}

/**
 * WorkerVersion create
 */
export type WorkerVersionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkerVersion.
   */
  data: Prisma.XOR<Prisma.WorkerVersionCreateInput, Prisma.WorkerVersionUncheckedCreateInput>
}

/**
 * WorkerVersion createMany
 */
export type WorkerVersionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkerVersions.
   */
  data: Prisma.WorkerVersionCreateManyInput | Prisma.WorkerVersionCreateManyInput[]
}

/**
 * WorkerVersion createManyAndReturn
 */
export type WorkerVersionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * The data used to create many WorkerVersions.
   */
  data: Prisma.WorkerVersionCreateManyInput | Prisma.WorkerVersionCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkerVersion update
 */
export type WorkerVersionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkerVersion.
   */
  data: Prisma.XOR<Prisma.WorkerVersionUpdateInput, Prisma.WorkerVersionUncheckedUpdateInput>
  /**
   * Choose, which WorkerVersion to update.
   */
  where: Prisma.WorkerVersionWhereUniqueInput
}

/**
 * WorkerVersion updateMany
 */
export type WorkerVersionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkerVersions.
   */
  data: Prisma.XOR<Prisma.WorkerVersionUpdateManyMutationInput, Prisma.WorkerVersionUncheckedUpdateManyInput>
  /**
   * Filter which WorkerVersions to update
   */
  where?: Prisma.WorkerVersionWhereInput
  /**
   * Limit how many WorkerVersions to update.
   */
  limit?: number
}

/**
 * WorkerVersion updateManyAndReturn
 */
export type WorkerVersionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * The data used to update WorkerVersions.
   */
  data: Prisma.XOR<Prisma.WorkerVersionUpdateManyMutationInput, Prisma.WorkerVersionUncheckedUpdateManyInput>
  /**
   * Filter which WorkerVersions to update
   */
  where?: Prisma.WorkerVersionWhereInput
  /**
   * Limit how many WorkerVersions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkerVersion upsert
 */
export type WorkerVersionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkerVersion to update in case it exists.
   */
  where: Prisma.WorkerVersionWhereUniqueInput
  /**
   * In case the WorkerVersion found by the `where` argument doesn't exist, create a new WorkerVersion with this data.
   */
  create: Prisma.XOR<Prisma.WorkerVersionCreateInput, Prisma.WorkerVersionUncheckedCreateInput>
  /**
   * In case the WorkerVersion was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkerVersionUpdateInput, Prisma.WorkerVersionUncheckedUpdateInput>
}

/**
 * WorkerVersion delete
 */
export type WorkerVersionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionInclude<ExtArgs> | null
  /**
   * Filter which WorkerVersion to delete.
   */
  where: Prisma.WorkerVersionWhereUniqueInput
}

/**
 * WorkerVersion deleteMany
 */
export type WorkerVersionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkerVersions to delete
   */
  where?: Prisma.WorkerVersionWhereInput
  /**
   * Limit how many WorkerVersions to delete.
   */
  limit?: number
}

/**
 * WorkerVersion.unitRegistrations
 */
export type WorkerVersion$unitRegistrationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerUnitRegistration
   */
  select?: Prisma.WorkerUnitRegistrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerUnitRegistration
   */
  omit?: Prisma.WorkerUnitRegistrationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerUnitRegistrationInclude<ExtArgs> | null
  where?: Prisma.WorkerUnitRegistrationWhereInput
  orderBy?: Prisma.WorkerUnitRegistrationOrderByWithRelationInput | Prisma.WorkerUnitRegistrationOrderByWithRelationInput[]
  cursor?: Prisma.WorkerUnitRegistrationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkerUnitRegistrationScalarFieldEnum | Prisma.WorkerUnitRegistrationScalarFieldEnum[]
}

/**
 * WorkerVersion.logs
 */
export type WorkerVersion$logsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersionLog
   */
  select?: Prisma.WorkerVersionLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersionLog
   */
  omit?: Prisma.WorkerVersionLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionLogInclude<ExtArgs> | null
  where?: Prisma.WorkerVersionLogWhereInput
  orderBy?: Prisma.WorkerVersionLogOrderByWithRelationInput | Prisma.WorkerVersionLogOrderByWithRelationInput[]
  cursor?: Prisma.WorkerVersionLogWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkerVersionLogScalarFieldEnum | Prisma.WorkerVersionLogScalarFieldEnum[]
}

/**
 * WorkerVersion without action
 */
export type WorkerVersionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkerVersion
   */
  select?: Prisma.WorkerVersionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkerVersion
   */
  omit?: Prisma.WorkerVersionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkerVersionInclude<ExtArgs> | null
}
