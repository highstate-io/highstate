
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `InstanceEvaluationState` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model InstanceEvaluationState
 * The evaluation state tracks the result of evaluating composite instances to produce virtual instances.
 * 
 * Composite instances are template components that generate other instances (virtual instances) when evaluated.
 * The evaluation process executes the composite's create function with resolved inputs to produce a tree
 * of child instances. These virtual instances exist in the source "virtual" state and can be units
 * (mapping to Pulumi resources) or other composites (producing more virtual instances recursively).
 * 
 * Evaluation happens automatically after project unlock and library reloads to keep virtual instances
 * synchronized with their composite definitions. Evaluation state persists the produced instance model
 * and tracks success/error status with descriptive messages showing the instance tree or error details.
 */
export type InstanceEvaluationStateModel = runtime.Types.Result.DefaultSelection<Prisma.$InstanceEvaluationStatePayload>

export type AggregateInstanceEvaluationState = {
  _count: InstanceEvaluationStateCountAggregateOutputType | null
  _min: InstanceEvaluationStateMinAggregateOutputType | null
  _max: InstanceEvaluationStateMaxAggregateOutputType | null
}

export type InstanceEvaluationStateMinAggregateOutputType = {
  stateId: string | null
  status: $Enums.InstanceEvaluationStatus | null
  message: string | null
  evaluatedAt: Date | null
}

export type InstanceEvaluationStateMaxAggregateOutputType = {
  stateId: string | null
  status: $Enums.InstanceEvaluationStatus | null
  message: string | null
  evaluatedAt: Date | null
}

export type InstanceEvaluationStateCountAggregateOutputType = {
  stateId: number
  status: number
  message: number
  model: number
  evaluatedAt: number
  _all: number
}


export type InstanceEvaluationStateMinAggregateInputType = {
  stateId?: true
  status?: true
  message?: true
  evaluatedAt?: true
}

export type InstanceEvaluationStateMaxAggregateInputType = {
  stateId?: true
  status?: true
  message?: true
  evaluatedAt?: true
}

export type InstanceEvaluationStateCountAggregateInputType = {
  stateId?: true
  status?: true
  message?: true
  model?: true
  evaluatedAt?: true
  _all?: true
}

export type InstanceEvaluationStateAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InstanceEvaluationState to aggregate.
   */
  where?: Prisma.InstanceEvaluationStateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceEvaluationStates to fetch.
   */
  orderBy?: Prisma.InstanceEvaluationStateOrderByWithRelationInput | Prisma.InstanceEvaluationStateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InstanceEvaluationStateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceEvaluationStates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceEvaluationStates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned InstanceEvaluationStates
  **/
  _count?: true | InstanceEvaluationStateCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InstanceEvaluationStateMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InstanceEvaluationStateMaxAggregateInputType
}

export type GetInstanceEvaluationStateAggregateType<T extends InstanceEvaluationStateAggregateArgs> = {
      [P in keyof T & keyof AggregateInstanceEvaluationState]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInstanceEvaluationState[P]>
    : Prisma.GetScalarType<T[P], AggregateInstanceEvaluationState[P]>
}




export type InstanceEvaluationStateGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InstanceEvaluationStateWhereInput
  orderBy?: Prisma.InstanceEvaluationStateOrderByWithAggregationInput | Prisma.InstanceEvaluationStateOrderByWithAggregationInput[]
  by: Prisma.InstanceEvaluationStateScalarFieldEnum[] | Prisma.InstanceEvaluationStateScalarFieldEnum
  having?: Prisma.InstanceEvaluationStateScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InstanceEvaluationStateCountAggregateInputType | true
  _min?: InstanceEvaluationStateMinAggregateInputType
  _max?: InstanceEvaluationStateMaxAggregateInputType
}

export type InstanceEvaluationStateGroupByOutputType = {
  stateId: string
  status: $Enums.InstanceEvaluationStatus
  message: string | null
  model: PrismaJson.InstanceModel | null
  evaluatedAt: Date
  _count: InstanceEvaluationStateCountAggregateOutputType | null
  _min: InstanceEvaluationStateMinAggregateOutputType | null
  _max: InstanceEvaluationStateMaxAggregateOutputType | null
}

type GetInstanceEvaluationStateGroupByPayload<T extends InstanceEvaluationStateGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InstanceEvaluationStateGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InstanceEvaluationStateGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InstanceEvaluationStateGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InstanceEvaluationStateGroupByOutputType[P]>
      }
    >
  >



export type InstanceEvaluationStateWhereInput = {
  AND?: Prisma.InstanceEvaluationStateWhereInput | Prisma.InstanceEvaluationStateWhereInput[]
  OR?: Prisma.InstanceEvaluationStateWhereInput[]
  NOT?: Prisma.InstanceEvaluationStateWhereInput | Prisma.InstanceEvaluationStateWhereInput[]
  stateId?: Prisma.StringFilter<"InstanceEvaluationState"> | string
  status?: Prisma.EnumInstanceEvaluationStatusFilter<"InstanceEvaluationState"> | $Enums.InstanceEvaluationStatus
  message?: Prisma.StringNullableFilter<"InstanceEvaluationState"> | string | null
  model?: Prisma.JsonNullableFilter<"InstanceEvaluationState">
  evaluatedAt?: Prisma.DateTimeFilter<"InstanceEvaluationState"> | Date | string
  state?: Prisma.XOR<Prisma.InstanceStateScalarRelationFilter, Prisma.InstanceStateWhereInput>
}

export type InstanceEvaluationStateOrderByWithRelationInput = {
  stateId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  model?: Prisma.SortOrderInput | Prisma.SortOrder
  evaluatedAt?: Prisma.SortOrder
  state?: Prisma.InstanceStateOrderByWithRelationInput
}

export type InstanceEvaluationStateWhereUniqueInput = Prisma.AtLeast<{
  stateId?: string
  AND?: Prisma.InstanceEvaluationStateWhereInput | Prisma.InstanceEvaluationStateWhereInput[]
  OR?: Prisma.InstanceEvaluationStateWhereInput[]
  NOT?: Prisma.InstanceEvaluationStateWhereInput | Prisma.InstanceEvaluationStateWhereInput[]
  status?: Prisma.EnumInstanceEvaluationStatusFilter<"InstanceEvaluationState"> | $Enums.InstanceEvaluationStatus
  message?: Prisma.StringNullableFilter<"InstanceEvaluationState"> | string | null
  model?: Prisma.JsonNullableFilter<"InstanceEvaluationState">
  evaluatedAt?: Prisma.DateTimeFilter<"InstanceEvaluationState"> | Date | string
  state?: Prisma.XOR<Prisma.InstanceStateScalarRelationFilter, Prisma.InstanceStateWhereInput>
}, "stateId">

export type InstanceEvaluationStateOrderByWithAggregationInput = {
  stateId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  model?: Prisma.SortOrderInput | Prisma.SortOrder
  evaluatedAt?: Prisma.SortOrder
  _count?: Prisma.InstanceEvaluationStateCountOrderByAggregateInput
  _max?: Prisma.InstanceEvaluationStateMaxOrderByAggregateInput
  _min?: Prisma.InstanceEvaluationStateMinOrderByAggregateInput
}

export type InstanceEvaluationStateScalarWhereWithAggregatesInput = {
  AND?: Prisma.InstanceEvaluationStateScalarWhereWithAggregatesInput | Prisma.InstanceEvaluationStateScalarWhereWithAggregatesInput[]
  OR?: Prisma.InstanceEvaluationStateScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InstanceEvaluationStateScalarWhereWithAggregatesInput | Prisma.InstanceEvaluationStateScalarWhereWithAggregatesInput[]
  stateId?: Prisma.StringWithAggregatesFilter<"InstanceEvaluationState"> | string
  status?: Prisma.EnumInstanceEvaluationStatusWithAggregatesFilter<"InstanceEvaluationState"> | $Enums.InstanceEvaluationStatus
  message?: Prisma.StringNullableWithAggregatesFilter<"InstanceEvaluationState"> | string | null
  model?: Prisma.JsonNullableWithAggregatesFilter<"InstanceEvaluationState">
  evaluatedAt?: Prisma.DateTimeWithAggregatesFilter<"InstanceEvaluationState"> | Date | string
}

export type InstanceEvaluationStateCreateInput = {
  status: $Enums.InstanceEvaluationStatus
  message?: string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Date | string
  state: Prisma.InstanceStateCreateNestedOneWithoutEvaluationStateInput
}

export type InstanceEvaluationStateUncheckedCreateInput = {
  stateId: string
  status: $Enums.InstanceEvaluationStatus
  message?: string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Date | string
}

export type InstanceEvaluationStateUpdateInput = {
  status?: Prisma.EnumInstanceEvaluationStatusFieldUpdateOperationsInput | $Enums.InstanceEvaluationStatus
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  state?: Prisma.InstanceStateUpdateOneRequiredWithoutEvaluationStateNestedInput
}

export type InstanceEvaluationStateUncheckedUpdateInput = {
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumInstanceEvaluationStatusFieldUpdateOperationsInput | $Enums.InstanceEvaluationStatus
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceEvaluationStateCreateManyInput = {
  stateId: string
  status: $Enums.InstanceEvaluationStatus
  message?: string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Date | string
}

export type InstanceEvaluationStateUpdateManyMutationInput = {
  status?: Prisma.EnumInstanceEvaluationStatusFieldUpdateOperationsInput | $Enums.InstanceEvaluationStatus
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceEvaluationStateUncheckedUpdateManyInput = {
  stateId?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumInstanceEvaluationStatusFieldUpdateOperationsInput | $Enums.InstanceEvaluationStatus
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceEvaluationStateCountOrderByAggregateInput = {
  stateId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrder
  model?: Prisma.SortOrder
  evaluatedAt?: Prisma.SortOrder
}

export type InstanceEvaluationStateMaxOrderByAggregateInput = {
  stateId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrder
  evaluatedAt?: Prisma.SortOrder
}

export type InstanceEvaluationStateMinOrderByAggregateInput = {
  stateId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  message?: Prisma.SortOrder
  evaluatedAt?: Prisma.SortOrder
}

export type InstanceEvaluationStateNullableScalarRelationFilter = {
  is?: Prisma.InstanceEvaluationStateWhereInput | null
  isNot?: Prisma.InstanceEvaluationStateWhereInput | null
}

export type EnumInstanceEvaluationStatusFieldUpdateOperationsInput = {
  set?: $Enums.InstanceEvaluationStatus
}

export type InstanceEvaluationStateCreateNestedOneWithoutStateInput = {
  create?: Prisma.XOR<Prisma.InstanceEvaluationStateCreateWithoutStateInput, Prisma.InstanceEvaluationStateUncheckedCreateWithoutStateInput>
  connectOrCreate?: Prisma.InstanceEvaluationStateCreateOrConnectWithoutStateInput
  connect?: Prisma.InstanceEvaluationStateWhereUniqueInput
}

export type InstanceEvaluationStateUncheckedCreateNestedOneWithoutStateInput = {
  create?: Prisma.XOR<Prisma.InstanceEvaluationStateCreateWithoutStateInput, Prisma.InstanceEvaluationStateUncheckedCreateWithoutStateInput>
  connectOrCreate?: Prisma.InstanceEvaluationStateCreateOrConnectWithoutStateInput
  connect?: Prisma.InstanceEvaluationStateWhereUniqueInput
}

export type InstanceEvaluationStateUpdateOneWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.InstanceEvaluationStateCreateWithoutStateInput, Prisma.InstanceEvaluationStateUncheckedCreateWithoutStateInput>
  connectOrCreate?: Prisma.InstanceEvaluationStateCreateOrConnectWithoutStateInput
  upsert?: Prisma.InstanceEvaluationStateUpsertWithoutStateInput
  disconnect?: Prisma.InstanceEvaluationStateWhereInput | boolean
  delete?: Prisma.InstanceEvaluationStateWhereInput | boolean
  connect?: Prisma.InstanceEvaluationStateWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InstanceEvaluationStateUpdateToOneWithWhereWithoutStateInput, Prisma.InstanceEvaluationStateUpdateWithoutStateInput>, Prisma.InstanceEvaluationStateUncheckedUpdateWithoutStateInput>
}

export type InstanceEvaluationStateUncheckedUpdateOneWithoutStateNestedInput = {
  create?: Prisma.XOR<Prisma.InstanceEvaluationStateCreateWithoutStateInput, Prisma.InstanceEvaluationStateUncheckedCreateWithoutStateInput>
  connectOrCreate?: Prisma.InstanceEvaluationStateCreateOrConnectWithoutStateInput
  upsert?: Prisma.InstanceEvaluationStateUpsertWithoutStateInput
  disconnect?: Prisma.InstanceEvaluationStateWhereInput | boolean
  delete?: Prisma.InstanceEvaluationStateWhereInput | boolean
  connect?: Prisma.InstanceEvaluationStateWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.InstanceEvaluationStateUpdateToOneWithWhereWithoutStateInput, Prisma.InstanceEvaluationStateUpdateWithoutStateInput>, Prisma.InstanceEvaluationStateUncheckedUpdateWithoutStateInput>
}

export type InstanceEvaluationStateCreateWithoutStateInput = {
  status: $Enums.InstanceEvaluationStatus
  message?: string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Date | string
}

export type InstanceEvaluationStateUncheckedCreateWithoutStateInput = {
  status: $Enums.InstanceEvaluationStatus
  message?: string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Date | string
}

export type InstanceEvaluationStateCreateOrConnectWithoutStateInput = {
  where: Prisma.InstanceEvaluationStateWhereUniqueInput
  create: Prisma.XOR<Prisma.InstanceEvaluationStateCreateWithoutStateInput, Prisma.InstanceEvaluationStateUncheckedCreateWithoutStateInput>
}

export type InstanceEvaluationStateUpsertWithoutStateInput = {
  update: Prisma.XOR<Prisma.InstanceEvaluationStateUpdateWithoutStateInput, Prisma.InstanceEvaluationStateUncheckedUpdateWithoutStateInput>
  create: Prisma.XOR<Prisma.InstanceEvaluationStateCreateWithoutStateInput, Prisma.InstanceEvaluationStateUncheckedCreateWithoutStateInput>
  where?: Prisma.InstanceEvaluationStateWhereInput
}

export type InstanceEvaluationStateUpdateToOneWithWhereWithoutStateInput = {
  where?: Prisma.InstanceEvaluationStateWhereInput
  data: Prisma.XOR<Prisma.InstanceEvaluationStateUpdateWithoutStateInput, Prisma.InstanceEvaluationStateUncheckedUpdateWithoutStateInput>
}

export type InstanceEvaluationStateUpdateWithoutStateInput = {
  status?: Prisma.EnumInstanceEvaluationStatusFieldUpdateOperationsInput | $Enums.InstanceEvaluationStatus
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InstanceEvaluationStateUncheckedUpdateWithoutStateInput = {
  status?: Prisma.EnumInstanceEvaluationStatusFieldUpdateOperationsInput | $Enums.InstanceEvaluationStatus
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  model?: PrismaJson.InstanceModel | Prisma.NullableJsonNullValueInput
  evaluatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type InstanceEvaluationStateSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  stateId?: boolean
  status?: boolean
  message?: boolean
  model?: boolean
  evaluatedAt?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["instanceEvaluationState"]>

export type InstanceEvaluationStateSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  stateId?: boolean
  status?: boolean
  message?: boolean
  model?: boolean
  evaluatedAt?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["instanceEvaluationState"]>

export type InstanceEvaluationStateSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  stateId?: boolean
  status?: boolean
  message?: boolean
  model?: boolean
  evaluatedAt?: boolean
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}, ExtArgs["result"]["instanceEvaluationState"]>

export type InstanceEvaluationStateSelectScalar = {
  stateId?: boolean
  status?: boolean
  message?: boolean
  model?: boolean
  evaluatedAt?: boolean
}

export type InstanceEvaluationStateOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"stateId" | "status" | "message" | "model" | "evaluatedAt", ExtArgs["result"]["instanceEvaluationState"]>
export type InstanceEvaluationStateInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}
export type InstanceEvaluationStateIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}
export type InstanceEvaluationStateIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  state?: boolean | Prisma.InstanceStateDefaultArgs<ExtArgs>
}

export type $InstanceEvaluationStatePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "InstanceEvaluationState"
  objects: {
    /**
     * The instance this state belongs to.
     */
    state: Prisma.$InstanceStatePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The ID of the state of the instance.
     */
    stateId: string
    /**
     * The status of the instance evaluation.
     */
    status: $Enums.InstanceEvaluationStatus
    /**
     * The message describing the evaluation status.
     * If the evaluation is failed, this message will contain the error description.
     */
    message: string | null
    /**
     * The model produced by the evaluation.
     * 
     * Will be `null` if the evaluation is failed.
     * 
     * Can be set for both: real composite instances and virtual instances produced by the evaluation.
     * 
     * [InstanceModel]
     */
    model: PrismaJson.InstanceModel | null
    /**
     * The time when the last evaluation was finished.
     */
    evaluatedAt: Date
  }, ExtArgs["result"]["instanceEvaluationState"]>
  composites: {}
}

export type InstanceEvaluationStateGetPayload<S extends boolean | null | undefined | InstanceEvaluationStateDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload, S>

export type InstanceEvaluationStateCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InstanceEvaluationStateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InstanceEvaluationStateCountAggregateInputType | true
  }

export interface InstanceEvaluationStateDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InstanceEvaluationState'], meta: { name: 'InstanceEvaluationState' } }
  /**
   * Find zero or one InstanceEvaluationState that matches the filter.
   * @param {InstanceEvaluationStateFindUniqueArgs} args - Arguments to find a InstanceEvaluationState
   * @example
   * // Get one InstanceEvaluationState
   * const instanceEvaluationState = await prisma.instanceEvaluationState.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InstanceEvaluationStateFindUniqueArgs>(args: Prisma.SelectSubset<T, InstanceEvaluationStateFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InstanceEvaluationStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one InstanceEvaluationState that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InstanceEvaluationStateFindUniqueOrThrowArgs} args - Arguments to find a InstanceEvaluationState
   * @example
   * // Get one InstanceEvaluationState
   * const instanceEvaluationState = await prisma.instanceEvaluationState.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InstanceEvaluationStateFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InstanceEvaluationStateFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InstanceEvaluationStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InstanceEvaluationState that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceEvaluationStateFindFirstArgs} args - Arguments to find a InstanceEvaluationState
   * @example
   * // Get one InstanceEvaluationState
   * const instanceEvaluationState = await prisma.instanceEvaluationState.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InstanceEvaluationStateFindFirstArgs>(args?: Prisma.SelectSubset<T, InstanceEvaluationStateFindFirstArgs<ExtArgs>>): Prisma.Prisma__InstanceEvaluationStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first InstanceEvaluationState that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceEvaluationStateFindFirstOrThrowArgs} args - Arguments to find a InstanceEvaluationState
   * @example
   * // Get one InstanceEvaluationState
   * const instanceEvaluationState = await prisma.instanceEvaluationState.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InstanceEvaluationStateFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InstanceEvaluationStateFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InstanceEvaluationStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more InstanceEvaluationStates that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceEvaluationStateFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all InstanceEvaluationStates
   * const instanceEvaluationStates = await prisma.instanceEvaluationState.findMany()
   * 
   * // Get first 10 InstanceEvaluationStates
   * const instanceEvaluationStates = await prisma.instanceEvaluationState.findMany({ take: 10 })
   * 
   * // Only select the `stateId`
   * const instanceEvaluationStateWithStateIdOnly = await prisma.instanceEvaluationState.findMany({ select: { stateId: true } })
   * 
   */
  findMany<T extends InstanceEvaluationStateFindManyArgs>(args?: Prisma.SelectSubset<T, InstanceEvaluationStateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a InstanceEvaluationState.
   * @param {InstanceEvaluationStateCreateArgs} args - Arguments to create a InstanceEvaluationState.
   * @example
   * // Create one InstanceEvaluationState
   * const InstanceEvaluationState = await prisma.instanceEvaluationState.create({
   *   data: {
   *     // ... data to create a InstanceEvaluationState
   *   }
   * })
   * 
   */
  create<T extends InstanceEvaluationStateCreateArgs>(args: Prisma.SelectSubset<T, InstanceEvaluationStateCreateArgs<ExtArgs>>): Prisma.Prisma__InstanceEvaluationStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many InstanceEvaluationStates.
   * @param {InstanceEvaluationStateCreateManyArgs} args - Arguments to create many InstanceEvaluationStates.
   * @example
   * // Create many InstanceEvaluationStates
   * const instanceEvaluationState = await prisma.instanceEvaluationState.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InstanceEvaluationStateCreateManyArgs>(args?: Prisma.SelectSubset<T, InstanceEvaluationStateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many InstanceEvaluationStates and returns the data saved in the database.
   * @param {InstanceEvaluationStateCreateManyAndReturnArgs} args - Arguments to create many InstanceEvaluationStates.
   * @example
   * // Create many InstanceEvaluationStates
   * const instanceEvaluationState = await prisma.instanceEvaluationState.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many InstanceEvaluationStates and only return the `stateId`
   * const instanceEvaluationStateWithStateIdOnly = await prisma.instanceEvaluationState.createManyAndReturn({
   *   select: { stateId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InstanceEvaluationStateCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InstanceEvaluationStateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a InstanceEvaluationState.
   * @param {InstanceEvaluationStateDeleteArgs} args - Arguments to delete one InstanceEvaluationState.
   * @example
   * // Delete one InstanceEvaluationState
   * const InstanceEvaluationState = await prisma.instanceEvaluationState.delete({
   *   where: {
   *     // ... filter to delete one InstanceEvaluationState
   *   }
   * })
   * 
   */
  delete<T extends InstanceEvaluationStateDeleteArgs>(args: Prisma.SelectSubset<T, InstanceEvaluationStateDeleteArgs<ExtArgs>>): Prisma.Prisma__InstanceEvaluationStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one InstanceEvaluationState.
   * @param {InstanceEvaluationStateUpdateArgs} args - Arguments to update one InstanceEvaluationState.
   * @example
   * // Update one InstanceEvaluationState
   * const instanceEvaluationState = await prisma.instanceEvaluationState.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InstanceEvaluationStateUpdateArgs>(args: Prisma.SelectSubset<T, InstanceEvaluationStateUpdateArgs<ExtArgs>>): Prisma.Prisma__InstanceEvaluationStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more InstanceEvaluationStates.
   * @param {InstanceEvaluationStateDeleteManyArgs} args - Arguments to filter InstanceEvaluationStates to delete.
   * @example
   * // Delete a few InstanceEvaluationStates
   * const { count } = await prisma.instanceEvaluationState.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InstanceEvaluationStateDeleteManyArgs>(args?: Prisma.SelectSubset<T, InstanceEvaluationStateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InstanceEvaluationStates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceEvaluationStateUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many InstanceEvaluationStates
   * const instanceEvaluationState = await prisma.instanceEvaluationState.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InstanceEvaluationStateUpdateManyArgs>(args: Prisma.SelectSubset<T, InstanceEvaluationStateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more InstanceEvaluationStates and returns the data updated in the database.
   * @param {InstanceEvaluationStateUpdateManyAndReturnArgs} args - Arguments to update many InstanceEvaluationStates.
   * @example
   * // Update many InstanceEvaluationStates
   * const instanceEvaluationState = await prisma.instanceEvaluationState.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more InstanceEvaluationStates and only return the `stateId`
   * const instanceEvaluationStateWithStateIdOnly = await prisma.instanceEvaluationState.updateManyAndReturn({
   *   select: { stateId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InstanceEvaluationStateUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InstanceEvaluationStateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one InstanceEvaluationState.
   * @param {InstanceEvaluationStateUpsertArgs} args - Arguments to update or create a InstanceEvaluationState.
   * @example
   * // Update or create a InstanceEvaluationState
   * const instanceEvaluationState = await prisma.instanceEvaluationState.upsert({
   *   create: {
   *     // ... data to create a InstanceEvaluationState
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the InstanceEvaluationState we want to update
   *   }
   * })
   */
  upsert<T extends InstanceEvaluationStateUpsertArgs>(args: Prisma.SelectSubset<T, InstanceEvaluationStateUpsertArgs<ExtArgs>>): Prisma.Prisma__InstanceEvaluationStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceEvaluationStatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of InstanceEvaluationStates.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceEvaluationStateCountArgs} args - Arguments to filter InstanceEvaluationStates to count.
   * @example
   * // Count the number of InstanceEvaluationStates
   * const count = await prisma.instanceEvaluationState.count({
   *   where: {
   *     // ... the filter for the InstanceEvaluationStates we want to count
   *   }
   * })
  **/
  count<T extends InstanceEvaluationStateCountArgs>(
    args?: Prisma.Subset<T, InstanceEvaluationStateCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InstanceEvaluationStateCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a InstanceEvaluationState.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceEvaluationStateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InstanceEvaluationStateAggregateArgs>(args: Prisma.Subset<T, InstanceEvaluationStateAggregateArgs>): Prisma.PrismaPromise<GetInstanceEvaluationStateAggregateType<T>>

  /**
   * Group by InstanceEvaluationState.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InstanceEvaluationStateGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InstanceEvaluationStateGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InstanceEvaluationStateGroupByArgs['orderBy'] }
      : { orderBy?: InstanceEvaluationStateGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InstanceEvaluationStateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstanceEvaluationStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the InstanceEvaluationState model
 */
readonly fields: InstanceEvaluationStateFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for InstanceEvaluationState.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InstanceEvaluationStateClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  state<T extends Prisma.InstanceStateDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.InstanceStateDefaultArgs<ExtArgs>>): Prisma.Prisma__InstanceStateClient<runtime.Types.Result.GetResult<Prisma.$InstanceStatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the InstanceEvaluationState model
 */
export interface InstanceEvaluationStateFieldRefs {
  readonly stateId: Prisma.FieldRef<"InstanceEvaluationState", 'String'>
  readonly status: Prisma.FieldRef<"InstanceEvaluationState", 'InstanceEvaluationStatus'>
  readonly message: Prisma.FieldRef<"InstanceEvaluationState", 'String'>
  readonly model: Prisma.FieldRef<"InstanceEvaluationState", 'Json'>
  readonly evaluatedAt: Prisma.FieldRef<"InstanceEvaluationState", 'DateTime'>
}
    

// Custom InputTypes
/**
 * InstanceEvaluationState findUnique
 */
export type InstanceEvaluationStateFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateInclude<ExtArgs> | null
  /**
   * Filter, which InstanceEvaluationState to fetch.
   */
  where: Prisma.InstanceEvaluationStateWhereUniqueInput
}

/**
 * InstanceEvaluationState findUniqueOrThrow
 */
export type InstanceEvaluationStateFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateInclude<ExtArgs> | null
  /**
   * Filter, which InstanceEvaluationState to fetch.
   */
  where: Prisma.InstanceEvaluationStateWhereUniqueInput
}

/**
 * InstanceEvaluationState findFirst
 */
export type InstanceEvaluationStateFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateInclude<ExtArgs> | null
  /**
   * Filter, which InstanceEvaluationState to fetch.
   */
  where?: Prisma.InstanceEvaluationStateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceEvaluationStates to fetch.
   */
  orderBy?: Prisma.InstanceEvaluationStateOrderByWithRelationInput | Prisma.InstanceEvaluationStateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InstanceEvaluationStates.
   */
  cursor?: Prisma.InstanceEvaluationStateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceEvaluationStates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceEvaluationStates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InstanceEvaluationStates.
   */
  distinct?: Prisma.InstanceEvaluationStateScalarFieldEnum | Prisma.InstanceEvaluationStateScalarFieldEnum[]
}

/**
 * InstanceEvaluationState findFirstOrThrow
 */
export type InstanceEvaluationStateFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateInclude<ExtArgs> | null
  /**
   * Filter, which InstanceEvaluationState to fetch.
   */
  where?: Prisma.InstanceEvaluationStateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceEvaluationStates to fetch.
   */
  orderBy?: Prisma.InstanceEvaluationStateOrderByWithRelationInput | Prisma.InstanceEvaluationStateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for InstanceEvaluationStates.
   */
  cursor?: Prisma.InstanceEvaluationStateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceEvaluationStates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceEvaluationStates.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of InstanceEvaluationStates.
   */
  distinct?: Prisma.InstanceEvaluationStateScalarFieldEnum | Prisma.InstanceEvaluationStateScalarFieldEnum[]
}

/**
 * InstanceEvaluationState findMany
 */
export type InstanceEvaluationStateFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateInclude<ExtArgs> | null
  /**
   * Filter, which InstanceEvaluationStates to fetch.
   */
  where?: Prisma.InstanceEvaluationStateWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of InstanceEvaluationStates to fetch.
   */
  orderBy?: Prisma.InstanceEvaluationStateOrderByWithRelationInput | Prisma.InstanceEvaluationStateOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing InstanceEvaluationStates.
   */
  cursor?: Prisma.InstanceEvaluationStateWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` InstanceEvaluationStates from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` InstanceEvaluationStates.
   */
  skip?: number
  distinct?: Prisma.InstanceEvaluationStateScalarFieldEnum | Prisma.InstanceEvaluationStateScalarFieldEnum[]
}

/**
 * InstanceEvaluationState create
 */
export type InstanceEvaluationStateCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateInclude<ExtArgs> | null
  /**
   * The data needed to create a InstanceEvaluationState.
   */
  data: Prisma.XOR<Prisma.InstanceEvaluationStateCreateInput, Prisma.InstanceEvaluationStateUncheckedCreateInput>
}

/**
 * InstanceEvaluationState createMany
 */
export type InstanceEvaluationStateCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many InstanceEvaluationStates.
   */
  data: Prisma.InstanceEvaluationStateCreateManyInput | Prisma.InstanceEvaluationStateCreateManyInput[]
}

/**
 * InstanceEvaluationState createManyAndReturn
 */
export type InstanceEvaluationStateCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * The data used to create many InstanceEvaluationStates.
   */
  data: Prisma.InstanceEvaluationStateCreateManyInput | Prisma.InstanceEvaluationStateCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * InstanceEvaluationState update
 */
export type InstanceEvaluationStateUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateInclude<ExtArgs> | null
  /**
   * The data needed to update a InstanceEvaluationState.
   */
  data: Prisma.XOR<Prisma.InstanceEvaluationStateUpdateInput, Prisma.InstanceEvaluationStateUncheckedUpdateInput>
  /**
   * Choose, which InstanceEvaluationState to update.
   */
  where: Prisma.InstanceEvaluationStateWhereUniqueInput
}

/**
 * InstanceEvaluationState updateMany
 */
export type InstanceEvaluationStateUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update InstanceEvaluationStates.
   */
  data: Prisma.XOR<Prisma.InstanceEvaluationStateUpdateManyMutationInput, Prisma.InstanceEvaluationStateUncheckedUpdateManyInput>
  /**
   * Filter which InstanceEvaluationStates to update
   */
  where?: Prisma.InstanceEvaluationStateWhereInput
  /**
   * Limit how many InstanceEvaluationStates to update.
   */
  limit?: number
}

/**
 * InstanceEvaluationState updateManyAndReturn
 */
export type InstanceEvaluationStateUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * The data used to update InstanceEvaluationStates.
   */
  data: Prisma.XOR<Prisma.InstanceEvaluationStateUpdateManyMutationInput, Prisma.InstanceEvaluationStateUncheckedUpdateManyInput>
  /**
   * Filter which InstanceEvaluationStates to update
   */
  where?: Prisma.InstanceEvaluationStateWhereInput
  /**
   * Limit how many InstanceEvaluationStates to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * InstanceEvaluationState upsert
 */
export type InstanceEvaluationStateUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateInclude<ExtArgs> | null
  /**
   * The filter to search for the InstanceEvaluationState to update in case it exists.
   */
  where: Prisma.InstanceEvaluationStateWhereUniqueInput
  /**
   * In case the InstanceEvaluationState found by the `where` argument doesn't exist, create a new InstanceEvaluationState with this data.
   */
  create: Prisma.XOR<Prisma.InstanceEvaluationStateCreateInput, Prisma.InstanceEvaluationStateUncheckedCreateInput>
  /**
   * In case the InstanceEvaluationState was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InstanceEvaluationStateUpdateInput, Prisma.InstanceEvaluationStateUncheckedUpdateInput>
}

/**
 * InstanceEvaluationState delete
 */
export type InstanceEvaluationStateDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateInclude<ExtArgs> | null
  /**
   * Filter which InstanceEvaluationState to delete.
   */
  where: Prisma.InstanceEvaluationStateWhereUniqueInput
}

/**
 * InstanceEvaluationState deleteMany
 */
export type InstanceEvaluationStateDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which InstanceEvaluationStates to delete
   */
  where?: Prisma.InstanceEvaluationStateWhereInput
  /**
   * Limit how many InstanceEvaluationStates to delete.
   */
  limit?: number
}

/**
 * InstanceEvaluationState without action
 */
export type InstanceEvaluationStateDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the InstanceEvaluationState
   */
  select?: Prisma.InstanceEvaluationStateSelect<ExtArgs> | null
  /**
   * Omit specific fields from the InstanceEvaluationState
   */
  omit?: Prisma.InstanceEvaluationStateOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InstanceEvaluationStateInclude<ExtArgs> | null
}
