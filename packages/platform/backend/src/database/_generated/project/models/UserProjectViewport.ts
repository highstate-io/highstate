
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserProjectViewport` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserProjectViewport
 * 
 */
export type UserProjectViewportModel = runtime.Types.Result.DefaultSelection<Prisma.$UserProjectViewportPayload>

export type AggregateUserProjectViewport = {
  _count: UserProjectViewportCountAggregateOutputType | null
  _min: UserProjectViewportMinAggregateOutputType | null
  _max: UserProjectViewportMaxAggregateOutputType | null
}

export type UserProjectViewportMinAggregateOutputType = {
  userId: string | null
}

export type UserProjectViewportMaxAggregateOutputType = {
  userId: string | null
}

export type UserProjectViewportCountAggregateOutputType = {
  userId: number
  viewport: number
  _all: number
}


export type UserProjectViewportMinAggregateInputType = {
  userId?: true
}

export type UserProjectViewportMaxAggregateInputType = {
  userId?: true
}

export type UserProjectViewportCountAggregateInputType = {
  userId?: true
  viewport?: true
  _all?: true
}

export type UserProjectViewportAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserProjectViewport to aggregate.
   */
  where?: Prisma.UserProjectViewportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProjectViewports to fetch.
   */
  orderBy?: Prisma.UserProjectViewportOrderByWithRelationInput | Prisma.UserProjectViewportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserProjectViewportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProjectViewports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProjectViewports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserProjectViewports
  **/
  _count?: true | UserProjectViewportCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserProjectViewportMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserProjectViewportMaxAggregateInputType
}

export type GetUserProjectViewportAggregateType<T extends UserProjectViewportAggregateArgs> = {
      [P in keyof T & keyof AggregateUserProjectViewport]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserProjectViewport[P]>
    : Prisma.GetScalarType<T[P], AggregateUserProjectViewport[P]>
}




export type UserProjectViewportGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserProjectViewportWhereInput
  orderBy?: Prisma.UserProjectViewportOrderByWithAggregationInput | Prisma.UserProjectViewportOrderByWithAggregationInput[]
  by: Prisma.UserProjectViewportScalarFieldEnum[] | Prisma.UserProjectViewportScalarFieldEnum
  having?: Prisma.UserProjectViewportScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserProjectViewportCountAggregateInputType | true
  _min?: UserProjectViewportMinAggregateInputType
  _max?: UserProjectViewportMaxAggregateInputType
}

export type UserProjectViewportGroupByOutputType = {
  userId: string
  viewport: (unknown)
  _count: UserProjectViewportCountAggregateOutputType | null
  _min: UserProjectViewportMinAggregateOutputType | null
  _max: UserProjectViewportMaxAggregateOutputType | null
}

type GetUserProjectViewportGroupByPayload<T extends UserProjectViewportGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserProjectViewportGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserProjectViewportGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserProjectViewportGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserProjectViewportGroupByOutputType[P]>
      }
    >
  >



export type UserProjectViewportWhereInput = {
  AND?: Prisma.UserProjectViewportWhereInput | Prisma.UserProjectViewportWhereInput[]
  OR?: Prisma.UserProjectViewportWhereInput[]
  NOT?: Prisma.UserProjectViewportWhereInput | Prisma.UserProjectViewportWhereInput[]
  userId?: Prisma.StringFilter<"UserProjectViewport"> | string
  viewport?: Prisma.JsonFilter<"UserProjectViewport">
}

export type UserProjectViewportOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  viewport?: Prisma.SortOrder
}

export type UserProjectViewportWhereUniqueInput = Prisma.AtLeast<{
  userId?: string
  AND?: Prisma.UserProjectViewportWhereInput | Prisma.UserProjectViewportWhereInput[]
  OR?: Prisma.UserProjectViewportWhereInput[]
  NOT?: Prisma.UserProjectViewportWhereInput | Prisma.UserProjectViewportWhereInput[]
  viewport?: Prisma.JsonFilter<"UserProjectViewport">
}, "userId">

export type UserProjectViewportOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  viewport?: Prisma.SortOrder
  _count?: Prisma.UserProjectViewportCountOrderByAggregateInput
  _max?: Prisma.UserProjectViewportMaxOrderByAggregateInput
  _min?: Prisma.UserProjectViewportMinOrderByAggregateInput
}

export type UserProjectViewportScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserProjectViewportScalarWhereWithAggregatesInput | Prisma.UserProjectViewportScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserProjectViewportScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserProjectViewportScalarWhereWithAggregatesInput | Prisma.UserProjectViewportScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"UserProjectViewport"> | string
  viewport?: Prisma.JsonWithAggregatesFilter<"UserProjectViewport">
}

export type UserProjectViewportCreateInput = {
  userId: string
  viewport: (unknown)
}

export type UserProjectViewportUncheckedCreateInput = {
  userId: string
  viewport: (unknown)
}

export type UserProjectViewportUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: (unknown)
}

export type UserProjectViewportUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: (unknown)
}

export type UserProjectViewportCreateManyInput = {
  userId: string
  viewport: (unknown)
}

export type UserProjectViewportUpdateManyMutationInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: (unknown)
}

export type UserProjectViewportUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewport?: (unknown)
}

export type UserProjectViewportCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  viewport?: Prisma.SortOrder
}

export type UserProjectViewportMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
}

export type UserProjectViewportMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
}



export type UserProjectViewportSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  viewport?: boolean
}, ExtArgs["result"]["userProjectViewport"]>

export type UserProjectViewportSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  viewport?: boolean
}, ExtArgs["result"]["userProjectViewport"]>

export type UserProjectViewportSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  viewport?: boolean
}, ExtArgs["result"]["userProjectViewport"]>

export type UserProjectViewportSelectScalar = {
  userId?: boolean
  viewport?: boolean
}

export type UserProjectViewportOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "viewport", ExtArgs["result"]["userProjectViewport"]>

export type $UserProjectViewportPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserProjectViewport"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The opaque ID of the user to which this viewport belongs.
     */
    userId: string
    /**
     * The viewport of the user project managed by the frontend.
     * 
     * ![unknown]
     */
    viewport: (unknown)
  }, ExtArgs["result"]["userProjectViewport"]>
  composites: {}
}

export type UserProjectViewportGetPayload<S extends boolean | null | undefined | UserProjectViewportDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload, S>

export type UserProjectViewportCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserProjectViewportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserProjectViewportCountAggregateInputType | true
  }

export interface UserProjectViewportDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProjectViewport'], meta: { name: 'UserProjectViewport' } }
  /**
   * Find zero or one UserProjectViewport that matches the filter.
   * @param {UserProjectViewportFindUniqueArgs} args - Arguments to find a UserProjectViewport
   * @example
   * // Get one UserProjectViewport
   * const userProjectViewport = await prisma.userProjectViewport.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserProjectViewportFindUniqueArgs>(args: Prisma.SelectSubset<T, UserProjectViewportFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserProjectViewportClient<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserProjectViewport that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserProjectViewportFindUniqueOrThrowArgs} args - Arguments to find a UserProjectViewport
   * @example
   * // Get one UserProjectViewport
   * const userProjectViewport = await prisma.userProjectViewport.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserProjectViewportFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserProjectViewportFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserProjectViewportClient<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserProjectViewport that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProjectViewportFindFirstArgs} args - Arguments to find a UserProjectViewport
   * @example
   * // Get one UserProjectViewport
   * const userProjectViewport = await prisma.userProjectViewport.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserProjectViewportFindFirstArgs>(args?: Prisma.SelectSubset<T, UserProjectViewportFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserProjectViewportClient<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserProjectViewport that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProjectViewportFindFirstOrThrowArgs} args - Arguments to find a UserProjectViewport
   * @example
   * // Get one UserProjectViewport
   * const userProjectViewport = await prisma.userProjectViewport.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserProjectViewportFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserProjectViewportFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserProjectViewportClient<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserProjectViewports that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProjectViewportFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserProjectViewports
   * const userProjectViewports = await prisma.userProjectViewport.findMany()
   * 
   * // Get first 10 UserProjectViewports
   * const userProjectViewports = await prisma.userProjectViewport.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const userProjectViewportWithUserIdOnly = await prisma.userProjectViewport.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UserProjectViewportFindManyArgs>(args?: Prisma.SelectSubset<T, UserProjectViewportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserProjectViewport.
   * @param {UserProjectViewportCreateArgs} args - Arguments to create a UserProjectViewport.
   * @example
   * // Create one UserProjectViewport
   * const UserProjectViewport = await prisma.userProjectViewport.create({
   *   data: {
   *     // ... data to create a UserProjectViewport
   *   }
   * })
   * 
   */
  create<T extends UserProjectViewportCreateArgs>(args: Prisma.SelectSubset<T, UserProjectViewportCreateArgs<ExtArgs>>): Prisma.Prisma__UserProjectViewportClient<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserProjectViewports.
   * @param {UserProjectViewportCreateManyArgs} args - Arguments to create many UserProjectViewports.
   * @example
   * // Create many UserProjectViewports
   * const userProjectViewport = await prisma.userProjectViewport.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserProjectViewportCreateManyArgs>(args?: Prisma.SelectSubset<T, UserProjectViewportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserProjectViewports and returns the data saved in the database.
   * @param {UserProjectViewportCreateManyAndReturnArgs} args - Arguments to create many UserProjectViewports.
   * @example
   * // Create many UserProjectViewports
   * const userProjectViewport = await prisma.userProjectViewport.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserProjectViewports and only return the `userId`
   * const userProjectViewportWithUserIdOnly = await prisma.userProjectViewport.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserProjectViewportCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserProjectViewportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserProjectViewport.
   * @param {UserProjectViewportDeleteArgs} args - Arguments to delete one UserProjectViewport.
   * @example
   * // Delete one UserProjectViewport
   * const UserProjectViewport = await prisma.userProjectViewport.delete({
   *   where: {
   *     // ... filter to delete one UserProjectViewport
   *   }
   * })
   * 
   */
  delete<T extends UserProjectViewportDeleteArgs>(args: Prisma.SelectSubset<T, UserProjectViewportDeleteArgs<ExtArgs>>): Prisma.Prisma__UserProjectViewportClient<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserProjectViewport.
   * @param {UserProjectViewportUpdateArgs} args - Arguments to update one UserProjectViewport.
   * @example
   * // Update one UserProjectViewport
   * const userProjectViewport = await prisma.userProjectViewport.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserProjectViewportUpdateArgs>(args: Prisma.SelectSubset<T, UserProjectViewportUpdateArgs<ExtArgs>>): Prisma.Prisma__UserProjectViewportClient<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserProjectViewports.
   * @param {UserProjectViewportDeleteManyArgs} args - Arguments to filter UserProjectViewports to delete.
   * @example
   * // Delete a few UserProjectViewports
   * const { count } = await prisma.userProjectViewport.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserProjectViewportDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserProjectViewportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserProjectViewports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProjectViewportUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserProjectViewports
   * const userProjectViewport = await prisma.userProjectViewport.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserProjectViewportUpdateManyArgs>(args: Prisma.SelectSubset<T, UserProjectViewportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserProjectViewports and returns the data updated in the database.
   * @param {UserProjectViewportUpdateManyAndReturnArgs} args - Arguments to update many UserProjectViewports.
   * @example
   * // Update many UserProjectViewports
   * const userProjectViewport = await prisma.userProjectViewport.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserProjectViewports and only return the `userId`
   * const userProjectViewportWithUserIdOnly = await prisma.userProjectViewport.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserProjectViewportUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserProjectViewportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserProjectViewport.
   * @param {UserProjectViewportUpsertArgs} args - Arguments to update or create a UserProjectViewport.
   * @example
   * // Update or create a UserProjectViewport
   * const userProjectViewport = await prisma.userProjectViewport.upsert({
   *   create: {
   *     // ... data to create a UserProjectViewport
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserProjectViewport we want to update
   *   }
   * })
   */
  upsert<T extends UserProjectViewportUpsertArgs>(args: Prisma.SelectSubset<T, UserProjectViewportUpsertArgs<ExtArgs>>): Prisma.Prisma__UserProjectViewportClient<runtime.Types.Result.GetResult<Prisma.$UserProjectViewportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserProjectViewports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProjectViewportCountArgs} args - Arguments to filter UserProjectViewports to count.
   * @example
   * // Count the number of UserProjectViewports
   * const count = await prisma.userProjectViewport.count({
   *   where: {
   *     // ... the filter for the UserProjectViewports we want to count
   *   }
   * })
  **/
  count<T extends UserProjectViewportCountArgs>(
    args?: Prisma.Subset<T, UserProjectViewportCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserProjectViewportCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserProjectViewport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProjectViewportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserProjectViewportAggregateArgs>(args: Prisma.Subset<T, UserProjectViewportAggregateArgs>): Prisma.PrismaPromise<GetUserProjectViewportAggregateType<T>>

  /**
   * Group by UserProjectViewport.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProjectViewportGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserProjectViewportGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserProjectViewportGroupByArgs['orderBy'] }
      : { orderBy?: UserProjectViewportGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserProjectViewportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProjectViewportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserProjectViewport model
 */
readonly fields: UserProjectViewportFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserProjectViewport.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserProjectViewportClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserProjectViewport model
 */
export interface UserProjectViewportFieldRefs {
  readonly userId: Prisma.FieldRef<"UserProjectViewport", 'String'>
  readonly viewport: Prisma.FieldRef<"UserProjectViewport", 'Json'>
}
    

// Custom InputTypes
/**
 * UserProjectViewport findUnique
 */
export type UserProjectViewportFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * Filter, which UserProjectViewport to fetch.
   */
  where: Prisma.UserProjectViewportWhereUniqueInput
}

/**
 * UserProjectViewport findUniqueOrThrow
 */
export type UserProjectViewportFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * Filter, which UserProjectViewport to fetch.
   */
  where: Prisma.UserProjectViewportWhereUniqueInput
}

/**
 * UserProjectViewport findFirst
 */
export type UserProjectViewportFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * Filter, which UserProjectViewport to fetch.
   */
  where?: Prisma.UserProjectViewportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProjectViewports to fetch.
   */
  orderBy?: Prisma.UserProjectViewportOrderByWithRelationInput | Prisma.UserProjectViewportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserProjectViewports.
   */
  cursor?: Prisma.UserProjectViewportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProjectViewports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProjectViewports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserProjectViewports.
   */
  distinct?: Prisma.UserProjectViewportScalarFieldEnum | Prisma.UserProjectViewportScalarFieldEnum[]
}

/**
 * UserProjectViewport findFirstOrThrow
 */
export type UserProjectViewportFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * Filter, which UserProjectViewport to fetch.
   */
  where?: Prisma.UserProjectViewportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProjectViewports to fetch.
   */
  orderBy?: Prisma.UserProjectViewportOrderByWithRelationInput | Prisma.UserProjectViewportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserProjectViewports.
   */
  cursor?: Prisma.UserProjectViewportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProjectViewports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProjectViewports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserProjectViewports.
   */
  distinct?: Prisma.UserProjectViewportScalarFieldEnum | Prisma.UserProjectViewportScalarFieldEnum[]
}

/**
 * UserProjectViewport findMany
 */
export type UserProjectViewportFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * Filter, which UserProjectViewports to fetch.
   */
  where?: Prisma.UserProjectViewportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProjectViewports to fetch.
   */
  orderBy?: Prisma.UserProjectViewportOrderByWithRelationInput | Prisma.UserProjectViewportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserProjectViewports.
   */
  cursor?: Prisma.UserProjectViewportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProjectViewports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProjectViewports.
   */
  skip?: number
  distinct?: Prisma.UserProjectViewportScalarFieldEnum | Prisma.UserProjectViewportScalarFieldEnum[]
}

/**
 * UserProjectViewport create
 */
export type UserProjectViewportCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * The data needed to create a UserProjectViewport.
   */
  data: Prisma.XOR<Prisma.UserProjectViewportCreateInput, Prisma.UserProjectViewportUncheckedCreateInput>
}

/**
 * UserProjectViewport createMany
 */
export type UserProjectViewportCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserProjectViewports.
   */
  data: Prisma.UserProjectViewportCreateManyInput | Prisma.UserProjectViewportCreateManyInput[]
}

/**
 * UserProjectViewport createManyAndReturn
 */
export type UserProjectViewportCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * The data used to create many UserProjectViewports.
   */
  data: Prisma.UserProjectViewportCreateManyInput | Prisma.UserProjectViewportCreateManyInput[]
}

/**
 * UserProjectViewport update
 */
export type UserProjectViewportUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * The data needed to update a UserProjectViewport.
   */
  data: Prisma.XOR<Prisma.UserProjectViewportUpdateInput, Prisma.UserProjectViewportUncheckedUpdateInput>
  /**
   * Choose, which UserProjectViewport to update.
   */
  where: Prisma.UserProjectViewportWhereUniqueInput
}

/**
 * UserProjectViewport updateMany
 */
export type UserProjectViewportUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserProjectViewports.
   */
  data: Prisma.XOR<Prisma.UserProjectViewportUpdateManyMutationInput, Prisma.UserProjectViewportUncheckedUpdateManyInput>
  /**
   * Filter which UserProjectViewports to update
   */
  where?: Prisma.UserProjectViewportWhereInput
  /**
   * Limit how many UserProjectViewports to update.
   */
  limit?: number
}

/**
 * UserProjectViewport updateManyAndReturn
 */
export type UserProjectViewportUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * The data used to update UserProjectViewports.
   */
  data: Prisma.XOR<Prisma.UserProjectViewportUpdateManyMutationInput, Prisma.UserProjectViewportUncheckedUpdateManyInput>
  /**
   * Filter which UserProjectViewports to update
   */
  where?: Prisma.UserProjectViewportWhereInput
  /**
   * Limit how many UserProjectViewports to update.
   */
  limit?: number
}

/**
 * UserProjectViewport upsert
 */
export type UserProjectViewportUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * The filter to search for the UserProjectViewport to update in case it exists.
   */
  where: Prisma.UserProjectViewportWhereUniqueInput
  /**
   * In case the UserProjectViewport found by the `where` argument doesn't exist, create a new UserProjectViewport with this data.
   */
  create: Prisma.XOR<Prisma.UserProjectViewportCreateInput, Prisma.UserProjectViewportUncheckedCreateInput>
  /**
   * In case the UserProjectViewport was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserProjectViewportUpdateInput, Prisma.UserProjectViewportUncheckedUpdateInput>
}

/**
 * UserProjectViewport delete
 */
export type UserProjectViewportDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
  /**
   * Filter which UserProjectViewport to delete.
   */
  where: Prisma.UserProjectViewportWhereUniqueInput
}

/**
 * UserProjectViewport deleteMany
 */
export type UserProjectViewportDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserProjectViewports to delete
   */
  where?: Prisma.UserProjectViewportWhereInput
  /**
   * Limit how many UserProjectViewports to delete.
   */
  limit?: number
}

/**
 * UserProjectViewport without action
 */
export type UserProjectViewportDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProjectViewport
   */
  select?: Prisma.UserProjectViewportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProjectViewport
   */
  omit?: Prisma.UserProjectViewportOmit<ExtArgs> | null
}
