
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "./prismaNamespace.ts"


const config: runtime.GetPrismaClientConfig = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client"
    },
    "output": {
      "value": "/home/exeteres/Projects/personal/highstate/packages/platform/backend/src/database/_generated/backend/sqlite",
      "fromEnvVar": null
    },
    "config": {
      "moduleFormat": "esm",
      "generatedFileExtension": "ts",
      "importFileExtension": "ts",
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "linux-nixos",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters",
      "queryCompiler"
    ],
    "sourceFilePath": "/home/exeteres/Projects/personal/highstate/packages/platform/backend/prisma/backend/sqlite/main.prisma",
    "isCustomOutput": true
  },
  "relativePath": "../../../../../prisma/backend/sqlite",
  "clientVersion": "6.14.0",
  "engineVersion": "717184b7b35ea05dfa71a3236b7af656013e1e49",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "HIGHSTATE_MIGRATION_DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "model UserWorkspaceLayout {\n  /// The opaque ID of the user to which this layout belongs.\n  userId String @id\n\n  /// The layout of the user workspace managed by the frontend.\n  ///\n  /// ![unknown]\n  layout Json\n}\n\nmodel Library {\n  /// The CUIDv2 of the library.\n  id String @id @default(cuid(2))\n\n  /// The metadata of the library managed by the backend.\n  ///\n  /// [CommonObjectMeta]\n  meta Json\n\n  /// The spec of the library.\n  ///\n  /// [LibrarySpec]\n  spec Json\n\n  /// The projects using this library.\n  projects Project[]\n}\n\nmodel Project {\n  /// The CUIDv2 of the project.\n  id String @id @default(cuid(2))\n\n  /// Project meta managed by the backend.\n  ///\n  /// [CommonObjectMeta]\n  meta Json\n\n  /// The name of the project within the space.\n  name String\n\n  /// The ID of the project space this project belongs to.\n  spaceId String\n\n  /// The ID of the project model storage this project uses.\n  modelStorageId String\n\n  /// The ID of the library used by this project.\n  libraryId String\n\n  /// The ID of the Pulumi backend used by this project.\n  pulumiBackendId String\n\n  /// Encrypted project master key in AGE format.\n  encryptedMasterKey String\n\n  /// The unlock suite for this project.\n  ///\n  /// [ProjectUnlockSuite]\n  unlockSuite Json\n\n  /// The current version of the project database.\n  /// This is used to determine if the project needs to be migrated.\n  databaseVersion Int\n\n  /// The time when the project was created.\n  createdAt DateTime @default(now())\n\n  /// The time when the project was last updated.\n  updatedAt DateTime @updatedAt\n\n  /// The project space this project belongs to.\n  space ProjectSpace @relation(fields: [spaceId], references: [id])\n\n  /// The project model storage this project uses.\n  modelStorage ProjectModelStorage @relation(fields: [modelStorageId], references: [id])\n\n  /// The library used by this project.\n  library Library @relation(fields: [libraryId], references: [id])\n\n  /// The Pulumi backend used by this project.\n  pulumiBackend PulumiBackend @relation(fields: [pulumiBackendId], references: [id])\n\n  @@unique([spaceId, name])\n}\n\nmodel ProjectSpace {\n  /// The CUIDv2 of the project space.\n  id String @id @default(cuid(2))\n\n  /// The name of the project space within the parent space.\n  ///\n  /// Will be null for the global project space.\n  name String?\n\n  /// The ID of the parent project space, if any.\n  parentId String?\n\n  /// The metadata of the project space managed by the backend.\n  ///\n  /// [CommonObjectMeta]\n  meta Json\n\n  /// The projects in this project space.\n  projects Project[]\n\n  /// The parent project space, if any.\n  parent ProjectSpace? @relation(\"ProjectSpaceHierarchy\", fields: [parentId], references: [id])\n\n  /// The child project spaces, if any.\n  children ProjectSpace[] @relation(\"ProjectSpaceHierarchy\")\n\n  @@unique([parentId, name])\n}\n\nmodel ProjectModelStorage {\n  /// The CUIDv2 of the project model storage.\n  id String @id @default(cuid(2))\n\n  /// The metadata of the project model storage managed by the backend.\n  ///\n  /// [CommonObjectMeta]\n  meta Json\n\n  /// The specification of the project model storage.\n  ///\n  /// [ProjectModelStorageSpec]\n  spec Json\n\n  /// The projects using this model storage.\n  projects Project[]\n}\n\nmodel PulumiBackend {\n  /// The CUIDv2 of the Pulumi backend.\n  id String @id @default(cuid(2))\n\n  /// The backend meta managed by the backend.\n  ///\n  /// [CommonObjectMeta]\n  meta Json\n\n  /// The spec of the Pulumi backend.\n  ///\n  /// [PulumiBackendSpec]\n  spec Json\n\n  /// The projects using this backend.\n  projects Project[]\n}\n\n/// Unlock methods describe trusted identities that can decrypt the backend master key.\nmodel BackendUnlockMethod {\n  /// The CUIDv2 of the unlock method.\n  id String @id @default(cuid(2))\n\n  /// The metadata of the unlock method managed by the backend.\n  /// \n  /// [BackendUnlockMethodMeta]\n  meta Json\n\n  /// The AGE recipient for this unlock method.\n  recipient String @unique\n\n  /// The time when the unlock method was created.\n  createdAt DateTime @default(now())\n\n  /// The time when the unlock method was last updated.\n  updatedAt DateTime @updatedAt\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"HIGHSTATE_MIGRATION_DATABASE_URL\")\n}\n\ngenerator client {\n  provider               = \"prisma-client\"\n  previewFeatures        = [\"queryCompiler\", \"driverAdapters\"]\n  output                 = \"../../../src/database/_generated/backend/sqlite\"\n  moduleFormat           = \"esm\"\n  generatedFileExtension = \"ts\"\n  importFileExtension    = \"ts\"\n}\n\ngenerator json {\n  provider = \"prisma-json-types-generator\"\n}\n",
  "inlineSchemaHash": "a1ceaf17c7e387f39b598365de3b12cae9e6d31f021d9ab4f958f2c85bb34129",
  "copyEngine": true,
  "runtimeDataModel": {
    "models": {},
    "enums": {},
    "types": {}
  },
  "dirname": ""
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"UserWorkspaceLayout\":{\"fields\":[{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"layout\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null},\"Library\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"spec\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"projects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"LibraryToProject\"}],\"dbName\":null},\"Project\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"spaceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"modelStorageId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"libraryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pulumiBackendId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"encryptedMasterKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"unlockSuite\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"databaseVersion\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"space\",\"kind\":\"object\",\"type\":\"ProjectSpace\",\"relationName\":\"ProjectToProjectSpace\"},{\"name\":\"modelStorage\",\"kind\":\"object\",\"type\":\"ProjectModelStorage\",\"relationName\":\"ProjectToProjectModelStorage\"},{\"name\":\"library\",\"kind\":\"object\",\"type\":\"Library\",\"relationName\":\"LibraryToProject\"},{\"name\":\"pulumiBackend\",\"kind\":\"object\",\"type\":\"PulumiBackend\",\"relationName\":\"ProjectToPulumiBackend\"}],\"dbName\":null},\"ProjectSpace\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"projects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToProjectSpace\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"ProjectSpace\",\"relationName\":\"ProjectSpaceHierarchy\"},{\"name\":\"children\",\"kind\":\"object\",\"type\":\"ProjectSpace\",\"relationName\":\"ProjectSpaceHierarchy\"}],\"dbName\":null},\"ProjectModelStorage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"spec\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"projects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToProjectModelStorage\"}],\"dbName\":null},\"PulumiBackend\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"spec\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"projects\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToPulumiBackend\"}],\"dbName\":null},\"BackendUnlockMethod\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"recipient\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
config.engineWasm = undefined

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import('node:buffer')
  const base64Data = wasmBase64.replace('data:application/wasm;base64,', '')
  const wasmArray = new Uint8Array(Buffer.from(base64Data, 'base64'))
  return new WebAssembly.Module(wasmArray)
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.sqlite.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import("@prisma/client/runtime/query_compiler_bg.sqlite.wasm-base64.mjs")
    return await decodeBase64AsWasm(wasm)
  }
}




export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never

export interface PrismaClientConstructor {
    /**
   * ## Prisma Client
   * 
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more UserWorkspaceLayouts
   * const userWorkspaceLayouts = await prisma.userWorkspaceLayout.findMany()
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends { omit: infer U } ? U : Prisma.PrismaClientOptions['omit'],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
  >(options?: Prisma.Subset<Options, Prisma.PrismaClientOptions> ): PrismaClient<LogOpts, OmitOpts, ExtArgs>
}

/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more UserWorkspaceLayouts
 * const userWorkspaceLayouts = await prisma.userWorkspaceLayout.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

  $on<V extends LogOpts>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<R>


  $extends: runtime.Types.Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<OmitOpts>, ExtArgs, runtime.Types.Utils.Call<Prisma.TypeMapCb<OmitOpts>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.userWorkspaceLayout`: Exposes CRUD operations for the **UserWorkspaceLayout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserWorkspaceLayouts
    * const userWorkspaceLayouts = await prisma.userWorkspaceLayout.findMany()
    * ```
    */
  get userWorkspaceLayout(): Prisma.UserWorkspaceLayoutDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.library`: Exposes CRUD operations for the **Library** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Libraries
    * const libraries = await prisma.library.findMany()
    * ```
    */
  get library(): Prisma.LibraryDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.projectSpace`: Exposes CRUD operations for the **ProjectSpace** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectSpaces
    * const projectSpaces = await prisma.projectSpace.findMany()
    * ```
    */
  get projectSpace(): Prisma.ProjectSpaceDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.projectModelStorage`: Exposes CRUD operations for the **ProjectModelStorage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectModelStorages
    * const projectModelStorages = await prisma.projectModelStorage.findMany()
    * ```
    */
  get projectModelStorage(): Prisma.ProjectModelStorageDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.pulumiBackend`: Exposes CRUD operations for the **PulumiBackend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PulumiBackends
    * const pulumiBackends = await prisma.pulumiBackend.findMany()
    * ```
    */
  get pulumiBackend(): Prisma.PulumiBackendDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.backendUnlockMethod`: Exposes CRUD operations for the **BackendUnlockMethod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BackendUnlockMethods
    * const backendUnlockMethods = await prisma.backendUnlockMethod.findMany()
    * ```
    */
  get backendUnlockMethod(): Prisma.BackendUnlockMethodDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
