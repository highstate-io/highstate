
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProjectSpace` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProjectSpace
 * 
 */
export type ProjectSpaceModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectSpacePayload>

export type AggregateProjectSpace = {
  _count: ProjectSpaceCountAggregateOutputType | null
  _min: ProjectSpaceMinAggregateOutputType | null
  _max: ProjectSpaceMaxAggregateOutputType | null
}

export type ProjectSpaceMinAggregateOutputType = {
  id: string | null
  name: string | null
  parentId: string | null
}

export type ProjectSpaceMaxAggregateOutputType = {
  id: string | null
  name: string | null
  parentId: string | null
}

export type ProjectSpaceCountAggregateOutputType = {
  id: number
  name: number
  parentId: number
  meta: number
  _all: number
}


export type ProjectSpaceMinAggregateInputType = {
  id?: true
  name?: true
  parentId?: true
}

export type ProjectSpaceMaxAggregateInputType = {
  id?: true
  name?: true
  parentId?: true
}

export type ProjectSpaceCountAggregateInputType = {
  id?: true
  name?: true
  parentId?: true
  meta?: true
  _all?: true
}

export type ProjectSpaceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectSpace to aggregate.
   */
  where?: Prisma.ProjectSpaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectSpaces to fetch.
   */
  orderBy?: Prisma.ProjectSpaceOrderByWithRelationInput | Prisma.ProjectSpaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectSpaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectSpaces from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectSpaces.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProjectSpaces
  **/
  _count?: true | ProjectSpaceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectSpaceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectSpaceMaxAggregateInputType
}

export type GetProjectSpaceAggregateType<T extends ProjectSpaceAggregateArgs> = {
      [P in keyof T & keyof AggregateProjectSpace]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProjectSpace[P]>
    : Prisma.GetScalarType<T[P], AggregateProjectSpace[P]>
}




export type ProjectSpaceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectSpaceWhereInput
  orderBy?: Prisma.ProjectSpaceOrderByWithAggregationInput | Prisma.ProjectSpaceOrderByWithAggregationInput[]
  by: Prisma.ProjectSpaceScalarFieldEnum[] | Prisma.ProjectSpaceScalarFieldEnum
  having?: Prisma.ProjectSpaceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectSpaceCountAggregateInputType | true
  _min?: ProjectSpaceMinAggregateInputType
  _max?: ProjectSpaceMaxAggregateInputType
}

export type ProjectSpaceGroupByOutputType = {
  id: string
  name: string | null
  parentId: string | null
  meta: PrismaJson.CommonObjectMeta
  _count: ProjectSpaceCountAggregateOutputType | null
  _min: ProjectSpaceMinAggregateOutputType | null
  _max: ProjectSpaceMaxAggregateOutputType | null
}

type GetProjectSpaceGroupByPayload<T extends ProjectSpaceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectSpaceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectSpaceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectSpaceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectSpaceGroupByOutputType[P]>
      }
    >
  >



export type ProjectSpaceWhereInput = {
  AND?: Prisma.ProjectSpaceWhereInput | Prisma.ProjectSpaceWhereInput[]
  OR?: Prisma.ProjectSpaceWhereInput[]
  NOT?: Prisma.ProjectSpaceWhereInput | Prisma.ProjectSpaceWhereInput[]
  id?: Prisma.StringFilter<"ProjectSpace"> | string
  name?: Prisma.StringNullableFilter<"ProjectSpace"> | string | null
  parentId?: Prisma.StringNullableFilter<"ProjectSpace"> | string | null
  meta?: Prisma.JsonFilter<"ProjectSpace">
  projects?: Prisma.ProjectListRelationFilter
  parent?: Prisma.XOR<Prisma.ProjectSpaceNullableScalarRelationFilter, Prisma.ProjectSpaceWhereInput> | null
  children?: Prisma.ProjectSpaceListRelationFilter
}

export type ProjectSpaceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  parentId?: Prisma.SortOrderInput | Prisma.SortOrder
  meta?: Prisma.SortOrder
  projects?: Prisma.ProjectOrderByRelationAggregateInput
  parent?: Prisma.ProjectSpaceOrderByWithRelationInput
  children?: Prisma.ProjectSpaceOrderByRelationAggregateInput
}

export type ProjectSpaceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  parentId_name?: Prisma.ProjectSpaceParentIdNameCompoundUniqueInput
  AND?: Prisma.ProjectSpaceWhereInput | Prisma.ProjectSpaceWhereInput[]
  OR?: Prisma.ProjectSpaceWhereInput[]
  NOT?: Prisma.ProjectSpaceWhereInput | Prisma.ProjectSpaceWhereInput[]
  name?: Prisma.StringNullableFilter<"ProjectSpace"> | string | null
  parentId?: Prisma.StringNullableFilter<"ProjectSpace"> | string | null
  meta?: Prisma.JsonFilter<"ProjectSpace">
  projects?: Prisma.ProjectListRelationFilter
  parent?: Prisma.XOR<Prisma.ProjectSpaceNullableScalarRelationFilter, Prisma.ProjectSpaceWhereInput> | null
  children?: Prisma.ProjectSpaceListRelationFilter
}, "id" | "parentId_name">

export type ProjectSpaceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  parentId?: Prisma.SortOrderInput | Prisma.SortOrder
  meta?: Prisma.SortOrder
  _count?: Prisma.ProjectSpaceCountOrderByAggregateInput
  _max?: Prisma.ProjectSpaceMaxOrderByAggregateInput
  _min?: Prisma.ProjectSpaceMinOrderByAggregateInput
}

export type ProjectSpaceScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectSpaceScalarWhereWithAggregatesInput | Prisma.ProjectSpaceScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectSpaceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectSpaceScalarWhereWithAggregatesInput | Prisma.ProjectSpaceScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProjectSpace"> | string
  name?: Prisma.StringNullableWithAggregatesFilter<"ProjectSpace"> | string | null
  parentId?: Prisma.StringNullableWithAggregatesFilter<"ProjectSpace"> | string | null
  meta?: Prisma.JsonWithAggregatesFilter<"ProjectSpace">
}

export type ProjectSpaceCreateInput = {
  id?: string
  name?: string | null
  meta: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectCreateNestedManyWithoutSpaceInput
  parent?: Prisma.ProjectSpaceCreateNestedOneWithoutChildrenInput
  children?: Prisma.ProjectSpaceCreateNestedManyWithoutParentInput
}

export type ProjectSpaceUncheckedCreateInput = {
  id?: string
  name?: string | null
  parentId?: string | null
  meta: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutSpaceInput
  children?: Prisma.ProjectSpaceUncheckedCreateNestedManyWithoutParentInput
}

export type ProjectSpaceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectUpdateManyWithoutSpaceNestedInput
  parent?: Prisma.ProjectSpaceUpdateOneWithoutChildrenNestedInput
  children?: Prisma.ProjectSpaceUpdateManyWithoutParentNestedInput
}

export type ProjectSpaceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectUncheckedUpdateManyWithoutSpaceNestedInput
  children?: Prisma.ProjectSpaceUncheckedUpdateManyWithoutParentNestedInput
}

export type ProjectSpaceCreateManyInput = {
  id?: string
  name?: string | null
  parentId?: string | null
  meta: PrismaJson.CommonObjectMeta
}

export type ProjectSpaceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: PrismaJson.CommonObjectMeta
}

export type ProjectSpaceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: PrismaJson.CommonObjectMeta
}

export type ProjectSpaceScalarRelationFilter = {
  is?: Prisma.ProjectSpaceWhereInput
  isNot?: Prisma.ProjectSpaceWhereInput
}

export type ProjectSpaceNullableScalarRelationFilter = {
  is?: Prisma.ProjectSpaceWhereInput | null
  isNot?: Prisma.ProjectSpaceWhereInput | null
}

export type ProjectSpaceListRelationFilter = {
  every?: Prisma.ProjectSpaceWhereInput
  some?: Prisma.ProjectSpaceWhereInput
  none?: Prisma.ProjectSpaceWhereInput
}

export type ProjectSpaceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProjectSpaceParentIdNameCompoundUniqueInput = {
  parentId: string
  name: string
}

export type ProjectSpaceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
  meta?: Prisma.SortOrder
}

export type ProjectSpaceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
}

export type ProjectSpaceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  parentId?: Prisma.SortOrder
}

export type ProjectSpaceCreateNestedOneWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutProjectsInput, Prisma.ProjectSpaceUncheckedCreateWithoutProjectsInput>
  connectOrCreate?: Prisma.ProjectSpaceCreateOrConnectWithoutProjectsInput
  connect?: Prisma.ProjectSpaceWhereUniqueInput
}

export type ProjectSpaceUpdateOneRequiredWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutProjectsInput, Prisma.ProjectSpaceUncheckedCreateWithoutProjectsInput>
  connectOrCreate?: Prisma.ProjectSpaceCreateOrConnectWithoutProjectsInput
  upsert?: Prisma.ProjectSpaceUpsertWithoutProjectsInput
  connect?: Prisma.ProjectSpaceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectSpaceUpdateToOneWithWhereWithoutProjectsInput, Prisma.ProjectSpaceUpdateWithoutProjectsInput>, Prisma.ProjectSpaceUncheckedUpdateWithoutProjectsInput>
}

export type ProjectSpaceCreateNestedOneWithoutChildrenInput = {
  create?: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutChildrenInput, Prisma.ProjectSpaceUncheckedCreateWithoutChildrenInput>
  connectOrCreate?: Prisma.ProjectSpaceCreateOrConnectWithoutChildrenInput
  connect?: Prisma.ProjectSpaceWhereUniqueInput
}

export type ProjectSpaceCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutParentInput, Prisma.ProjectSpaceUncheckedCreateWithoutParentInput> | Prisma.ProjectSpaceCreateWithoutParentInput[] | Prisma.ProjectSpaceUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ProjectSpaceCreateOrConnectWithoutParentInput | Prisma.ProjectSpaceCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.ProjectSpaceCreateManyParentInputEnvelope
  connect?: Prisma.ProjectSpaceWhereUniqueInput | Prisma.ProjectSpaceWhereUniqueInput[]
}

export type ProjectSpaceUncheckedCreateNestedManyWithoutParentInput = {
  create?: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutParentInput, Prisma.ProjectSpaceUncheckedCreateWithoutParentInput> | Prisma.ProjectSpaceCreateWithoutParentInput[] | Prisma.ProjectSpaceUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ProjectSpaceCreateOrConnectWithoutParentInput | Prisma.ProjectSpaceCreateOrConnectWithoutParentInput[]
  createMany?: Prisma.ProjectSpaceCreateManyParentInputEnvelope
  connect?: Prisma.ProjectSpaceWhereUniqueInput | Prisma.ProjectSpaceWhereUniqueInput[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type ProjectSpaceUpdateOneWithoutChildrenNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutChildrenInput, Prisma.ProjectSpaceUncheckedCreateWithoutChildrenInput>
  connectOrCreate?: Prisma.ProjectSpaceCreateOrConnectWithoutChildrenInput
  upsert?: Prisma.ProjectSpaceUpsertWithoutChildrenInput
  disconnect?: Prisma.ProjectSpaceWhereInput | boolean
  delete?: Prisma.ProjectSpaceWhereInput | boolean
  connect?: Prisma.ProjectSpaceWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectSpaceUpdateToOneWithWhereWithoutChildrenInput, Prisma.ProjectSpaceUpdateWithoutChildrenInput>, Prisma.ProjectSpaceUncheckedUpdateWithoutChildrenInput>
}

export type ProjectSpaceUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutParentInput, Prisma.ProjectSpaceUncheckedCreateWithoutParentInput> | Prisma.ProjectSpaceCreateWithoutParentInput[] | Prisma.ProjectSpaceUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ProjectSpaceCreateOrConnectWithoutParentInput | Prisma.ProjectSpaceCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.ProjectSpaceUpsertWithWhereUniqueWithoutParentInput | Prisma.ProjectSpaceUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.ProjectSpaceCreateManyParentInputEnvelope
  set?: Prisma.ProjectSpaceWhereUniqueInput | Prisma.ProjectSpaceWhereUniqueInput[]
  disconnect?: Prisma.ProjectSpaceWhereUniqueInput | Prisma.ProjectSpaceWhereUniqueInput[]
  delete?: Prisma.ProjectSpaceWhereUniqueInput | Prisma.ProjectSpaceWhereUniqueInput[]
  connect?: Prisma.ProjectSpaceWhereUniqueInput | Prisma.ProjectSpaceWhereUniqueInput[]
  update?: Prisma.ProjectSpaceUpdateWithWhereUniqueWithoutParentInput | Prisma.ProjectSpaceUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.ProjectSpaceUpdateManyWithWhereWithoutParentInput | Prisma.ProjectSpaceUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.ProjectSpaceScalarWhereInput | Prisma.ProjectSpaceScalarWhereInput[]
}

export type ProjectSpaceUncheckedUpdateManyWithoutParentNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutParentInput, Prisma.ProjectSpaceUncheckedCreateWithoutParentInput> | Prisma.ProjectSpaceCreateWithoutParentInput[] | Prisma.ProjectSpaceUncheckedCreateWithoutParentInput[]
  connectOrCreate?: Prisma.ProjectSpaceCreateOrConnectWithoutParentInput | Prisma.ProjectSpaceCreateOrConnectWithoutParentInput[]
  upsert?: Prisma.ProjectSpaceUpsertWithWhereUniqueWithoutParentInput | Prisma.ProjectSpaceUpsertWithWhereUniqueWithoutParentInput[]
  createMany?: Prisma.ProjectSpaceCreateManyParentInputEnvelope
  set?: Prisma.ProjectSpaceWhereUniqueInput | Prisma.ProjectSpaceWhereUniqueInput[]
  disconnect?: Prisma.ProjectSpaceWhereUniqueInput | Prisma.ProjectSpaceWhereUniqueInput[]
  delete?: Prisma.ProjectSpaceWhereUniqueInput | Prisma.ProjectSpaceWhereUniqueInput[]
  connect?: Prisma.ProjectSpaceWhereUniqueInput | Prisma.ProjectSpaceWhereUniqueInput[]
  update?: Prisma.ProjectSpaceUpdateWithWhereUniqueWithoutParentInput | Prisma.ProjectSpaceUpdateWithWhereUniqueWithoutParentInput[]
  updateMany?: Prisma.ProjectSpaceUpdateManyWithWhereWithoutParentInput | Prisma.ProjectSpaceUpdateManyWithWhereWithoutParentInput[]
  deleteMany?: Prisma.ProjectSpaceScalarWhereInput | Prisma.ProjectSpaceScalarWhereInput[]
}

export type ProjectSpaceCreateWithoutProjectsInput = {
  id?: string
  name?: string | null
  meta: PrismaJson.CommonObjectMeta
  parent?: Prisma.ProjectSpaceCreateNestedOneWithoutChildrenInput
  children?: Prisma.ProjectSpaceCreateNestedManyWithoutParentInput
}

export type ProjectSpaceUncheckedCreateWithoutProjectsInput = {
  id?: string
  name?: string | null
  parentId?: string | null
  meta: PrismaJson.CommonObjectMeta
  children?: Prisma.ProjectSpaceUncheckedCreateNestedManyWithoutParentInput
}

export type ProjectSpaceCreateOrConnectWithoutProjectsInput = {
  where: Prisma.ProjectSpaceWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutProjectsInput, Prisma.ProjectSpaceUncheckedCreateWithoutProjectsInput>
}

export type ProjectSpaceUpsertWithoutProjectsInput = {
  update: Prisma.XOR<Prisma.ProjectSpaceUpdateWithoutProjectsInput, Prisma.ProjectSpaceUncheckedUpdateWithoutProjectsInput>
  create: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutProjectsInput, Prisma.ProjectSpaceUncheckedCreateWithoutProjectsInput>
  where?: Prisma.ProjectSpaceWhereInput
}

export type ProjectSpaceUpdateToOneWithWhereWithoutProjectsInput = {
  where?: Prisma.ProjectSpaceWhereInput
  data: Prisma.XOR<Prisma.ProjectSpaceUpdateWithoutProjectsInput, Prisma.ProjectSpaceUncheckedUpdateWithoutProjectsInput>
}

export type ProjectSpaceUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: PrismaJson.CommonObjectMeta
  parent?: Prisma.ProjectSpaceUpdateOneWithoutChildrenNestedInput
  children?: Prisma.ProjectSpaceUpdateManyWithoutParentNestedInput
}

export type ProjectSpaceUncheckedUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: PrismaJson.CommonObjectMeta
  children?: Prisma.ProjectSpaceUncheckedUpdateManyWithoutParentNestedInput
}

export type ProjectSpaceCreateWithoutChildrenInput = {
  id?: string
  name?: string | null
  meta: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectCreateNestedManyWithoutSpaceInput
  parent?: Prisma.ProjectSpaceCreateNestedOneWithoutChildrenInput
}

export type ProjectSpaceUncheckedCreateWithoutChildrenInput = {
  id?: string
  name?: string | null
  parentId?: string | null
  meta: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutSpaceInput
}

export type ProjectSpaceCreateOrConnectWithoutChildrenInput = {
  where: Prisma.ProjectSpaceWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutChildrenInput, Prisma.ProjectSpaceUncheckedCreateWithoutChildrenInput>
}

export type ProjectSpaceCreateWithoutParentInput = {
  id?: string
  name?: string | null
  meta: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectCreateNestedManyWithoutSpaceInput
  children?: Prisma.ProjectSpaceCreateNestedManyWithoutParentInput
}

export type ProjectSpaceUncheckedCreateWithoutParentInput = {
  id?: string
  name?: string | null
  meta: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutSpaceInput
  children?: Prisma.ProjectSpaceUncheckedCreateNestedManyWithoutParentInput
}

export type ProjectSpaceCreateOrConnectWithoutParentInput = {
  where: Prisma.ProjectSpaceWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutParentInput, Prisma.ProjectSpaceUncheckedCreateWithoutParentInput>
}

export type ProjectSpaceCreateManyParentInputEnvelope = {
  data: Prisma.ProjectSpaceCreateManyParentInput | Prisma.ProjectSpaceCreateManyParentInput[]
}

export type ProjectSpaceUpsertWithoutChildrenInput = {
  update: Prisma.XOR<Prisma.ProjectSpaceUpdateWithoutChildrenInput, Prisma.ProjectSpaceUncheckedUpdateWithoutChildrenInput>
  create: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutChildrenInput, Prisma.ProjectSpaceUncheckedCreateWithoutChildrenInput>
  where?: Prisma.ProjectSpaceWhereInput
}

export type ProjectSpaceUpdateToOneWithWhereWithoutChildrenInput = {
  where?: Prisma.ProjectSpaceWhereInput
  data: Prisma.XOR<Prisma.ProjectSpaceUpdateWithoutChildrenInput, Prisma.ProjectSpaceUncheckedUpdateWithoutChildrenInput>
}

export type ProjectSpaceUpdateWithoutChildrenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectUpdateManyWithoutSpaceNestedInput
  parent?: Prisma.ProjectSpaceUpdateOneWithoutChildrenNestedInput
}

export type ProjectSpaceUncheckedUpdateWithoutChildrenInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  parentId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectUncheckedUpdateManyWithoutSpaceNestedInput
}

export type ProjectSpaceUpsertWithWhereUniqueWithoutParentInput = {
  where: Prisma.ProjectSpaceWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectSpaceUpdateWithoutParentInput, Prisma.ProjectSpaceUncheckedUpdateWithoutParentInput>
  create: Prisma.XOR<Prisma.ProjectSpaceCreateWithoutParentInput, Prisma.ProjectSpaceUncheckedCreateWithoutParentInput>
}

export type ProjectSpaceUpdateWithWhereUniqueWithoutParentInput = {
  where: Prisma.ProjectSpaceWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectSpaceUpdateWithoutParentInput, Prisma.ProjectSpaceUncheckedUpdateWithoutParentInput>
}

export type ProjectSpaceUpdateManyWithWhereWithoutParentInput = {
  where: Prisma.ProjectSpaceScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectSpaceUpdateManyMutationInput, Prisma.ProjectSpaceUncheckedUpdateManyWithoutParentInput>
}

export type ProjectSpaceScalarWhereInput = {
  AND?: Prisma.ProjectSpaceScalarWhereInput | Prisma.ProjectSpaceScalarWhereInput[]
  OR?: Prisma.ProjectSpaceScalarWhereInput[]
  NOT?: Prisma.ProjectSpaceScalarWhereInput | Prisma.ProjectSpaceScalarWhereInput[]
  id?: Prisma.StringFilter<"ProjectSpace"> | string
  name?: Prisma.StringNullableFilter<"ProjectSpace"> | string | null
  parentId?: Prisma.StringNullableFilter<"ProjectSpace"> | string | null
  meta?: Prisma.JsonFilter<"ProjectSpace">
}

export type ProjectSpaceCreateManyParentInput = {
  id?: string
  name?: string | null
  meta: PrismaJson.CommonObjectMeta
}

export type ProjectSpaceUpdateWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectUpdateManyWithoutSpaceNestedInput
  children?: Prisma.ProjectSpaceUpdateManyWithoutParentNestedInput
}

export type ProjectSpaceUncheckedUpdateWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: PrismaJson.CommonObjectMeta
  projects?: Prisma.ProjectUncheckedUpdateManyWithoutSpaceNestedInput
  children?: Prisma.ProjectSpaceUncheckedUpdateManyWithoutParentNestedInput
}

export type ProjectSpaceUncheckedUpdateManyWithoutParentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  meta?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}


/**
 * Count Type ProjectSpaceCountOutputType
 */

export type ProjectSpaceCountOutputType = {
  projects: number
  children: number
}

export type ProjectSpaceCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | ProjectSpaceCountOutputTypeCountProjectsArgs
  children?: boolean | ProjectSpaceCountOutputTypeCountChildrenArgs
}

/**
 * ProjectSpaceCountOutputType without action
 */
export type ProjectSpaceCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpaceCountOutputType
   */
  select?: Prisma.ProjectSpaceCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProjectSpaceCountOutputType without action
 */
export type ProjectSpaceCountOutputTypeCountProjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
}

/**
 * ProjectSpaceCountOutputType without action
 */
export type ProjectSpaceCountOutputTypeCountChildrenArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectSpaceWhereInput
}


export type ProjectSpaceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  parentId?: boolean
  meta?: boolean
  projects?: boolean | Prisma.ProjectSpace$projectsArgs<ExtArgs>
  parent?: boolean | Prisma.ProjectSpace$parentArgs<ExtArgs>
  children?: boolean | Prisma.ProjectSpace$childrenArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectSpaceCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectSpace"]>

export type ProjectSpaceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  parentId?: boolean
  meta?: boolean
  parent?: boolean | Prisma.ProjectSpace$parentArgs<ExtArgs>
}, ExtArgs["result"]["projectSpace"]>

export type ProjectSpaceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  parentId?: boolean
  meta?: boolean
  parent?: boolean | Prisma.ProjectSpace$parentArgs<ExtArgs>
}, ExtArgs["result"]["projectSpace"]>

export type ProjectSpaceSelectScalar = {
  id?: boolean
  name?: boolean
  parentId?: boolean
  meta?: boolean
}

export type ProjectSpaceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "parentId" | "meta", ExtArgs["result"]["projectSpace"]>
export type ProjectSpaceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | Prisma.ProjectSpace$projectsArgs<ExtArgs>
  parent?: boolean | Prisma.ProjectSpace$parentArgs<ExtArgs>
  children?: boolean | Prisma.ProjectSpace$childrenArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectSpaceCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProjectSpaceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.ProjectSpace$parentArgs<ExtArgs>
}
export type ProjectSpaceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  parent?: boolean | Prisma.ProjectSpace$parentArgs<ExtArgs>
}

export type $ProjectSpacePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProjectSpace"
  objects: {
    /**
     * The projects in this project space.
     */
    projects: Prisma.$ProjectPayload<ExtArgs>[]
    /**
     * The parent project space, if any.
     */
    parent: Prisma.$ProjectSpacePayload<ExtArgs> | null
    /**
     * The child project spaces, if any.
     */
    children: Prisma.$ProjectSpacePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the project space.
     */
    id: string
    /**
     * The name of the project space within the parent space.
     * 
     * Will be null for the global project space.
     */
    name: string | null
    /**
     * The ID of the parent project space, if any.
     */
    parentId: string | null
    /**
     * The metadata of the project space managed by the backend.
     * 
     * [CommonObjectMeta]
     */
    meta: PrismaJson.CommonObjectMeta
  }, ExtArgs["result"]["projectSpace"]>
  composites: {}
}

export type ProjectSpaceGetPayload<S extends boolean | null | undefined | ProjectSpaceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload, S>

export type ProjectSpaceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectSpaceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectSpaceCountAggregateInputType | true
  }

export interface ProjectSpaceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectSpace'], meta: { name: 'ProjectSpace' } }
  /**
   * Find zero or one ProjectSpace that matches the filter.
   * @param {ProjectSpaceFindUniqueArgs} args - Arguments to find a ProjectSpace
   * @example
   * // Get one ProjectSpace
   * const projectSpace = await prisma.projectSpace.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectSpaceFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectSpaceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectSpaceClient<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProjectSpace that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectSpaceFindUniqueOrThrowArgs} args - Arguments to find a ProjectSpace
   * @example
   * // Get one ProjectSpace
   * const projectSpace = await prisma.projectSpace.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectSpaceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectSpaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectSpaceClient<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectSpace that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectSpaceFindFirstArgs} args - Arguments to find a ProjectSpace
   * @example
   * // Get one ProjectSpace
   * const projectSpace = await prisma.projectSpace.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectSpaceFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectSpaceFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectSpaceClient<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectSpace that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectSpaceFindFirstOrThrowArgs} args - Arguments to find a ProjectSpace
   * @example
   * // Get one ProjectSpace
   * const projectSpace = await prisma.projectSpace.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectSpaceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectSpaceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectSpaceClient<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProjectSpaces that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectSpaceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProjectSpaces
   * const projectSpaces = await prisma.projectSpace.findMany()
   * 
   * // Get first 10 ProjectSpaces
   * const projectSpaces = await prisma.projectSpace.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectSpaceWithIdOnly = await prisma.projectSpace.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProjectSpaceFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectSpaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProjectSpace.
   * @param {ProjectSpaceCreateArgs} args - Arguments to create a ProjectSpace.
   * @example
   * // Create one ProjectSpace
   * const ProjectSpace = await prisma.projectSpace.create({
   *   data: {
   *     // ... data to create a ProjectSpace
   *   }
   * })
   * 
   */
  create<T extends ProjectSpaceCreateArgs>(args: Prisma.SelectSubset<T, ProjectSpaceCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectSpaceClient<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProjectSpaces.
   * @param {ProjectSpaceCreateManyArgs} args - Arguments to create many ProjectSpaces.
   * @example
   * // Create many ProjectSpaces
   * const projectSpace = await prisma.projectSpace.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectSpaceCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectSpaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProjectSpaces and returns the data saved in the database.
   * @param {ProjectSpaceCreateManyAndReturnArgs} args - Arguments to create many ProjectSpaces.
   * @example
   * // Create many ProjectSpaces
   * const projectSpace = await prisma.projectSpace.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProjectSpaces and only return the `id`
   * const projectSpaceWithIdOnly = await prisma.projectSpace.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProjectSpaceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProjectSpaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProjectSpace.
   * @param {ProjectSpaceDeleteArgs} args - Arguments to delete one ProjectSpace.
   * @example
   * // Delete one ProjectSpace
   * const ProjectSpace = await prisma.projectSpace.delete({
   *   where: {
   *     // ... filter to delete one ProjectSpace
   *   }
   * })
   * 
   */
  delete<T extends ProjectSpaceDeleteArgs>(args: Prisma.SelectSubset<T, ProjectSpaceDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectSpaceClient<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProjectSpace.
   * @param {ProjectSpaceUpdateArgs} args - Arguments to update one ProjectSpace.
   * @example
   * // Update one ProjectSpace
   * const projectSpace = await prisma.projectSpace.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectSpaceUpdateArgs>(args: Prisma.SelectSubset<T, ProjectSpaceUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectSpaceClient<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProjectSpaces.
   * @param {ProjectSpaceDeleteManyArgs} args - Arguments to filter ProjectSpaces to delete.
   * @example
   * // Delete a few ProjectSpaces
   * const { count } = await prisma.projectSpace.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectSpaceDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectSpaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectSpaces.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectSpaceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProjectSpaces
   * const projectSpace = await prisma.projectSpace.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectSpaceUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectSpaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectSpaces and returns the data updated in the database.
   * @param {ProjectSpaceUpdateManyAndReturnArgs} args - Arguments to update many ProjectSpaces.
   * @example
   * // Update many ProjectSpaces
   * const projectSpace = await prisma.projectSpace.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProjectSpaces and only return the `id`
   * const projectSpaceWithIdOnly = await prisma.projectSpace.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProjectSpaceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProjectSpaceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProjectSpace.
   * @param {ProjectSpaceUpsertArgs} args - Arguments to update or create a ProjectSpace.
   * @example
   * // Update or create a ProjectSpace
   * const projectSpace = await prisma.projectSpace.upsert({
   *   create: {
   *     // ... data to create a ProjectSpace
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProjectSpace we want to update
   *   }
   * })
   */
  upsert<T extends ProjectSpaceUpsertArgs>(args: Prisma.SelectSubset<T, ProjectSpaceUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectSpaceClient<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProjectSpaces.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectSpaceCountArgs} args - Arguments to filter ProjectSpaces to count.
   * @example
   * // Count the number of ProjectSpaces
   * const count = await prisma.projectSpace.count({
   *   where: {
   *     // ... the filter for the ProjectSpaces we want to count
   *   }
   * })
  **/
  count<T extends ProjectSpaceCountArgs>(
    args?: Prisma.Subset<T, ProjectSpaceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectSpaceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProjectSpace.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectSpaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectSpaceAggregateArgs>(args: Prisma.Subset<T, ProjectSpaceAggregateArgs>): Prisma.PrismaPromise<GetProjectSpaceAggregateType<T>>

  /**
   * Group by ProjectSpace.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectSpaceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectSpaceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectSpaceGroupByArgs['orderBy'] }
      : { orderBy?: ProjectSpaceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectSpaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectSpaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProjectSpace model
 */
readonly fields: ProjectSpaceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectSpace.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectSpaceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  projects<T extends Prisma.ProjectSpace$projectsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectSpace$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  parent<T extends Prisma.ProjectSpace$parentArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectSpace$parentArgs<ExtArgs>>): Prisma.Prisma__ProjectSpaceClient<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  children<T extends Prisma.ProjectSpace$childrenArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectSpace$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectSpacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProjectSpace model
 */
export interface ProjectSpaceFieldRefs {
  readonly id: Prisma.FieldRef<"ProjectSpace", 'String'>
  readonly name: Prisma.FieldRef<"ProjectSpace", 'String'>
  readonly parentId: Prisma.FieldRef<"ProjectSpace", 'String'>
  readonly meta: Prisma.FieldRef<"ProjectSpace", 'Json'>
}
    

// Custom InputTypes
/**
 * ProjectSpace findUnique
 */
export type ProjectSpaceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  /**
   * Filter, which ProjectSpace to fetch.
   */
  where: Prisma.ProjectSpaceWhereUniqueInput
}

/**
 * ProjectSpace findUniqueOrThrow
 */
export type ProjectSpaceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  /**
   * Filter, which ProjectSpace to fetch.
   */
  where: Prisma.ProjectSpaceWhereUniqueInput
}

/**
 * ProjectSpace findFirst
 */
export type ProjectSpaceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  /**
   * Filter, which ProjectSpace to fetch.
   */
  where?: Prisma.ProjectSpaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectSpaces to fetch.
   */
  orderBy?: Prisma.ProjectSpaceOrderByWithRelationInput | Prisma.ProjectSpaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectSpaces.
   */
  cursor?: Prisma.ProjectSpaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectSpaces from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectSpaces.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectSpaces.
   */
  distinct?: Prisma.ProjectSpaceScalarFieldEnum | Prisma.ProjectSpaceScalarFieldEnum[]
}

/**
 * ProjectSpace findFirstOrThrow
 */
export type ProjectSpaceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  /**
   * Filter, which ProjectSpace to fetch.
   */
  where?: Prisma.ProjectSpaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectSpaces to fetch.
   */
  orderBy?: Prisma.ProjectSpaceOrderByWithRelationInput | Prisma.ProjectSpaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectSpaces.
   */
  cursor?: Prisma.ProjectSpaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectSpaces from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectSpaces.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectSpaces.
   */
  distinct?: Prisma.ProjectSpaceScalarFieldEnum | Prisma.ProjectSpaceScalarFieldEnum[]
}

/**
 * ProjectSpace findMany
 */
export type ProjectSpaceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  /**
   * Filter, which ProjectSpaces to fetch.
   */
  where?: Prisma.ProjectSpaceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectSpaces to fetch.
   */
  orderBy?: Prisma.ProjectSpaceOrderByWithRelationInput | Prisma.ProjectSpaceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProjectSpaces.
   */
  cursor?: Prisma.ProjectSpaceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectSpaces from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectSpaces.
   */
  skip?: number
  distinct?: Prisma.ProjectSpaceScalarFieldEnum | Prisma.ProjectSpaceScalarFieldEnum[]
}

/**
 * ProjectSpace create
 */
export type ProjectSpaceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  /**
   * The data needed to create a ProjectSpace.
   */
  data: Prisma.XOR<Prisma.ProjectSpaceCreateInput, Prisma.ProjectSpaceUncheckedCreateInput>
}

/**
 * ProjectSpace createMany
 */
export type ProjectSpaceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProjectSpaces.
   */
  data: Prisma.ProjectSpaceCreateManyInput | Prisma.ProjectSpaceCreateManyInput[]
}

/**
 * ProjectSpace createManyAndReturn
 */
export type ProjectSpaceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * The data used to create many ProjectSpaces.
   */
  data: Prisma.ProjectSpaceCreateManyInput | Prisma.ProjectSpaceCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProjectSpace update
 */
export type ProjectSpaceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  /**
   * The data needed to update a ProjectSpace.
   */
  data: Prisma.XOR<Prisma.ProjectSpaceUpdateInput, Prisma.ProjectSpaceUncheckedUpdateInput>
  /**
   * Choose, which ProjectSpace to update.
   */
  where: Prisma.ProjectSpaceWhereUniqueInput
}

/**
 * ProjectSpace updateMany
 */
export type ProjectSpaceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProjectSpaces.
   */
  data: Prisma.XOR<Prisma.ProjectSpaceUpdateManyMutationInput, Prisma.ProjectSpaceUncheckedUpdateManyInput>
  /**
   * Filter which ProjectSpaces to update
   */
  where?: Prisma.ProjectSpaceWhereInput
  /**
   * Limit how many ProjectSpaces to update.
   */
  limit?: number
}

/**
 * ProjectSpace updateManyAndReturn
 */
export type ProjectSpaceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * The data used to update ProjectSpaces.
   */
  data: Prisma.XOR<Prisma.ProjectSpaceUpdateManyMutationInput, Prisma.ProjectSpaceUncheckedUpdateManyInput>
  /**
   * Filter which ProjectSpaces to update
   */
  where?: Prisma.ProjectSpaceWhereInput
  /**
   * Limit how many ProjectSpaces to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProjectSpace upsert
 */
export type ProjectSpaceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  /**
   * The filter to search for the ProjectSpace to update in case it exists.
   */
  where: Prisma.ProjectSpaceWhereUniqueInput
  /**
   * In case the ProjectSpace found by the `where` argument doesn't exist, create a new ProjectSpace with this data.
   */
  create: Prisma.XOR<Prisma.ProjectSpaceCreateInput, Prisma.ProjectSpaceUncheckedCreateInput>
  /**
   * In case the ProjectSpace was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectSpaceUpdateInput, Prisma.ProjectSpaceUncheckedUpdateInput>
}

/**
 * ProjectSpace delete
 */
export type ProjectSpaceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  /**
   * Filter which ProjectSpace to delete.
   */
  where: Prisma.ProjectSpaceWhereUniqueInput
}

/**
 * ProjectSpace deleteMany
 */
export type ProjectSpaceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectSpaces to delete
   */
  where?: Prisma.ProjectSpaceWhereInput
  /**
   * Limit how many ProjectSpaces to delete.
   */
  limit?: number
}

/**
 * ProjectSpace.projects
 */
export type ProjectSpace$projectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  cursor?: Prisma.ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * ProjectSpace.parent
 */
export type ProjectSpace$parentArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  where?: Prisma.ProjectSpaceWhereInput
}

/**
 * ProjectSpace.children
 */
export type ProjectSpace$childrenArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
  where?: Prisma.ProjectSpaceWhereInput
  orderBy?: Prisma.ProjectSpaceOrderByWithRelationInput | Prisma.ProjectSpaceOrderByWithRelationInput[]
  cursor?: Prisma.ProjectSpaceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectSpaceScalarFieldEnum | Prisma.ProjectSpaceScalarFieldEnum[]
}

/**
 * ProjectSpace without action
 */
export type ProjectSpaceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectSpace
   */
  select?: Prisma.ProjectSpaceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectSpace
   */
  omit?: Prisma.ProjectSpaceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectSpaceInclude<ExtArgs> | null
}
