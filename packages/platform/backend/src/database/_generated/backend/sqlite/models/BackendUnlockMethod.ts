
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `BackendUnlockMethod` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model BackendUnlockMethod
 * Unlock methods describe trusted identities that can decrypt the backend master key.
 */
export type BackendUnlockMethodModel = runtime.Types.Result.DefaultSelection<Prisma.$BackendUnlockMethodPayload>

export type AggregateBackendUnlockMethod = {
  _count: BackendUnlockMethodCountAggregateOutputType | null
  _min: BackendUnlockMethodMinAggregateOutputType | null
  _max: BackendUnlockMethodMaxAggregateOutputType | null
}

export type BackendUnlockMethodMinAggregateOutputType = {
  id: string | null
  recipient: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BackendUnlockMethodMaxAggregateOutputType = {
  id: string | null
  recipient: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BackendUnlockMethodCountAggregateOutputType = {
  id: number
  meta: number
  recipient: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BackendUnlockMethodMinAggregateInputType = {
  id?: true
  recipient?: true
  createdAt?: true
  updatedAt?: true
}

export type BackendUnlockMethodMaxAggregateInputType = {
  id?: true
  recipient?: true
  createdAt?: true
  updatedAt?: true
}

export type BackendUnlockMethodCountAggregateInputType = {
  id?: true
  meta?: true
  recipient?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BackendUnlockMethodAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BackendUnlockMethod to aggregate.
   */
  where?: Prisma.BackendUnlockMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BackendUnlockMethods to fetch.
   */
  orderBy?: Prisma.BackendUnlockMethodOrderByWithRelationInput | Prisma.BackendUnlockMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BackendUnlockMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BackendUnlockMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BackendUnlockMethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned BackendUnlockMethods
  **/
  _count?: true | BackendUnlockMethodCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BackendUnlockMethodMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BackendUnlockMethodMaxAggregateInputType
}

export type GetBackendUnlockMethodAggregateType<T extends BackendUnlockMethodAggregateArgs> = {
      [P in keyof T & keyof AggregateBackendUnlockMethod]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBackendUnlockMethod[P]>
    : Prisma.GetScalarType<T[P], AggregateBackendUnlockMethod[P]>
}




export type BackendUnlockMethodGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BackendUnlockMethodWhereInput
  orderBy?: Prisma.BackendUnlockMethodOrderByWithAggregationInput | Prisma.BackendUnlockMethodOrderByWithAggregationInput[]
  by: Prisma.BackendUnlockMethodScalarFieldEnum[] | Prisma.BackendUnlockMethodScalarFieldEnum
  having?: Prisma.BackendUnlockMethodScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BackendUnlockMethodCountAggregateInputType | true
  _min?: BackendUnlockMethodMinAggregateInputType
  _max?: BackendUnlockMethodMaxAggregateInputType
}

export type BackendUnlockMethodGroupByOutputType = {
  id: string
  meta: PrismaJson.BackendUnlockMethodMeta
  recipient: string
  createdAt: Date
  updatedAt: Date
  _count: BackendUnlockMethodCountAggregateOutputType | null
  _min: BackendUnlockMethodMinAggregateOutputType | null
  _max: BackendUnlockMethodMaxAggregateOutputType | null
}

type GetBackendUnlockMethodGroupByPayload<T extends BackendUnlockMethodGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BackendUnlockMethodGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BackendUnlockMethodGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BackendUnlockMethodGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BackendUnlockMethodGroupByOutputType[P]>
      }
    >
  >



export type BackendUnlockMethodWhereInput = {
  AND?: Prisma.BackendUnlockMethodWhereInput | Prisma.BackendUnlockMethodWhereInput[]
  OR?: Prisma.BackendUnlockMethodWhereInput[]
  NOT?: Prisma.BackendUnlockMethodWhereInput | Prisma.BackendUnlockMethodWhereInput[]
  id?: Prisma.StringFilter<"BackendUnlockMethod"> | string
  meta?: Prisma.JsonFilter<"BackendUnlockMethod">
  recipient?: Prisma.StringFilter<"BackendUnlockMethod"> | string
  createdAt?: Prisma.DateTimeFilter<"BackendUnlockMethod"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BackendUnlockMethod"> | Date | string
}

export type BackendUnlockMethodOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  recipient?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BackendUnlockMethodWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  recipient?: string
  AND?: Prisma.BackendUnlockMethodWhereInput | Prisma.BackendUnlockMethodWhereInput[]
  OR?: Prisma.BackendUnlockMethodWhereInput[]
  NOT?: Prisma.BackendUnlockMethodWhereInput | Prisma.BackendUnlockMethodWhereInput[]
  meta?: Prisma.JsonFilter<"BackendUnlockMethod">
  createdAt?: Prisma.DateTimeFilter<"BackendUnlockMethod"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"BackendUnlockMethod"> | Date | string
}, "id" | "recipient">

export type BackendUnlockMethodOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  recipient?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BackendUnlockMethodCountOrderByAggregateInput
  _max?: Prisma.BackendUnlockMethodMaxOrderByAggregateInput
  _min?: Prisma.BackendUnlockMethodMinOrderByAggregateInput
}

export type BackendUnlockMethodScalarWhereWithAggregatesInput = {
  AND?: Prisma.BackendUnlockMethodScalarWhereWithAggregatesInput | Prisma.BackendUnlockMethodScalarWhereWithAggregatesInput[]
  OR?: Prisma.BackendUnlockMethodScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BackendUnlockMethodScalarWhereWithAggregatesInput | Prisma.BackendUnlockMethodScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"BackendUnlockMethod"> | string
  meta?: Prisma.JsonWithAggregatesFilter<"BackendUnlockMethod">
  recipient?: Prisma.StringWithAggregatesFilter<"BackendUnlockMethod"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"BackendUnlockMethod"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"BackendUnlockMethod"> | Date | string
}

export type BackendUnlockMethodCreateInput = {
  id?: string
  meta: PrismaJson.BackendUnlockMethodMeta
  recipient: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BackendUnlockMethodUncheckedCreateInput = {
  id?: string
  meta: PrismaJson.BackendUnlockMethodMeta
  recipient: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BackendUnlockMethodUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.BackendUnlockMethodMeta
  recipient?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BackendUnlockMethodUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.BackendUnlockMethodMeta
  recipient?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BackendUnlockMethodCreateManyInput = {
  id?: string
  meta: PrismaJson.BackendUnlockMethodMeta
  recipient: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BackendUnlockMethodUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.BackendUnlockMethodMeta
  recipient?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BackendUnlockMethodUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.BackendUnlockMethodMeta
  recipient?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BackendUnlockMethodCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  recipient?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BackendUnlockMethodMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  recipient?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BackendUnlockMethodMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  recipient?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type BackendUnlockMethodSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  recipient?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["backendUnlockMethod"]>

export type BackendUnlockMethodSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  recipient?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["backendUnlockMethod"]>

export type BackendUnlockMethodSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  recipient?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["backendUnlockMethod"]>

export type BackendUnlockMethodSelectScalar = {
  id?: boolean
  meta?: boolean
  recipient?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BackendUnlockMethodOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meta" | "recipient" | "createdAt" | "updatedAt", ExtArgs["result"]["backendUnlockMethod"]>

export type $BackendUnlockMethodPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "BackendUnlockMethod"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the unlock method.
     */
    id: string
    /**
     * The metadata of the unlock method managed by the backend.
     * 
     * [BackendUnlockMethodMeta]
     */
    meta: PrismaJson.BackendUnlockMethodMeta
    /**
     * The AGE recipient for this unlock method.
     */
    recipient: string
    /**
     * The time when the unlock method was created.
     */
    createdAt: Date
    /**
     * The time when the unlock method was last updated.
     */
    updatedAt: Date
  }, ExtArgs["result"]["backendUnlockMethod"]>
  composites: {}
}

export type BackendUnlockMethodGetPayload<S extends boolean | null | undefined | BackendUnlockMethodDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload, S>

export type BackendUnlockMethodCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BackendUnlockMethodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BackendUnlockMethodCountAggregateInputType | true
  }

export interface BackendUnlockMethodDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BackendUnlockMethod'], meta: { name: 'BackendUnlockMethod' } }
  /**
   * Find zero or one BackendUnlockMethod that matches the filter.
   * @param {BackendUnlockMethodFindUniqueArgs} args - Arguments to find a BackendUnlockMethod
   * @example
   * // Get one BackendUnlockMethod
   * const backendUnlockMethod = await prisma.backendUnlockMethod.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BackendUnlockMethodFindUniqueArgs>(args: Prisma.SelectSubset<T, BackendUnlockMethodFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BackendUnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one BackendUnlockMethod that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BackendUnlockMethodFindUniqueOrThrowArgs} args - Arguments to find a BackendUnlockMethod
   * @example
   * // Get one BackendUnlockMethod
   * const backendUnlockMethod = await prisma.backendUnlockMethod.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BackendUnlockMethodFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BackendUnlockMethodFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BackendUnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BackendUnlockMethod that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BackendUnlockMethodFindFirstArgs} args - Arguments to find a BackendUnlockMethod
   * @example
   * // Get one BackendUnlockMethod
   * const backendUnlockMethod = await prisma.backendUnlockMethod.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BackendUnlockMethodFindFirstArgs>(args?: Prisma.SelectSubset<T, BackendUnlockMethodFindFirstArgs<ExtArgs>>): Prisma.Prisma__BackendUnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first BackendUnlockMethod that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BackendUnlockMethodFindFirstOrThrowArgs} args - Arguments to find a BackendUnlockMethod
   * @example
   * // Get one BackendUnlockMethod
   * const backendUnlockMethod = await prisma.backendUnlockMethod.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BackendUnlockMethodFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BackendUnlockMethodFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BackendUnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more BackendUnlockMethods that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BackendUnlockMethodFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BackendUnlockMethods
   * const backendUnlockMethods = await prisma.backendUnlockMethod.findMany()
   * 
   * // Get first 10 BackendUnlockMethods
   * const backendUnlockMethods = await prisma.backendUnlockMethod.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const backendUnlockMethodWithIdOnly = await prisma.backendUnlockMethod.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BackendUnlockMethodFindManyArgs>(args?: Prisma.SelectSubset<T, BackendUnlockMethodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a BackendUnlockMethod.
   * @param {BackendUnlockMethodCreateArgs} args - Arguments to create a BackendUnlockMethod.
   * @example
   * // Create one BackendUnlockMethod
   * const BackendUnlockMethod = await prisma.backendUnlockMethod.create({
   *   data: {
   *     // ... data to create a BackendUnlockMethod
   *   }
   * })
   * 
   */
  create<T extends BackendUnlockMethodCreateArgs>(args: Prisma.SelectSubset<T, BackendUnlockMethodCreateArgs<ExtArgs>>): Prisma.Prisma__BackendUnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many BackendUnlockMethods.
   * @param {BackendUnlockMethodCreateManyArgs} args - Arguments to create many BackendUnlockMethods.
   * @example
   * // Create many BackendUnlockMethods
   * const backendUnlockMethod = await prisma.backendUnlockMethod.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BackendUnlockMethodCreateManyArgs>(args?: Prisma.SelectSubset<T, BackendUnlockMethodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many BackendUnlockMethods and returns the data saved in the database.
   * @param {BackendUnlockMethodCreateManyAndReturnArgs} args - Arguments to create many BackendUnlockMethods.
   * @example
   * // Create many BackendUnlockMethods
   * const backendUnlockMethod = await prisma.backendUnlockMethod.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many BackendUnlockMethods and only return the `id`
   * const backendUnlockMethodWithIdOnly = await prisma.backendUnlockMethod.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BackendUnlockMethodCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BackendUnlockMethodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a BackendUnlockMethod.
   * @param {BackendUnlockMethodDeleteArgs} args - Arguments to delete one BackendUnlockMethod.
   * @example
   * // Delete one BackendUnlockMethod
   * const BackendUnlockMethod = await prisma.backendUnlockMethod.delete({
   *   where: {
   *     // ... filter to delete one BackendUnlockMethod
   *   }
   * })
   * 
   */
  delete<T extends BackendUnlockMethodDeleteArgs>(args: Prisma.SelectSubset<T, BackendUnlockMethodDeleteArgs<ExtArgs>>): Prisma.Prisma__BackendUnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one BackendUnlockMethod.
   * @param {BackendUnlockMethodUpdateArgs} args - Arguments to update one BackendUnlockMethod.
   * @example
   * // Update one BackendUnlockMethod
   * const backendUnlockMethod = await prisma.backendUnlockMethod.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BackendUnlockMethodUpdateArgs>(args: Prisma.SelectSubset<T, BackendUnlockMethodUpdateArgs<ExtArgs>>): Prisma.Prisma__BackendUnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more BackendUnlockMethods.
   * @param {BackendUnlockMethodDeleteManyArgs} args - Arguments to filter BackendUnlockMethods to delete.
   * @example
   * // Delete a few BackendUnlockMethods
   * const { count } = await prisma.backendUnlockMethod.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BackendUnlockMethodDeleteManyArgs>(args?: Prisma.SelectSubset<T, BackendUnlockMethodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BackendUnlockMethods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BackendUnlockMethodUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BackendUnlockMethods
   * const backendUnlockMethod = await prisma.backendUnlockMethod.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BackendUnlockMethodUpdateManyArgs>(args: Prisma.SelectSubset<T, BackendUnlockMethodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more BackendUnlockMethods and returns the data updated in the database.
   * @param {BackendUnlockMethodUpdateManyAndReturnArgs} args - Arguments to update many BackendUnlockMethods.
   * @example
   * // Update many BackendUnlockMethods
   * const backendUnlockMethod = await prisma.backendUnlockMethod.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more BackendUnlockMethods and only return the `id`
   * const backendUnlockMethodWithIdOnly = await prisma.backendUnlockMethod.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BackendUnlockMethodUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BackendUnlockMethodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one BackendUnlockMethod.
   * @param {BackendUnlockMethodUpsertArgs} args - Arguments to update or create a BackendUnlockMethod.
   * @example
   * // Update or create a BackendUnlockMethod
   * const backendUnlockMethod = await prisma.backendUnlockMethod.upsert({
   *   create: {
   *     // ... data to create a BackendUnlockMethod
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BackendUnlockMethod we want to update
   *   }
   * })
   */
  upsert<T extends BackendUnlockMethodUpsertArgs>(args: Prisma.SelectSubset<T, BackendUnlockMethodUpsertArgs<ExtArgs>>): Prisma.Prisma__BackendUnlockMethodClient<runtime.Types.Result.GetResult<Prisma.$BackendUnlockMethodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of BackendUnlockMethods.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BackendUnlockMethodCountArgs} args - Arguments to filter BackendUnlockMethods to count.
   * @example
   * // Count the number of BackendUnlockMethods
   * const count = await prisma.backendUnlockMethod.count({
   *   where: {
   *     // ... the filter for the BackendUnlockMethods we want to count
   *   }
   * })
  **/
  count<T extends BackendUnlockMethodCountArgs>(
    args?: Prisma.Subset<T, BackendUnlockMethodCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BackendUnlockMethodCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a BackendUnlockMethod.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BackendUnlockMethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BackendUnlockMethodAggregateArgs>(args: Prisma.Subset<T, BackendUnlockMethodAggregateArgs>): Prisma.PrismaPromise<GetBackendUnlockMethodAggregateType<T>>

  /**
   * Group by BackendUnlockMethod.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BackendUnlockMethodGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BackendUnlockMethodGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BackendUnlockMethodGroupByArgs['orderBy'] }
      : { orderBy?: BackendUnlockMethodGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BackendUnlockMethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBackendUnlockMethodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the BackendUnlockMethod model
 */
readonly fields: BackendUnlockMethodFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BackendUnlockMethod.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BackendUnlockMethodClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the BackendUnlockMethod model
 */
export interface BackendUnlockMethodFieldRefs {
  readonly id: Prisma.FieldRef<"BackendUnlockMethod", 'String'>
  readonly meta: Prisma.FieldRef<"BackendUnlockMethod", 'Json'>
  readonly recipient: Prisma.FieldRef<"BackendUnlockMethod", 'String'>
  readonly createdAt: Prisma.FieldRef<"BackendUnlockMethod", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"BackendUnlockMethod", 'DateTime'>
}
    

// Custom InputTypes
/**
 * BackendUnlockMethod findUnique
 */
export type BackendUnlockMethodFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * Filter, which BackendUnlockMethod to fetch.
   */
  where: Prisma.BackendUnlockMethodWhereUniqueInput
}

/**
 * BackendUnlockMethod findUniqueOrThrow
 */
export type BackendUnlockMethodFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * Filter, which BackendUnlockMethod to fetch.
   */
  where: Prisma.BackendUnlockMethodWhereUniqueInput
}

/**
 * BackendUnlockMethod findFirst
 */
export type BackendUnlockMethodFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * Filter, which BackendUnlockMethod to fetch.
   */
  where?: Prisma.BackendUnlockMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BackendUnlockMethods to fetch.
   */
  orderBy?: Prisma.BackendUnlockMethodOrderByWithRelationInput | Prisma.BackendUnlockMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BackendUnlockMethods.
   */
  cursor?: Prisma.BackendUnlockMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BackendUnlockMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BackendUnlockMethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BackendUnlockMethods.
   */
  distinct?: Prisma.BackendUnlockMethodScalarFieldEnum | Prisma.BackendUnlockMethodScalarFieldEnum[]
}

/**
 * BackendUnlockMethod findFirstOrThrow
 */
export type BackendUnlockMethodFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * Filter, which BackendUnlockMethod to fetch.
   */
  where?: Prisma.BackendUnlockMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BackendUnlockMethods to fetch.
   */
  orderBy?: Prisma.BackendUnlockMethodOrderByWithRelationInput | Prisma.BackendUnlockMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for BackendUnlockMethods.
   */
  cursor?: Prisma.BackendUnlockMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BackendUnlockMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BackendUnlockMethods.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of BackendUnlockMethods.
   */
  distinct?: Prisma.BackendUnlockMethodScalarFieldEnum | Prisma.BackendUnlockMethodScalarFieldEnum[]
}

/**
 * BackendUnlockMethod findMany
 */
export type BackendUnlockMethodFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * Filter, which BackendUnlockMethods to fetch.
   */
  where?: Prisma.BackendUnlockMethodWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of BackendUnlockMethods to fetch.
   */
  orderBy?: Prisma.BackendUnlockMethodOrderByWithRelationInput | Prisma.BackendUnlockMethodOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing BackendUnlockMethods.
   */
  cursor?: Prisma.BackendUnlockMethodWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` BackendUnlockMethods from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` BackendUnlockMethods.
   */
  skip?: number
  distinct?: Prisma.BackendUnlockMethodScalarFieldEnum | Prisma.BackendUnlockMethodScalarFieldEnum[]
}

/**
 * BackendUnlockMethod create
 */
export type BackendUnlockMethodCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * The data needed to create a BackendUnlockMethod.
   */
  data: Prisma.XOR<Prisma.BackendUnlockMethodCreateInput, Prisma.BackendUnlockMethodUncheckedCreateInput>
}

/**
 * BackendUnlockMethod createMany
 */
export type BackendUnlockMethodCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many BackendUnlockMethods.
   */
  data: Prisma.BackendUnlockMethodCreateManyInput | Prisma.BackendUnlockMethodCreateManyInput[]
}

/**
 * BackendUnlockMethod createManyAndReturn
 */
export type BackendUnlockMethodCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * The data used to create many BackendUnlockMethods.
   */
  data: Prisma.BackendUnlockMethodCreateManyInput | Prisma.BackendUnlockMethodCreateManyInput[]
}

/**
 * BackendUnlockMethod update
 */
export type BackendUnlockMethodUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * The data needed to update a BackendUnlockMethod.
   */
  data: Prisma.XOR<Prisma.BackendUnlockMethodUpdateInput, Prisma.BackendUnlockMethodUncheckedUpdateInput>
  /**
   * Choose, which BackendUnlockMethod to update.
   */
  where: Prisma.BackendUnlockMethodWhereUniqueInput
}

/**
 * BackendUnlockMethod updateMany
 */
export type BackendUnlockMethodUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update BackendUnlockMethods.
   */
  data: Prisma.XOR<Prisma.BackendUnlockMethodUpdateManyMutationInput, Prisma.BackendUnlockMethodUncheckedUpdateManyInput>
  /**
   * Filter which BackendUnlockMethods to update
   */
  where?: Prisma.BackendUnlockMethodWhereInput
  /**
   * Limit how many BackendUnlockMethods to update.
   */
  limit?: number
}

/**
 * BackendUnlockMethod updateManyAndReturn
 */
export type BackendUnlockMethodUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * The data used to update BackendUnlockMethods.
   */
  data: Prisma.XOR<Prisma.BackendUnlockMethodUpdateManyMutationInput, Prisma.BackendUnlockMethodUncheckedUpdateManyInput>
  /**
   * Filter which BackendUnlockMethods to update
   */
  where?: Prisma.BackendUnlockMethodWhereInput
  /**
   * Limit how many BackendUnlockMethods to update.
   */
  limit?: number
}

/**
 * BackendUnlockMethod upsert
 */
export type BackendUnlockMethodUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * The filter to search for the BackendUnlockMethod to update in case it exists.
   */
  where: Prisma.BackendUnlockMethodWhereUniqueInput
  /**
   * In case the BackendUnlockMethod found by the `where` argument doesn't exist, create a new BackendUnlockMethod with this data.
   */
  create: Prisma.XOR<Prisma.BackendUnlockMethodCreateInput, Prisma.BackendUnlockMethodUncheckedCreateInput>
  /**
   * In case the BackendUnlockMethod was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BackendUnlockMethodUpdateInput, Prisma.BackendUnlockMethodUncheckedUpdateInput>
}

/**
 * BackendUnlockMethod delete
 */
export type BackendUnlockMethodDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
  /**
   * Filter which BackendUnlockMethod to delete.
   */
  where: Prisma.BackendUnlockMethodWhereUniqueInput
}

/**
 * BackendUnlockMethod deleteMany
 */
export type BackendUnlockMethodDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which BackendUnlockMethods to delete
   */
  where?: Prisma.BackendUnlockMethodWhereInput
  /**
   * Limit how many BackendUnlockMethods to delete.
   */
  limit?: number
}

/**
 * BackendUnlockMethod without action
 */
export type BackendUnlockMethodDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the BackendUnlockMethod
   */
  select?: Prisma.BackendUnlockMethodSelect<ExtArgs> | null
  /**
   * Omit specific fields from the BackendUnlockMethod
   */
  omit?: Prisma.BackendUnlockMethodOmit<ExtArgs> | null
}
