
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PulumiBackend` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model PulumiBackend
 * 
 */
export type PulumiBackendModel = runtime.Types.Result.DefaultSelection<Prisma.$PulumiBackendPayload>

export type AggregatePulumiBackend = {
  _count: PulumiBackendCountAggregateOutputType | null
  _min: PulumiBackendMinAggregateOutputType | null
  _max: PulumiBackendMaxAggregateOutputType | null
}

export type PulumiBackendMinAggregateOutputType = {
  id: string | null
}

export type PulumiBackendMaxAggregateOutputType = {
  id: string | null
}

export type PulumiBackendCountAggregateOutputType = {
  id: number
  meta: number
  spec: number
  _all: number
}


export type PulumiBackendMinAggregateInputType = {
  id?: true
}

export type PulumiBackendMaxAggregateInputType = {
  id?: true
}

export type PulumiBackendCountAggregateInputType = {
  id?: true
  meta?: true
  spec?: true
  _all?: true
}

export type PulumiBackendAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PulumiBackend to aggregate.
   */
  where?: Prisma.PulumiBackendWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PulumiBackends to fetch.
   */
  orderBy?: Prisma.PulumiBackendOrderByWithRelationInput | Prisma.PulumiBackendOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PulumiBackendWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PulumiBackends from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PulumiBackends.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PulumiBackends
  **/
  _count?: true | PulumiBackendCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PulumiBackendMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PulumiBackendMaxAggregateInputType
}

export type GetPulumiBackendAggregateType<T extends PulumiBackendAggregateArgs> = {
      [P in keyof T & keyof AggregatePulumiBackend]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePulumiBackend[P]>
    : Prisma.GetScalarType<T[P], AggregatePulumiBackend[P]>
}




export type PulumiBackendGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PulumiBackendWhereInput
  orderBy?: Prisma.PulumiBackendOrderByWithAggregationInput | Prisma.PulumiBackendOrderByWithAggregationInput[]
  by: Prisma.PulumiBackendScalarFieldEnum[] | Prisma.PulumiBackendScalarFieldEnum
  having?: Prisma.PulumiBackendScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PulumiBackendCountAggregateInputType | true
  _min?: PulumiBackendMinAggregateInputType
  _max?: PulumiBackendMaxAggregateInputType
}

export type PulumiBackendGroupByOutputType = {
  id: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.PulumiBackendSpec
  _count: PulumiBackendCountAggregateOutputType | null
  _min: PulumiBackendMinAggregateOutputType | null
  _max: PulumiBackendMaxAggregateOutputType | null
}

type GetPulumiBackendGroupByPayload<T extends PulumiBackendGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PulumiBackendGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PulumiBackendGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PulumiBackendGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PulumiBackendGroupByOutputType[P]>
      }
    >
  >



export type PulumiBackendWhereInput = {
  AND?: Prisma.PulumiBackendWhereInput | Prisma.PulumiBackendWhereInput[]
  OR?: Prisma.PulumiBackendWhereInput[]
  NOT?: Prisma.PulumiBackendWhereInput | Prisma.PulumiBackendWhereInput[]
  id?: Prisma.StringFilter<"PulumiBackend"> | string
  meta?: Prisma.JsonFilter<"PulumiBackend">
  spec?: Prisma.JsonFilter<"PulumiBackend">
  projects?: Prisma.ProjectListRelationFilter
}

export type PulumiBackendOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  spec?: Prisma.SortOrder
  projects?: Prisma.ProjectOrderByRelationAggregateInput
}

export type PulumiBackendWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PulumiBackendWhereInput | Prisma.PulumiBackendWhereInput[]
  OR?: Prisma.PulumiBackendWhereInput[]
  NOT?: Prisma.PulumiBackendWhereInput | Prisma.PulumiBackendWhereInput[]
  meta?: Prisma.JsonFilter<"PulumiBackend">
  spec?: Prisma.JsonFilter<"PulumiBackend">
  projects?: Prisma.ProjectListRelationFilter
}, "id">

export type PulumiBackendOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  spec?: Prisma.SortOrder
  _count?: Prisma.PulumiBackendCountOrderByAggregateInput
  _max?: Prisma.PulumiBackendMaxOrderByAggregateInput
  _min?: Prisma.PulumiBackendMinOrderByAggregateInput
}

export type PulumiBackendScalarWhereWithAggregatesInput = {
  AND?: Prisma.PulumiBackendScalarWhereWithAggregatesInput | Prisma.PulumiBackendScalarWhereWithAggregatesInput[]
  OR?: Prisma.PulumiBackendScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PulumiBackendScalarWhereWithAggregatesInput | Prisma.PulumiBackendScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PulumiBackend"> | string
  meta?: Prisma.JsonWithAggregatesFilter<"PulumiBackend">
  spec?: Prisma.JsonWithAggregatesFilter<"PulumiBackend">
}

export type PulumiBackendCreateInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.PulumiBackendSpec
  projects?: Prisma.ProjectCreateNestedManyWithoutPulumiBackendInput
}

export type PulumiBackendUncheckedCreateInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.PulumiBackendSpec
  projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutPulumiBackendInput
}

export type PulumiBackendUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.PulumiBackendSpec
  projects?: Prisma.ProjectUpdateManyWithoutPulumiBackendNestedInput
}

export type PulumiBackendUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.PulumiBackendSpec
  projects?: Prisma.ProjectUncheckedUpdateManyWithoutPulumiBackendNestedInput
}

export type PulumiBackendCreateManyInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.PulumiBackendSpec
}

export type PulumiBackendUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.PulumiBackendSpec
}

export type PulumiBackendUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.PulumiBackendSpec
}

export type PulumiBackendScalarRelationFilter = {
  is?: Prisma.PulumiBackendWhereInput
  isNot?: Prisma.PulumiBackendWhereInput
}

export type PulumiBackendCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  spec?: Prisma.SortOrder
}

export type PulumiBackendMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PulumiBackendMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PulumiBackendCreateNestedOneWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.PulumiBackendCreateWithoutProjectsInput, Prisma.PulumiBackendUncheckedCreateWithoutProjectsInput>
  connectOrCreate?: Prisma.PulumiBackendCreateOrConnectWithoutProjectsInput
  connect?: Prisma.PulumiBackendWhereUniqueInput
}

export type PulumiBackendUpdateOneRequiredWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.PulumiBackendCreateWithoutProjectsInput, Prisma.PulumiBackendUncheckedCreateWithoutProjectsInput>
  connectOrCreate?: Prisma.PulumiBackendCreateOrConnectWithoutProjectsInput
  upsert?: Prisma.PulumiBackendUpsertWithoutProjectsInput
  connect?: Prisma.PulumiBackendWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PulumiBackendUpdateToOneWithWhereWithoutProjectsInput, Prisma.PulumiBackendUpdateWithoutProjectsInput>, Prisma.PulumiBackendUncheckedUpdateWithoutProjectsInput>
}

export type PulumiBackendCreateWithoutProjectsInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.PulumiBackendSpec
}

export type PulumiBackendUncheckedCreateWithoutProjectsInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.PulumiBackendSpec
}

export type PulumiBackendCreateOrConnectWithoutProjectsInput = {
  where: Prisma.PulumiBackendWhereUniqueInput
  create: Prisma.XOR<Prisma.PulumiBackendCreateWithoutProjectsInput, Prisma.PulumiBackendUncheckedCreateWithoutProjectsInput>
}

export type PulumiBackendUpsertWithoutProjectsInput = {
  update: Prisma.XOR<Prisma.PulumiBackendUpdateWithoutProjectsInput, Prisma.PulumiBackendUncheckedUpdateWithoutProjectsInput>
  create: Prisma.XOR<Prisma.PulumiBackendCreateWithoutProjectsInput, Prisma.PulumiBackendUncheckedCreateWithoutProjectsInput>
  where?: Prisma.PulumiBackendWhereInput
}

export type PulumiBackendUpdateToOneWithWhereWithoutProjectsInput = {
  where?: Prisma.PulumiBackendWhereInput
  data: Prisma.XOR<Prisma.PulumiBackendUpdateWithoutProjectsInput, Prisma.PulumiBackendUncheckedUpdateWithoutProjectsInput>
}

export type PulumiBackendUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.PulumiBackendSpec
}

export type PulumiBackendUncheckedUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.PulumiBackendSpec
}


/**
 * Count Type PulumiBackendCountOutputType
 */

export type PulumiBackendCountOutputType = {
  projects: number
}

export type PulumiBackendCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | PulumiBackendCountOutputTypeCountProjectsArgs
}

/**
 * PulumiBackendCountOutputType without action
 */
export type PulumiBackendCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackendCountOutputType
   */
  select?: Prisma.PulumiBackendCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PulumiBackendCountOutputType without action
 */
export type PulumiBackendCountOutputTypeCountProjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
}


export type PulumiBackendSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  spec?: boolean
  projects?: boolean | Prisma.PulumiBackend$projectsArgs<ExtArgs>
  _count?: boolean | Prisma.PulumiBackendCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pulumiBackend"]>

export type PulumiBackendSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  spec?: boolean
}, ExtArgs["result"]["pulumiBackend"]>

export type PulumiBackendSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  spec?: boolean
}, ExtArgs["result"]["pulumiBackend"]>

export type PulumiBackendSelectScalar = {
  id?: boolean
  meta?: boolean
  spec?: boolean
}

export type PulumiBackendOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meta" | "spec", ExtArgs["result"]["pulumiBackend"]>
export type PulumiBackendInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | Prisma.PulumiBackend$projectsArgs<ExtArgs>
  _count?: boolean | Prisma.PulumiBackendCountOutputTypeDefaultArgs<ExtArgs>
}
export type PulumiBackendIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PulumiBackendIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PulumiBackendPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PulumiBackend"
  objects: {
    /**
     * The projects using this backend.
     */
    projects: Prisma.$ProjectPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the Pulumi backend.
     */
    id: string
    /**
     * The backend meta managed by the backend.
     * 
     * [CommonObjectMeta]
     */
    meta: PrismaJson.CommonObjectMeta
    /**
     * The spec of the Pulumi backend.
     * 
     * [PulumiBackendSpec]
     */
    spec: PrismaJson.PulumiBackendSpec
  }, ExtArgs["result"]["pulumiBackend"]>
  composites: {}
}

export type PulumiBackendGetPayload<S extends boolean | null | undefined | PulumiBackendDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload, S>

export type PulumiBackendCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PulumiBackendFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PulumiBackendCountAggregateInputType | true
  }

export interface PulumiBackendDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PulumiBackend'], meta: { name: 'PulumiBackend' } }
  /**
   * Find zero or one PulumiBackend that matches the filter.
   * @param {PulumiBackendFindUniqueArgs} args - Arguments to find a PulumiBackend
   * @example
   * // Get one PulumiBackend
   * const pulumiBackend = await prisma.pulumiBackend.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PulumiBackendFindUniqueArgs>(args: Prisma.SelectSubset<T, PulumiBackendFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PulumiBackendClient<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PulumiBackend that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PulumiBackendFindUniqueOrThrowArgs} args - Arguments to find a PulumiBackend
   * @example
   * // Get one PulumiBackend
   * const pulumiBackend = await prisma.pulumiBackend.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PulumiBackendFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PulumiBackendFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PulumiBackendClient<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PulumiBackend that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PulumiBackendFindFirstArgs} args - Arguments to find a PulumiBackend
   * @example
   * // Get one PulumiBackend
   * const pulumiBackend = await prisma.pulumiBackend.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PulumiBackendFindFirstArgs>(args?: Prisma.SelectSubset<T, PulumiBackendFindFirstArgs<ExtArgs>>): Prisma.Prisma__PulumiBackendClient<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PulumiBackend that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PulumiBackendFindFirstOrThrowArgs} args - Arguments to find a PulumiBackend
   * @example
   * // Get one PulumiBackend
   * const pulumiBackend = await prisma.pulumiBackend.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PulumiBackendFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PulumiBackendFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PulumiBackendClient<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PulumiBackends that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PulumiBackendFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PulumiBackends
   * const pulumiBackends = await prisma.pulumiBackend.findMany()
   * 
   * // Get first 10 PulumiBackends
   * const pulumiBackends = await prisma.pulumiBackend.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pulumiBackendWithIdOnly = await prisma.pulumiBackend.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PulumiBackendFindManyArgs>(args?: Prisma.SelectSubset<T, PulumiBackendFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PulumiBackend.
   * @param {PulumiBackendCreateArgs} args - Arguments to create a PulumiBackend.
   * @example
   * // Create one PulumiBackend
   * const PulumiBackend = await prisma.pulumiBackend.create({
   *   data: {
   *     // ... data to create a PulumiBackend
   *   }
   * })
   * 
   */
  create<T extends PulumiBackendCreateArgs>(args: Prisma.SelectSubset<T, PulumiBackendCreateArgs<ExtArgs>>): Prisma.Prisma__PulumiBackendClient<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PulumiBackends.
   * @param {PulumiBackendCreateManyArgs} args - Arguments to create many PulumiBackends.
   * @example
   * // Create many PulumiBackends
   * const pulumiBackend = await prisma.pulumiBackend.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PulumiBackendCreateManyArgs>(args?: Prisma.SelectSubset<T, PulumiBackendCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PulumiBackends and returns the data saved in the database.
   * @param {PulumiBackendCreateManyAndReturnArgs} args - Arguments to create many PulumiBackends.
   * @example
   * // Create many PulumiBackends
   * const pulumiBackend = await prisma.pulumiBackend.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PulumiBackends and only return the `id`
   * const pulumiBackendWithIdOnly = await prisma.pulumiBackend.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PulumiBackendCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PulumiBackendCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PulumiBackend.
   * @param {PulumiBackendDeleteArgs} args - Arguments to delete one PulumiBackend.
   * @example
   * // Delete one PulumiBackend
   * const PulumiBackend = await prisma.pulumiBackend.delete({
   *   where: {
   *     // ... filter to delete one PulumiBackend
   *   }
   * })
   * 
   */
  delete<T extends PulumiBackendDeleteArgs>(args: Prisma.SelectSubset<T, PulumiBackendDeleteArgs<ExtArgs>>): Prisma.Prisma__PulumiBackendClient<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PulumiBackend.
   * @param {PulumiBackendUpdateArgs} args - Arguments to update one PulumiBackend.
   * @example
   * // Update one PulumiBackend
   * const pulumiBackend = await prisma.pulumiBackend.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PulumiBackendUpdateArgs>(args: Prisma.SelectSubset<T, PulumiBackendUpdateArgs<ExtArgs>>): Prisma.Prisma__PulumiBackendClient<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PulumiBackends.
   * @param {PulumiBackendDeleteManyArgs} args - Arguments to filter PulumiBackends to delete.
   * @example
   * // Delete a few PulumiBackends
   * const { count } = await prisma.pulumiBackend.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PulumiBackendDeleteManyArgs>(args?: Prisma.SelectSubset<T, PulumiBackendDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PulumiBackends.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PulumiBackendUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PulumiBackends
   * const pulumiBackend = await prisma.pulumiBackend.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PulumiBackendUpdateManyArgs>(args: Prisma.SelectSubset<T, PulumiBackendUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PulumiBackends and returns the data updated in the database.
   * @param {PulumiBackendUpdateManyAndReturnArgs} args - Arguments to update many PulumiBackends.
   * @example
   * // Update many PulumiBackends
   * const pulumiBackend = await prisma.pulumiBackend.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PulumiBackends and only return the `id`
   * const pulumiBackendWithIdOnly = await prisma.pulumiBackend.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PulumiBackendUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PulumiBackendUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PulumiBackend.
   * @param {PulumiBackendUpsertArgs} args - Arguments to update or create a PulumiBackend.
   * @example
   * // Update or create a PulumiBackend
   * const pulumiBackend = await prisma.pulumiBackend.upsert({
   *   create: {
   *     // ... data to create a PulumiBackend
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PulumiBackend we want to update
   *   }
   * })
   */
  upsert<T extends PulumiBackendUpsertArgs>(args: Prisma.SelectSubset<T, PulumiBackendUpsertArgs<ExtArgs>>): Prisma.Prisma__PulumiBackendClient<runtime.Types.Result.GetResult<Prisma.$PulumiBackendPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PulumiBackends.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PulumiBackendCountArgs} args - Arguments to filter PulumiBackends to count.
   * @example
   * // Count the number of PulumiBackends
   * const count = await prisma.pulumiBackend.count({
   *   where: {
   *     // ... the filter for the PulumiBackends we want to count
   *   }
   * })
  **/
  count<T extends PulumiBackendCountArgs>(
    args?: Prisma.Subset<T, PulumiBackendCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PulumiBackendCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PulumiBackend.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PulumiBackendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PulumiBackendAggregateArgs>(args: Prisma.Subset<T, PulumiBackendAggregateArgs>): Prisma.PrismaPromise<GetPulumiBackendAggregateType<T>>

  /**
   * Group by PulumiBackend.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PulumiBackendGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PulumiBackendGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PulumiBackendGroupByArgs['orderBy'] }
      : { orderBy?: PulumiBackendGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PulumiBackendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPulumiBackendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PulumiBackend model
 */
readonly fields: PulumiBackendFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PulumiBackend.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PulumiBackendClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  projects<T extends Prisma.PulumiBackend$projectsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PulumiBackend$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PulumiBackend model
 */
export interface PulumiBackendFieldRefs {
  readonly id: Prisma.FieldRef<"PulumiBackend", 'String'>
  readonly meta: Prisma.FieldRef<"PulumiBackend", 'Json'>
  readonly spec: Prisma.FieldRef<"PulumiBackend", 'Json'>
}
    

// Custom InputTypes
/**
 * PulumiBackend findUnique
 */
export type PulumiBackendFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PulumiBackendInclude<ExtArgs> | null
  /**
   * Filter, which PulumiBackend to fetch.
   */
  where: Prisma.PulumiBackendWhereUniqueInput
}

/**
 * PulumiBackend findUniqueOrThrow
 */
export type PulumiBackendFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PulumiBackendInclude<ExtArgs> | null
  /**
   * Filter, which PulumiBackend to fetch.
   */
  where: Prisma.PulumiBackendWhereUniqueInput
}

/**
 * PulumiBackend findFirst
 */
export type PulumiBackendFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PulumiBackendInclude<ExtArgs> | null
  /**
   * Filter, which PulumiBackend to fetch.
   */
  where?: Prisma.PulumiBackendWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PulumiBackends to fetch.
   */
  orderBy?: Prisma.PulumiBackendOrderByWithRelationInput | Prisma.PulumiBackendOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PulumiBackends.
   */
  cursor?: Prisma.PulumiBackendWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PulumiBackends from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PulumiBackends.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PulumiBackends.
   */
  distinct?: Prisma.PulumiBackendScalarFieldEnum | Prisma.PulumiBackendScalarFieldEnum[]
}

/**
 * PulumiBackend findFirstOrThrow
 */
export type PulumiBackendFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PulumiBackendInclude<ExtArgs> | null
  /**
   * Filter, which PulumiBackend to fetch.
   */
  where?: Prisma.PulumiBackendWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PulumiBackends to fetch.
   */
  orderBy?: Prisma.PulumiBackendOrderByWithRelationInput | Prisma.PulumiBackendOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PulumiBackends.
   */
  cursor?: Prisma.PulumiBackendWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PulumiBackends from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PulumiBackends.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PulumiBackends.
   */
  distinct?: Prisma.PulumiBackendScalarFieldEnum | Prisma.PulumiBackendScalarFieldEnum[]
}

/**
 * PulumiBackend findMany
 */
export type PulumiBackendFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PulumiBackendInclude<ExtArgs> | null
  /**
   * Filter, which PulumiBackends to fetch.
   */
  where?: Prisma.PulumiBackendWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PulumiBackends to fetch.
   */
  orderBy?: Prisma.PulumiBackendOrderByWithRelationInput | Prisma.PulumiBackendOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PulumiBackends.
   */
  cursor?: Prisma.PulumiBackendWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PulumiBackends from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PulumiBackends.
   */
  skip?: number
  distinct?: Prisma.PulumiBackendScalarFieldEnum | Prisma.PulumiBackendScalarFieldEnum[]
}

/**
 * PulumiBackend create
 */
export type PulumiBackendCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PulumiBackendInclude<ExtArgs> | null
  /**
   * The data needed to create a PulumiBackend.
   */
  data: Prisma.XOR<Prisma.PulumiBackendCreateInput, Prisma.PulumiBackendUncheckedCreateInput>
}

/**
 * PulumiBackend createMany
 */
export type PulumiBackendCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PulumiBackends.
   */
  data: Prisma.PulumiBackendCreateManyInput | Prisma.PulumiBackendCreateManyInput[]
}

/**
 * PulumiBackend createManyAndReturn
 */
export type PulumiBackendCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * The data used to create many PulumiBackends.
   */
  data: Prisma.PulumiBackendCreateManyInput | Prisma.PulumiBackendCreateManyInput[]
}

/**
 * PulumiBackend update
 */
export type PulumiBackendUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PulumiBackendInclude<ExtArgs> | null
  /**
   * The data needed to update a PulumiBackend.
   */
  data: Prisma.XOR<Prisma.PulumiBackendUpdateInput, Prisma.PulumiBackendUncheckedUpdateInput>
  /**
   * Choose, which PulumiBackend to update.
   */
  where: Prisma.PulumiBackendWhereUniqueInput
}

/**
 * PulumiBackend updateMany
 */
export type PulumiBackendUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PulumiBackends.
   */
  data: Prisma.XOR<Prisma.PulumiBackendUpdateManyMutationInput, Prisma.PulumiBackendUncheckedUpdateManyInput>
  /**
   * Filter which PulumiBackends to update
   */
  where?: Prisma.PulumiBackendWhereInput
  /**
   * Limit how many PulumiBackends to update.
   */
  limit?: number
}

/**
 * PulumiBackend updateManyAndReturn
 */
export type PulumiBackendUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * The data used to update PulumiBackends.
   */
  data: Prisma.XOR<Prisma.PulumiBackendUpdateManyMutationInput, Prisma.PulumiBackendUncheckedUpdateManyInput>
  /**
   * Filter which PulumiBackends to update
   */
  where?: Prisma.PulumiBackendWhereInput
  /**
   * Limit how many PulumiBackends to update.
   */
  limit?: number
}

/**
 * PulumiBackend upsert
 */
export type PulumiBackendUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PulumiBackendInclude<ExtArgs> | null
  /**
   * The filter to search for the PulumiBackend to update in case it exists.
   */
  where: Prisma.PulumiBackendWhereUniqueInput
  /**
   * In case the PulumiBackend found by the `where` argument doesn't exist, create a new PulumiBackend with this data.
   */
  create: Prisma.XOR<Prisma.PulumiBackendCreateInput, Prisma.PulumiBackendUncheckedCreateInput>
  /**
   * In case the PulumiBackend was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PulumiBackendUpdateInput, Prisma.PulumiBackendUncheckedUpdateInput>
}

/**
 * PulumiBackend delete
 */
export type PulumiBackendDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PulumiBackendInclude<ExtArgs> | null
  /**
   * Filter which PulumiBackend to delete.
   */
  where: Prisma.PulumiBackendWhereUniqueInput
}

/**
 * PulumiBackend deleteMany
 */
export type PulumiBackendDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PulumiBackends to delete
   */
  where?: Prisma.PulumiBackendWhereInput
  /**
   * Limit how many PulumiBackends to delete.
   */
  limit?: number
}

/**
 * PulumiBackend.projects
 */
export type PulumiBackend$projectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  cursor?: Prisma.ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * PulumiBackend without action
 */
export type PulumiBackendDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PulumiBackend
   */
  select?: Prisma.PulumiBackendSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PulumiBackend
   */
  omit?: Prisma.PulumiBackendOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PulumiBackendInclude<ExtArgs> | null
}
