
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProjectModelStorage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProjectModelStorage
 * 
 */
export type ProjectModelStorageModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectModelStoragePayload>

export type AggregateProjectModelStorage = {
  _count: ProjectModelStorageCountAggregateOutputType | null
  _min: ProjectModelStorageMinAggregateOutputType | null
  _max: ProjectModelStorageMaxAggregateOutputType | null
}

export type ProjectModelStorageMinAggregateOutputType = {
  id: string | null
}

export type ProjectModelStorageMaxAggregateOutputType = {
  id: string | null
}

export type ProjectModelStorageCountAggregateOutputType = {
  id: number
  meta: number
  spec: number
  _all: number
}


export type ProjectModelStorageMinAggregateInputType = {
  id?: true
}

export type ProjectModelStorageMaxAggregateInputType = {
  id?: true
}

export type ProjectModelStorageCountAggregateInputType = {
  id?: true
  meta?: true
  spec?: true
  _all?: true
}

export type ProjectModelStorageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectModelStorage to aggregate.
   */
  where?: Prisma.ProjectModelStorageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectModelStorages to fetch.
   */
  orderBy?: Prisma.ProjectModelStorageOrderByWithRelationInput | Prisma.ProjectModelStorageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectModelStorageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectModelStorages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectModelStorages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProjectModelStorages
  **/
  _count?: true | ProjectModelStorageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectModelStorageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectModelStorageMaxAggregateInputType
}

export type GetProjectModelStorageAggregateType<T extends ProjectModelStorageAggregateArgs> = {
      [P in keyof T & keyof AggregateProjectModelStorage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProjectModelStorage[P]>
    : Prisma.GetScalarType<T[P], AggregateProjectModelStorage[P]>
}




export type ProjectModelStorageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectModelStorageWhereInput
  orderBy?: Prisma.ProjectModelStorageOrderByWithAggregationInput | Prisma.ProjectModelStorageOrderByWithAggregationInput[]
  by: Prisma.ProjectModelStorageScalarFieldEnum[] | Prisma.ProjectModelStorageScalarFieldEnum
  having?: Prisma.ProjectModelStorageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectModelStorageCountAggregateInputType | true
  _min?: ProjectModelStorageMinAggregateInputType
  _max?: ProjectModelStorageMaxAggregateInputType
}

export type ProjectModelStorageGroupByOutputType = {
  id: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.ProjectModelStorageSpec
  _count: ProjectModelStorageCountAggregateOutputType | null
  _min: ProjectModelStorageMinAggregateOutputType | null
  _max: ProjectModelStorageMaxAggregateOutputType | null
}

type GetProjectModelStorageGroupByPayload<T extends ProjectModelStorageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectModelStorageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectModelStorageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectModelStorageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectModelStorageGroupByOutputType[P]>
      }
    >
  >



export type ProjectModelStorageWhereInput = {
  AND?: Prisma.ProjectModelStorageWhereInput | Prisma.ProjectModelStorageWhereInput[]
  OR?: Prisma.ProjectModelStorageWhereInput[]
  NOT?: Prisma.ProjectModelStorageWhereInput | Prisma.ProjectModelStorageWhereInput[]
  id?: Prisma.StringFilter<"ProjectModelStorage"> | string
  meta?: Prisma.JsonFilter<"ProjectModelStorage">
  spec?: Prisma.JsonFilter<"ProjectModelStorage">
  projects?: Prisma.ProjectListRelationFilter
}

export type ProjectModelStorageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  spec?: Prisma.SortOrder
  projects?: Prisma.ProjectOrderByRelationAggregateInput
}

export type ProjectModelStorageWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProjectModelStorageWhereInput | Prisma.ProjectModelStorageWhereInput[]
  OR?: Prisma.ProjectModelStorageWhereInput[]
  NOT?: Prisma.ProjectModelStorageWhereInput | Prisma.ProjectModelStorageWhereInput[]
  meta?: Prisma.JsonFilter<"ProjectModelStorage">
  spec?: Prisma.JsonFilter<"ProjectModelStorage">
  projects?: Prisma.ProjectListRelationFilter
}, "id">

export type ProjectModelStorageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  spec?: Prisma.SortOrder
  _count?: Prisma.ProjectModelStorageCountOrderByAggregateInput
  _max?: Prisma.ProjectModelStorageMaxOrderByAggregateInput
  _min?: Prisma.ProjectModelStorageMinOrderByAggregateInput
}

export type ProjectModelStorageScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectModelStorageScalarWhereWithAggregatesInput | Prisma.ProjectModelStorageScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectModelStorageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectModelStorageScalarWhereWithAggregatesInput | Prisma.ProjectModelStorageScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProjectModelStorage"> | string
  meta?: Prisma.JsonWithAggregatesFilter<"ProjectModelStorage">
  spec?: Prisma.JsonWithAggregatesFilter<"ProjectModelStorage">
}

export type ProjectModelStorageCreateInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.ProjectModelStorageSpec
  projects?: Prisma.ProjectCreateNestedManyWithoutModelStorageInput
}

export type ProjectModelStorageUncheckedCreateInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.ProjectModelStorageSpec
  projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutModelStorageInput
}

export type ProjectModelStorageUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.ProjectModelStorageSpec
  projects?: Prisma.ProjectUpdateManyWithoutModelStorageNestedInput
}

export type ProjectModelStorageUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.ProjectModelStorageSpec
  projects?: Prisma.ProjectUncheckedUpdateManyWithoutModelStorageNestedInput
}

export type ProjectModelStorageCreateManyInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.ProjectModelStorageSpec
}

export type ProjectModelStorageUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.ProjectModelStorageSpec
}

export type ProjectModelStorageUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.ProjectModelStorageSpec
}

export type ProjectModelStorageScalarRelationFilter = {
  is?: Prisma.ProjectModelStorageWhereInput
  isNot?: Prisma.ProjectModelStorageWhereInput
}

export type ProjectModelStorageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  spec?: Prisma.SortOrder
}

export type ProjectModelStorageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProjectModelStorageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProjectModelStorageCreateNestedOneWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.ProjectModelStorageCreateWithoutProjectsInput, Prisma.ProjectModelStorageUncheckedCreateWithoutProjectsInput>
  connectOrCreate?: Prisma.ProjectModelStorageCreateOrConnectWithoutProjectsInput
  connect?: Prisma.ProjectModelStorageWhereUniqueInput
}

export type ProjectModelStorageUpdateOneRequiredWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectModelStorageCreateWithoutProjectsInput, Prisma.ProjectModelStorageUncheckedCreateWithoutProjectsInput>
  connectOrCreate?: Prisma.ProjectModelStorageCreateOrConnectWithoutProjectsInput
  upsert?: Prisma.ProjectModelStorageUpsertWithoutProjectsInput
  connect?: Prisma.ProjectModelStorageWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectModelStorageUpdateToOneWithWhereWithoutProjectsInput, Prisma.ProjectModelStorageUpdateWithoutProjectsInput>, Prisma.ProjectModelStorageUncheckedUpdateWithoutProjectsInput>
}

export type ProjectModelStorageCreateWithoutProjectsInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.ProjectModelStorageSpec
}

export type ProjectModelStorageUncheckedCreateWithoutProjectsInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.ProjectModelStorageSpec
}

export type ProjectModelStorageCreateOrConnectWithoutProjectsInput = {
  where: Prisma.ProjectModelStorageWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectModelStorageCreateWithoutProjectsInput, Prisma.ProjectModelStorageUncheckedCreateWithoutProjectsInput>
}

export type ProjectModelStorageUpsertWithoutProjectsInput = {
  update: Prisma.XOR<Prisma.ProjectModelStorageUpdateWithoutProjectsInput, Prisma.ProjectModelStorageUncheckedUpdateWithoutProjectsInput>
  create: Prisma.XOR<Prisma.ProjectModelStorageCreateWithoutProjectsInput, Prisma.ProjectModelStorageUncheckedCreateWithoutProjectsInput>
  where?: Prisma.ProjectModelStorageWhereInput
}

export type ProjectModelStorageUpdateToOneWithWhereWithoutProjectsInput = {
  where?: Prisma.ProjectModelStorageWhereInput
  data: Prisma.XOR<Prisma.ProjectModelStorageUpdateWithoutProjectsInput, Prisma.ProjectModelStorageUncheckedUpdateWithoutProjectsInput>
}

export type ProjectModelStorageUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.ProjectModelStorageSpec
}

export type ProjectModelStorageUncheckedUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.ProjectModelStorageSpec
}


/**
 * Count Type ProjectModelStorageCountOutputType
 */

export type ProjectModelStorageCountOutputType = {
  projects: number
}

export type ProjectModelStorageCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | ProjectModelStorageCountOutputTypeCountProjectsArgs
}

/**
 * ProjectModelStorageCountOutputType without action
 */
export type ProjectModelStorageCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorageCountOutputType
   */
  select?: Prisma.ProjectModelStorageCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProjectModelStorageCountOutputType without action
 */
export type ProjectModelStorageCountOutputTypeCountProjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
}


export type ProjectModelStorageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  spec?: boolean
  projects?: boolean | Prisma.ProjectModelStorage$projectsArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectModelStorageCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectModelStorage"]>

export type ProjectModelStorageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  spec?: boolean
}, ExtArgs["result"]["projectModelStorage"]>

export type ProjectModelStorageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  spec?: boolean
}, ExtArgs["result"]["projectModelStorage"]>

export type ProjectModelStorageSelectScalar = {
  id?: boolean
  meta?: boolean
  spec?: boolean
}

export type ProjectModelStorageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meta" | "spec", ExtArgs["result"]["projectModelStorage"]>
export type ProjectModelStorageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | Prisma.ProjectModelStorage$projectsArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectModelStorageCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProjectModelStorageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ProjectModelStorageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ProjectModelStoragePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProjectModelStorage"
  objects: {
    /**
     * The projects using this model storage.
     */
    projects: Prisma.$ProjectPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the project model storage.
     */
    id: string
    /**
     * The metadata of the project model storage managed by the backend.
     * 
     * [CommonObjectMeta]
     */
    meta: PrismaJson.CommonObjectMeta
    /**
     * The specification of the project model storage.
     * 
     * [ProjectModelStorageSpec]
     */
    spec: PrismaJson.ProjectModelStorageSpec
  }, ExtArgs["result"]["projectModelStorage"]>
  composites: {}
}

export type ProjectModelStorageGetPayload<S extends boolean | null | undefined | ProjectModelStorageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload, S>

export type ProjectModelStorageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectModelStorageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectModelStorageCountAggregateInputType | true
  }

export interface ProjectModelStorageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectModelStorage'], meta: { name: 'ProjectModelStorage' } }
  /**
   * Find zero or one ProjectModelStorage that matches the filter.
   * @param {ProjectModelStorageFindUniqueArgs} args - Arguments to find a ProjectModelStorage
   * @example
   * // Get one ProjectModelStorage
   * const projectModelStorage = await prisma.projectModelStorage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectModelStorageFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectModelStorageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectModelStorageClient<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProjectModelStorage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectModelStorageFindUniqueOrThrowArgs} args - Arguments to find a ProjectModelStorage
   * @example
   * // Get one ProjectModelStorage
   * const projectModelStorage = await prisma.projectModelStorage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectModelStorageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectModelStorageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectModelStorageClient<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectModelStorage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectModelStorageFindFirstArgs} args - Arguments to find a ProjectModelStorage
   * @example
   * // Get one ProjectModelStorage
   * const projectModelStorage = await prisma.projectModelStorage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectModelStorageFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectModelStorageFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectModelStorageClient<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectModelStorage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectModelStorageFindFirstOrThrowArgs} args - Arguments to find a ProjectModelStorage
   * @example
   * // Get one ProjectModelStorage
   * const projectModelStorage = await prisma.projectModelStorage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectModelStorageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectModelStorageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectModelStorageClient<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProjectModelStorages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectModelStorageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProjectModelStorages
   * const projectModelStorages = await prisma.projectModelStorage.findMany()
   * 
   * // Get first 10 ProjectModelStorages
   * const projectModelStorages = await prisma.projectModelStorage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectModelStorageWithIdOnly = await prisma.projectModelStorage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProjectModelStorageFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectModelStorageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProjectModelStorage.
   * @param {ProjectModelStorageCreateArgs} args - Arguments to create a ProjectModelStorage.
   * @example
   * // Create one ProjectModelStorage
   * const ProjectModelStorage = await prisma.projectModelStorage.create({
   *   data: {
   *     // ... data to create a ProjectModelStorage
   *   }
   * })
   * 
   */
  create<T extends ProjectModelStorageCreateArgs>(args: Prisma.SelectSubset<T, ProjectModelStorageCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectModelStorageClient<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProjectModelStorages.
   * @param {ProjectModelStorageCreateManyArgs} args - Arguments to create many ProjectModelStorages.
   * @example
   * // Create many ProjectModelStorages
   * const projectModelStorage = await prisma.projectModelStorage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectModelStorageCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectModelStorageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProjectModelStorages and returns the data saved in the database.
   * @param {ProjectModelStorageCreateManyAndReturnArgs} args - Arguments to create many ProjectModelStorages.
   * @example
   * // Create many ProjectModelStorages
   * const projectModelStorage = await prisma.projectModelStorage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProjectModelStorages and only return the `id`
   * const projectModelStorageWithIdOnly = await prisma.projectModelStorage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProjectModelStorageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProjectModelStorageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProjectModelStorage.
   * @param {ProjectModelStorageDeleteArgs} args - Arguments to delete one ProjectModelStorage.
   * @example
   * // Delete one ProjectModelStorage
   * const ProjectModelStorage = await prisma.projectModelStorage.delete({
   *   where: {
   *     // ... filter to delete one ProjectModelStorage
   *   }
   * })
   * 
   */
  delete<T extends ProjectModelStorageDeleteArgs>(args: Prisma.SelectSubset<T, ProjectModelStorageDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectModelStorageClient<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProjectModelStorage.
   * @param {ProjectModelStorageUpdateArgs} args - Arguments to update one ProjectModelStorage.
   * @example
   * // Update one ProjectModelStorage
   * const projectModelStorage = await prisma.projectModelStorage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectModelStorageUpdateArgs>(args: Prisma.SelectSubset<T, ProjectModelStorageUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectModelStorageClient<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProjectModelStorages.
   * @param {ProjectModelStorageDeleteManyArgs} args - Arguments to filter ProjectModelStorages to delete.
   * @example
   * // Delete a few ProjectModelStorages
   * const { count } = await prisma.projectModelStorage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectModelStorageDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectModelStorageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectModelStorages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectModelStorageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProjectModelStorages
   * const projectModelStorage = await prisma.projectModelStorage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectModelStorageUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectModelStorageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectModelStorages and returns the data updated in the database.
   * @param {ProjectModelStorageUpdateManyAndReturnArgs} args - Arguments to update many ProjectModelStorages.
   * @example
   * // Update many ProjectModelStorages
   * const projectModelStorage = await prisma.projectModelStorage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProjectModelStorages and only return the `id`
   * const projectModelStorageWithIdOnly = await prisma.projectModelStorage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProjectModelStorageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProjectModelStorageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProjectModelStorage.
   * @param {ProjectModelStorageUpsertArgs} args - Arguments to update or create a ProjectModelStorage.
   * @example
   * // Update or create a ProjectModelStorage
   * const projectModelStorage = await prisma.projectModelStorage.upsert({
   *   create: {
   *     // ... data to create a ProjectModelStorage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProjectModelStorage we want to update
   *   }
   * })
   */
  upsert<T extends ProjectModelStorageUpsertArgs>(args: Prisma.SelectSubset<T, ProjectModelStorageUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectModelStorageClient<runtime.Types.Result.GetResult<Prisma.$ProjectModelStoragePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProjectModelStorages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectModelStorageCountArgs} args - Arguments to filter ProjectModelStorages to count.
   * @example
   * // Count the number of ProjectModelStorages
   * const count = await prisma.projectModelStorage.count({
   *   where: {
   *     // ... the filter for the ProjectModelStorages we want to count
   *   }
   * })
  **/
  count<T extends ProjectModelStorageCountArgs>(
    args?: Prisma.Subset<T, ProjectModelStorageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectModelStorageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProjectModelStorage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectModelStorageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectModelStorageAggregateArgs>(args: Prisma.Subset<T, ProjectModelStorageAggregateArgs>): Prisma.PrismaPromise<GetProjectModelStorageAggregateType<T>>

  /**
   * Group by ProjectModelStorage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectModelStorageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectModelStorageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectModelStorageGroupByArgs['orderBy'] }
      : { orderBy?: ProjectModelStorageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectModelStorageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectModelStorageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProjectModelStorage model
 */
readonly fields: ProjectModelStorageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectModelStorage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectModelStorageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  projects<T extends Prisma.ProjectModelStorage$projectsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectModelStorage$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProjectModelStorage model
 */
export interface ProjectModelStorageFieldRefs {
  readonly id: Prisma.FieldRef<"ProjectModelStorage", 'String'>
  readonly meta: Prisma.FieldRef<"ProjectModelStorage", 'Json'>
  readonly spec: Prisma.FieldRef<"ProjectModelStorage", 'Json'>
}
    

// Custom InputTypes
/**
 * ProjectModelStorage findUnique
 */
export type ProjectModelStorageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectModelStorageInclude<ExtArgs> | null
  /**
   * Filter, which ProjectModelStorage to fetch.
   */
  where: Prisma.ProjectModelStorageWhereUniqueInput
}

/**
 * ProjectModelStorage findUniqueOrThrow
 */
export type ProjectModelStorageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectModelStorageInclude<ExtArgs> | null
  /**
   * Filter, which ProjectModelStorage to fetch.
   */
  where: Prisma.ProjectModelStorageWhereUniqueInput
}

/**
 * ProjectModelStorage findFirst
 */
export type ProjectModelStorageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectModelStorageInclude<ExtArgs> | null
  /**
   * Filter, which ProjectModelStorage to fetch.
   */
  where?: Prisma.ProjectModelStorageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectModelStorages to fetch.
   */
  orderBy?: Prisma.ProjectModelStorageOrderByWithRelationInput | Prisma.ProjectModelStorageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectModelStorages.
   */
  cursor?: Prisma.ProjectModelStorageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectModelStorages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectModelStorages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectModelStorages.
   */
  distinct?: Prisma.ProjectModelStorageScalarFieldEnum | Prisma.ProjectModelStorageScalarFieldEnum[]
}

/**
 * ProjectModelStorage findFirstOrThrow
 */
export type ProjectModelStorageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectModelStorageInclude<ExtArgs> | null
  /**
   * Filter, which ProjectModelStorage to fetch.
   */
  where?: Prisma.ProjectModelStorageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectModelStorages to fetch.
   */
  orderBy?: Prisma.ProjectModelStorageOrderByWithRelationInput | Prisma.ProjectModelStorageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectModelStorages.
   */
  cursor?: Prisma.ProjectModelStorageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectModelStorages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectModelStorages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectModelStorages.
   */
  distinct?: Prisma.ProjectModelStorageScalarFieldEnum | Prisma.ProjectModelStorageScalarFieldEnum[]
}

/**
 * ProjectModelStorage findMany
 */
export type ProjectModelStorageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectModelStorageInclude<ExtArgs> | null
  /**
   * Filter, which ProjectModelStorages to fetch.
   */
  where?: Prisma.ProjectModelStorageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectModelStorages to fetch.
   */
  orderBy?: Prisma.ProjectModelStorageOrderByWithRelationInput | Prisma.ProjectModelStorageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProjectModelStorages.
   */
  cursor?: Prisma.ProjectModelStorageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectModelStorages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectModelStorages.
   */
  skip?: number
  distinct?: Prisma.ProjectModelStorageScalarFieldEnum | Prisma.ProjectModelStorageScalarFieldEnum[]
}

/**
 * ProjectModelStorage create
 */
export type ProjectModelStorageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectModelStorageInclude<ExtArgs> | null
  /**
   * The data needed to create a ProjectModelStorage.
   */
  data: Prisma.XOR<Prisma.ProjectModelStorageCreateInput, Prisma.ProjectModelStorageUncheckedCreateInput>
}

/**
 * ProjectModelStorage createMany
 */
export type ProjectModelStorageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProjectModelStorages.
   */
  data: Prisma.ProjectModelStorageCreateManyInput | Prisma.ProjectModelStorageCreateManyInput[]
}

/**
 * ProjectModelStorage createManyAndReturn
 */
export type ProjectModelStorageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * The data used to create many ProjectModelStorages.
   */
  data: Prisma.ProjectModelStorageCreateManyInput | Prisma.ProjectModelStorageCreateManyInput[]
}

/**
 * ProjectModelStorage update
 */
export type ProjectModelStorageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectModelStorageInclude<ExtArgs> | null
  /**
   * The data needed to update a ProjectModelStorage.
   */
  data: Prisma.XOR<Prisma.ProjectModelStorageUpdateInput, Prisma.ProjectModelStorageUncheckedUpdateInput>
  /**
   * Choose, which ProjectModelStorage to update.
   */
  where: Prisma.ProjectModelStorageWhereUniqueInput
}

/**
 * ProjectModelStorage updateMany
 */
export type ProjectModelStorageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProjectModelStorages.
   */
  data: Prisma.XOR<Prisma.ProjectModelStorageUpdateManyMutationInput, Prisma.ProjectModelStorageUncheckedUpdateManyInput>
  /**
   * Filter which ProjectModelStorages to update
   */
  where?: Prisma.ProjectModelStorageWhereInput
  /**
   * Limit how many ProjectModelStorages to update.
   */
  limit?: number
}

/**
 * ProjectModelStorage updateManyAndReturn
 */
export type ProjectModelStorageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * The data used to update ProjectModelStorages.
   */
  data: Prisma.XOR<Prisma.ProjectModelStorageUpdateManyMutationInput, Prisma.ProjectModelStorageUncheckedUpdateManyInput>
  /**
   * Filter which ProjectModelStorages to update
   */
  where?: Prisma.ProjectModelStorageWhereInput
  /**
   * Limit how many ProjectModelStorages to update.
   */
  limit?: number
}

/**
 * ProjectModelStorage upsert
 */
export type ProjectModelStorageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectModelStorageInclude<ExtArgs> | null
  /**
   * The filter to search for the ProjectModelStorage to update in case it exists.
   */
  where: Prisma.ProjectModelStorageWhereUniqueInput
  /**
   * In case the ProjectModelStorage found by the `where` argument doesn't exist, create a new ProjectModelStorage with this data.
   */
  create: Prisma.XOR<Prisma.ProjectModelStorageCreateInput, Prisma.ProjectModelStorageUncheckedCreateInput>
  /**
   * In case the ProjectModelStorage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectModelStorageUpdateInput, Prisma.ProjectModelStorageUncheckedUpdateInput>
}

/**
 * ProjectModelStorage delete
 */
export type ProjectModelStorageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectModelStorageInclude<ExtArgs> | null
  /**
   * Filter which ProjectModelStorage to delete.
   */
  where: Prisma.ProjectModelStorageWhereUniqueInput
}

/**
 * ProjectModelStorage deleteMany
 */
export type ProjectModelStorageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectModelStorages to delete
   */
  where?: Prisma.ProjectModelStorageWhereInput
  /**
   * Limit how many ProjectModelStorages to delete.
   */
  limit?: number
}

/**
 * ProjectModelStorage.projects
 */
export type ProjectModelStorage$projectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  cursor?: Prisma.ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * ProjectModelStorage without action
 */
export type ProjectModelStorageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectModelStorage
   */
  select?: Prisma.ProjectModelStorageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectModelStorage
   */
  omit?: Prisma.ProjectModelStorageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectModelStorageInclude<ExtArgs> | null
}
