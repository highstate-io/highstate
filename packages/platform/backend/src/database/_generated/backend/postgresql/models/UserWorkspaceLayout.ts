
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UserWorkspaceLayout` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserWorkspaceLayout
 * 
 */
export type UserWorkspaceLayoutModel = runtime.Types.Result.DefaultSelection<Prisma.$UserWorkspaceLayoutPayload>

export type AggregateUserWorkspaceLayout = {
  _count: UserWorkspaceLayoutCountAggregateOutputType | null
  _min: UserWorkspaceLayoutMinAggregateOutputType | null
  _max: UserWorkspaceLayoutMaxAggregateOutputType | null
}

export type UserWorkspaceLayoutMinAggregateOutputType = {
  userId: string | null
}

export type UserWorkspaceLayoutMaxAggregateOutputType = {
  userId: string | null
}

export type UserWorkspaceLayoutCountAggregateOutputType = {
  userId: number
  layout: number
  _all: number
}


export type UserWorkspaceLayoutMinAggregateInputType = {
  userId?: true
}

export type UserWorkspaceLayoutMaxAggregateInputType = {
  userId?: true
}

export type UserWorkspaceLayoutCountAggregateInputType = {
  userId?: true
  layout?: true
  _all?: true
}

export type UserWorkspaceLayoutAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserWorkspaceLayout to aggregate.
   */
  where?: Prisma.UserWorkspaceLayoutWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserWorkspaceLayouts to fetch.
   */
  orderBy?: Prisma.UserWorkspaceLayoutOrderByWithRelationInput | Prisma.UserWorkspaceLayoutOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserWorkspaceLayoutWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserWorkspaceLayouts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserWorkspaceLayouts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserWorkspaceLayouts
  **/
  _count?: true | UserWorkspaceLayoutCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserWorkspaceLayoutMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserWorkspaceLayoutMaxAggregateInputType
}

export type GetUserWorkspaceLayoutAggregateType<T extends UserWorkspaceLayoutAggregateArgs> = {
      [P in keyof T & keyof AggregateUserWorkspaceLayout]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserWorkspaceLayout[P]>
    : Prisma.GetScalarType<T[P], AggregateUserWorkspaceLayout[P]>
}




export type UserWorkspaceLayoutGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWorkspaceLayoutWhereInput
  orderBy?: Prisma.UserWorkspaceLayoutOrderByWithAggregationInput | Prisma.UserWorkspaceLayoutOrderByWithAggregationInput[]
  by: Prisma.UserWorkspaceLayoutScalarFieldEnum[] | Prisma.UserWorkspaceLayoutScalarFieldEnum
  having?: Prisma.UserWorkspaceLayoutScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserWorkspaceLayoutCountAggregateInputType | true
  _min?: UserWorkspaceLayoutMinAggregateInputType
  _max?: UserWorkspaceLayoutMaxAggregateInputType
}

export type UserWorkspaceLayoutGroupByOutputType = {
  userId: string
  layout: (unknown)
  _count: UserWorkspaceLayoutCountAggregateOutputType | null
  _min: UserWorkspaceLayoutMinAggregateOutputType | null
  _max: UserWorkspaceLayoutMaxAggregateOutputType | null
}

type GetUserWorkspaceLayoutGroupByPayload<T extends UserWorkspaceLayoutGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserWorkspaceLayoutGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserWorkspaceLayoutGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserWorkspaceLayoutGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserWorkspaceLayoutGroupByOutputType[P]>
      }
    >
  >



export type UserWorkspaceLayoutWhereInput = {
  AND?: Prisma.UserWorkspaceLayoutWhereInput | Prisma.UserWorkspaceLayoutWhereInput[]
  OR?: Prisma.UserWorkspaceLayoutWhereInput[]
  NOT?: Prisma.UserWorkspaceLayoutWhereInput | Prisma.UserWorkspaceLayoutWhereInput[]
  userId?: Prisma.StringFilter<"UserWorkspaceLayout"> | string
  layout?: Prisma.JsonFilter<"UserWorkspaceLayout">
}

export type UserWorkspaceLayoutOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  layout?: Prisma.SortOrder
}

export type UserWorkspaceLayoutWhereUniqueInput = Prisma.AtLeast<{
  userId?: string
  AND?: Prisma.UserWorkspaceLayoutWhereInput | Prisma.UserWorkspaceLayoutWhereInput[]
  OR?: Prisma.UserWorkspaceLayoutWhereInput[]
  NOT?: Prisma.UserWorkspaceLayoutWhereInput | Prisma.UserWorkspaceLayoutWhereInput[]
  layout?: Prisma.JsonFilter<"UserWorkspaceLayout">
}, "userId">

export type UserWorkspaceLayoutOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  layout?: Prisma.SortOrder
  _count?: Prisma.UserWorkspaceLayoutCountOrderByAggregateInput
  _max?: Prisma.UserWorkspaceLayoutMaxOrderByAggregateInput
  _min?: Prisma.UserWorkspaceLayoutMinOrderByAggregateInput
}

export type UserWorkspaceLayoutScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserWorkspaceLayoutScalarWhereWithAggregatesInput | Prisma.UserWorkspaceLayoutScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserWorkspaceLayoutScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserWorkspaceLayoutScalarWhereWithAggregatesInput | Prisma.UserWorkspaceLayoutScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"UserWorkspaceLayout"> | string
  layout?: Prisma.JsonWithAggregatesFilter<"UserWorkspaceLayout">
}

export type UserWorkspaceLayoutCreateInput = {
  userId: string
  layout: (unknown)
}

export type UserWorkspaceLayoutUncheckedCreateInput = {
  userId: string
  layout: (unknown)
}

export type UserWorkspaceLayoutUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  layout?: (unknown)
}

export type UserWorkspaceLayoutUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  layout?: (unknown)
}

export type UserWorkspaceLayoutCreateManyInput = {
  userId: string
  layout: (unknown)
}

export type UserWorkspaceLayoutUpdateManyMutationInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  layout?: (unknown)
}

export type UserWorkspaceLayoutUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  layout?: (unknown)
}

export type UserWorkspaceLayoutCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  layout?: Prisma.SortOrder
}

export type UserWorkspaceLayoutMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
}

export type UserWorkspaceLayoutMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}



export type UserWorkspaceLayoutSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  layout?: boolean
}, ExtArgs["result"]["userWorkspaceLayout"]>

export type UserWorkspaceLayoutSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  layout?: boolean
}, ExtArgs["result"]["userWorkspaceLayout"]>

export type UserWorkspaceLayoutSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  layout?: boolean
}, ExtArgs["result"]["userWorkspaceLayout"]>

export type UserWorkspaceLayoutSelectScalar = {
  userId?: boolean
  layout?: boolean
}

export type UserWorkspaceLayoutOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "layout", ExtArgs["result"]["userWorkspaceLayout"]>

export type $UserWorkspaceLayoutPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserWorkspaceLayout"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The opaque ID of the user to which this layout belongs.
     */
    userId: string
    /**
     * The layout of the user workspace managed by the frontend.
     * 
     * ![unknown]
     */
    layout: (unknown)
  }, ExtArgs["result"]["userWorkspaceLayout"]>
  composites: {}
}

export type UserWorkspaceLayoutGetPayload<S extends boolean | null | undefined | UserWorkspaceLayoutDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload, S>

export type UserWorkspaceLayoutCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserWorkspaceLayoutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserWorkspaceLayoutCountAggregateInputType | true
  }

export interface UserWorkspaceLayoutDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserWorkspaceLayout'], meta: { name: 'UserWorkspaceLayout' } }
  /**
   * Find zero or one UserWorkspaceLayout that matches the filter.
   * @param {UserWorkspaceLayoutFindUniqueArgs} args - Arguments to find a UserWorkspaceLayout
   * @example
   * // Get one UserWorkspaceLayout
   * const userWorkspaceLayout = await prisma.userWorkspaceLayout.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserWorkspaceLayoutFindUniqueArgs>(args: Prisma.SelectSubset<T, UserWorkspaceLayoutFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserWorkspaceLayoutClient<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserWorkspaceLayout that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserWorkspaceLayoutFindUniqueOrThrowArgs} args - Arguments to find a UserWorkspaceLayout
   * @example
   * // Get one UserWorkspaceLayout
   * const userWorkspaceLayout = await prisma.userWorkspaceLayout.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserWorkspaceLayoutFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserWorkspaceLayoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserWorkspaceLayoutClient<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserWorkspaceLayout that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserWorkspaceLayoutFindFirstArgs} args - Arguments to find a UserWorkspaceLayout
   * @example
   * // Get one UserWorkspaceLayout
   * const userWorkspaceLayout = await prisma.userWorkspaceLayout.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserWorkspaceLayoutFindFirstArgs>(args?: Prisma.SelectSubset<T, UserWorkspaceLayoutFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserWorkspaceLayoutClient<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserWorkspaceLayout that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserWorkspaceLayoutFindFirstOrThrowArgs} args - Arguments to find a UserWorkspaceLayout
   * @example
   * // Get one UserWorkspaceLayout
   * const userWorkspaceLayout = await prisma.userWorkspaceLayout.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserWorkspaceLayoutFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserWorkspaceLayoutFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserWorkspaceLayoutClient<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserWorkspaceLayouts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserWorkspaceLayoutFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserWorkspaceLayouts
   * const userWorkspaceLayouts = await prisma.userWorkspaceLayout.findMany()
   * 
   * // Get first 10 UserWorkspaceLayouts
   * const userWorkspaceLayouts = await prisma.userWorkspaceLayout.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const userWorkspaceLayoutWithUserIdOnly = await prisma.userWorkspaceLayout.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UserWorkspaceLayoutFindManyArgs>(args?: Prisma.SelectSubset<T, UserWorkspaceLayoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserWorkspaceLayout.
   * @param {UserWorkspaceLayoutCreateArgs} args - Arguments to create a UserWorkspaceLayout.
   * @example
   * // Create one UserWorkspaceLayout
   * const UserWorkspaceLayout = await prisma.userWorkspaceLayout.create({
   *   data: {
   *     // ... data to create a UserWorkspaceLayout
   *   }
   * })
   * 
   */
  create<T extends UserWorkspaceLayoutCreateArgs>(args: Prisma.SelectSubset<T, UserWorkspaceLayoutCreateArgs<ExtArgs>>): Prisma.Prisma__UserWorkspaceLayoutClient<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserWorkspaceLayouts.
   * @param {UserWorkspaceLayoutCreateManyArgs} args - Arguments to create many UserWorkspaceLayouts.
   * @example
   * // Create many UserWorkspaceLayouts
   * const userWorkspaceLayout = await prisma.userWorkspaceLayout.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserWorkspaceLayoutCreateManyArgs>(args?: Prisma.SelectSubset<T, UserWorkspaceLayoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserWorkspaceLayouts and returns the data saved in the database.
   * @param {UserWorkspaceLayoutCreateManyAndReturnArgs} args - Arguments to create many UserWorkspaceLayouts.
   * @example
   * // Create many UserWorkspaceLayouts
   * const userWorkspaceLayout = await prisma.userWorkspaceLayout.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserWorkspaceLayouts and only return the `userId`
   * const userWorkspaceLayoutWithUserIdOnly = await prisma.userWorkspaceLayout.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserWorkspaceLayoutCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserWorkspaceLayoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserWorkspaceLayout.
   * @param {UserWorkspaceLayoutDeleteArgs} args - Arguments to delete one UserWorkspaceLayout.
   * @example
   * // Delete one UserWorkspaceLayout
   * const UserWorkspaceLayout = await prisma.userWorkspaceLayout.delete({
   *   where: {
   *     // ... filter to delete one UserWorkspaceLayout
   *   }
   * })
   * 
   */
  delete<T extends UserWorkspaceLayoutDeleteArgs>(args: Prisma.SelectSubset<T, UserWorkspaceLayoutDeleteArgs<ExtArgs>>): Prisma.Prisma__UserWorkspaceLayoutClient<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserWorkspaceLayout.
   * @param {UserWorkspaceLayoutUpdateArgs} args - Arguments to update one UserWorkspaceLayout.
   * @example
   * // Update one UserWorkspaceLayout
   * const userWorkspaceLayout = await prisma.userWorkspaceLayout.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserWorkspaceLayoutUpdateArgs>(args: Prisma.SelectSubset<T, UserWorkspaceLayoutUpdateArgs<ExtArgs>>): Prisma.Prisma__UserWorkspaceLayoutClient<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserWorkspaceLayouts.
   * @param {UserWorkspaceLayoutDeleteManyArgs} args - Arguments to filter UserWorkspaceLayouts to delete.
   * @example
   * // Delete a few UserWorkspaceLayouts
   * const { count } = await prisma.userWorkspaceLayout.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserWorkspaceLayoutDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserWorkspaceLayoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserWorkspaceLayouts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserWorkspaceLayoutUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserWorkspaceLayouts
   * const userWorkspaceLayout = await prisma.userWorkspaceLayout.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserWorkspaceLayoutUpdateManyArgs>(args: Prisma.SelectSubset<T, UserWorkspaceLayoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserWorkspaceLayouts and returns the data updated in the database.
   * @param {UserWorkspaceLayoutUpdateManyAndReturnArgs} args - Arguments to update many UserWorkspaceLayouts.
   * @example
   * // Update many UserWorkspaceLayouts
   * const userWorkspaceLayout = await prisma.userWorkspaceLayout.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserWorkspaceLayouts and only return the `userId`
   * const userWorkspaceLayoutWithUserIdOnly = await prisma.userWorkspaceLayout.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserWorkspaceLayoutUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserWorkspaceLayoutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserWorkspaceLayout.
   * @param {UserWorkspaceLayoutUpsertArgs} args - Arguments to update or create a UserWorkspaceLayout.
   * @example
   * // Update or create a UserWorkspaceLayout
   * const userWorkspaceLayout = await prisma.userWorkspaceLayout.upsert({
   *   create: {
   *     // ... data to create a UserWorkspaceLayout
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserWorkspaceLayout we want to update
   *   }
   * })
   */
  upsert<T extends UserWorkspaceLayoutUpsertArgs>(args: Prisma.SelectSubset<T, UserWorkspaceLayoutUpsertArgs<ExtArgs>>): Prisma.Prisma__UserWorkspaceLayoutClient<runtime.Types.Result.GetResult<Prisma.$UserWorkspaceLayoutPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserWorkspaceLayouts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserWorkspaceLayoutCountArgs} args - Arguments to filter UserWorkspaceLayouts to count.
   * @example
   * // Count the number of UserWorkspaceLayouts
   * const count = await prisma.userWorkspaceLayout.count({
   *   where: {
   *     // ... the filter for the UserWorkspaceLayouts we want to count
   *   }
   * })
  **/
  count<T extends UserWorkspaceLayoutCountArgs>(
    args?: Prisma.Subset<T, UserWorkspaceLayoutCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserWorkspaceLayoutCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserWorkspaceLayout.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserWorkspaceLayoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserWorkspaceLayoutAggregateArgs>(args: Prisma.Subset<T, UserWorkspaceLayoutAggregateArgs>): Prisma.PrismaPromise<GetUserWorkspaceLayoutAggregateType<T>>

  /**
   * Group by UserWorkspaceLayout.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserWorkspaceLayoutGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserWorkspaceLayoutGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserWorkspaceLayoutGroupByArgs['orderBy'] }
      : { orderBy?: UserWorkspaceLayoutGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserWorkspaceLayoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserWorkspaceLayoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserWorkspaceLayout model
 */
readonly fields: UserWorkspaceLayoutFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserWorkspaceLayout.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserWorkspaceLayoutClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserWorkspaceLayout model
 */
export interface UserWorkspaceLayoutFieldRefs {
  readonly userId: Prisma.FieldRef<"UserWorkspaceLayout", 'String'>
  readonly layout: Prisma.FieldRef<"UserWorkspaceLayout", 'Json'>
}
    

// Custom InputTypes
/**
 * UserWorkspaceLayout findUnique
 */
export type UserWorkspaceLayoutFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * Filter, which UserWorkspaceLayout to fetch.
   */
  where: Prisma.UserWorkspaceLayoutWhereUniqueInput
}

/**
 * UserWorkspaceLayout findUniqueOrThrow
 */
export type UserWorkspaceLayoutFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * Filter, which UserWorkspaceLayout to fetch.
   */
  where: Prisma.UserWorkspaceLayoutWhereUniqueInput
}

/**
 * UserWorkspaceLayout findFirst
 */
export type UserWorkspaceLayoutFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * Filter, which UserWorkspaceLayout to fetch.
   */
  where?: Prisma.UserWorkspaceLayoutWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserWorkspaceLayouts to fetch.
   */
  orderBy?: Prisma.UserWorkspaceLayoutOrderByWithRelationInput | Prisma.UserWorkspaceLayoutOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserWorkspaceLayouts.
   */
  cursor?: Prisma.UserWorkspaceLayoutWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserWorkspaceLayouts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserWorkspaceLayouts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserWorkspaceLayouts.
   */
  distinct?: Prisma.UserWorkspaceLayoutScalarFieldEnum | Prisma.UserWorkspaceLayoutScalarFieldEnum[]
}

/**
 * UserWorkspaceLayout findFirstOrThrow
 */
export type UserWorkspaceLayoutFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * Filter, which UserWorkspaceLayout to fetch.
   */
  where?: Prisma.UserWorkspaceLayoutWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserWorkspaceLayouts to fetch.
   */
  orderBy?: Prisma.UserWorkspaceLayoutOrderByWithRelationInput | Prisma.UserWorkspaceLayoutOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserWorkspaceLayouts.
   */
  cursor?: Prisma.UserWorkspaceLayoutWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserWorkspaceLayouts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserWorkspaceLayouts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserWorkspaceLayouts.
   */
  distinct?: Prisma.UserWorkspaceLayoutScalarFieldEnum | Prisma.UserWorkspaceLayoutScalarFieldEnum[]
}

/**
 * UserWorkspaceLayout findMany
 */
export type UserWorkspaceLayoutFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * Filter, which UserWorkspaceLayouts to fetch.
   */
  where?: Prisma.UserWorkspaceLayoutWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserWorkspaceLayouts to fetch.
   */
  orderBy?: Prisma.UserWorkspaceLayoutOrderByWithRelationInput | Prisma.UserWorkspaceLayoutOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserWorkspaceLayouts.
   */
  cursor?: Prisma.UserWorkspaceLayoutWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserWorkspaceLayouts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserWorkspaceLayouts.
   */
  skip?: number
  distinct?: Prisma.UserWorkspaceLayoutScalarFieldEnum | Prisma.UserWorkspaceLayoutScalarFieldEnum[]
}

/**
 * UserWorkspaceLayout create
 */
export type UserWorkspaceLayoutCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * The data needed to create a UserWorkspaceLayout.
   */
  data: Prisma.XOR<Prisma.UserWorkspaceLayoutCreateInput, Prisma.UserWorkspaceLayoutUncheckedCreateInput>
}

/**
 * UserWorkspaceLayout createMany
 */
export type UserWorkspaceLayoutCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserWorkspaceLayouts.
   */
  data: Prisma.UserWorkspaceLayoutCreateManyInput | Prisma.UserWorkspaceLayoutCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserWorkspaceLayout createManyAndReturn
 */
export type UserWorkspaceLayoutCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * The data used to create many UserWorkspaceLayouts.
   */
  data: Prisma.UserWorkspaceLayoutCreateManyInput | Prisma.UserWorkspaceLayoutCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserWorkspaceLayout update
 */
export type UserWorkspaceLayoutUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * The data needed to update a UserWorkspaceLayout.
   */
  data: Prisma.XOR<Prisma.UserWorkspaceLayoutUpdateInput, Prisma.UserWorkspaceLayoutUncheckedUpdateInput>
  /**
   * Choose, which UserWorkspaceLayout to update.
   */
  where: Prisma.UserWorkspaceLayoutWhereUniqueInput
}

/**
 * UserWorkspaceLayout updateMany
 */
export type UserWorkspaceLayoutUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserWorkspaceLayouts.
   */
  data: Prisma.XOR<Prisma.UserWorkspaceLayoutUpdateManyMutationInput, Prisma.UserWorkspaceLayoutUncheckedUpdateManyInput>
  /**
   * Filter which UserWorkspaceLayouts to update
   */
  where?: Prisma.UserWorkspaceLayoutWhereInput
  /**
   * Limit how many UserWorkspaceLayouts to update.
   */
  limit?: number
}

/**
 * UserWorkspaceLayout updateManyAndReturn
 */
export type UserWorkspaceLayoutUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * The data used to update UserWorkspaceLayouts.
   */
  data: Prisma.XOR<Prisma.UserWorkspaceLayoutUpdateManyMutationInput, Prisma.UserWorkspaceLayoutUncheckedUpdateManyInput>
  /**
   * Filter which UserWorkspaceLayouts to update
   */
  where?: Prisma.UserWorkspaceLayoutWhereInput
  /**
   * Limit how many UserWorkspaceLayouts to update.
   */
  limit?: number
}

/**
 * UserWorkspaceLayout upsert
 */
export type UserWorkspaceLayoutUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * The filter to search for the UserWorkspaceLayout to update in case it exists.
   */
  where: Prisma.UserWorkspaceLayoutWhereUniqueInput
  /**
   * In case the UserWorkspaceLayout found by the `where` argument doesn't exist, create a new UserWorkspaceLayout with this data.
   */
  create: Prisma.XOR<Prisma.UserWorkspaceLayoutCreateInput, Prisma.UserWorkspaceLayoutUncheckedCreateInput>
  /**
   * In case the UserWorkspaceLayout was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserWorkspaceLayoutUpdateInput, Prisma.UserWorkspaceLayoutUncheckedUpdateInput>
}

/**
 * UserWorkspaceLayout delete
 */
export type UserWorkspaceLayoutDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
  /**
   * Filter which UserWorkspaceLayout to delete.
   */
  where: Prisma.UserWorkspaceLayoutWhereUniqueInput
}

/**
 * UserWorkspaceLayout deleteMany
 */
export type UserWorkspaceLayoutDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserWorkspaceLayouts to delete
   */
  where?: Prisma.UserWorkspaceLayoutWhereInput
  /**
   * Limit how many UserWorkspaceLayouts to delete.
   */
  limit?: number
}

/**
 * UserWorkspaceLayout without action
 */
export type UserWorkspaceLayoutDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserWorkspaceLayout
   */
  select?: Prisma.UserWorkspaceLayoutSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserWorkspaceLayout
   */
  omit?: Prisma.UserWorkspaceLayoutOmit<ExtArgs> | null
}
