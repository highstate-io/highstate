
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Library` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg.ts';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Library
 * 
 */
export type LibraryModel = runtime.Types.Result.DefaultSelection<Prisma.$LibraryPayload>

export type AggregateLibrary = {
  _count: LibraryCountAggregateOutputType | null
  _min: LibraryMinAggregateOutputType | null
  _max: LibraryMaxAggregateOutputType | null
}

export type LibraryMinAggregateOutputType = {
  id: string | null
}

export type LibraryMaxAggregateOutputType = {
  id: string | null
}

export type LibraryCountAggregateOutputType = {
  id: number
  meta: number
  spec: number
  _all: number
}


export type LibraryMinAggregateInputType = {
  id?: true
}

export type LibraryMaxAggregateInputType = {
  id?: true
}

export type LibraryCountAggregateInputType = {
  id?: true
  meta?: true
  spec?: true
  _all?: true
}

export type LibraryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Library to aggregate.
   */
  where?: Prisma.LibraryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Libraries to fetch.
   */
  orderBy?: Prisma.LibraryOrderByWithRelationInput | Prisma.LibraryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LibraryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Libraries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Libraries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Libraries
  **/
  _count?: true | LibraryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LibraryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LibraryMaxAggregateInputType
}

export type GetLibraryAggregateType<T extends LibraryAggregateArgs> = {
      [P in keyof T & keyof AggregateLibrary]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLibrary[P]>
    : Prisma.GetScalarType<T[P], AggregateLibrary[P]>
}




export type LibraryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LibraryWhereInput
  orderBy?: Prisma.LibraryOrderByWithAggregationInput | Prisma.LibraryOrderByWithAggregationInput[]
  by: Prisma.LibraryScalarFieldEnum[] | Prisma.LibraryScalarFieldEnum
  having?: Prisma.LibraryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LibraryCountAggregateInputType | true
  _min?: LibraryMinAggregateInputType
  _max?: LibraryMaxAggregateInputType
}

export type LibraryGroupByOutputType = {
  id: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.LibrarySpec
  _count: LibraryCountAggregateOutputType | null
  _min: LibraryMinAggregateOutputType | null
  _max: LibraryMaxAggregateOutputType | null
}

type GetLibraryGroupByPayload<T extends LibraryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LibraryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LibraryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LibraryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LibraryGroupByOutputType[P]>
      }
    >
  >



export type LibraryWhereInput = {
  AND?: Prisma.LibraryWhereInput | Prisma.LibraryWhereInput[]
  OR?: Prisma.LibraryWhereInput[]
  NOT?: Prisma.LibraryWhereInput | Prisma.LibraryWhereInput[]
  id?: Prisma.StringFilter<"Library"> | string
  meta?: Prisma.JsonFilter<"Library">
  spec?: Prisma.JsonFilter<"Library">
  projects?: Prisma.ProjectListRelationFilter
}

export type LibraryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  spec?: Prisma.SortOrder
  projects?: Prisma.ProjectOrderByRelationAggregateInput
}

export type LibraryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.LibraryWhereInput | Prisma.LibraryWhereInput[]
  OR?: Prisma.LibraryWhereInput[]
  NOT?: Prisma.LibraryWhereInput | Prisma.LibraryWhereInput[]
  meta?: Prisma.JsonFilter<"Library">
  spec?: Prisma.JsonFilter<"Library">
  projects?: Prisma.ProjectListRelationFilter
}, "id">

export type LibraryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  spec?: Prisma.SortOrder
  _count?: Prisma.LibraryCountOrderByAggregateInput
  _max?: Prisma.LibraryMaxOrderByAggregateInput
  _min?: Prisma.LibraryMinOrderByAggregateInput
}

export type LibraryScalarWhereWithAggregatesInput = {
  AND?: Prisma.LibraryScalarWhereWithAggregatesInput | Prisma.LibraryScalarWhereWithAggregatesInput[]
  OR?: Prisma.LibraryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LibraryScalarWhereWithAggregatesInput | Prisma.LibraryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Library"> | string
  meta?: Prisma.JsonWithAggregatesFilter<"Library">
  spec?: Prisma.JsonWithAggregatesFilter<"Library">
}

export type LibraryCreateInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.LibrarySpec
  projects?: Prisma.ProjectCreateNestedManyWithoutLibraryInput
}

export type LibraryUncheckedCreateInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.LibrarySpec
  projects?: Prisma.ProjectUncheckedCreateNestedManyWithoutLibraryInput
}

export type LibraryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.LibrarySpec
  projects?: Prisma.ProjectUpdateManyWithoutLibraryNestedInput
}

export type LibraryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.LibrarySpec
  projects?: Prisma.ProjectUncheckedUpdateManyWithoutLibraryNestedInput
}

export type LibraryCreateManyInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.LibrarySpec
}

export type LibraryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.LibrarySpec
}

export type LibraryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.LibrarySpec
}

export type LibraryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  meta?: Prisma.SortOrder
  spec?: Prisma.SortOrder
}

export type LibraryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type LibraryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type LibraryScalarRelationFilter = {
  is?: Prisma.LibraryWhereInput
  isNot?: Prisma.LibraryWhereInput
}

export type LibraryCreateNestedOneWithoutProjectsInput = {
  create?: Prisma.XOR<Prisma.LibraryCreateWithoutProjectsInput, Prisma.LibraryUncheckedCreateWithoutProjectsInput>
  connectOrCreate?: Prisma.LibraryCreateOrConnectWithoutProjectsInput
  connect?: Prisma.LibraryWhereUniqueInput
}

export type LibraryUpdateOneRequiredWithoutProjectsNestedInput = {
  create?: Prisma.XOR<Prisma.LibraryCreateWithoutProjectsInput, Prisma.LibraryUncheckedCreateWithoutProjectsInput>
  connectOrCreate?: Prisma.LibraryCreateOrConnectWithoutProjectsInput
  upsert?: Prisma.LibraryUpsertWithoutProjectsInput
  connect?: Prisma.LibraryWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.LibraryUpdateToOneWithWhereWithoutProjectsInput, Prisma.LibraryUpdateWithoutProjectsInput>, Prisma.LibraryUncheckedUpdateWithoutProjectsInput>
}

export type LibraryCreateWithoutProjectsInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.LibrarySpec
}

export type LibraryUncheckedCreateWithoutProjectsInput = {
  id?: string
  meta: PrismaJson.CommonObjectMeta
  spec: PrismaJson.LibrarySpec
}

export type LibraryCreateOrConnectWithoutProjectsInput = {
  where: Prisma.LibraryWhereUniqueInput
  create: Prisma.XOR<Prisma.LibraryCreateWithoutProjectsInput, Prisma.LibraryUncheckedCreateWithoutProjectsInput>
}

export type LibraryUpsertWithoutProjectsInput = {
  update: Prisma.XOR<Prisma.LibraryUpdateWithoutProjectsInput, Prisma.LibraryUncheckedUpdateWithoutProjectsInput>
  create: Prisma.XOR<Prisma.LibraryCreateWithoutProjectsInput, Prisma.LibraryUncheckedCreateWithoutProjectsInput>
  where?: Prisma.LibraryWhereInput
}

export type LibraryUpdateToOneWithWhereWithoutProjectsInput = {
  where?: Prisma.LibraryWhereInput
  data: Prisma.XOR<Prisma.LibraryUpdateWithoutProjectsInput, Prisma.LibraryUncheckedUpdateWithoutProjectsInput>
}

export type LibraryUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.LibrarySpec
}

export type LibraryUncheckedUpdateWithoutProjectsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  meta?: PrismaJson.CommonObjectMeta
  spec?: PrismaJson.LibrarySpec
}


/**
 * Count Type LibraryCountOutputType
 */

export type LibraryCountOutputType = {
  projects: number
}

export type LibraryCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | LibraryCountOutputTypeCountProjectsArgs
}

/**
 * LibraryCountOutputType without action
 */
export type LibraryCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LibraryCountOutputType
   */
  select?: Prisma.LibraryCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LibraryCountOutputType without action
 */
export type LibraryCountOutputTypeCountProjectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
}


export type LibrarySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  spec?: boolean
  projects?: boolean | Prisma.Library$projectsArgs<ExtArgs>
  _count?: boolean | Prisma.LibraryCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["library"]>

export type LibrarySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  spec?: boolean
}, ExtArgs["result"]["library"]>

export type LibrarySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  meta?: boolean
  spec?: boolean
}, ExtArgs["result"]["library"]>

export type LibrarySelectScalar = {
  id?: boolean
  meta?: boolean
  spec?: boolean
}

export type LibraryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "meta" | "spec", ExtArgs["result"]["library"]>
export type LibraryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  projects?: boolean | Prisma.Library$projectsArgs<ExtArgs>
  _count?: boolean | Prisma.LibraryCountOutputTypeDefaultArgs<ExtArgs>
}
export type LibraryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type LibraryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $LibraryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Library"
  objects: {
    /**
     * The projects using this library.
     */
    projects: Prisma.$ProjectPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    /**
     * The CUIDv2 of the library.
     */
    id: string
    /**
     * The metadata of the library managed by the backend.
     * 
     * [CommonObjectMeta]
     */
    meta: PrismaJson.CommonObjectMeta
    /**
     * The spec of the library.
     * 
     * [LibrarySpec]
     */
    spec: PrismaJson.LibrarySpec
  }, ExtArgs["result"]["library"]>
  composites: {}
}

export type LibraryGetPayload<S extends boolean | null | undefined | LibraryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LibraryPayload, S>

export type LibraryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LibraryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LibraryCountAggregateInputType | true
  }

export interface LibraryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Library'], meta: { name: 'Library' } }
  /**
   * Find zero or one Library that matches the filter.
   * @param {LibraryFindUniqueArgs} args - Arguments to find a Library
   * @example
   * // Get one Library
   * const library = await prisma.library.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LibraryFindUniqueArgs>(args: Prisma.SelectSubset<T, LibraryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LibraryClient<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Library that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LibraryFindUniqueOrThrowArgs} args - Arguments to find a Library
   * @example
   * // Get one Library
   * const library = await prisma.library.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LibraryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LibraryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LibraryClient<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Library that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibraryFindFirstArgs} args - Arguments to find a Library
   * @example
   * // Get one Library
   * const library = await prisma.library.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LibraryFindFirstArgs>(args?: Prisma.SelectSubset<T, LibraryFindFirstArgs<ExtArgs>>): Prisma.Prisma__LibraryClient<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Library that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibraryFindFirstOrThrowArgs} args - Arguments to find a Library
   * @example
   * // Get one Library
   * const library = await prisma.library.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LibraryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LibraryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LibraryClient<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Libraries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibraryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Libraries
   * const libraries = await prisma.library.findMany()
   * 
   * // Get first 10 Libraries
   * const libraries = await prisma.library.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const libraryWithIdOnly = await prisma.library.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LibraryFindManyArgs>(args?: Prisma.SelectSubset<T, LibraryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Library.
   * @param {LibraryCreateArgs} args - Arguments to create a Library.
   * @example
   * // Create one Library
   * const Library = await prisma.library.create({
   *   data: {
   *     // ... data to create a Library
   *   }
   * })
   * 
   */
  create<T extends LibraryCreateArgs>(args: Prisma.SelectSubset<T, LibraryCreateArgs<ExtArgs>>): Prisma.Prisma__LibraryClient<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Libraries.
   * @param {LibraryCreateManyArgs} args - Arguments to create many Libraries.
   * @example
   * // Create many Libraries
   * const library = await prisma.library.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LibraryCreateManyArgs>(args?: Prisma.SelectSubset<T, LibraryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Libraries and returns the data saved in the database.
   * @param {LibraryCreateManyAndReturnArgs} args - Arguments to create many Libraries.
   * @example
   * // Create many Libraries
   * const library = await prisma.library.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Libraries and only return the `id`
   * const libraryWithIdOnly = await prisma.library.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LibraryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LibraryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Library.
   * @param {LibraryDeleteArgs} args - Arguments to delete one Library.
   * @example
   * // Delete one Library
   * const Library = await prisma.library.delete({
   *   where: {
   *     // ... filter to delete one Library
   *   }
   * })
   * 
   */
  delete<T extends LibraryDeleteArgs>(args: Prisma.SelectSubset<T, LibraryDeleteArgs<ExtArgs>>): Prisma.Prisma__LibraryClient<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Library.
   * @param {LibraryUpdateArgs} args - Arguments to update one Library.
   * @example
   * // Update one Library
   * const library = await prisma.library.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LibraryUpdateArgs>(args: Prisma.SelectSubset<T, LibraryUpdateArgs<ExtArgs>>): Prisma.Prisma__LibraryClient<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Libraries.
   * @param {LibraryDeleteManyArgs} args - Arguments to filter Libraries to delete.
   * @example
   * // Delete a few Libraries
   * const { count } = await prisma.library.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LibraryDeleteManyArgs>(args?: Prisma.SelectSubset<T, LibraryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Libraries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibraryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Libraries
   * const library = await prisma.library.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LibraryUpdateManyArgs>(args: Prisma.SelectSubset<T, LibraryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Libraries and returns the data updated in the database.
   * @param {LibraryUpdateManyAndReturnArgs} args - Arguments to update many Libraries.
   * @example
   * // Update many Libraries
   * const library = await prisma.library.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Libraries and only return the `id`
   * const libraryWithIdOnly = await prisma.library.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LibraryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LibraryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Library.
   * @param {LibraryUpsertArgs} args - Arguments to update or create a Library.
   * @example
   * // Update or create a Library
   * const library = await prisma.library.upsert({
   *   create: {
   *     // ... data to create a Library
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Library we want to update
   *   }
   * })
   */
  upsert<T extends LibraryUpsertArgs>(args: Prisma.SelectSubset<T, LibraryUpsertArgs<ExtArgs>>): Prisma.Prisma__LibraryClient<runtime.Types.Result.GetResult<Prisma.$LibraryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Libraries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibraryCountArgs} args - Arguments to filter Libraries to count.
   * @example
   * // Count the number of Libraries
   * const count = await prisma.library.count({
   *   where: {
   *     // ... the filter for the Libraries we want to count
   *   }
   * })
  **/
  count<T extends LibraryCountArgs>(
    args?: Prisma.Subset<T, LibraryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LibraryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Library.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibraryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LibraryAggregateArgs>(args: Prisma.Subset<T, LibraryAggregateArgs>): Prisma.PrismaPromise<GetLibraryAggregateType<T>>

  /**
   * Group by Library.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LibraryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LibraryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LibraryGroupByArgs['orderBy'] }
      : { orderBy?: LibraryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LibraryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Library model
 */
readonly fields: LibraryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Library.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LibraryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  projects<T extends Prisma.Library$projectsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Library$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Library model
 */
export interface LibraryFieldRefs {
  readonly id: Prisma.FieldRef<"Library", 'String'>
  readonly meta: Prisma.FieldRef<"Library", 'Json'>
  readonly spec: Prisma.FieldRef<"Library", 'Json'>
}
    

// Custom InputTypes
/**
 * Library findUnique
 */
export type LibraryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibraryInclude<ExtArgs> | null
  /**
   * Filter, which Library to fetch.
   */
  where: Prisma.LibraryWhereUniqueInput
}

/**
 * Library findUniqueOrThrow
 */
export type LibraryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibraryInclude<ExtArgs> | null
  /**
   * Filter, which Library to fetch.
   */
  where: Prisma.LibraryWhereUniqueInput
}

/**
 * Library findFirst
 */
export type LibraryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibraryInclude<ExtArgs> | null
  /**
   * Filter, which Library to fetch.
   */
  where?: Prisma.LibraryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Libraries to fetch.
   */
  orderBy?: Prisma.LibraryOrderByWithRelationInput | Prisma.LibraryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Libraries.
   */
  cursor?: Prisma.LibraryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Libraries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Libraries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Libraries.
   */
  distinct?: Prisma.LibraryScalarFieldEnum | Prisma.LibraryScalarFieldEnum[]
}

/**
 * Library findFirstOrThrow
 */
export type LibraryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibraryInclude<ExtArgs> | null
  /**
   * Filter, which Library to fetch.
   */
  where?: Prisma.LibraryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Libraries to fetch.
   */
  orderBy?: Prisma.LibraryOrderByWithRelationInput | Prisma.LibraryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Libraries.
   */
  cursor?: Prisma.LibraryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Libraries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Libraries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Libraries.
   */
  distinct?: Prisma.LibraryScalarFieldEnum | Prisma.LibraryScalarFieldEnum[]
}

/**
 * Library findMany
 */
export type LibraryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibraryInclude<ExtArgs> | null
  /**
   * Filter, which Libraries to fetch.
   */
  where?: Prisma.LibraryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Libraries to fetch.
   */
  orderBy?: Prisma.LibraryOrderByWithRelationInput | Prisma.LibraryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Libraries.
   */
  cursor?: Prisma.LibraryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Libraries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Libraries.
   */
  skip?: number
  distinct?: Prisma.LibraryScalarFieldEnum | Prisma.LibraryScalarFieldEnum[]
}

/**
 * Library create
 */
export type LibraryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibraryInclude<ExtArgs> | null
  /**
   * The data needed to create a Library.
   */
  data: Prisma.XOR<Prisma.LibraryCreateInput, Prisma.LibraryUncheckedCreateInput>
}

/**
 * Library createMany
 */
export type LibraryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Libraries.
   */
  data: Prisma.LibraryCreateManyInput | Prisma.LibraryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Library createManyAndReturn
 */
export type LibraryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * The data used to create many Libraries.
   */
  data: Prisma.LibraryCreateManyInput | Prisma.LibraryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Library update
 */
export type LibraryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibraryInclude<ExtArgs> | null
  /**
   * The data needed to update a Library.
   */
  data: Prisma.XOR<Prisma.LibraryUpdateInput, Prisma.LibraryUncheckedUpdateInput>
  /**
   * Choose, which Library to update.
   */
  where: Prisma.LibraryWhereUniqueInput
}

/**
 * Library updateMany
 */
export type LibraryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Libraries.
   */
  data: Prisma.XOR<Prisma.LibraryUpdateManyMutationInput, Prisma.LibraryUncheckedUpdateManyInput>
  /**
   * Filter which Libraries to update
   */
  where?: Prisma.LibraryWhereInput
  /**
   * Limit how many Libraries to update.
   */
  limit?: number
}

/**
 * Library updateManyAndReturn
 */
export type LibraryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * The data used to update Libraries.
   */
  data: Prisma.XOR<Prisma.LibraryUpdateManyMutationInput, Prisma.LibraryUncheckedUpdateManyInput>
  /**
   * Filter which Libraries to update
   */
  where?: Prisma.LibraryWhereInput
  /**
   * Limit how many Libraries to update.
   */
  limit?: number
}

/**
 * Library upsert
 */
export type LibraryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibraryInclude<ExtArgs> | null
  /**
   * The filter to search for the Library to update in case it exists.
   */
  where: Prisma.LibraryWhereUniqueInput
  /**
   * In case the Library found by the `where` argument doesn't exist, create a new Library with this data.
   */
  create: Prisma.XOR<Prisma.LibraryCreateInput, Prisma.LibraryUncheckedCreateInput>
  /**
   * In case the Library was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LibraryUpdateInput, Prisma.LibraryUncheckedUpdateInput>
}

/**
 * Library delete
 */
export type LibraryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibraryInclude<ExtArgs> | null
  /**
   * Filter which Library to delete.
   */
  where: Prisma.LibraryWhereUniqueInput
}

/**
 * Library deleteMany
 */
export type LibraryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Libraries to delete
   */
  where?: Prisma.LibraryWhereInput
  /**
   * Limit how many Libraries to delete.
   */
  limit?: number
}

/**
 * Library.projects
 */
export type Library$projectsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  cursor?: Prisma.ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Library without action
 */
export type LibraryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Library
   */
  select?: Prisma.LibrarySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Library
   */
  omit?: Prisma.LibraryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LibraryInclude<ExtArgs> | null
}
