---
title: NixOS
description: Installing NixOS on remote servers with Highstate.
navigation:
  icon: i-simple-icons-nixos
---

## Your NixOS button

NixOS feels great once it is running, but the bootstrapping story can feel a little magical (in the scary way).
Highstate gives you a couple of units that hide the busywork so you can click deploy and watch a brand new system appear.

## Prerequisites

Before you start, make sure you have:

- An existing server that accepts SSH connections.
- `nixos-anywhere`, `nix` and optionally `sops` installed locally.

## Bring your server

First, you should add the server to your canvas where you want to install NixOS.
It can be `common.existing-server.v1` or any other component that outputs server entity.
The OS of the server does not matter, but it must be Linux-based and be available over SSH.

The whole installation process is handled by [nixos-anywhere](https://github.com/nix-community/nixos-anywhere).
This awesome tool connects to the server, reboots it to the NixOS installer, and runs the installation automatically.
Also ensure that prerequisites from the `nixos-anywhere` README are met.

## Install from a Git flake

Already have a flake that works?
Clone it with `git.remote-repository.v1` and hand it to `nixos.system.v1` together with the server:

::snippet-preview{snippet="recipes/nixos/vm-from-repo"}
::

If the `nixos.system.v1` called first, it uses `nixos-anywhere` to install NixOS on the server.
On every subsequent call, it connects to the installed system and applies the flake with `nixos-rebuild switch`.

::warning
Note that `git.remote-repository.v1` clones the repository and stores it in the Highstate database as artifact.
This means that every time you change the flake, you need to run this unit again to update the artifact, otherwise `nixos.system.v1` will keep installing the old version.
::

## Install from an inline flake

Need to tweak something without pushing to a repo?
Write the flake in `nixos.inline-flake.v1`, reference any other flakes or modules, and pass it to `nixos.system.v1`:

::snippet-preview{snippet="recipes/nixos/vm-from-inline-flake"}
::

See the code argument of the flake component for details on how to write the flake.
Note that all passed flakes are automatically included in `inputs` section.
All other non-flake folders or files are also here and can be referenced from the flake by relative path.

## Encrypt secrets before the first boot

One of the tricky parts of installing NixOS is getting secrets onto the machine before it boots for the first time.
This reminds us of the classic chicken-and-egg problem:

- You want to encrypt secrets for the target machine using its ssh host key and place them in your NixOS configuration.
- To get the host key, you need the machine installed and booted.
- To install the machine, you need the NixOS configuration with the secrets.

Highstate resolves this problem by calling `nixos-anywhere` with `--copy-host-keys` flag.
This allows you to receive the host keys of the old system before installation and use them to encrypt secrets for the new system.

In this example, we use [sops](https://github.com/getsops/sops) to encrypt a file with secrets for the new system:

::snippet-preview{snippet="recipes/nixos/sops-preinstall"}
::

Then you can reference this file in your NixOS configuration using [sops-nix](https://github.com/Mic92/sops-nix).
See the code argument of the flake component for details.

## Splitting the configuration

You can split the configuration into multiple modules to keep things tidy.

For example, you can create a separate module for secrets using `nixos.inline-module.v1`.
Then you reference this module you inlike flake as any other folder or file and pass it to `nixos.system.v1`:

::snippet-preview{snippet="recipes/nixos/sops-inline-module"}
::

## What next?

Try combining this flow with the Proxmox recipe to create the server automatically.
Or try to install NixOS on a cloud VM.
