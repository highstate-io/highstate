// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: instance.v1.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";
import { Empty } from "./google/protobuf/empty";
import { Struct } from "./google/protobuf/struct";

export const protobufPackage = "io.highstate.instance.v1";

export interface InstanceCustomStatus {
  /**
   * The name of the instance's extra status. Must be unique within the instance
   * state.
   */
  name: string;
  /**
   * The metadata of the instance's extra status (title, description, icon,
   * iconColor).
   */
  meta?:
    | { [key: string]: any }
    | undefined;
  /**
   * The status value. May be one of the WellKnownInstanceCustomStatus values or
   * a custom string.
   */
  value: string;
  /**
   * The message describing the instance's extra status.
   * Can be used to provide additional context or information about the status.
   * The message will be displayed in the 800x600 ANSI terminal in the UI.
   */
  message?:
    | string
    | undefined;
  /**
   * The order of the status in the list of statuses (0-100, lower values are
   * displayed first). If not provided, the default is 50.
   */
  order?: number | undefined;
}

export interface UpdateCustomStatusRequest {
  /** The ID of the instance state to update the extra status for. */
  stateId: string;
  /**
   * The extra status to update. If the status already exists, it will be
   * updated. If it does not exist, it will be created.
   */
  status?: InstanceCustomStatus | undefined;
}

export interface RemoveCustomStatusRequest {
  /** The ID of the instance state to remove the extra status from. */
  stateId: string;
  /** The name of the custom status to remove. */
  statusName: string;
}

function createBaseInstanceCustomStatus(): InstanceCustomStatus {
  return { name: "", meta: undefined, value: "", message: undefined, order: undefined };
}

export const InstanceCustomStatus: MessageFns<InstanceCustomStatus> = {
  encode(message: InstanceCustomStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.meta !== undefined) {
      Struct.encode(Struct.wrap(message.meta), writer.uint32(18).fork()).join();
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    if (message.message !== undefined) {
      writer.uint32(34).string(message.message);
    }
    if (message.order !== undefined) {
      writer.uint32(40).int32(message.order);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstanceCustomStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstanceCustomStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.meta = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.order = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstanceCustomStatus {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      meta: isObject(object.meta) ? object.meta : undefined,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
      order: isSet(object.order) ? globalThis.Number(object.order) : undefined,
    };
  },

  toJSON(message: InstanceCustomStatus): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.meta !== undefined) {
      obj.meta = message.meta;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    if (message.order !== undefined) {
      obj.order = Math.round(message.order);
    }
    return obj;
  },

  create(base?: DeepPartial<InstanceCustomStatus>): InstanceCustomStatus {
    return InstanceCustomStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InstanceCustomStatus>): InstanceCustomStatus {
    const message = createBaseInstanceCustomStatus();
    message.name = object.name ?? "";
    message.meta = object.meta ?? undefined;
    message.value = object.value ?? "";
    message.message = object.message ?? undefined;
    message.order = object.order ?? undefined;
    return message;
  },
};

function createBaseUpdateCustomStatusRequest(): UpdateCustomStatusRequest {
  return { stateId: "", status: undefined };
}

export const UpdateCustomStatusRequest: MessageFns<UpdateCustomStatusRequest> = {
  encode(message: UpdateCustomStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stateId !== "") {
      writer.uint32(10).string(message.stateId);
    }
    if (message.status !== undefined) {
      InstanceCustomStatus.encode(message.status, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCustomStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stateId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = InstanceCustomStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCustomStatusRequest {
    return {
      stateId: isSet(object.stateId) ? globalThis.String(object.stateId) : "",
      status: isSet(object.status) ? InstanceCustomStatus.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: UpdateCustomStatusRequest): unknown {
    const obj: any = {};
    if (message.stateId !== "") {
      obj.stateId = message.stateId;
    }
    if (message.status !== undefined) {
      obj.status = InstanceCustomStatus.toJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCustomStatusRequest>): UpdateCustomStatusRequest {
    return UpdateCustomStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomStatusRequest>): UpdateCustomStatusRequest {
    const message = createBaseUpdateCustomStatusRequest();
    message.stateId = object.stateId ?? "";
    message.status = (object.status !== undefined && object.status !== null)
      ? InstanceCustomStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomStatusRequest(): RemoveCustomStatusRequest {
  return { stateId: "", statusName: "" };
}

export const RemoveCustomStatusRequest: MessageFns<RemoveCustomStatusRequest> = {
  encode(message: RemoveCustomStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stateId !== "") {
      writer.uint32(10).string(message.stateId);
    }
    if (message.statusName !== "") {
      writer.uint32(18).string(message.statusName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveCustomStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stateId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.statusName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveCustomStatusRequest {
    return {
      stateId: isSet(object.stateId) ? globalThis.String(object.stateId) : "",
      statusName: isSet(object.statusName) ? globalThis.String(object.statusName) : "",
    };
  },

  toJSON(message: RemoveCustomStatusRequest): unknown {
    const obj: any = {};
    if (message.stateId !== "") {
      obj.stateId = message.stateId;
    }
    if (message.statusName !== "") {
      obj.statusName = message.statusName;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveCustomStatusRequest>): RemoveCustomStatusRequest {
    return RemoveCustomStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveCustomStatusRequest>): RemoveCustomStatusRequest {
    const message = createBaseRemoveCustomStatusRequest();
    message.stateId = object.stateId ?? "";
    message.statusName = object.statusName ?? "";
    return message;
  },
};

export type InstanceServiceDefinition = typeof InstanceServiceDefinition;
export const InstanceServiceDefinition = {
  name: "InstanceService",
  fullName: "io.highstate.instance.v1.InstanceService",
  methods: {
    /** Updates the custom status of an instance. */
    updateCustomStatus: {
      name: "updateCustomStatus",
      requestType: UpdateCustomStatusRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    /** Removes a custom status from an instance. */
    removeCustomStatus: {
      name: "removeCustomStatus",
      requestType: RemoveCustomStatusRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface InstanceServiceImplementation<CallContextExt = {}> {
  /** Updates the custom status of an instance. */
  updateCustomStatus(
    request: UpdateCustomStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  /** Removes a custom status from an instance. */
  removeCustomStatus(
    request: RemoveCustomStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface InstanceServiceClient<CallOptionsExt = {}> {
  /** Updates the custom status of an instance. */
  updateCustomStatus(
    request: DeepPartial<UpdateCustomStatusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  /** Removes a custom status from an instance. */
  removeCustomStatus(
    request: DeepPartial<RemoveCustomStatusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
