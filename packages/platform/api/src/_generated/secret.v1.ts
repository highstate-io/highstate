// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: secret.v1.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";
import { Value } from "./google/protobuf/struct";

export const protobufPackage = "io.highstate.secret.v1";

export interface GetSecretContentRequest {
  /** The ID of the secret to retrieve the content for. */
  secretId: string;
}

export interface GetSecretContentResponse {
  content?: any | undefined;
}

function createBaseGetSecretContentRequest(): GetSecretContentRequest {
  return { secretId: "" };
}

export const GetSecretContentRequest: MessageFns<GetSecretContentRequest> = {
  encode(message: GetSecretContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secretId !== "") {
      writer.uint32(10).string(message.secretId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecretContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecretContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.secretId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecretContentRequest {
    return { secretId: isSet(object.secretId) ? globalThis.String(object.secretId) : "" };
  },

  toJSON(message: GetSecretContentRequest): unknown {
    const obj: any = {};
    if (message.secretId !== "") {
      obj.secretId = message.secretId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSecretContentRequest>): GetSecretContentRequest {
    return GetSecretContentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSecretContentRequest>): GetSecretContentRequest {
    const message = createBaseGetSecretContentRequest();
    message.secretId = object.secretId ?? "";
    return message;
  },
};

function createBaseGetSecretContentResponse(): GetSecretContentResponse {
  return { content: undefined };
}

export const GetSecretContentResponse: MessageFns<GetSecretContentResponse> = {
  encode(message: GetSecretContentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== undefined) {
      Value.encode(Value.wrap(message.content), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSecretContentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSecretContentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = Value.unwrap(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSecretContentResponse {
    return { content: isSet(object?.content) ? object.content : undefined };
  },

  toJSON(message: GetSecretContentResponse): unknown {
    const obj: any = {};
    if (message.content !== undefined) {
      obj.content = message.content;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSecretContentResponse>): GetSecretContentResponse {
    return GetSecretContentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSecretContentResponse>): GetSecretContentResponse {
    const message = createBaseGetSecretContentResponse();
    message.content = object.content ?? undefined;
    return message;
  },
};

export type SecretServiceDefinition = typeof SecretServiceDefinition;
export const SecretServiceDefinition = {
  name: "SecretService",
  fullName: "io.highstate.secret.v1.SecretService",
  methods: {
    /** Retrieves the content of a secret by its ID. */
    getSecretContent: {
      name: "GetSecretContent",
      requestType: GetSecretContentRequest,
      requestStream: false,
      responseType: GetSecretContentResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SecretServiceImplementation<CallContextExt = {}> {
  /** Retrieves the content of a secret by its ID. */
  getSecretContent(
    request: GetSecretContentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSecretContentResponse>>;
}

export interface SecretServiceClient<CallOptionsExt = {}> {
  /** Retrieves the content of a secret by its ID. */
  getSecretContent(
    request: DeepPartial<GetSecretContentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSecretContentResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string; value: unknown } ? { $case: T["$case"]; value?: DeepPartial<T["value"]> }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
