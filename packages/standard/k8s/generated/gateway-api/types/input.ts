// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace gateway {
    export namespace v1 {
        /**
         * GRPCRoute provides a way to route gRPC requests. This includes the capability
         * to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
         * Filters can be used to specify additional processing steps. Backends specify
         * where matching requests will be routed.
         *
         * GRPCRoute falls under extended support within the Gateway API. Within the
         * following specification, the word "MUST" indicates that an implementation
         * supporting GRPCRoute must conform to the indicated requirement, but an
         * implementation not supporting this route type need not follow the requirement
         * unless explicitly indicated.
         *
         * Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
         * accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
         * ALPN. If the implementation does not support this, then it MUST set the
         * "Accepted" condition to "False" for the affected listener with a reason of
         * "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
         * with an upgrade from HTTP/1.
         *
         * Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
         * support HTTP/2 over cleartext TCP (h2c,
         * https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
         * upgrade from HTTP/1.1, i.e. with prior knowledge
         * (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
         * does not support this, then it MUST set the "Accepted" condition to "False"
         * for the affected listener with a reason of "UnsupportedProtocol".
         * Implementations MAY also accept HTTP/2 connections with an upgrade from
         * HTTP/1, i.e. without prior knowledge.
         */
        export interface GRPCRoute {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"GRPCRoute">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpec>;
            status?: pulumi.Input<inputs.gateway.v1.GRPCRouteStatus>;
        }

        /**
         * Spec defines the desired state of GRPCRoute.
         */
        export interface GRPCRouteSpec {
            /**
             * Hostnames defines a set of hostnames to match against the GRPC
             * Host header to select a GRPCRoute to process the request. This matches
             * the RFC 1123 definition of a hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label MUST appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and GRPCRoute, there
             * MUST be at least one intersecting hostname for the GRPCRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches GRPCRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches GRPCRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `test.example.com` and `*.example.com` would both match. On the other
             *   hand, `example.com` and `test.example.net` would not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and GRPCRoute have specified hostnames, any
             * GRPCRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * GRPCRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` MUST NOT be considered for a match.
             *
             * If both the Listener and GRPCRoute have specified hostnames, and none
             * match with the criteria above, then the GRPCRoute MUST NOT be accepted by
             * the implementation. The implementation MUST raise an 'Accepted' Condition
             * with a status of `False` in the corresponding RouteParentStatus.
             *
             * If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
             * Listener and that listener already has another Route (B) of the other
             * type attached and the intersection of the hostnames of A and B is
             * non-empty, then the implementation MUST accept exactly one of these two
             * routes, determined by the following criteria, in order:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * The rejected Route MUST raise an 'Accepted' condition with a status of
             * 'False' in the corresponding RouteParentStatus.
             *
             * Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecParentRefs>[]>;
            /**
             * Rules are a list of GRPC matchers, filters and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRules>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface GRPCRouteSpecParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface GRPCRouteSpecParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of GRPCRoute.
         */
        export interface GRPCRouteSpecPatch {
            /**
             * Hostnames defines a set of hostnames to match against the GRPC
             * Host header to select a GRPCRoute to process the request. This matches
             * the RFC 1123 definition of a hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label MUST appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and GRPCRoute, there
             * MUST be at least one intersecting hostname for the GRPCRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches GRPCRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches GRPCRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `test.example.com` and `*.example.com` would both match. On the other
             *   hand, `example.com` and `test.example.net` would not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and GRPCRoute have specified hostnames, any
             * GRPCRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * GRPCRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` MUST NOT be considered for a match.
             *
             * If both the Listener and GRPCRoute have specified hostnames, and none
             * match with the criteria above, then the GRPCRoute MUST NOT be accepted by
             * the implementation. The implementation MUST raise an 'Accepted' Condition
             * with a status of `False` in the corresponding RouteParentStatus.
             *
             * If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
             * Listener and that listener already has another Route (B) of the other
             * type attached and the intersection of the hostnames of A and B is
             * non-empty, then the implementation MUST accept exactly one of these two
             * routes, determined by the following criteria, in order:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * The rejected Route MUST raise an 'Accepted' condition with a status of
             * 'False' in the corresponding RouteParentStatus.
             *
             * Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecParentRefsPatch>[]>;
            /**
             * Rules are a list of GRPC matchers, filters and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesPatch>[]>;
        }

        /**
         * GRPCRouteRule defines the semantics for matching a gRPC request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface GRPCRouteSpecRules {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive an `UNAVAILABLE` status.
             *
             * See the GRPCBackendRef definition for the rules about what makes a single
             * GRPCBackendRef invalid.
             *
             * When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive an `UNAVAILABLE` status.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
             * Implementations may choose how that 50 percent is determined.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefs>[]>;
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * The effects of ordering of multiple behaviors are currently unspecified.
             * This can change in the future based on feedback during the alpha stage.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations that support
             *   GRPCRoute.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * If an implementation cannot support a combination of filters, it must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFilters>[]>;
            /**
             * Matches define conditions used for matching the rule against incoming
             * gRPC requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - method:
             *     service: foo.bar
             *   headers:
             *     values:
             *       version: 2
             * - method:
             *     service: foo.bar.v2
             * ```
             *
             * For a request to match against this rule, it MUST satisfy
             * EITHER of the two conditions:
             *
             * - service of foo.bar AND contains the header `version: 2`
             * - service of foo.bar.v2
             *
             * See the documentation for GRPCRouteMatch on how to specify multiple
             * match conditions to be ANDed together.
             *
             * If no matches are specified, the implementation MUST match every gRPC request.
             *
             * Proxy or Load Balancer routing configuration generated from GRPCRoutes
             * MUST prioritize rules based on the following criteria, continuing on
             * ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
             * Precedence MUST be given to the rule with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             * * Characters in a matching service.
             * * Characters in a matching method.
             * * Header matches.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within the Route that has been given precedence,
             * matching precedence MUST be granted to the first matching rule meeting
             * the above criteria.
             */
            matches?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesMatches>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
            sessionPersistence?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesSessionPersistence>;
        }

        /**
         * GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         */
        export interface GRPCRouteSpecRulesBackendRefs {
            /**
             * Filters defined at this level MUST be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in GRPCRouteRule.)
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFilters>[]>;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * GRPCRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. GRPCRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface GRPCRouteSpecRulesBackendRefsFilters {
            extensionRef?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersExtensionRef>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier>;
            requestMirror?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestMirror>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations supporting GRPCRoute MUST support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` MUST be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * Support: Implementation-specific
         *
         * This filter can be used multiple times within the same rule.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * Support: Implementation-specific
         *
         * This filter can be used multiple times within the same rule.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * GRPCRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. GRPCRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersPatch {
            extensionRef?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch>;
            requestMirror?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations supporting GRPCRoute MUST support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` MUST be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirror {
            backendRef?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef>;
            fraction?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorFraction>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorFraction {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorFractionPatch {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch {
            backendRef?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch>;
            fraction?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorFractionPatch>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         */
        export interface GRPCRouteSpecRulesBackendRefsPatch {
            /**
             * Filters defined at this level MUST be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in GRPCRouteRule.)
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsFiltersPatch>[]>;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * GRPCRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. GRPCRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface GRPCRouteSpecRulesFilters {
            extensionRef?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersExtensionRef>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifier>;
            requestMirror?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestMirror>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifier>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations supporting GRPCRoute MUST support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` MUST be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * Support: Implementation-specific
         *
         * This filter can be used multiple times within the same rule.
         */
        export interface GRPCRouteSpecRulesFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * Support: Implementation-specific
         *
         * This filter can be used multiple times within the same rule.
         */
        export interface GRPCRouteSpecRulesFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * GRPCRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. GRPCRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface GRPCRouteSpecRulesFiltersPatch {
            extensionRef?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersExtensionRefPatch>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch>;
            requestMirror?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestMirrorPatch>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations supporting GRPCRoute MUST support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` MUST be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirror {
            backendRef?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestMirrorBackendRef>;
            fraction?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestMirrorFraction>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirrorFraction {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirrorFractionPatch {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesFiltersRequestMirrorPatch {
            backendRef?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch>;
            fraction?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersRequestMirrorFractionPatch>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * GRPCRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a gRPC request only if its service
         * is `foo` AND it contains the `version: v1` header:
         *
         * ```
         * matches:
         *   - method:
         *     type: Exact
         *     service: "foo"
         *     headers:
         *   - name: "version"
         *     value "v1"
         *
         * ```
         */
        export interface GRPCRouteSpecRulesMatches {
            /**
             * Headers specifies gRPC request header matchers. Multiple match values are
             * ANDed together, meaning, a request MUST match all the specified headers
             * to select the route.
             */
            headers?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesMatchesHeaders>[]>;
            method?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesMatchesMethod>;
        }

        /**
         * GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
         * headers.
         */
        export interface GRPCRouteSpecRulesMatchesHeaders {
            /**
             * Name is the name of the gRPC Header to be matched.
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the header.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of the gRPC Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
         * headers.
         */
        export interface GRPCRouteSpecRulesMatchesHeadersPatch {
            /**
             * Name is the name of the gRPC Header to be matched.
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the header.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of the gRPC Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Method specifies a gRPC request service/method matcher. If this field is
         * not specified, all services and methods will match.
         */
        export interface GRPCRouteSpecRulesMatchesMethod {
            /**
             * Value of the method to match against. If left empty or omitted, will
             * match all services.
             *
             * At least one of Service and Method MUST be a non-empty string.
             */
            method?: pulumi.Input<string>;
            /**
             * Value of the service to match against. If left empty or omitted, will
             * match any service.
             *
             * At least one of Service and Method MUST be a non-empty string.
             */
            service?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the service and/or method.
             * Support: Core (Exact with service and method specified)
             *
             * Support: Implementation-specific (Exact with method specified but no service specified)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Method specifies a gRPC request service/method matcher. If this field is
         * not specified, all services and methods will match.
         */
        export interface GRPCRouteSpecRulesMatchesMethodPatch {
            /**
             * Value of the method to match against. If left empty or omitted, will
             * match all services.
             *
             * At least one of Service and Method MUST be a non-empty string.
             */
            method?: pulumi.Input<string>;
            /**
             * Value of the service to match against. If left empty or omitted, will
             * match any service.
             *
             * At least one of Service and Method MUST be a non-empty string.
             */
            service?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the service and/or method.
             * Support: Core (Exact with service and method specified)
             *
             * Support: Implementation-specific (Exact with method specified but no service specified)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type?: pulumi.Input<string>;
        }

        /**
         * GRPCRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a gRPC request only if its service
         * is `foo` AND it contains the `version: v1` header:
         *
         * ```
         * matches:
         *   - method:
         *     type: Exact
         *     service: "foo"
         *     headers:
         *   - name: "version"
         *     value "v1"
         *
         * ```
         */
        export interface GRPCRouteSpecRulesMatchesPatch {
            /**
             * Headers specifies gRPC request header matchers. Multiple match values are
             * ANDed together, meaning, a request MUST match all the specified headers
             * to select the route.
             */
            headers?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesMatchesHeadersPatch>[]>;
            method?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesMatchesMethodPatch>;
        }

        /**
         * GRPCRouteRule defines the semantics for matching a gRPC request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface GRPCRouteSpecRulesPatch {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive an `UNAVAILABLE` status.
             *
             * See the GRPCBackendRef definition for the rules about what makes a single
             * GRPCBackendRef invalid.
             *
             * When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive an `UNAVAILABLE` status.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
             * Implementations may choose how that 50 percent is determined.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesBackendRefsPatch>[]>;
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * The effects of ordering of multiple behaviors are currently unspecified.
             * This can change in the future based on feedback during the alpha stage.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations that support
             *   GRPCRoute.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * If an implementation cannot support a combination of filters, it must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesFiltersPatch>[]>;
            /**
             * Matches define conditions used for matching the rule against incoming
             * gRPC requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - method:
             *     service: foo.bar
             *   headers:
             *     values:
             *       version: 2
             * - method:
             *     service: foo.bar.v2
             * ```
             *
             * For a request to match against this rule, it MUST satisfy
             * EITHER of the two conditions:
             *
             * - service of foo.bar AND contains the header `version: 2`
             * - service of foo.bar.v2
             *
             * See the documentation for GRPCRouteMatch on how to specify multiple
             * match conditions to be ANDed together.
             *
             * If no matches are specified, the implementation MUST match every gRPC request.
             *
             * Proxy or Load Balancer routing configuration generated from GRPCRoutes
             * MUST prioritize rules based on the following criteria, continuing on
             * ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
             * Precedence MUST be given to the rule with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             * * Characters in a matching service.
             * * Characters in a matching method.
             * * Header matches.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within the Route that has been given precedence,
             * matching precedence MUST be granted to the first matching rule meeting
             * the above criteria.
             */
            matches?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesMatchesPatch>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
            sessionPersistence?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesSessionPersistencePatch>;
        }

        /**
         * SessionPersistence defines and configures session persistence
         * for the route rule.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesSessionPersistence {
            /**
             * AbsoluteTimeout defines the absolute timeout of the persistent
             * session. Once the AbsoluteTimeout duration has elapsed, the
             * session becomes invalid.
             *
             * Support: Extended
             */
            absoluteTimeout?: pulumi.Input<string>;
            cookieConfig?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesSessionPersistenceCookieConfig>;
            /**
             * IdleTimeout defines the idle timeout of the persistent session.
             * Once the session has been idle for more than the specified
             * IdleTimeout duration, the session becomes invalid.
             *
             * Support: Extended
             */
            idleTimeout?: pulumi.Input<string>;
            /**
             * SessionName defines the name of the persistent session token
             * which may be reflected in the cookie or the header. Users
             * should avoid reusing session names to prevent unintended
             * consequences, such as rejection or unpredictable behavior.
             *
             * Support: Implementation-specific
             */
            sessionName?: pulumi.Input<string>;
            /**
             * Type defines the type of session persistence such as through
             * the use a header or cookie. Defaults to cookie based session
             * persistence.
             *
             * Support: Core for "Cookie" type
             *
             * Support: Extended for "Header" type
             */
            type?: pulumi.Input<string>;
        }

        /**
         * CookieConfig provides configuration settings that are specific
         * to cookie-based session persistence.
         *
         * Support: Core
         */
        export interface GRPCRouteSpecRulesSessionPersistenceCookieConfig {
            /**
             * LifetimeType specifies whether the cookie has a permanent or
             * session-based lifetime. A permanent cookie persists until its
             * specified expiry time, defined by the Expires or Max-Age cookie
             * attributes, while a session cookie is deleted when the current
             * session ends.
             *
             * When set to "Permanent", AbsoluteTimeout indicates the
             * cookie's lifetime via the Expires or Max-Age cookie attributes
             * and is required.
             *
             * When set to "Session", AbsoluteTimeout indicates the
             * absolute lifetime of the cookie tracked by the gateway and
             * is optional.
             *
             * Defaults to "Session".
             *
             * Support: Core for "Session" type
             *
             * Support: Extended for "Permanent" type
             */
            lifetimeType?: pulumi.Input<string>;
        }

        /**
         * CookieConfig provides configuration settings that are specific
         * to cookie-based session persistence.
         *
         * Support: Core
         */
        export interface GRPCRouteSpecRulesSessionPersistenceCookieConfigPatch {
            /**
             * LifetimeType specifies whether the cookie has a permanent or
             * session-based lifetime. A permanent cookie persists until its
             * specified expiry time, defined by the Expires or Max-Age cookie
             * attributes, while a session cookie is deleted when the current
             * session ends.
             *
             * When set to "Permanent", AbsoluteTimeout indicates the
             * cookie's lifetime via the Expires or Max-Age cookie attributes
             * and is required.
             *
             * When set to "Session", AbsoluteTimeout indicates the
             * absolute lifetime of the cookie tracked by the gateway and
             * is optional.
             *
             * Defaults to "Session".
             *
             * Support: Core for "Session" type
             *
             * Support: Extended for "Permanent" type
             */
            lifetimeType?: pulumi.Input<string>;
        }

        /**
         * SessionPersistence defines and configures session persistence
         * for the route rule.
         *
         * Support: Extended
         */
        export interface GRPCRouteSpecRulesSessionPersistencePatch {
            /**
             * AbsoluteTimeout defines the absolute timeout of the persistent
             * session. Once the AbsoluteTimeout duration has elapsed, the
             * session becomes invalid.
             *
             * Support: Extended
             */
            absoluteTimeout?: pulumi.Input<string>;
            cookieConfig?: pulumi.Input<inputs.gateway.v1.GRPCRouteSpecRulesSessionPersistenceCookieConfigPatch>;
            /**
             * IdleTimeout defines the idle timeout of the persistent session.
             * Once the session has been idle for more than the specified
             * IdleTimeout duration, the session becomes invalid.
             *
             * Support: Extended
             */
            idleTimeout?: pulumi.Input<string>;
            /**
             * SessionName defines the name of the persistent session token
             * which may be reflected in the cookie or the header. Users
             * should avoid reusing session names to prevent unintended
             * consequences, such as rejection or unpredictable behavior.
             *
             * Support: Implementation-specific
             */
            sessionName?: pulumi.Input<string>;
            /**
             * Type defines the type of session persistence such as through
             * the use a header or cookie. Defaults to cookie based session
             * persistence.
             *
             * Support: Core for "Cookie" type
             *
             * Support: Extended for "Header" type
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of GRPCRoute.
         */
        export interface GRPCRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteStatusParents>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface GRPCRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a nonexistent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GRPCRouteStatusParentsConditions>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName?: pulumi.Input<string>;
            parentRef?: pulumi.Input<inputs.gateway.v1.GRPCRouteStatusParentsParentRef>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GRPCRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface GRPCRouteStatusParentsParentRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * Gateway represents an instance of a service-traffic handling infrastructure
         * by binding Listeners to a set of IP addresses.
         */
        export interface Gateway {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"Gateway">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1.GatewaySpec>;
            status?: pulumi.Input<inputs.gateway.v1.GatewayStatus>;
        }

        /**
         * GatewayClass describes a class of Gateways available to the user for creating
         * Gateway resources.
         *
         * It is recommended that this resource be used as a template for Gateways. This
         * means that a Gateway is based on the state of the GatewayClass at the time it
         * was created and changes to the GatewayClass or associated parameters are not
         * propagated down to existing Gateways. This recommendation is intended to
         * limit the blast radius of changes to GatewayClass or associated parameters.
         * If implementations choose to propagate GatewayClass changes to existing
         * Gateways, that MUST be clearly documented by the implementation.
         *
         * Whenever one or more Gateways are using a GatewayClass, implementations SHOULD
         * add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the
         * associated GatewayClass. This ensures that a GatewayClass associated with a
         * Gateway is not deleted while in use.
         *
         * GatewayClass is a Cluster level resource.
         */
        export interface GatewayClass {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"GatewayClass">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1.GatewayClassSpec>;
            status?: pulumi.Input<inputs.gateway.v1.GatewayClassStatus>;
        }

        /**
         * Spec defines the desired state of GatewayClass.
         */
        export interface GatewayClassSpec {
            /**
             * ControllerName is the name of the controller that is managing Gateways of
             * this class. The value of this field MUST be a domain prefixed path.
             *
             * Example: "example.net/gateway-controller".
             *
             * This field is not mutable and cannot be empty.
             *
             * Support: Core
             */
            controllerName?: pulumi.Input<string>;
            /**
             * Description helps describe a GatewayClass with more details.
             */
            description?: pulumi.Input<string>;
            parametersRef?: pulumi.Input<inputs.gateway.v1.GatewayClassSpecParametersRef>;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the GatewayClass. This is optional if the
         * controller does not require any additional configuration.
         *
         * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap,
         * or an implementation-specific custom resource. The resource can be
         * cluster-scoped or namespace-scoped.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the GatewayClass SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * A Gateway for this GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewayClassSpecParametersRef {
            /**
             * Group is the group of the referent.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent.
             * This field is required when referring to a Namespace-scoped resource and
             * MUST be unset when referring to a Cluster-scoped resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the GatewayClass. This is optional if the
         * controller does not require any additional configuration.
         *
         * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap,
         * or an implementation-specific custom resource. The resource can be
         * cluster-scoped or namespace-scoped.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the GatewayClass SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * A Gateway for this GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewayClassSpecParametersRefPatch {
            /**
             * Group is the group of the referent.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent.
             * This field is required when referring to a Namespace-scoped resource and
             * MUST be unset when referring to a Cluster-scoped resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of GatewayClass.
         */
        export interface GatewayClassSpecPatch {
            /**
             * ControllerName is the name of the controller that is managing Gateways of
             * this class. The value of this field MUST be a domain prefixed path.
             *
             * Example: "example.net/gateway-controller".
             *
             * This field is not mutable and cannot be empty.
             *
             * Support: Core
             */
            controllerName?: pulumi.Input<string>;
            /**
             * Description helps describe a GatewayClass with more details.
             */
            description?: pulumi.Input<string>;
            parametersRef?: pulumi.Input<inputs.gateway.v1.GatewayClassSpecParametersRefPatch>;
        }

        /**
         * Status defines the current state of GatewayClass.
         *
         * Implementations MUST populate status on all GatewayClass resources which
         * specify their controller name.
         */
        export interface GatewayClassStatus {
            /**
             * Conditions is the current status from the controller for
             * this GatewayClass.
             *
             * Controllers should prefer to publish conditions using values
             * of GatewayClassConditionType for the type of each Condition.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayClassStatusConditions>[]>;
            /**
             * SupportedFeatures is the set of features the GatewayClass support.
             * It MUST be sorted in ascending alphabetical order by the Name key.
             */
            supportedFeatures?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayClassStatusSupportedFeatures>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayClassStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        export interface GatewayClassStatusSupportedFeatures {
            /**
             * FeatureName is used to describe distinct features that are covered by
             * conformance tests.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of Gateway.
         */
        export interface GatewaySpec {
            /**
             * Addresses requested for this Gateway. This is optional and behavior can
             * depend on the implementation. If a value is set in the spec and the
             * requested address is invalid or unavailable, the implementation MUST
             * indicate this in the associated entry in GatewayStatus.Addresses.
             *
             * The Addresses field represents a request for the address(es) on the
             * "outside of the Gateway", that traffic bound for this Gateway will use.
             * This could be the IP address or hostname of an external load balancer or
             * other networking infrastructure, or some other address that traffic will
             * be sent to.
             *
             * If no Addresses are specified, the implementation MAY schedule the
             * Gateway in an implementation-specific manner, assigning an appropriate
             * set of Addresses.
             *
             * The implementation MUST bind all Listeners to every GatewayAddress that
             * it assigns to the Gateway and add a corresponding entry in
             * GatewayStatus.Addresses.
             *
             * Support: Extended
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecAddresses>[]>;
            allowedListeners?: pulumi.Input<inputs.gateway.v1.GatewaySpecAllowedListeners>;
            backendTLS?: pulumi.Input<inputs.gateway.v1.GatewaySpecBackendTLS>;
            /**
             * GatewayClassName used for this Gateway. This is the name of a
             * GatewayClass resource.
             */
            gatewayClassName?: pulumi.Input<string>;
            infrastructure?: pulumi.Input<inputs.gateway.v1.GatewaySpecInfrastructure>;
            /**
             * Listeners associated with this Gateway. Listeners define
             * logical endpoints that are bound on this Gateway's addresses.
             * At least one Listener MUST be specified.
             *
             * ## Distinct Listeners
             *
             * Each Listener in a set of Listeners (for example, in a single Gateway)
             * MUST be _distinct_, in that a traffic flow MUST be able to be assigned to
             * exactly one listener. (This section uses "set of Listeners" rather than
             * "Listeners in a single Gateway" because implementations MAY merge configuration
             * from multiple Gateways onto a single data plane, and these rules _also_
             * apply in that case).
             *
             * Practically, this means that each listener in a set MUST have a unique
             * combination of Port, Protocol, and, if supported by the protocol, Hostname.
             *
             * Some combinations of port, protocol, and TLS settings are considered
             * Core support and MUST be supported by implementations based on the objects
             * they support:
             *
             * HTTPRoute
             *
             * 1. HTTPRoute, Port: 80, Protocol: HTTP
             * 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided
             *
             * TLSRoute
             *
             * 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough
             *
             * "Distinct" Listeners have the following property:
             *
             * **The implementation can match inbound requests to a single distinct
             * Listener**.
             *
             * When multiple Listeners share values for fields (for
             * example, two Listeners with the same Port value), the implementation
             * can match requests to only one of the Listeners using other
             * Listener fields.
             *
             * When multiple listeners have the same value for the Protocol field, then
             * each of the Listeners with matching Protocol values MUST have different
             * values for other fields.
             *
             * The set of fields that MUST be different for a Listener differs per protocol.
             * The following rules define the rules for what fields MUST be considered for
             * Listeners to be distinct with each protocol currently defined in the
             * Gateway API spec.
             *
             * The set of listeners that all share a protocol value MUST have _different_
             * values for _at least one_ of these fields to be distinct:
             *
             * * **HTTP, HTTPS, TLS**: Port, Hostname
             * * **TCP, UDP**: Port
             *
             * One **very** important rule to call out involves what happens when an
             * implementation:
             *
             * * Supports TCP protocol Listeners, as well as HTTP, HTTPS, or TLS protocol
             *   Listeners, and
             * * sees HTTP, HTTPS, or TLS protocols with the same `port` as one with TCP
             *   Protocol.
             *
             * In this case all the Listeners that share a port with the
             * TCP Listener are not distinct and so MUST NOT be accepted.
             *
             * If an implementation does not support TCP Protocol Listeners, then the
             * previous rule does not apply, and the TCP Listeners SHOULD NOT be
             * accepted.
             *
             * Note that the `tls` field is not used for determining if a listener is distinct, because
             * Listeners that _only_ differ on TLS config will still conflict in all cases.
             *
             * ### Listeners that are distinct only by Hostname
             *
             * When the Listeners are distinct based only on Hostname, inbound request
             * hostnames MUST match from the most specific to least specific Hostname
             * values to choose the correct Listener and its associated set of Routes.
             *
             * Exact matches MUST be processed before wildcard matches, and wildcard
             * matches MUST be processed before fallback (empty Hostname value)
             * matches. For example, `"foo.example.com"` takes precedence over
             * `"*.example.com"`, and `"*.example.com"` takes precedence over `""`.
             *
             * Additionally, if there are multiple wildcard entries, more specific
             * wildcard entries must be processed before less specific wildcard entries.
             * For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`.
             *
             * The precise definition here is that the higher the number of dots in the
             * hostname to the right of the wildcard character, the higher the precedence.
             *
             * The wildcard character will match any number of characters _and dots_ to
             * the left, however, so `"*.example.com"` will match both
             * `"foo.bar.example.com"` _and_ `"bar.example.com"`.
             *
             * ## Handling indistinct Listeners
             *
             * If a set of Listeners contains Listeners that are not distinct, then those
             * Listeners are _Conflicted_, and the implementation MUST set the "Conflicted"
             * condition in the Listener Status to "True".
             *
             * The words "indistinct" and "conflicted" are considered equivalent for the
             * purpose of this documentation.
             *
             * Implementations MAY choose to accept a Gateway with some Conflicted
             * Listeners only if they only accept the partial Listener set that contains
             * no Conflicted Listeners.
             *
             * Specifically, an implementation MAY accept a partial Listener set subject to
             * the following rules:
             *
             * * The implementation MUST NOT pick one conflicting Listener as the winner.
             *   ALL indistinct Listeners must not be accepted for processing.
             * * At least one distinct Listener MUST be present, or else the Gateway effectively
             *   contains _no_ Listeners, and must be rejected from processing as a whole.
             *
             * The implementation MUST set a "ListenersNotValid" condition on the
             * Gateway Status when the Gateway contains Conflicted Listeners whether or
             * not they accept the Gateway. That Condition SHOULD clearly
             * indicate in the Message which Listeners are conflicted, and which are
             * Accepted. Additionally, the Listener status for those listeners SHOULD
             * indicate which Listeners are conflicted and not Accepted.
             *
             * ## General Listener behavior
             *
             * Note that, for all distinct Listeners, requests SHOULD match at most one Listener.
             * For example, if Listeners are defined for "foo.example.com" and "*.example.com", a
             * request to "foo.example.com" SHOULD only be routed using routes attached
             * to the "foo.example.com" Listener (and not the "*.example.com" Listener).
             *
             * This concept is known as "Listener Isolation", and it is an Extended feature
             * of Gateway API. Implementations that do not support Listener Isolation MUST
             * clearly document this, and MUST NOT claim support for the
             * `GatewayHTTPListenerIsolation` feature.
             *
             * Implementations that _do_ support Listener Isolation SHOULD claim support
             * for the Extended `GatewayHTTPListenerIsolation` feature and pass the associated
             * conformance tests.
             *
             * ## Compatible Listeners
             *
             * A Gateway's Listeners are considered _compatible_ if:
             *
             * 1. They are distinct.
             * 2. The implementation can serve them in compliance with the Addresses
             *    requirement that all Listeners are available on all assigned
             *    addresses.
             *
             * Compatible combinations in Extended support are expected to vary across
             * implementations. A combination that is compatible for one implementation
             * may not be compatible for another.
             *
             * For example, an implementation that cannot serve both TCP and UDP listeners
             * on the same address, or cannot mix HTTPS and generic TLS listens on the same port
             * would not consider those cases compatible, even though they are distinct.
             *
             * Implementations MAY merge separate Gateways onto a single set of
             * Addresses if all Listeners across all Gateways are compatible.
             *
             * In a future release the MinItems=1 requirement MAY be dropped.
             *
             * Support: Core
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListeners>[]>;
        }

        /**
         * GatewaySpecAddress describes an address that can be bound to a Gateway.
         */
        export interface GatewaySpecAddresses {
            /**
             * Type of the address.
             */
            type?: pulumi.Input<string>;
            /**
             * When a value is unspecified, an implementation SHOULD automatically
             * assign an address matching the requested type if possible.
             *
             * If an implementation does not support an empty value, they MUST set the
             * "Programmed" condition in status to False with a reason of "AddressNotAssigned".
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * GatewaySpecAddress describes an address that can be bound to a Gateway.
         */
        export interface GatewaySpecAddressesPatch {
            /**
             * Type of the address.
             */
            type?: pulumi.Input<string>;
            /**
             * When a value is unspecified, an implementation SHOULD automatically
             * assign an address matching the requested type if possible.
             *
             * If an implementation does not support an empty value, they MUST set the
             * "Programmed" condition in status to False with a reason of "AddressNotAssigned".
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * AllowedListeners defines which ListenerSets can be attached to this Gateway.
         * While this feature is experimental, the default value is to allow no ListenerSets.
         */
        export interface GatewaySpecAllowedListeners {
            namespaces?: pulumi.Input<inputs.gateway.v1.GatewaySpecAllowedListenersNamespaces>;
        }

        /**
         * Namespaces defines which namespaces ListenerSets can be attached to this Gateway.
         * While this feature is experimental, the default value is to allow no ListenerSets.
         */
        export interface GatewaySpecAllowedListenersNamespaces {
            /**
             * From indicates where ListenerSets can attach to this Gateway. Possible
             * values are:
             *
             * * Same: Only ListenerSets in the same namespace may be attached to this Gateway.
             * * Selector: ListenerSets in namespaces selected by the selector may be attached to this Gateway.
             * * All: ListenerSets in all namespaces may be attached to this Gateway.
             * * None: Only listeners defined in the Gateway's spec are allowed
             *
             * While this feature is experimental, the default value None
             */
            from?: pulumi.Input<string>;
            selector?: pulumi.Input<inputs.gateway.v1.GatewaySpecAllowedListenersNamespacesSelector>;
        }

        /**
         * Namespaces defines which namespaces ListenerSets can be attached to this Gateway.
         * While this feature is experimental, the default value is to allow no ListenerSets.
         */
        export interface GatewaySpecAllowedListenersNamespacesPatch {
            /**
             * From indicates where ListenerSets can attach to this Gateway. Possible
             * values are:
             *
             * * Same: Only ListenerSets in the same namespace may be attached to this Gateway.
             * * Selector: ListenerSets in namespaces selected by the selector may be attached to this Gateway.
             * * All: ListenerSets in all namespaces may be attached to this Gateway.
             * * None: Only listeners defined in the Gateway's spec are allowed
             *
             * While this feature is experimental, the default value None
             */
            from?: pulumi.Input<string>;
            selector?: pulumi.Input<inputs.gateway.v1.GatewaySpecAllowedListenersNamespacesSelectorPatch>;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only ListenerSets in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         */
        export interface GatewaySpecAllowedListenersNamespacesSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecAllowedListenersNamespacesSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecAllowedListenersNamespacesSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecAllowedListenersNamespacesSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only ListenerSets in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         */
        export interface GatewaySpecAllowedListenersNamespacesSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecAllowedListenersNamespacesSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * AllowedListeners defines which ListenerSets can be attached to this Gateway.
         * While this feature is experimental, the default value is to allow no ListenerSets.
         */
        export interface GatewaySpecAllowedListenersPatch {
            namespaces?: pulumi.Input<inputs.gateway.v1.GatewaySpecAllowedListenersNamespacesPatch>;
        }

        /**
         * BackendTLS configures TLS settings for when this Gateway is connecting to
         * backends with TLS.
         *
         * Support: Core
         */
        export interface GatewaySpecBackendTLS {
            clientCertificateRef?: pulumi.Input<inputs.gateway.v1.GatewaySpecBackendTLSClientCertificateRef>;
        }

        /**
         * ClientCertificateRef is a reference to an object that contains a Client
         * Certificate and the associated private key.
         *
         * References to a resource in different namespace are invalid UNLESS there
         * is a ReferenceGrant in the target namespace that allows the certificate
         * to be attached. If a ReferenceGrant does not allow this reference, the
         * "ResolvedRefs" condition MUST be set to False for this listener with the
         * "RefNotPermitted" reason.
         *
         * ClientCertificateRef can reference to standard Kubernetes resources, i.e.
         * Secret, or implementation-specific custom resources.
         *
         * This setting can be overridden on the service level by use of BackendTLSPolicy.
         *
         * Support: Core
         */
        export interface GatewaySpecBackendTLSClientCertificateRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ClientCertificateRef is a reference to an object that contains a Client
         * Certificate and the associated private key.
         *
         * References to a resource in different namespace are invalid UNLESS there
         * is a ReferenceGrant in the target namespace that allows the certificate
         * to be attached. If a ReferenceGrant does not allow this reference, the
         * "ResolvedRefs" condition MUST be set to False for this listener with the
         * "RefNotPermitted" reason.
         *
         * ClientCertificateRef can reference to standard Kubernetes resources, i.e.
         * Secret, or implementation-specific custom resources.
         *
         * This setting can be overridden on the service level by use of BackendTLSPolicy.
         *
         * Support: Core
         */
        export interface GatewaySpecBackendTLSClientCertificateRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * BackendTLS configures TLS settings for when this Gateway is connecting to
         * backends with TLS.
         *
         * Support: Core
         */
        export interface GatewaySpecBackendTLSPatch {
            clientCertificateRef?: pulumi.Input<inputs.gateway.v1.GatewaySpecBackendTLSClientCertificateRefPatch>;
        }

        /**
         * Infrastructure defines infrastructure level attributes about this Gateway instance.
         *
         * Support: Extended
         */
        export interface GatewaySpecInfrastructure {
            /**
             * Annotations that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "annotations" concepts.
             *
             * An implementation may chose to add additional implementation-specific annotations as they see fit.
             *
             * Support: Extended
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "labels" concepts.
             *
             * An implementation may chose to add additional implementation-specific labels as they see fit.
             *
             * If an implementation maps these labels to Pods, or any other resource that would need to be recreated when labels
             * change, it SHOULD clearly warn about this behavior in documentation.
             *
             * Support: Extended
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            parametersRef?: pulumi.Input<inputs.gateway.v1.GatewaySpecInfrastructureParametersRef>;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the Gateway. This is optional if the
         * controller does not require any additional configuration.
         *
         * This follows the same semantics as GatewayClass's `parametersRef`, but on a per-Gateway basis
         *
         * The Gateway's GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the Gateway SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * Support: Implementation-specific
         */
        export interface GatewaySpecInfrastructureParametersRef {
            /**
             * Group is the group of the referent.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the Gateway. This is optional if the
         * controller does not require any additional configuration.
         *
         * This follows the same semantics as GatewayClass's `parametersRef`, but on a per-Gateway basis
         *
         * The Gateway's GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the Gateway SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * Support: Implementation-specific
         */
        export interface GatewaySpecInfrastructureParametersRefPatch {
            /**
             * Group is the group of the referent.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Infrastructure defines infrastructure level attributes about this Gateway instance.
         *
         * Support: Extended
         */
        export interface GatewaySpecInfrastructurePatch {
            /**
             * Annotations that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "annotations" concepts.
             *
             * An implementation may chose to add additional implementation-specific annotations as they see fit.
             *
             * Support: Extended
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "labels" concepts.
             *
             * An implementation may chose to add additional implementation-specific labels as they see fit.
             *
             * If an implementation maps these labels to Pods, or any other resource that would need to be recreated when labels
             * change, it SHOULD clearly warn about this behavior in documentation.
             *
             * Support: Extended
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            parametersRef?: pulumi.Input<inputs.gateway.v1.GatewaySpecInfrastructureParametersRefPatch>;
        }

        /**
         * Listener embodies the concept of a logical endpoint where a Gateway accepts
         * network connections.
         */
        export interface GatewaySpecListeners {
            allowedRoutes?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutes>;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that
             * define this concept. When unspecified, all hostnames are matched. This
             * field is ignored for protocols that don't require hostname based
             * matching.
             *
             * Implementations MUST apply Hostname matching appropriately for each of
             * the following protocols:
             *
             * * TLS: The Listener Hostname MUST match the SNI.
             * * HTTP: The Listener Hostname MUST match the Host header of the request.
             * * HTTPS: The Listener Hostname SHOULD match both the SNI and Host header.
             *   Note that this does not require the SNI and Host header to be the same.
             *   The semantics of this are described in more detail below.
             *
             * To ensure security, Section 11.1 of RFC-6066 emphasizes that server
             * implementations that rely on SNI hostname matching MUST also verify
             * hostnames within the application protocol.
             *
             * Section 9.1.2 of RFC-7540 provides a mechanism for servers to reject the
             * reuse of a connection by responding with the HTTP 421 Misdirected Request
             * status code. This indicates that the origin server has rejected the
             * request because it appears to have been misdirected.
             *
             * To detect misdirected requests, Gateways SHOULD match the authority of
             * the requests with all the SNI hostname(s) configured across all the
             * Gateway Listeners on the same port and protocol:
             *
             * * If another Listener has an exact match or more specific wildcard entry,
             *   the Gateway SHOULD return a 421.
             * * If the current Listener (selected by SNI matching during ClientHello)
             *   does not match the Host:
             *     * If another Listener does match the Host the Gateway SHOULD return a
             *       421.
             *     * If no other Listener matches the Host, the Gateway MUST return a
             *       404.
             *
             * For HTTPRoute and TLSRoute resources, there is an interaction with the
             * `spec.hostnames` array. When both listener and route specify hostnames,
             * there MUST be an intersection between the values for a Route to be
             * accepted. For more information, refer to the Route specific Hostnames
             * documentation.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Name is the name of the Listener. This name MUST be unique within a
             * Gateway.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Port is the network port. Multiple listeners may use the
             * same port, subject to the Listener compatibility rules.
             *
             * Support: Core
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol specifies the network protocol this listener expects to receive.
             *
             * Support: Core
             */
            protocol?: pulumi.Input<string>;
            tls?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersTls>;
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a
         * Listener and the trusted namespaces where those Route resources MAY be
         * present.
         *
         * Although a client request may match multiple route rules, only one rule
         * may ultimately receive the request. Matching precedence MUST be
         * determined in order of the following criteria:
         *
         * * The most specific match as defined by the Route type.
         * * The oldest Route based on creation timestamp. For example, a Route with
         *   a creation timestamp of "2020-09-08 01:02:03" is given precedence over
         *   a Route with a creation timestamp of "2020-09-08 01:02:04".
         * * If everything else is equivalent, the Route appearing first in
         *   alphabetical order (namespace/name) should be given precedence. For
         *   example, foo/bar is given precedence over foo/baz.
         *
         * All valid rules within a Route attached to this Listener should be
         * implemented. Invalid Route rules can be ignored (sometimes that will mean
         * the full Route). If a Route rule transitions from valid to invalid,
         * support for that Route rule should be dropped to ensure consistency. For
         * example, even if a filter specified by a Route rule is invalid, the rest
         * of the rules within that Route should still be supported.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutes {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind
             * to this Gateway Listener. When unspecified or empty, the kinds of Routes
             * selected are determined using the Listener protocol.
             *
             * A RouteGroupKind MUST correspond to kinds of Routes that are compatible
             * with the application protocol specified in the Listener's Protocol field.
             * If an implementation does not support or recognize this resource type, it
             * MUST set the "ResolvedRefs" condition to False for this Listener with the
             * "InvalidRouteKinds" reason.
             *
             * Support: Core
             */
            kinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesKinds>[]>;
            namespaces?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespaces>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewaySpecListenersAllowedRoutesKinds {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind?: pulumi.Input<string>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewaySpecListenersAllowedRoutesKindsPatch {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind?: pulumi.Input<string>;
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this
         * Listener. This is restricted to the namespace of this Gateway by default.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespaces {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible
             * values are:
             *
             * * All: Routes in all namespaces may be used by this Gateway.
             * * Selector: Routes in namespaces selected by the selector may be used by
             *   this Gateway.
             * * Same: Only Routes in the same namespace may be used by this Gateway.
             *
             * Support: Core
             */
            from?: pulumi.Input<string>;
            selector?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesSelector>;
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this
         * Listener. This is restricted to the namespace of this Gateway by default.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesPatch {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible
             * values are:
             *
             * * All: Routes in all namespaces may be used by this Gateway.
             * * Selector: Routes in namespaces selected by the selector may be used by
             *   this Gateway.
             * * Same: Only Routes in the same namespace may be used by this Gateway.
             *
             * Support: Core
             */
            from?: pulumi.Input<string>;
            selector?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesSelectorPatch>;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only Routes in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only Routes in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a
         * Listener and the trusted namespaces where those Route resources MAY be
         * present.
         *
         * Although a client request may match multiple route rules, only one rule
         * may ultimately receive the request. Matching precedence MUST be
         * determined in order of the following criteria:
         *
         * * The most specific match as defined by the Route type.
         * * The oldest Route based on creation timestamp. For example, a Route with
         *   a creation timestamp of "2020-09-08 01:02:03" is given precedence over
         *   a Route with a creation timestamp of "2020-09-08 01:02:04".
         * * If everything else is equivalent, the Route appearing first in
         *   alphabetical order (namespace/name) should be given precedence. For
         *   example, foo/bar is given precedence over foo/baz.
         *
         * All valid rules within a Route attached to this Listener should be
         * implemented. Invalid Route rules can be ignored (sometimes that will mean
         * the full Route). If a Route rule transitions from valid to invalid,
         * support for that Route rule should be dropped to ensure consistency. For
         * example, even if a filter specified by a Route rule is invalid, the rest
         * of the rules within that Route should still be supported.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesPatch {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind
             * to this Gateway Listener. When unspecified or empty, the kinds of Routes
             * selected are determined using the Listener protocol.
             *
             * A RouteGroupKind MUST correspond to kinds of Routes that are compatible
             * with the application protocol specified in the Listener's Protocol field.
             * If an implementation does not support or recognize this resource type, it
             * MUST set the "ResolvedRefs" condition to False for this Listener with the
             * "InvalidRouteKinds" reason.
             *
             * Support: Core
             */
            kinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesKindsPatch>[]>;
            namespaces?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesNamespacesPatch>;
        }

        /**
         * Listener embodies the concept of a logical endpoint where a Gateway accepts
         * network connections.
         */
        export interface GatewaySpecListenersPatch {
            allowedRoutes?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersAllowedRoutesPatch>;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that
             * define this concept. When unspecified, all hostnames are matched. This
             * field is ignored for protocols that don't require hostname based
             * matching.
             *
             * Implementations MUST apply Hostname matching appropriately for each of
             * the following protocols:
             *
             * * TLS: The Listener Hostname MUST match the SNI.
             * * HTTP: The Listener Hostname MUST match the Host header of the request.
             * * HTTPS: The Listener Hostname SHOULD match both the SNI and Host header.
             *   Note that this does not require the SNI and Host header to be the same.
             *   The semantics of this are described in more detail below.
             *
             * To ensure security, Section 11.1 of RFC-6066 emphasizes that server
             * implementations that rely on SNI hostname matching MUST also verify
             * hostnames within the application protocol.
             *
             * Section 9.1.2 of RFC-7540 provides a mechanism for servers to reject the
             * reuse of a connection by responding with the HTTP 421 Misdirected Request
             * status code. This indicates that the origin server has rejected the
             * request because it appears to have been misdirected.
             *
             * To detect misdirected requests, Gateways SHOULD match the authority of
             * the requests with all the SNI hostname(s) configured across all the
             * Gateway Listeners on the same port and protocol:
             *
             * * If another Listener has an exact match or more specific wildcard entry,
             *   the Gateway SHOULD return a 421.
             * * If the current Listener (selected by SNI matching during ClientHello)
             *   does not match the Host:
             *     * If another Listener does match the Host the Gateway SHOULD return a
             *       421.
             *     * If no other Listener matches the Host, the Gateway MUST return a
             *       404.
             *
             * For HTTPRoute and TLSRoute resources, there is an interaction with the
             * `spec.hostnames` array. When both listener and route specify hostnames,
             * there MUST be an intersection between the values for a Route to be
             * accepted. For more information, refer to the Route specific Hostnames
             * documentation.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Name is the name of the Listener. This name MUST be unique within a
             * Gateway.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Port is the network port. Multiple listeners may use the
             * same port, subject to the Listener compatibility rules.
             *
             * Support: Core
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol specifies the network protocol this listener expects to receive.
             *
             * Support: Core
             */
            protocol?: pulumi.Input<string>;
            tls?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersTlsPatch>;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if
         * the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
         * if the Protocol field is "HTTP", "TCP", or "UDP".
         *
         * The association of SNIs to Certificate defined in GatewayTLSConfig is
         * defined based on the Hostname field for this listener.
         *
         * The GatewayClass MUST use the longest matching SNI out of all
         * available certificates for any TLS handshake.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersTls {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that
             * contains TLS certificates and private keys. These certificates are used to
             * establish a TLS handshake for requests that match the hostname of the
             * associated listener.
             *
             * A single CertificateRef to a Kubernetes Secret has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             *
             * This field is required to have at least one element when the mode is set
             * to "Terminate" (default) and is optional otherwise.
             *
             * CertificateRefs can reference to standard Kubernetes resources, i.e.
             * Secret, or implementation-specific custom resources.
             *
             * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
             *
             * Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersTlsCertificateRefs>[]>;
            frontendValidation?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersTlsFrontendValidation>;
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client.
             * There are two possible modes:
             *
             * - Terminate: The TLS session between the downstream client and the
             *   Gateway is terminated at the Gateway. This mode requires certificates
             *   to be specified in some way, such as populating the certificateRefs
             *   field.
             * - Passthrough: The TLS session is NOT terminated by the Gateway. This
             *   implies that the Gateway can't decipher the TLS stream except for
             *   the ClientHello message of the TLS protocol. The certificateRefs field
             *   is ignored in this mode.
             *
             * Support: Core
             */
            mode?: pulumi.Input<string>;
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * FrontendValidation holds configuration information for validating the frontend (client).
         * Setting this field will require clients to send a client certificate
         * required for validation during the TLS handshake. In browsers this may result in a dialog appearing
         * that requests a user to specify the client certificate.
         * The maximum depth of a certificate chain accepted in verification is Implementation specific.
         *
         * Support: Extended
         */
        export interface GatewaySpecListenersTlsFrontendValidation {
            /**
             * CACertificateRefs contains one or more references to
             * Kubernetes objects that contain TLS certificates of
             * the Certificate Authorities that can be used
             * as a trust anchor to validate the certificates presented by the client.
             *
             * A single CA certificate reference to a Kubernetes ConfigMap
             * has "Core" support.
             * Implementations MAY choose to support attaching multiple CA certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * Support: Core - A single reference to a Kubernetes ConfigMap
             * with the CA certificate in a key named `ca.crt`.
             *
             * Support: Implementation-specific (More than one reference, or other kinds
             * of resources).
             *
             * References to a resource in a different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             */
            caCertificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersTlsFrontendValidationCaCertificateRefs>[]>;
        }

        /**
         * ObjectReference identifies an API object including its namespace.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsFrontendValidationCaCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When set to the empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "ConfigMap" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ObjectReference identifies an API object including its namespace.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsFrontendValidationCaCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When set to the empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "ConfigMap" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * FrontendValidation holds configuration information for validating the frontend (client).
         * Setting this field will require clients to send a client certificate
         * required for validation during the TLS handshake. In browsers this may result in a dialog appearing
         * that requests a user to specify the client certificate.
         * The maximum depth of a certificate chain accepted in verification is Implementation specific.
         *
         * Support: Extended
         */
        export interface GatewaySpecListenersTlsFrontendValidationPatch {
            /**
             * CACertificateRefs contains one or more references to
             * Kubernetes objects that contain TLS certificates of
             * the Certificate Authorities that can be used
             * as a trust anchor to validate the certificates presented by the client.
             *
             * A single CA certificate reference to a Kubernetes ConfigMap
             * has "Core" support.
             * Implementations MAY choose to support attaching multiple CA certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * Support: Core - A single reference to a Kubernetes ConfigMap
             * with the CA certificate in a key named `ca.crt`.
             *
             * Support: Implementation-specific (More than one reference, or other kinds
             * of resources).
             *
             * References to a resource in a different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             */
            caCertificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersTlsFrontendValidationCaCertificateRefsPatch>[]>;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if
         * the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
         * if the Protocol field is "HTTP", "TCP", or "UDP".
         *
         * The association of SNIs to Certificate defined in GatewayTLSConfig is
         * defined based on the Hostname field for this listener.
         *
         * The GatewayClass MUST use the longest matching SNI out of all
         * available certificates for any TLS handshake.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersTlsPatch {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that
             * contains TLS certificates and private keys. These certificates are used to
             * establish a TLS handshake for requests that match the hostname of the
             * associated listener.
             *
             * A single CertificateRef to a Kubernetes Secret has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             *
             * This field is required to have at least one element when the mode is set
             * to "Terminate" (default) and is optional otherwise.
             *
             * CertificateRefs can reference to standard Kubernetes resources, i.e.
             * Secret, or implementation-specific custom resources.
             *
             * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
             *
             * Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersTlsCertificateRefsPatch>[]>;
            frontendValidation?: pulumi.Input<inputs.gateway.v1.GatewaySpecListenersTlsFrontendValidationPatch>;
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client.
             * There are two possible modes:
             *
             * - Terminate: The TLS session between the downstream client and the
             *   Gateway is terminated at the Gateway. This mode requires certificates
             *   to be specified in some way, such as populating the certificateRefs
             *   field.
             * - Passthrough: The TLS session is NOT terminated by the Gateway. This
             *   implies that the Gateway can't decipher the TLS stream except for
             *   the ClientHello message of the TLS protocol. The certificateRefs field
             *   is ignored in this mode.
             *
             * Support: Core
             */
            mode?: pulumi.Input<string>;
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Spec defines the desired state of Gateway.
         */
        export interface GatewaySpecPatch {
            /**
             * Addresses requested for this Gateway. This is optional and behavior can
             * depend on the implementation. If a value is set in the spec and the
             * requested address is invalid or unavailable, the implementation MUST
             * indicate this in the associated entry in GatewayStatus.Addresses.
             *
             * The Addresses field represents a request for the address(es) on the
             * "outside of the Gateway", that traffic bound for this Gateway will use.
             * This could be the IP address or hostname of an external load balancer or
             * other networking infrastructure, or some other address that traffic will
             * be sent to.
             *
             * If no Addresses are specified, the implementation MAY schedule the
             * Gateway in an implementation-specific manner, assigning an appropriate
             * set of Addresses.
             *
             * The implementation MUST bind all Listeners to every GatewayAddress that
             * it assigns to the Gateway and add a corresponding entry in
             * GatewayStatus.Addresses.
             *
             * Support: Extended
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecAddressesPatch>[]>;
            allowedListeners?: pulumi.Input<inputs.gateway.v1.GatewaySpecAllowedListenersPatch>;
            backendTLS?: pulumi.Input<inputs.gateway.v1.GatewaySpecBackendTLSPatch>;
            /**
             * GatewayClassName used for this Gateway. This is the name of a
             * GatewayClass resource.
             */
            gatewayClassName?: pulumi.Input<string>;
            infrastructure?: pulumi.Input<inputs.gateway.v1.GatewaySpecInfrastructurePatch>;
            /**
             * Listeners associated with this Gateway. Listeners define
             * logical endpoints that are bound on this Gateway's addresses.
             * At least one Listener MUST be specified.
             *
             * ## Distinct Listeners
             *
             * Each Listener in a set of Listeners (for example, in a single Gateway)
             * MUST be _distinct_, in that a traffic flow MUST be able to be assigned to
             * exactly one listener. (This section uses "set of Listeners" rather than
             * "Listeners in a single Gateway" because implementations MAY merge configuration
             * from multiple Gateways onto a single data plane, and these rules _also_
             * apply in that case).
             *
             * Practically, this means that each listener in a set MUST have a unique
             * combination of Port, Protocol, and, if supported by the protocol, Hostname.
             *
             * Some combinations of port, protocol, and TLS settings are considered
             * Core support and MUST be supported by implementations based on the objects
             * they support:
             *
             * HTTPRoute
             *
             * 1. HTTPRoute, Port: 80, Protocol: HTTP
             * 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided
             *
             * TLSRoute
             *
             * 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough
             *
             * "Distinct" Listeners have the following property:
             *
             * **The implementation can match inbound requests to a single distinct
             * Listener**.
             *
             * When multiple Listeners share values for fields (for
             * example, two Listeners with the same Port value), the implementation
             * can match requests to only one of the Listeners using other
             * Listener fields.
             *
             * When multiple listeners have the same value for the Protocol field, then
             * each of the Listeners with matching Protocol values MUST have different
             * values for other fields.
             *
             * The set of fields that MUST be different for a Listener differs per protocol.
             * The following rules define the rules for what fields MUST be considered for
             * Listeners to be distinct with each protocol currently defined in the
             * Gateway API spec.
             *
             * The set of listeners that all share a protocol value MUST have _different_
             * values for _at least one_ of these fields to be distinct:
             *
             * * **HTTP, HTTPS, TLS**: Port, Hostname
             * * **TCP, UDP**: Port
             *
             * One **very** important rule to call out involves what happens when an
             * implementation:
             *
             * * Supports TCP protocol Listeners, as well as HTTP, HTTPS, or TLS protocol
             *   Listeners, and
             * * sees HTTP, HTTPS, or TLS protocols with the same `port` as one with TCP
             *   Protocol.
             *
             * In this case all the Listeners that share a port with the
             * TCP Listener are not distinct and so MUST NOT be accepted.
             *
             * If an implementation does not support TCP Protocol Listeners, then the
             * previous rule does not apply, and the TCP Listeners SHOULD NOT be
             * accepted.
             *
             * Note that the `tls` field is not used for determining if a listener is distinct, because
             * Listeners that _only_ differ on TLS config will still conflict in all cases.
             *
             * ### Listeners that are distinct only by Hostname
             *
             * When the Listeners are distinct based only on Hostname, inbound request
             * hostnames MUST match from the most specific to least specific Hostname
             * values to choose the correct Listener and its associated set of Routes.
             *
             * Exact matches MUST be processed before wildcard matches, and wildcard
             * matches MUST be processed before fallback (empty Hostname value)
             * matches. For example, `"foo.example.com"` takes precedence over
             * `"*.example.com"`, and `"*.example.com"` takes precedence over `""`.
             *
             * Additionally, if there are multiple wildcard entries, more specific
             * wildcard entries must be processed before less specific wildcard entries.
             * For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`.
             *
             * The precise definition here is that the higher the number of dots in the
             * hostname to the right of the wildcard character, the higher the precedence.
             *
             * The wildcard character will match any number of characters _and dots_ to
             * the left, however, so `"*.example.com"` will match both
             * `"foo.bar.example.com"` _and_ `"bar.example.com"`.
             *
             * ## Handling indistinct Listeners
             *
             * If a set of Listeners contains Listeners that are not distinct, then those
             * Listeners are _Conflicted_, and the implementation MUST set the "Conflicted"
             * condition in the Listener Status to "True".
             *
             * The words "indistinct" and "conflicted" are considered equivalent for the
             * purpose of this documentation.
             *
             * Implementations MAY choose to accept a Gateway with some Conflicted
             * Listeners only if they only accept the partial Listener set that contains
             * no Conflicted Listeners.
             *
             * Specifically, an implementation MAY accept a partial Listener set subject to
             * the following rules:
             *
             * * The implementation MUST NOT pick one conflicting Listener as the winner.
             *   ALL indistinct Listeners must not be accepted for processing.
             * * At least one distinct Listener MUST be present, or else the Gateway effectively
             *   contains _no_ Listeners, and must be rejected from processing as a whole.
             *
             * The implementation MUST set a "ListenersNotValid" condition on the
             * Gateway Status when the Gateway contains Conflicted Listeners whether or
             * not they accept the Gateway. That Condition SHOULD clearly
             * indicate in the Message which Listeners are conflicted, and which are
             * Accepted. Additionally, the Listener status for those listeners SHOULD
             * indicate which Listeners are conflicted and not Accepted.
             *
             * ## General Listener behavior
             *
             * Note that, for all distinct Listeners, requests SHOULD match at most one Listener.
             * For example, if Listeners are defined for "foo.example.com" and "*.example.com", a
             * request to "foo.example.com" SHOULD only be routed using routes attached
             * to the "foo.example.com" Listener (and not the "*.example.com" Listener).
             *
             * This concept is known as "Listener Isolation", and it is an Extended feature
             * of Gateway API. Implementations that do not support Listener Isolation MUST
             * clearly document this, and MUST NOT claim support for the
             * `GatewayHTTPListenerIsolation` feature.
             *
             * Implementations that _do_ support Listener Isolation SHOULD claim support
             * for the Extended `GatewayHTTPListenerIsolation` feature and pass the associated
             * conformance tests.
             *
             * ## Compatible Listeners
             *
             * A Gateway's Listeners are considered _compatible_ if:
             *
             * 1. They are distinct.
             * 2. The implementation can serve them in compliance with the Addresses
             *    requirement that all Listeners are available on all assigned
             *    addresses.
             *
             * Compatible combinations in Extended support are expected to vary across
             * implementations. A combination that is compatible for one implementation
             * may not be compatible for another.
             *
             * For example, an implementation that cannot serve both TCP and UDP listeners
             * on the same address, or cannot mix HTTPS and generic TLS listens on the same port
             * would not consider those cases compatible, even though they are distinct.
             *
             * Implementations MAY merge separate Gateways onto a single set of
             * Addresses if all Listeners across all Gateways are compatible.
             *
             * In a future release the MinItems=1 requirement MAY be dropped.
             *
             * Support: Core
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewaySpecListenersPatch>[]>;
        }

        /**
         * Status defines the current state of Gateway.
         */
        export interface GatewayStatus {
            /**
             * Addresses lists the network addresses that have been bound to the
             * Gateway.
             *
             * This list may differ from the addresses provided in the spec under some
             * conditions:
             *
             *   * no addresses are specified, all addresses are dynamically assigned
             *   * a combination of specified and dynamic addresses are assigned
             *   * a specified address was unusable (e.g. already in use)
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayStatusAddresses>[]>;
            /**
             * Conditions describe the current conditions of the Gateway.
             *
             * Implementations should prefer to express Gateway conditions
             * using the `GatewayConditionType` and `GatewayConditionReason`
             * constants so that operators and tools can converge on a common
             * vocabulary to describe Gateway state.
             *
             * Known condition types are:
             *
             * * "Accepted"
             * * "Programmed"
             * * "Ready"
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayStatusConditions>[]>;
            /**
             * Listeners provide status for each unique listener port defined in the Spec.
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayStatusListeners>[]>;
        }

        /**
         * GatewayStatusAddress describes a network address that is bound to a Gateway.
         */
        export interface GatewayStatusAddresses {
            /**
             * Type of the address.
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the address. The validity of the values will depend
             * on the type and support by the controller.
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ListenerStatus is the status associated with a Listener.
         */
        export interface GatewayStatusListeners {
            /**
             * AttachedRoutes represents the total number of Routes that have been
             * successfully attached to this Listener.
             *
             * Successful attachment of a Route to a Listener is based solely on the
             * combination of the AllowedRoutes field on the corresponding Listener
             * and the Route's ParentRefs field. A Route is successfully attached to
             * a Listener when it is selected by the Listener's AllowedRoutes field
             * AND the Route has a valid ParentRef selecting the whole Gateway
             * resource or a specific Listener as a parent resource (more detail on
             * attachment semantics can be found in the documentation on the various
             * Route kinds ParentRefs fields). Listener or Route status does not impact
             * successful attachment, i.e. the AttachedRoutes field count MUST be set
             * for Listeners with condition Accepted: false and MUST count successfully
             * attached Routes that may themselves have Accepted: false conditions.
             *
             * Uses for this field include troubleshooting Route attachment and
             * measuring blast radius/impact of changes to a Listener.
             */
            attachedRoutes?: pulumi.Input<number>;
            /**
             * Conditions describe the current condition of this listener.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayStatusListenersConditions>[]>;
            /**
             * Name is the name of the Listener that this status corresponds to.
             */
            name?: pulumi.Input<string>;
            /**
             * SupportedKinds is the list indicating the Kinds supported by this
             * listener. This MUST represent the kinds an implementation supports for
             * that Listener configuration.
             *
             * If kinds are specified in Spec that are not supported, they MUST NOT
             * appear in this list and an implementation MUST set the "ResolvedRefs"
             * condition to "False" with the "InvalidRouteKinds" reason. If both valid
             * and invalid Route kinds are specified, the implementation MUST
             * reference the valid Route kinds that have been specified.
             */
            supportedKinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1.GatewayStatusListenersSupportedKinds>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusListenersConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewayStatusListenersSupportedKinds {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind?: pulumi.Input<string>;
        }

        /**
         * HTTPRoute provides a way to route HTTP requests. This includes the capability
         * to match requests by hostname, path, header, or query param. Filters can be
         * used to specify additional processing steps. Backends specify where matching
         * requests should be routed.
         */
        export interface HTTPRoute {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"HTTPRoute">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpec>;
            status?: pulumi.Input<inputs.gateway.v1.HTTPRouteStatus>;
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpec {
            /**
             * Hostnames defines a set of hostnames that should match against the HTTP Host
             * header to select a HTTPRoute used to process the request. Implementations
             * MUST ignore any port value specified in the HTTP Host header while
             * performing a match and (absent of any applicable header modification
             * configuration) MUST forward this header unmodified to the backend.
             *
             * Valid values for Hostnames are determined by RFC 1123 definition of a
             * hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label must appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and HTTPRoute, there
             * must be at least one intersecting hostname for the HTTPRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `*.example.com`, `test.example.com`, and `foo.test.example.com` would
             *   all match. On the other hand, `example.com` and `test.example.net` would
             *   not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and HTTPRoute have specified hostnames, any
             * HTTPRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * HTTPRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` must not be considered for a match.
             *
             * If both the Listener and HTTPRoute have specified hostnames, and none
             * match with the criteria above, then the HTTPRoute is not accepted. The
             * implementation must raise an 'Accepted' Condition with a status of
             * `False` in the corresponding RouteParentStatus.
             *
             * In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
             * overlapping wildcard matching and exact matching hostnames), precedence must
             * be given to rules from the HTTPRoute with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             *
             * If ties exist across multiple Routes, the matching precedence rules for
             * HTTPRouteMatches takes over.
             *
             * Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecParentRefs>[]>;
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRules>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpecPatch {
            /**
             * Hostnames defines a set of hostnames that should match against the HTTP Host
             * header to select a HTTPRoute used to process the request. Implementations
             * MUST ignore any port value specified in the HTTP Host header while
             * performing a match and (absent of any applicable header modification
             * configuration) MUST forward this header unmodified to the backend.
             *
             * Valid values for Hostnames are determined by RFC 1123 definition of a
             * hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label must appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and HTTPRoute, there
             * must be at least one intersecting hostname for the HTTPRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `*.example.com`, `test.example.com`, and `foo.test.example.com` would
             *   all match. On the other hand, `example.com` and `test.example.net` would
             *   not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and HTTPRoute have specified hostnames, any
             * HTTPRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * HTTPRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` must not be considered for a match.
             *
             * If both the Listener and HTTPRoute have specified hostnames, and none
             * match with the criteria above, then the HTTPRoute is not accepted. The
             * implementation must raise an 'Accepted' Condition with a status of
             * `False` in the corresponding RouteParentStatus.
             *
             * In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
             * overlapping wildcard matching and exact matching hostnames), precedence must
             * be given to rules from the HTTPRoute with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             *
             * If ties exist across multiple Routes, the matching precedence rules for
             * HTTPRouteMatches takes over.
             *
             * Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecParentRefsPatch>[]>;
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesPatch>[]>;
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface HTTPRouteSpecRules {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive a 500 status code.
             *
             * See the HTTPBackendRef definition for the rules about what makes a single
             * HTTPBackendRef invalid.
             *
             * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive a 500 status code.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic must receive a 500. Implementations may
             * choose how that 50 percent is determined.
             *
             * When a HTTPBackendRef refers to a Service that has no ready endpoints,
             * implementations SHOULD return a 503 for requests to that backend instead.
             * If an implementation chooses to do this, all of the above rules for 500 responses
             * MUST also apply for responses that return a 503.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefs>[]>;
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * Wherever possible, implementations SHOULD implement filters in the order
             * they are specified.
             *
             * Implementations MAY choose to implement this ordering strictly, rejecting
             * any combination or order of filters that cannot be supported. If implementations
             * choose a strict interpretation of filter ordering, they MUST clearly document
             * that behavior.
             *
             * To reject an invalid combination or order of filters, implementations SHOULD
             * consider the Route Rules with this configuration invalid. If all Route Rules
             * in a Route are invalid, the entire Route would be considered invalid. If only
             * a portion of Route Rules are invalid, implementations MUST set the
             * "PartiallyInvalid" condition for the Route.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * All filters are expected to be compatible with each other except for the
             * URLRewrite and RequestRedirect filters, which may not be combined. If an
             * implementation cannot support other combinations of filters, they must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFilters>[]>;
            /**
             * Matches define conditions used for matching the rule against incoming
             * HTTP requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - path:
             *     value: "/foo"
             *   headers:
             *   - name: "version"
             *     value: "v2"
             * - path:
             *     value: "/v2/foo"
             * ```
             *
             * For a request to match against this rule, a request must satisfy
             * EITHER of the two conditions:
             *
             * - path prefixed with `/foo` AND contains the header `version: v2`
             * - path prefix of `/v2/foo`
             *
             * See the documentation for HTTPRouteMatch on how to specify multiple
             * match conditions that should be ANDed together.
             *
             * If no matches are specified, the default is a prefix
             * path match on "/", which has the effect of matching every
             * HTTP request.
             *
             * Proxy or Load Balancer routing configuration generated from HTTPRoutes
             * MUST prioritize matches based on the following criteria, continuing on
             * ties. Across all rules specified on applicable Routes, precedence must be
             * given to the match having:
             *
             * * "Exact" path match.
             * * "Prefix" path match with largest number of characters.
             * * Method match.
             * * Largest number of header matches.
             * * Largest number of query param matches.
             *
             * Note: The precedence of RegularExpression path matches are implementation-specific.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within an HTTPRoute, matching precedence MUST be granted
             * to the FIRST matching rule (in list order) with a match meeting the above
             * criteria.
             *
             * When no rules matching a request have been successfully attached to the
             * parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatches>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
            retry?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesRetry>;
            sessionPersistence?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesSessionPersistence>;
            timeouts?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesTimeouts>;
        }

        /**
         * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         */
        export interface HTTPRouteSpecRulesBackendRefs {
            /**
             * Filters defined at this level should be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in HTTPRouteRule.)
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFilters>[]>;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesBackendRefsFilters {
            cors?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersCors>;
            extensionRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersExtensionRef>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifier>;
            requestMirror?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirror>;
            requestRedirect?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirect>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifier>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
            urlRewrite?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewrite>;
        }

        /**
         * CORS defines a schema for a filter that responds to the
         * cross-origin request based on HTTP response header.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersCors {
            /**
             * AllowCredentials indicates whether the actual cross-origin request allows
             * to include credentials.
             *
             * The only valid value for the `Access-Control-Allow-Credentials` response
             * header is true (case-sensitive).
             *
             * If the credentials are not allowed in cross-origin requests, the gateway
             * will omit the header `Access-Control-Allow-Credentials` entirely rather
             * than setting its value to false.
             *
             * Support: Extended
             */
            allowCredentials?: pulumi.Input<boolean>;
            /**
             * AllowHeaders indicates which HTTP request headers are supported for
             * accessing the requested resource.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Allow-Headers`
             * response header are separated by a comma (",").
             *
             * When the `AllowHeaders` field is configured with one or more headers, the
             * gateway must return the `Access-Control-Allow-Headers` response header
             * which value is present in the `AllowHeaders` field.
             *
             * If any header name in the `Access-Control-Request-Headers` request header
             * is not included in the list of header names specified by the response
             * header `Access-Control-Allow-Headers`, it will present an error on the
             * client side.
             *
             * If any header name in the `Access-Control-Allow-Headers` response header
             * does not recognize by the client, it will also occur an error on the
             * client side.
             *
             * A wildcard indicates that the requests with all HTTP headers are allowed.
             * The `Access-Control-Allow-Headers` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowHeaders` field
             * specified with the `*` wildcard, the gateway must specify one or more
             * HTTP headers in the value of the `Access-Control-Allow-Headers` response
             * header. The value of the header `Access-Control-Allow-Headers` is same as
             * the `Access-Control-Request-Headers` header provided by the client. If
             * the header `Access-Control-Request-Headers` is not included in the
             * request, the gateway will omit the `Access-Control-Allow-Headers`
             * response header, instead of specifying the `*` wildcard. A Gateway
             * implementation may choose to add implementation-specific default headers.
             *
             * Support: Extended
             */
            allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowMethods indicates which HTTP methods are supported for accessing the
             * requested resource.
             *
             * Valid values are any method defined by RFC9110, along with the special
             * value `*`, which represents all HTTP methods are allowed.
             *
             * Method names are case sensitive, so these values are also case-sensitive.
             * (See https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)
             *
             * Multiple method names in the value of the `Access-Control-Allow-Methods`
             * response header are separated by a comma (",").
             *
             * A CORS-safelisted method is a method that is `GET`, `HEAD`, or `POST`.
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-method) The
             * CORS-safelisted methods are always allowed, regardless of whether they
             * are specified in the `AllowMethods` field.
             *
             * When the `AllowMethods` field is configured with one or more methods, the
             * gateway must return the `Access-Control-Allow-Methods` response header
             * which value is present in the `AllowMethods` field.
             *
             * If the HTTP method of the `Access-Control-Request-Method` request header
             * is not included in the list of methods specified by the response header
             * `Access-Control-Allow-Methods`, it will present an error on the client
             * side.
             *
             * The `Access-Control-Allow-Methods` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowMethods` field
             * specified with the `*` wildcard, the gateway must specify one HTTP method
             * in the value of the Access-Control-Allow-Methods response header. The
             * value of the header `Access-Control-Allow-Methods` is same as the
             * `Access-Control-Request-Method` header provided by the client. If the
             * header `Access-Control-Request-Method` is not included in the request,
             * the gateway will omit the `Access-Control-Allow-Methods` response header,
             * instead of specifying the `*` wildcard. A Gateway implementation may
             * choose to add implementation-specific default methods.
             *
             * Support: Extended
             */
            allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowOrigins indicates whether the response can be shared with requested
             * resource from the given `Origin`.
             *
             * The `Origin` consists of a scheme and a host, with an optional port, and
             * takes the form `<scheme>://<host>(:<port>)`.
             *
             * Valid values for scheme are: `http` and `https`.
             *
             * Valid values for port are any integer between 1 and 65535 (the list of
             * available TCP/UDP ports). Note that, if not included, port `80` is
             * assumed for `http` scheme origins, and port `443` is assumed for `https`
             * origins. This may affect origin matching.
             *
             * The host part of the origin may contain the wildcard character `*`. These
             * wildcard characters behave as follows:
             *
             * * `*` is a greedy match to the _left_, including any number of
             *   DNS labels to the left of its position. This also means that
             *   `*` will include any number of period `.` characters to the
             *   left of its position.
             * * A wildcard by itself matches all hosts.
             *
             * An origin value that includes _only_ the `*` character indicates requests
             * from all `Origin`s are allowed.
             *
             * When the `AllowOrigins` field is configured with multiple origins, it
             * means the server supports clients from multiple origins. If the request
             * `Origin` matches the configured allowed origins, the gateway must return
             * the given `Origin` and sets value of the header
             * `Access-Control-Allow-Origin` same as the `Origin` header provided by the
             * client.
             *
             * The status code of a successful response to a "preflight" request is
             * always an OK status (i.e., 204 or 200).
             *
             * If the request `Origin` does not match the configured allowed origins,
             * the gateway returns 204/200 response but doesn't set the relevant
             * cross-origin response headers. Alternatively, the gateway responds with
             * 403 status to the "preflight" request is denied, coupled with omitting
             * the CORS headers. The cross-origin request fails on the client side.
             * Therefore, the client doesn't attempt the actual cross-origin request.
             *
             * The `Access-Control-Allow-Origin` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowOrigins` field
             * specified with the `*` wildcard, the gateway must return a single origin
             * in the value of the `Access-Control-Allow-Origin` response header,
             * instead of specifying the `*` wildcard. The value of the header
             * `Access-Control-Allow-Origin` is same as the `Origin` header provided by
             * the client.
             *
             * Support: Extended
             */
            allowOrigins?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExposeHeaders indicates which HTTP response headers can be exposed
             * to client-side scripts in response to a cross-origin request.
             *
             * A CORS-safelisted response header is an HTTP header in a CORS response
             * that it is considered safe to expose to the client scripts.
             * The CORS-safelisted response headers include the following headers:
             * `Cache-Control`
             * `Content-Language`
             * `Content-Length`
             * `Content-Type`
             * `Expires`
             * `Last-Modified`
             * `Pragma`
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name)
             * The CORS-safelisted response headers are exposed to client by default.
             *
             * When an HTTP header name is specified using the `ExposeHeaders` field,
             * this additional header will be exposed as part of the response to the
             * client.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Expose-Headers`
             * response header are separated by a comma (",").
             *
             * A wildcard indicates that the responses with all HTTP headers are exposed
             * to clients. The `Access-Control-Expose-Headers` response header can only
             * use `*` wildcard as value when the `AllowCredentials` field is
             * unspecified.
             *
             * Support: Extended
             */
            exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxAge indicates the duration (in seconds) for the client to cache the
             * results of a "preflight" request.
             *
             * The information provided by the `Access-Control-Allow-Methods` and
             * `Access-Control-Allow-Headers` response headers can be cached by the
             * client until the time specified by `Access-Control-Max-Age` elapses.
             *
             * The default value of `Access-Control-Max-Age` response header is 5
             * (seconds).
             */
            maxAge?: pulumi.Input<number>;
        }

        /**
         * CORS defines a schema for a filter that responds to the
         * cross-origin request based on HTTP response header.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersCorsPatch {
            /**
             * AllowCredentials indicates whether the actual cross-origin request allows
             * to include credentials.
             *
             * The only valid value for the `Access-Control-Allow-Credentials` response
             * header is true (case-sensitive).
             *
             * If the credentials are not allowed in cross-origin requests, the gateway
             * will omit the header `Access-Control-Allow-Credentials` entirely rather
             * than setting its value to false.
             *
             * Support: Extended
             */
            allowCredentials?: pulumi.Input<boolean>;
            /**
             * AllowHeaders indicates which HTTP request headers are supported for
             * accessing the requested resource.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Allow-Headers`
             * response header are separated by a comma (",").
             *
             * When the `AllowHeaders` field is configured with one or more headers, the
             * gateway must return the `Access-Control-Allow-Headers` response header
             * which value is present in the `AllowHeaders` field.
             *
             * If any header name in the `Access-Control-Request-Headers` request header
             * is not included in the list of header names specified by the response
             * header `Access-Control-Allow-Headers`, it will present an error on the
             * client side.
             *
             * If any header name in the `Access-Control-Allow-Headers` response header
             * does not recognize by the client, it will also occur an error on the
             * client side.
             *
             * A wildcard indicates that the requests with all HTTP headers are allowed.
             * The `Access-Control-Allow-Headers` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowHeaders` field
             * specified with the `*` wildcard, the gateway must specify one or more
             * HTTP headers in the value of the `Access-Control-Allow-Headers` response
             * header. The value of the header `Access-Control-Allow-Headers` is same as
             * the `Access-Control-Request-Headers` header provided by the client. If
             * the header `Access-Control-Request-Headers` is not included in the
             * request, the gateway will omit the `Access-Control-Allow-Headers`
             * response header, instead of specifying the `*` wildcard. A Gateway
             * implementation may choose to add implementation-specific default headers.
             *
             * Support: Extended
             */
            allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowMethods indicates which HTTP methods are supported for accessing the
             * requested resource.
             *
             * Valid values are any method defined by RFC9110, along with the special
             * value `*`, which represents all HTTP methods are allowed.
             *
             * Method names are case sensitive, so these values are also case-sensitive.
             * (See https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)
             *
             * Multiple method names in the value of the `Access-Control-Allow-Methods`
             * response header are separated by a comma (",").
             *
             * A CORS-safelisted method is a method that is `GET`, `HEAD`, or `POST`.
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-method) The
             * CORS-safelisted methods are always allowed, regardless of whether they
             * are specified in the `AllowMethods` field.
             *
             * When the `AllowMethods` field is configured with one or more methods, the
             * gateway must return the `Access-Control-Allow-Methods` response header
             * which value is present in the `AllowMethods` field.
             *
             * If the HTTP method of the `Access-Control-Request-Method` request header
             * is not included in the list of methods specified by the response header
             * `Access-Control-Allow-Methods`, it will present an error on the client
             * side.
             *
             * The `Access-Control-Allow-Methods` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowMethods` field
             * specified with the `*` wildcard, the gateway must specify one HTTP method
             * in the value of the Access-Control-Allow-Methods response header. The
             * value of the header `Access-Control-Allow-Methods` is same as the
             * `Access-Control-Request-Method` header provided by the client. If the
             * header `Access-Control-Request-Method` is not included in the request,
             * the gateway will omit the `Access-Control-Allow-Methods` response header,
             * instead of specifying the `*` wildcard. A Gateway implementation may
             * choose to add implementation-specific default methods.
             *
             * Support: Extended
             */
            allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowOrigins indicates whether the response can be shared with requested
             * resource from the given `Origin`.
             *
             * The `Origin` consists of a scheme and a host, with an optional port, and
             * takes the form `<scheme>://<host>(:<port>)`.
             *
             * Valid values for scheme are: `http` and `https`.
             *
             * Valid values for port are any integer between 1 and 65535 (the list of
             * available TCP/UDP ports). Note that, if not included, port `80` is
             * assumed for `http` scheme origins, and port `443` is assumed for `https`
             * origins. This may affect origin matching.
             *
             * The host part of the origin may contain the wildcard character `*`. These
             * wildcard characters behave as follows:
             *
             * * `*` is a greedy match to the _left_, including any number of
             *   DNS labels to the left of its position. This also means that
             *   `*` will include any number of period `.` characters to the
             *   left of its position.
             * * A wildcard by itself matches all hosts.
             *
             * An origin value that includes _only_ the `*` character indicates requests
             * from all `Origin`s are allowed.
             *
             * When the `AllowOrigins` field is configured with multiple origins, it
             * means the server supports clients from multiple origins. If the request
             * `Origin` matches the configured allowed origins, the gateway must return
             * the given `Origin` and sets value of the header
             * `Access-Control-Allow-Origin` same as the `Origin` header provided by the
             * client.
             *
             * The status code of a successful response to a "preflight" request is
             * always an OK status (i.e., 204 or 200).
             *
             * If the request `Origin` does not match the configured allowed origins,
             * the gateway returns 204/200 response but doesn't set the relevant
             * cross-origin response headers. Alternatively, the gateway responds with
             * 403 status to the "preflight" request is denied, coupled with omitting
             * the CORS headers. The cross-origin request fails on the client side.
             * Therefore, the client doesn't attempt the actual cross-origin request.
             *
             * The `Access-Control-Allow-Origin` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowOrigins` field
             * specified with the `*` wildcard, the gateway must return a single origin
             * in the value of the `Access-Control-Allow-Origin` response header,
             * instead of specifying the `*` wildcard. The value of the header
             * `Access-Control-Allow-Origin` is same as the `Origin` header provided by
             * the client.
             *
             * Support: Extended
             */
            allowOrigins?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExposeHeaders indicates which HTTP response headers can be exposed
             * to client-side scripts in response to a cross-origin request.
             *
             * A CORS-safelisted response header is an HTTP header in a CORS response
             * that it is considered safe to expose to the client scripts.
             * The CORS-safelisted response headers include the following headers:
             * `Cache-Control`
             * `Content-Language`
             * `Content-Length`
             * `Content-Type`
             * `Expires`
             * `Last-Modified`
             * `Pragma`
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name)
             * The CORS-safelisted response headers are exposed to client by default.
             *
             * When an HTTP header name is specified using the `ExposeHeaders` field,
             * this additional header will be exposed as part of the response to the
             * client.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Expose-Headers`
             * response header are separated by a comma (",").
             *
             * A wildcard indicates that the responses with all HTTP headers are exposed
             * to clients. The `Access-Control-Expose-Headers` response header can only
             * use `*` wildcard as value when the `AllowCredentials` field is
             * unspecified.
             *
             * Support: Extended
             */
            exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxAge indicates the duration (in seconds) for the client to cache the
             * results of a "preflight" request.
             *
             * The information provided by the `Access-Control-Allow-Methods` and
             * `Access-Control-Allow-Headers` response headers can be cached by the
             * client until the time specified by `Access-Control-Max-Age` elapses.
             *
             * The default value of `Access-Control-Max-Age` response header is 5
             * (seconds).
             */
            maxAge?: pulumi.Input<number>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersPatch {
            cors?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersCorsPatch>;
            extensionRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersExtensionRefPatch>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch>;
            requestMirror?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorPatch>;
            requestRedirect?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPatch>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
            urlRewrite?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePatch>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirror {
            backendRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef>;
            fraction?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorFraction>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorFraction {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorFractionPatch {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorPatch {
            backendRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch>;
            fraction?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorFractionPatch>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPath>;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPatch {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathPatch>;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewrite {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePath>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePatch {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathPatch>;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         */
        export interface HTTPRouteSpecRulesBackendRefsPatch {
            /**
             * Filters defined at this level should be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in HTTPRouteRule.)
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsFiltersPatch>[]>;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFilters {
            cors?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersCors>;
            extensionRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersExtensionRef>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifier>;
            requestMirror?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirror>;
            requestRedirect?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestRedirect>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifier>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
            urlRewrite?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersUrlRewrite>;
        }

        /**
         * CORS defines a schema for a filter that responds to the
         * cross-origin request based on HTTP response header.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersCors {
            /**
             * AllowCredentials indicates whether the actual cross-origin request allows
             * to include credentials.
             *
             * The only valid value for the `Access-Control-Allow-Credentials` response
             * header is true (case-sensitive).
             *
             * If the credentials are not allowed in cross-origin requests, the gateway
             * will omit the header `Access-Control-Allow-Credentials` entirely rather
             * than setting its value to false.
             *
             * Support: Extended
             */
            allowCredentials?: pulumi.Input<boolean>;
            /**
             * AllowHeaders indicates which HTTP request headers are supported for
             * accessing the requested resource.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Allow-Headers`
             * response header are separated by a comma (",").
             *
             * When the `AllowHeaders` field is configured with one or more headers, the
             * gateway must return the `Access-Control-Allow-Headers` response header
             * which value is present in the `AllowHeaders` field.
             *
             * If any header name in the `Access-Control-Request-Headers` request header
             * is not included in the list of header names specified by the response
             * header `Access-Control-Allow-Headers`, it will present an error on the
             * client side.
             *
             * If any header name in the `Access-Control-Allow-Headers` response header
             * does not recognize by the client, it will also occur an error on the
             * client side.
             *
             * A wildcard indicates that the requests with all HTTP headers are allowed.
             * The `Access-Control-Allow-Headers` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowHeaders` field
             * specified with the `*` wildcard, the gateway must specify one or more
             * HTTP headers in the value of the `Access-Control-Allow-Headers` response
             * header. The value of the header `Access-Control-Allow-Headers` is same as
             * the `Access-Control-Request-Headers` header provided by the client. If
             * the header `Access-Control-Request-Headers` is not included in the
             * request, the gateway will omit the `Access-Control-Allow-Headers`
             * response header, instead of specifying the `*` wildcard. A Gateway
             * implementation may choose to add implementation-specific default headers.
             *
             * Support: Extended
             */
            allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowMethods indicates which HTTP methods are supported for accessing the
             * requested resource.
             *
             * Valid values are any method defined by RFC9110, along with the special
             * value `*`, which represents all HTTP methods are allowed.
             *
             * Method names are case sensitive, so these values are also case-sensitive.
             * (See https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)
             *
             * Multiple method names in the value of the `Access-Control-Allow-Methods`
             * response header are separated by a comma (",").
             *
             * A CORS-safelisted method is a method that is `GET`, `HEAD`, or `POST`.
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-method) The
             * CORS-safelisted methods are always allowed, regardless of whether they
             * are specified in the `AllowMethods` field.
             *
             * When the `AllowMethods` field is configured with one or more methods, the
             * gateway must return the `Access-Control-Allow-Methods` response header
             * which value is present in the `AllowMethods` field.
             *
             * If the HTTP method of the `Access-Control-Request-Method` request header
             * is not included in the list of methods specified by the response header
             * `Access-Control-Allow-Methods`, it will present an error on the client
             * side.
             *
             * The `Access-Control-Allow-Methods` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowMethods` field
             * specified with the `*` wildcard, the gateway must specify one HTTP method
             * in the value of the Access-Control-Allow-Methods response header. The
             * value of the header `Access-Control-Allow-Methods` is same as the
             * `Access-Control-Request-Method` header provided by the client. If the
             * header `Access-Control-Request-Method` is not included in the request,
             * the gateway will omit the `Access-Control-Allow-Methods` response header,
             * instead of specifying the `*` wildcard. A Gateway implementation may
             * choose to add implementation-specific default methods.
             *
             * Support: Extended
             */
            allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowOrigins indicates whether the response can be shared with requested
             * resource from the given `Origin`.
             *
             * The `Origin` consists of a scheme and a host, with an optional port, and
             * takes the form `<scheme>://<host>(:<port>)`.
             *
             * Valid values for scheme are: `http` and `https`.
             *
             * Valid values for port are any integer between 1 and 65535 (the list of
             * available TCP/UDP ports). Note that, if not included, port `80` is
             * assumed for `http` scheme origins, and port `443` is assumed for `https`
             * origins. This may affect origin matching.
             *
             * The host part of the origin may contain the wildcard character `*`. These
             * wildcard characters behave as follows:
             *
             * * `*` is a greedy match to the _left_, including any number of
             *   DNS labels to the left of its position. This also means that
             *   `*` will include any number of period `.` characters to the
             *   left of its position.
             * * A wildcard by itself matches all hosts.
             *
             * An origin value that includes _only_ the `*` character indicates requests
             * from all `Origin`s are allowed.
             *
             * When the `AllowOrigins` field is configured with multiple origins, it
             * means the server supports clients from multiple origins. If the request
             * `Origin` matches the configured allowed origins, the gateway must return
             * the given `Origin` and sets value of the header
             * `Access-Control-Allow-Origin` same as the `Origin` header provided by the
             * client.
             *
             * The status code of a successful response to a "preflight" request is
             * always an OK status (i.e., 204 or 200).
             *
             * If the request `Origin` does not match the configured allowed origins,
             * the gateway returns 204/200 response but doesn't set the relevant
             * cross-origin response headers. Alternatively, the gateway responds with
             * 403 status to the "preflight" request is denied, coupled with omitting
             * the CORS headers. The cross-origin request fails on the client side.
             * Therefore, the client doesn't attempt the actual cross-origin request.
             *
             * The `Access-Control-Allow-Origin` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowOrigins` field
             * specified with the `*` wildcard, the gateway must return a single origin
             * in the value of the `Access-Control-Allow-Origin` response header,
             * instead of specifying the `*` wildcard. The value of the header
             * `Access-Control-Allow-Origin` is same as the `Origin` header provided by
             * the client.
             *
             * Support: Extended
             */
            allowOrigins?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExposeHeaders indicates which HTTP response headers can be exposed
             * to client-side scripts in response to a cross-origin request.
             *
             * A CORS-safelisted response header is an HTTP header in a CORS response
             * that it is considered safe to expose to the client scripts.
             * The CORS-safelisted response headers include the following headers:
             * `Cache-Control`
             * `Content-Language`
             * `Content-Length`
             * `Content-Type`
             * `Expires`
             * `Last-Modified`
             * `Pragma`
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name)
             * The CORS-safelisted response headers are exposed to client by default.
             *
             * When an HTTP header name is specified using the `ExposeHeaders` field,
             * this additional header will be exposed as part of the response to the
             * client.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Expose-Headers`
             * response header are separated by a comma (",").
             *
             * A wildcard indicates that the responses with all HTTP headers are exposed
             * to clients. The `Access-Control-Expose-Headers` response header can only
             * use `*` wildcard as value when the `AllowCredentials` field is
             * unspecified.
             *
             * Support: Extended
             */
            exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxAge indicates the duration (in seconds) for the client to cache the
             * results of a "preflight" request.
             *
             * The information provided by the `Access-Control-Allow-Methods` and
             * `Access-Control-Allow-Headers` response headers can be cached by the
             * client until the time specified by `Access-Control-Max-Age` elapses.
             *
             * The default value of `Access-Control-Max-Age` response header is 5
             * (seconds).
             */
            maxAge?: pulumi.Input<number>;
        }

        /**
         * CORS defines a schema for a filter that responds to the
         * cross-origin request based on HTTP response header.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersCorsPatch {
            /**
             * AllowCredentials indicates whether the actual cross-origin request allows
             * to include credentials.
             *
             * The only valid value for the `Access-Control-Allow-Credentials` response
             * header is true (case-sensitive).
             *
             * If the credentials are not allowed in cross-origin requests, the gateway
             * will omit the header `Access-Control-Allow-Credentials` entirely rather
             * than setting its value to false.
             *
             * Support: Extended
             */
            allowCredentials?: pulumi.Input<boolean>;
            /**
             * AllowHeaders indicates which HTTP request headers are supported for
             * accessing the requested resource.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Allow-Headers`
             * response header are separated by a comma (",").
             *
             * When the `AllowHeaders` field is configured with one or more headers, the
             * gateway must return the `Access-Control-Allow-Headers` response header
             * which value is present in the `AllowHeaders` field.
             *
             * If any header name in the `Access-Control-Request-Headers` request header
             * is not included in the list of header names specified by the response
             * header `Access-Control-Allow-Headers`, it will present an error on the
             * client side.
             *
             * If any header name in the `Access-Control-Allow-Headers` response header
             * does not recognize by the client, it will also occur an error on the
             * client side.
             *
             * A wildcard indicates that the requests with all HTTP headers are allowed.
             * The `Access-Control-Allow-Headers` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowHeaders` field
             * specified with the `*` wildcard, the gateway must specify one or more
             * HTTP headers in the value of the `Access-Control-Allow-Headers` response
             * header. The value of the header `Access-Control-Allow-Headers` is same as
             * the `Access-Control-Request-Headers` header provided by the client. If
             * the header `Access-Control-Request-Headers` is not included in the
             * request, the gateway will omit the `Access-Control-Allow-Headers`
             * response header, instead of specifying the `*` wildcard. A Gateway
             * implementation may choose to add implementation-specific default headers.
             *
             * Support: Extended
             */
            allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowMethods indicates which HTTP methods are supported for accessing the
             * requested resource.
             *
             * Valid values are any method defined by RFC9110, along with the special
             * value `*`, which represents all HTTP methods are allowed.
             *
             * Method names are case sensitive, so these values are also case-sensitive.
             * (See https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)
             *
             * Multiple method names in the value of the `Access-Control-Allow-Methods`
             * response header are separated by a comma (",").
             *
             * A CORS-safelisted method is a method that is `GET`, `HEAD`, or `POST`.
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-method) The
             * CORS-safelisted methods are always allowed, regardless of whether they
             * are specified in the `AllowMethods` field.
             *
             * When the `AllowMethods` field is configured with one or more methods, the
             * gateway must return the `Access-Control-Allow-Methods` response header
             * which value is present in the `AllowMethods` field.
             *
             * If the HTTP method of the `Access-Control-Request-Method` request header
             * is not included in the list of methods specified by the response header
             * `Access-Control-Allow-Methods`, it will present an error on the client
             * side.
             *
             * The `Access-Control-Allow-Methods` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowMethods` field
             * specified with the `*` wildcard, the gateway must specify one HTTP method
             * in the value of the Access-Control-Allow-Methods response header. The
             * value of the header `Access-Control-Allow-Methods` is same as the
             * `Access-Control-Request-Method` header provided by the client. If the
             * header `Access-Control-Request-Method` is not included in the request,
             * the gateway will omit the `Access-Control-Allow-Methods` response header,
             * instead of specifying the `*` wildcard. A Gateway implementation may
             * choose to add implementation-specific default methods.
             *
             * Support: Extended
             */
            allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowOrigins indicates whether the response can be shared with requested
             * resource from the given `Origin`.
             *
             * The `Origin` consists of a scheme and a host, with an optional port, and
             * takes the form `<scheme>://<host>(:<port>)`.
             *
             * Valid values for scheme are: `http` and `https`.
             *
             * Valid values for port are any integer between 1 and 65535 (the list of
             * available TCP/UDP ports). Note that, if not included, port `80` is
             * assumed for `http` scheme origins, and port `443` is assumed for `https`
             * origins. This may affect origin matching.
             *
             * The host part of the origin may contain the wildcard character `*`. These
             * wildcard characters behave as follows:
             *
             * * `*` is a greedy match to the _left_, including any number of
             *   DNS labels to the left of its position. This also means that
             *   `*` will include any number of period `.` characters to the
             *   left of its position.
             * * A wildcard by itself matches all hosts.
             *
             * An origin value that includes _only_ the `*` character indicates requests
             * from all `Origin`s are allowed.
             *
             * When the `AllowOrigins` field is configured with multiple origins, it
             * means the server supports clients from multiple origins. If the request
             * `Origin` matches the configured allowed origins, the gateway must return
             * the given `Origin` and sets value of the header
             * `Access-Control-Allow-Origin` same as the `Origin` header provided by the
             * client.
             *
             * The status code of a successful response to a "preflight" request is
             * always an OK status (i.e., 204 or 200).
             *
             * If the request `Origin` does not match the configured allowed origins,
             * the gateway returns 204/200 response but doesn't set the relevant
             * cross-origin response headers. Alternatively, the gateway responds with
             * 403 status to the "preflight" request is denied, coupled with omitting
             * the CORS headers. The cross-origin request fails on the client side.
             * Therefore, the client doesn't attempt the actual cross-origin request.
             *
             * The `Access-Control-Allow-Origin` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowOrigins` field
             * specified with the `*` wildcard, the gateway must return a single origin
             * in the value of the `Access-Control-Allow-Origin` response header,
             * instead of specifying the `*` wildcard. The value of the header
             * `Access-Control-Allow-Origin` is same as the `Origin` header provided by
             * the client.
             *
             * Support: Extended
             */
            allowOrigins?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExposeHeaders indicates which HTTP response headers can be exposed
             * to client-side scripts in response to a cross-origin request.
             *
             * A CORS-safelisted response header is an HTTP header in a CORS response
             * that it is considered safe to expose to the client scripts.
             * The CORS-safelisted response headers include the following headers:
             * `Cache-Control`
             * `Content-Language`
             * `Content-Length`
             * `Content-Type`
             * `Expires`
             * `Last-Modified`
             * `Pragma`
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name)
             * The CORS-safelisted response headers are exposed to client by default.
             *
             * When an HTTP header name is specified using the `ExposeHeaders` field,
             * this additional header will be exposed as part of the response to the
             * client.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Expose-Headers`
             * response header are separated by a comma (",").
             *
             * A wildcard indicates that the responses with all HTTP headers are exposed
             * to clients. The `Access-Control-Expose-Headers` response header can only
             * use `*` wildcard as value when the `AllowCredentials` field is
             * unspecified.
             *
             * Support: Extended
             */
            exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxAge indicates the duration (in seconds) for the client to cache the
             * results of a "preflight" request.
             *
             * The information provided by the `Access-Control-Allow-Methods` and
             * `Access-Control-Allow-Headers` response headers can be cached by the
             * client until the time specified by `Access-Control-Max-Age` elapses.
             *
             * The default value of `Access-Control-Max-Age` response header is 5
             * (seconds).
             */
            maxAge?: pulumi.Input<number>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFiltersPatch {
            cors?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersCorsPatch>;
            extensionRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersExtensionRefPatch>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierPatch>;
            requestMirror?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirrorPatch>;
            requestRedirect?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestRedirectPatch>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierPatch>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
            urlRewrite?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersUrlRewritePatch>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirror {
            backendRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirrorBackendRef>;
            fraction?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirrorFraction>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorFraction {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorFractionPatch {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorPatch {
            backendRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirrorBackendRefPatch>;
            fraction?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestMirrorFractionPatch>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestRedirectPath>;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPatch {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersRequestRedirectPathPatch>;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersResponseHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewrite {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersUrlRewritePath>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePatch {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersUrlRewritePathPatch>;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a HTTP request only if its path
         * starts with `/foo` AND it contains the `version: v1` header:
         *
         * ```
         * match:
         *
         * 	path:
         * 	  value: "/foo"
         * 	headers:
         * 	- name: "version"
         * 	  value "v1"
         *
         * ```
         */
        export interface HTTPRouteSpecRulesMatches {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are
             * ANDed together, meaning, a request must match all the specified headers
             * to select the route.
             */
            headers?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesHeaders>[]>;
            /**
             * Method specifies HTTP method matcher.
             * When specified, this route will be matched only if the request has the
             * specified method.
             *
             * Support: Extended
             */
            method?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesPath>;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match
             * values are ANDed together, meaning, a request must match all the
             * specified query parameters to select the route.
             *
             * Support: Extended
             */
            queryParams?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesQueryParams>[]>;
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
         * headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeaders {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             *
             * When a header is repeated in an HTTP request, it is
             * implementation-specific behavior as to how this is represented.
             * Generally, proxies should follow the guidance from the RFC:
             * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
             * processing a repeated header, with special handling for "Set-Cookie".
             */
            name?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the header.
             *
             * Support: Core (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression HeaderMatchType has implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other dialects
             * of regular expressions. Please read the implementation's documentation to
             * determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
         * headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeadersPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             *
             * When a header is repeated in an HTTP request, it is
             * implementation-specific behavior as to how this is represented.
             * Generally, proxies should follow the guidance from the RFC:
             * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
             * processing a repeated header, with special handling for "Set-Cookie".
             */
            name?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the header.
             *
             * Support: Core (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression HeaderMatchType has implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other dialects
             * of regular expressions. Please read the implementation's documentation to
             * determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a HTTP request only if its path
         * starts with `/foo` AND it contains the `version: v1` header:
         *
         * ```
         * match:
         *
         * 	path:
         * 	  value: "/foo"
         * 	headers:
         * 	- name: "version"
         * 	  value "v1"
         *
         * ```
         */
        export interface HTTPRouteSpecRulesMatchesPatch {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are
             * ANDed together, meaning, a request must match all the specified headers
             * to select the route.
             */
            headers?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesHeadersPatch>[]>;
            /**
             * Method specifies HTTP method matcher.
             * When specified, this route will be matched only if the request has the
             * specified method.
             *
             * Support: Extended
             */
            method?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesPathPatch>;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match
             * values are ANDed together, meaning, a request must match all the
             * specified query parameters to select the route.
             *
             * Support: Extended
             */
            queryParams?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesQueryParamsPatch>[]>;
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not
         * specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPath {
            /**
             * Type specifies how to match against the path Value.
             *
             * Support: Core (Exact, PathPrefix)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the HTTP path to match against.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not
         * specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPathPatch {
            /**
             * Type specifies how to match against the path Value.
             *
             * Support: Core (Exact, PathPrefix)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the HTTP path to match against.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
         * query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryParams {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an
             * exact string match. (See
             * https://tools.ietf.org/html/rfc7230#section-2.7.3).
             *
             * If multiple entries specify equivalent query param names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent query param name MUST be ignored.
             *
             * If a query param is repeated in an HTTP request, the behavior is
             * purposely left undefined, since different data planes have different
             * capabilities. However, it is *recommended* that implementations should
             * match against the first value of the param if the data plane supports it,
             * as this behavior is expected in other load balancing contexts outside of
             * the Gateway API.
             *
             * Users SHOULD NOT route traffic based on repeated query params to guard
             * themselves against potential differences in the implementations.
             */
            name?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the query parameter.
             *
             * Support: Extended (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression QueryParamMatchType has Implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other
             * dialects of regular expressions. Please read the implementation's
             * documentation to determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
         * query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryParamsPatch {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an
             * exact string match. (See
             * https://tools.ietf.org/html/rfc7230#section-2.7.3).
             *
             * If multiple entries specify equivalent query param names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent query param name MUST be ignored.
             *
             * If a query param is repeated in an HTTP request, the behavior is
             * purposely left undefined, since different data planes have different
             * capabilities. However, it is *recommended* that implementations should
             * match against the first value of the param if the data plane supports it,
             * as this behavior is expected in other load balancing contexts outside of
             * the Gateway API.
             *
             * Users SHOULD NOT route traffic based on repeated query params to guard
             * themselves against potential differences in the implementations.
             */
            name?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the query parameter.
             *
             * Support: Extended (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression QueryParamMatchType has Implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other
             * dialects of regular expressions. Please read the implementation's
             * documentation to determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface HTTPRouteSpecRulesPatch {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive a 500 status code.
             *
             * See the HTTPBackendRef definition for the rules about what makes a single
             * HTTPBackendRef invalid.
             *
             * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive a 500 status code.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic must receive a 500. Implementations may
             * choose how that 50 percent is determined.
             *
             * When a HTTPBackendRef refers to a Service that has no ready endpoints,
             * implementations SHOULD return a 503 for requests to that backend instead.
             * If an implementation chooses to do this, all of the above rules for 500 responses
             * MUST also apply for responses that return a 503.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesBackendRefsPatch>[]>;
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * Wherever possible, implementations SHOULD implement filters in the order
             * they are specified.
             *
             * Implementations MAY choose to implement this ordering strictly, rejecting
             * any combination or order of filters that cannot be supported. If implementations
             * choose a strict interpretation of filter ordering, they MUST clearly document
             * that behavior.
             *
             * To reject an invalid combination or order of filters, implementations SHOULD
             * consider the Route Rules with this configuration invalid. If all Route Rules
             * in a Route are invalid, the entire Route would be considered invalid. If only
             * a portion of Route Rules are invalid, implementations MUST set the
             * "PartiallyInvalid" condition for the Route.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * All filters are expected to be compatible with each other except for the
             * URLRewrite and RequestRedirect filters, which may not be combined. If an
             * implementation cannot support other combinations of filters, they must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesFiltersPatch>[]>;
            /**
             * Matches define conditions used for matching the rule against incoming
             * HTTP requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - path:
             *     value: "/foo"
             *   headers:
             *   - name: "version"
             *     value: "v2"
             * - path:
             *     value: "/v2/foo"
             * ```
             *
             * For a request to match against this rule, a request must satisfy
             * EITHER of the two conditions:
             *
             * - path prefixed with `/foo` AND contains the header `version: v2`
             * - path prefix of `/v2/foo`
             *
             * See the documentation for HTTPRouteMatch on how to specify multiple
             * match conditions that should be ANDed together.
             *
             * If no matches are specified, the default is a prefix
             * path match on "/", which has the effect of matching every
             * HTTP request.
             *
             * Proxy or Load Balancer routing configuration generated from HTTPRoutes
             * MUST prioritize matches based on the following criteria, continuing on
             * ties. Across all rules specified on applicable Routes, precedence must be
             * given to the match having:
             *
             * * "Exact" path match.
             * * "Prefix" path match with largest number of characters.
             * * Method match.
             * * Largest number of header matches.
             * * Largest number of query param matches.
             *
             * Note: The precedence of RegularExpression path matches are implementation-specific.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within an HTTPRoute, matching precedence MUST be granted
             * to the FIRST matching rule (in list order) with a match meeting the above
             * criteria.
             *
             * When no rules matching a request have been successfully attached to the
             * parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesMatchesPatch>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
            retry?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesRetryPatch>;
            sessionPersistence?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesSessionPersistencePatch>;
            timeouts?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesTimeoutsPatch>;
        }

        /**
         * Retry defines the configuration for when to retry an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesRetry {
            /**
             * Attempts specifies the maximum number of times an individual request
             * from the gateway to a backend should be retried.
             *
             * If the maximum number of retries has been attempted without a successful
             * response from the backend, the Gateway MUST return an error.
             *
             * When this field is unspecified, the number of times to attempt to retry
             * a backend request is implementation-specific.
             *
             * Support: Extended
             */
            attempts?: pulumi.Input<number>;
            /**
             * Backoff specifies the minimum duration a Gateway should wait between
             * retry attempts and is represented in Gateway API Duration formatting.
             *
             * For example, setting the `rules[].retry.backoff` field to the value
             * `100ms` will cause a backend request to first be retried approximately
             * 100 milliseconds after timing out or receiving a response code configured
             * to be retryable.
             *
             * An implementation MAY use an exponential or alternative backoff strategy
             * for subsequent retry attempts, MAY cap the maximum backoff duration to
             * some amount greater than the specified minimum, and MAY add arbitrary
             * jitter to stagger requests, as long as unsuccessful backend requests are
             * not retried before the configured minimum duration.
             *
             * If a Request timeout (`rules[].timeouts.request`) is configured on the
             * route, the entire duration of the initial request and any retry attempts
             * MUST not exceed the Request timeout duration. If any retry attempts are
             * still in progress when the Request timeout duration has been reached,
             * these SHOULD be canceled if possible and the Gateway MUST immediately
             * return a timeout error.
             *
             * If a BackendRequest timeout (`rules[].timeouts.backendRequest`) is
             * configured on the route, any retry attempts which reach the configured
             * BackendRequest timeout duration without a response SHOULD be canceled if
             * possible and the Gateway should wait for at least the specified backoff
             * duration before attempting to retry the backend request again.
             *
             * If a BackendRequest timeout is _not_ configured on the route, retry
             * attempts MAY time out after an implementation default duration, or MAY
             * remain pending until a configured Request timeout or implementation
             * default duration for total request time is reached.
             *
             * When this field is unspecified, the time to wait between retry attempts
             * is implementation-specific.
             *
             * Support: Extended
             */
            backoff?: pulumi.Input<string>;
            /**
             * Codes defines the HTTP response status codes for which a backend request
             * should be retried.
             *
             * Support: Extended
             */
            codes?: pulumi.Input<pulumi.Input<number>[]>;
        }

        /**
         * Retry defines the configuration for when to retry an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesRetryPatch {
            /**
             * Attempts specifies the maximum number of times an individual request
             * from the gateway to a backend should be retried.
             *
             * If the maximum number of retries has been attempted without a successful
             * response from the backend, the Gateway MUST return an error.
             *
             * When this field is unspecified, the number of times to attempt to retry
             * a backend request is implementation-specific.
             *
             * Support: Extended
             */
            attempts?: pulumi.Input<number>;
            /**
             * Backoff specifies the minimum duration a Gateway should wait between
             * retry attempts and is represented in Gateway API Duration formatting.
             *
             * For example, setting the `rules[].retry.backoff` field to the value
             * `100ms` will cause a backend request to first be retried approximately
             * 100 milliseconds after timing out or receiving a response code configured
             * to be retryable.
             *
             * An implementation MAY use an exponential or alternative backoff strategy
             * for subsequent retry attempts, MAY cap the maximum backoff duration to
             * some amount greater than the specified minimum, and MAY add arbitrary
             * jitter to stagger requests, as long as unsuccessful backend requests are
             * not retried before the configured minimum duration.
             *
             * If a Request timeout (`rules[].timeouts.request`) is configured on the
             * route, the entire duration of the initial request and any retry attempts
             * MUST not exceed the Request timeout duration. If any retry attempts are
             * still in progress when the Request timeout duration has been reached,
             * these SHOULD be canceled if possible and the Gateway MUST immediately
             * return a timeout error.
             *
             * If a BackendRequest timeout (`rules[].timeouts.backendRequest`) is
             * configured on the route, any retry attempts which reach the configured
             * BackendRequest timeout duration without a response SHOULD be canceled if
             * possible and the Gateway should wait for at least the specified backoff
             * duration before attempting to retry the backend request again.
             *
             * If a BackendRequest timeout is _not_ configured on the route, retry
             * attempts MAY time out after an implementation default duration, or MAY
             * remain pending until a configured Request timeout or implementation
             * default duration for total request time is reached.
             *
             * When this field is unspecified, the time to wait between retry attempts
             * is implementation-specific.
             *
             * Support: Extended
             */
            backoff?: pulumi.Input<string>;
            /**
             * Codes defines the HTTP response status codes for which a backend request
             * should be retried.
             *
             * Support: Extended
             */
            codes?: pulumi.Input<pulumi.Input<number>[]>;
        }

        /**
         * SessionPersistence defines and configures session persistence
         * for the route rule.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesSessionPersistence {
            /**
             * AbsoluteTimeout defines the absolute timeout of the persistent
             * session. Once the AbsoluteTimeout duration has elapsed, the
             * session becomes invalid.
             *
             * Support: Extended
             */
            absoluteTimeout?: pulumi.Input<string>;
            cookieConfig?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesSessionPersistenceCookieConfig>;
            /**
             * IdleTimeout defines the idle timeout of the persistent session.
             * Once the session has been idle for more than the specified
             * IdleTimeout duration, the session becomes invalid.
             *
             * Support: Extended
             */
            idleTimeout?: pulumi.Input<string>;
            /**
             * SessionName defines the name of the persistent session token
             * which may be reflected in the cookie or the header. Users
             * should avoid reusing session names to prevent unintended
             * consequences, such as rejection or unpredictable behavior.
             *
             * Support: Implementation-specific
             */
            sessionName?: pulumi.Input<string>;
            /**
             * Type defines the type of session persistence such as through
             * the use a header or cookie. Defaults to cookie based session
             * persistence.
             *
             * Support: Core for "Cookie" type
             *
             * Support: Extended for "Header" type
             */
            type?: pulumi.Input<string>;
        }

        /**
         * CookieConfig provides configuration settings that are specific
         * to cookie-based session persistence.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesSessionPersistenceCookieConfig {
            /**
             * LifetimeType specifies whether the cookie has a permanent or
             * session-based lifetime. A permanent cookie persists until its
             * specified expiry time, defined by the Expires or Max-Age cookie
             * attributes, while a session cookie is deleted when the current
             * session ends.
             *
             * When set to "Permanent", AbsoluteTimeout indicates the
             * cookie's lifetime via the Expires or Max-Age cookie attributes
             * and is required.
             *
             * When set to "Session", AbsoluteTimeout indicates the
             * absolute lifetime of the cookie tracked by the gateway and
             * is optional.
             *
             * Defaults to "Session".
             *
             * Support: Core for "Session" type
             *
             * Support: Extended for "Permanent" type
             */
            lifetimeType?: pulumi.Input<string>;
        }

        /**
         * CookieConfig provides configuration settings that are specific
         * to cookie-based session persistence.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesSessionPersistenceCookieConfigPatch {
            /**
             * LifetimeType specifies whether the cookie has a permanent or
             * session-based lifetime. A permanent cookie persists until its
             * specified expiry time, defined by the Expires or Max-Age cookie
             * attributes, while a session cookie is deleted when the current
             * session ends.
             *
             * When set to "Permanent", AbsoluteTimeout indicates the
             * cookie's lifetime via the Expires or Max-Age cookie attributes
             * and is required.
             *
             * When set to "Session", AbsoluteTimeout indicates the
             * absolute lifetime of the cookie tracked by the gateway and
             * is optional.
             *
             * Defaults to "Session".
             *
             * Support: Core for "Session" type
             *
             * Support: Extended for "Permanent" type
             */
            lifetimeType?: pulumi.Input<string>;
        }

        /**
         * SessionPersistence defines and configures session persistence
         * for the route rule.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesSessionPersistencePatch {
            /**
             * AbsoluteTimeout defines the absolute timeout of the persistent
             * session. Once the AbsoluteTimeout duration has elapsed, the
             * session becomes invalid.
             *
             * Support: Extended
             */
            absoluteTimeout?: pulumi.Input<string>;
            cookieConfig?: pulumi.Input<inputs.gateway.v1.HTTPRouteSpecRulesSessionPersistenceCookieConfigPatch>;
            /**
             * IdleTimeout defines the idle timeout of the persistent session.
             * Once the session has been idle for more than the specified
             * IdleTimeout duration, the session becomes invalid.
             *
             * Support: Extended
             */
            idleTimeout?: pulumi.Input<string>;
            /**
             * SessionName defines the name of the persistent session token
             * which may be reflected in the cookie or the header. Users
             * should avoid reusing session names to prevent unintended
             * consequences, such as rejection or unpredictable behavior.
             *
             * Support: Implementation-specific
             */
            sessionName?: pulumi.Input<string>;
            /**
             * Type defines the type of session persistence such as through
             * the use a header or cookie. Defaults to cookie based session
             * persistence.
             *
             * Support: Core for "Cookie" type
             *
             * Support: Extended for "Header" type
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Timeouts defines the timeouts that can be configured for an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesTimeouts {
            /**
             * BackendRequest specifies a timeout for an individual request from the gateway
             * to a backend. This covers the time from when the request first starts being
             * sent from the gateway to when the full response has been received from the backend.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * An entire client HTTP transaction with a gateway, covered by the Request timeout,
             * may result in more than one call from the gateway to the destination backend,
             * for example, if automatic retries are supported.
             *
             * The value of BackendRequest must be a Gateway API Duration string as defined by
             * GEP-2257.  When this field is unspecified, its behavior is implementation-specific;
             * when specified, the value of BackendRequest must be no more than the value of the
             * Request timeout (since the Request timeout encompasses the BackendRequest timeout).
             *
             * Support: Extended
             */
            backendRequest?: pulumi.Input<string>;
            /**
             * Request specifies the maximum duration for a gateway to respond to an HTTP request.
             * If the gateway has not been able to respond before this deadline is met, the gateway
             * MUST return a timeout error.
             *
             * For example, setting the `rules.timeouts.request` field to the value `10s` in an
             * `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
             * to complete.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * This timeout is intended to cover as close to the whole request-response transaction
             * as possible although an implementation MAY choose to start the timeout after the entire
             * request stream has been received instead of immediately after the transaction is
             * initiated by the client.
             *
             * The value of Request is a Gateway API Duration string as defined by GEP-2257. When this
             * field is unspecified, request timeout behavior is implementation-specific.
             *
             * Support: Extended
             */
            request?: pulumi.Input<string>;
        }

        /**
         * Timeouts defines the timeouts that can be configured for an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesTimeoutsPatch {
            /**
             * BackendRequest specifies a timeout for an individual request from the gateway
             * to a backend. This covers the time from when the request first starts being
             * sent from the gateway to when the full response has been received from the backend.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * An entire client HTTP transaction with a gateway, covered by the Request timeout,
             * may result in more than one call from the gateway to the destination backend,
             * for example, if automatic retries are supported.
             *
             * The value of BackendRequest must be a Gateway API Duration string as defined by
             * GEP-2257.  When this field is unspecified, its behavior is implementation-specific;
             * when specified, the value of BackendRequest must be no more than the value of the
             * Request timeout (since the Request timeout encompasses the BackendRequest timeout).
             *
             * Support: Extended
             */
            backendRequest?: pulumi.Input<string>;
            /**
             * Request specifies the maximum duration for a gateway to respond to an HTTP request.
             * If the gateway has not been able to respond before this deadline is met, the gateway
             * MUST return a timeout error.
             *
             * For example, setting the `rules.timeouts.request` field to the value `10s` in an
             * `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
             * to complete.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * This timeout is intended to cover as close to the whole request-response transaction
             * as possible although an implementation MAY choose to start the timeout after the entire
             * request stream has been received instead of immediately after the transaction is
             * initiated by the client.
             *
             * The value of Request is a Gateway API Duration string as defined by GEP-2257. When this
             * field is unspecified, request timeout behavior is implementation-specific.
             *
             * Support: Extended
             */
            request?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of HTTPRoute.
         */
        export interface HTTPRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteStatusParents>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface HTTPRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a nonexistent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1.HTTPRouteStatusParentsConditions>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName?: pulumi.Input<string>;
            parentRef?: pulumi.Input<inputs.gateway.v1.HTTPRouteStatusParentsParentRef>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface HTTPRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface HTTPRouteStatusParentsParentRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

    }

    export namespace v1alpha1 {
        /**
         * XBackendTrafficPolicy defines the configuration for how traffic to a
         * target backend should be handled.
         */
        export interface XBackendTrafficPolicy {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.x-k8s.io/v1alpha1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"XBackendTrafficPolicy">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpec>;
            status?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicyStatus>;
        }

        /**
         * Spec defines the desired state of BackendTrafficPolicy.
         */
        export interface XBackendTrafficPolicySpec {
            retryConstraint?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecRetryConstraint>;
            sessionPersistence?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecSessionPersistence>;
            /**
             * TargetRefs identifies API object(s) to apply this policy to.
             * Currently, Backends (A grouping of like endpoints such as Service,
             * ServiceImport, or any implementation-specific backendRef) are the only
             * valid API target references.
             *
             * Currently, a TargetRef can not be scoped to a specific port on a
             * Service.
             */
            targetRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecTargetRefs>[]>;
        }

        /**
         * Spec defines the desired state of BackendTrafficPolicy.
         */
        export interface XBackendTrafficPolicySpecPatch {
            retryConstraint?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecRetryConstraintPatch>;
            sessionPersistence?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecSessionPersistencePatch>;
            /**
             * TargetRefs identifies API object(s) to apply this policy to.
             * Currently, Backends (A grouping of like endpoints such as Service,
             * ServiceImport, or any implementation-specific backendRef) are the only
             * valid API target references.
             *
             * Currently, a TargetRef can not be scoped to a specific port on a
             * Service.
             */
            targetRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecTargetRefsPatch>[]>;
        }

        /**
         * RetryConstraint defines the configuration for when to allow or prevent
         * further retries to a target backend, by dynamically calculating a 'retry
         * budget'. This budget is calculated based on the percentage of incoming
         * traffic composed of retries over a given time interval. Once the budget
         * is exceeded, additional retries will be rejected.
         *
         * For example, if the retry budget interval is 10 seconds, there have been
         * 1000 active requests in the past 10 seconds, and the allowed percentage
         * of requests that can be retried is 20% (the default), then 200 of those
         * requests may be composed of retries. Active requests will only be
         * considered for the duration of the interval when calculating the retry
         * budget. Retrying the same original request multiple times within the
         * retry budget interval will lead to each retry being counted towards
         * calculating the budget.
         *
         * Configuring a RetryConstraint in BackendTrafficPolicy is compatible with
         * HTTPRoute Retry settings for each HTTPRouteRule that targets the same
         * backend. While the HTTPRouteRule Retry stanza can specify whether a
         * request will be retried, and the number of retry attempts each client
         * may perform, RetryConstraint helps prevent cascading failures such as
         * retry storms during periods of consistent failures.
         *
         * After the retry budget has been exceeded, additional retries to the
         * backend MUST return a 503 response to the client.
         *
         * Additional configurations for defining a constraint on retries MAY be
         * defined in the future.
         *
         * Support: Extended
         */
        export interface XBackendTrafficPolicySpecRetryConstraint {
            budget?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecRetryConstraintBudget>;
            minRetryRate?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecRetryConstraintMinRetryRate>;
        }

        /**
         * Budget holds the details of the retry budget configuration.
         */
        export interface XBackendTrafficPolicySpecRetryConstraintBudget {
            /**
             * Interval defines the duration in which requests will be considered
             * for calculating the budget for retries.
             *
             * Support: Extended
             */
            interval?: pulumi.Input<string>;
            /**
             * Percent defines the maximum percentage of active requests that may
             * be made up of retries.
             *
             * Support: Extended
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * Budget holds the details of the retry budget configuration.
         */
        export interface XBackendTrafficPolicySpecRetryConstraintBudgetPatch {
            /**
             * Interval defines the duration in which requests will be considered
             * for calculating the budget for retries.
             *
             * Support: Extended
             */
            interval?: pulumi.Input<string>;
            /**
             * Percent defines the maximum percentage of active requests that may
             * be made up of retries.
             *
             * Support: Extended
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * MinRetryRate defines the minimum rate of retries that will be allowable
         * over a specified duration of time.
         *
         * The effective overall minimum rate of retries targeting the backend
         * service may be much higher, as there can be any number of clients which
         * are applying this setting locally.
         *
         * This ensures that requests can still be retried during periods of low
         * traffic, where the budget for retries may be calculated as a very low
         * value.
         *
         * Support: Extended
         */
        export interface XBackendTrafficPolicySpecRetryConstraintMinRetryRate {
            /**
             * Count specifies the number of requests per time interval.
             *
             * Support: Extended
             */
            count?: pulumi.Input<number>;
            /**
             * Interval specifies the divisor of the rate of requests, the amount of
             * time during which the given count of requests occur.
             *
             * Support: Extended
             */
            interval?: pulumi.Input<string>;
        }

        /**
         * MinRetryRate defines the minimum rate of retries that will be allowable
         * over a specified duration of time.
         *
         * The effective overall minimum rate of retries targeting the backend
         * service may be much higher, as there can be any number of clients which
         * are applying this setting locally.
         *
         * This ensures that requests can still be retried during periods of low
         * traffic, where the budget for retries may be calculated as a very low
         * value.
         *
         * Support: Extended
         */
        export interface XBackendTrafficPolicySpecRetryConstraintMinRetryRatePatch {
            /**
             * Count specifies the number of requests per time interval.
             *
             * Support: Extended
             */
            count?: pulumi.Input<number>;
            /**
             * Interval specifies the divisor of the rate of requests, the amount of
             * time during which the given count of requests occur.
             *
             * Support: Extended
             */
            interval?: pulumi.Input<string>;
        }

        /**
         * RetryConstraint defines the configuration for when to allow or prevent
         * further retries to a target backend, by dynamically calculating a 'retry
         * budget'. This budget is calculated based on the percentage of incoming
         * traffic composed of retries over a given time interval. Once the budget
         * is exceeded, additional retries will be rejected.
         *
         * For example, if the retry budget interval is 10 seconds, there have been
         * 1000 active requests in the past 10 seconds, and the allowed percentage
         * of requests that can be retried is 20% (the default), then 200 of those
         * requests may be composed of retries. Active requests will only be
         * considered for the duration of the interval when calculating the retry
         * budget. Retrying the same original request multiple times within the
         * retry budget interval will lead to each retry being counted towards
         * calculating the budget.
         *
         * Configuring a RetryConstraint in BackendTrafficPolicy is compatible with
         * HTTPRoute Retry settings for each HTTPRouteRule that targets the same
         * backend. While the HTTPRouteRule Retry stanza can specify whether a
         * request will be retried, and the number of retry attempts each client
         * may perform, RetryConstraint helps prevent cascading failures such as
         * retry storms during periods of consistent failures.
         *
         * After the retry budget has been exceeded, additional retries to the
         * backend MUST return a 503 response to the client.
         *
         * Additional configurations for defining a constraint on retries MAY be
         * defined in the future.
         *
         * Support: Extended
         */
        export interface XBackendTrafficPolicySpecRetryConstraintPatch {
            budget?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecRetryConstraintBudgetPatch>;
            minRetryRate?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecRetryConstraintMinRetryRatePatch>;
        }

        /**
         * SessionPersistence defines and configures session persistence
         * for the backend.
         *
         * Support: Extended
         */
        export interface XBackendTrafficPolicySpecSessionPersistence {
            /**
             * AbsoluteTimeout defines the absolute timeout of the persistent
             * session. Once the AbsoluteTimeout duration has elapsed, the
             * session becomes invalid.
             *
             * Support: Extended
             */
            absoluteTimeout?: pulumi.Input<string>;
            cookieConfig?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecSessionPersistenceCookieConfig>;
            /**
             * IdleTimeout defines the idle timeout of the persistent session.
             * Once the session has been idle for more than the specified
             * IdleTimeout duration, the session becomes invalid.
             *
             * Support: Extended
             */
            idleTimeout?: pulumi.Input<string>;
            /**
             * SessionName defines the name of the persistent session token
             * which may be reflected in the cookie or the header. Users
             * should avoid reusing session names to prevent unintended
             * consequences, such as rejection or unpredictable behavior.
             *
             * Support: Implementation-specific
             */
            sessionName?: pulumi.Input<string>;
            /**
             * Type defines the type of session persistence such as through
             * the use a header or cookie. Defaults to cookie based session
             * persistence.
             *
             * Support: Core for "Cookie" type
             *
             * Support: Extended for "Header" type
             */
            type?: pulumi.Input<string>;
        }

        /**
         * CookieConfig provides configuration settings that are specific
         * to cookie-based session persistence.
         *
         * Support: Core
         */
        export interface XBackendTrafficPolicySpecSessionPersistenceCookieConfig {
            /**
             * LifetimeType specifies whether the cookie has a permanent or
             * session-based lifetime. A permanent cookie persists until its
             * specified expiry time, defined by the Expires or Max-Age cookie
             * attributes, while a session cookie is deleted when the current
             * session ends.
             *
             * When set to "Permanent", AbsoluteTimeout indicates the
             * cookie's lifetime via the Expires or Max-Age cookie attributes
             * and is required.
             *
             * When set to "Session", AbsoluteTimeout indicates the
             * absolute lifetime of the cookie tracked by the gateway and
             * is optional.
             *
             * Defaults to "Session".
             *
             * Support: Core for "Session" type
             *
             * Support: Extended for "Permanent" type
             */
            lifetimeType?: pulumi.Input<string>;
        }

        /**
         * CookieConfig provides configuration settings that are specific
         * to cookie-based session persistence.
         *
         * Support: Core
         */
        export interface XBackendTrafficPolicySpecSessionPersistenceCookieConfigPatch {
            /**
             * LifetimeType specifies whether the cookie has a permanent or
             * session-based lifetime. A permanent cookie persists until its
             * specified expiry time, defined by the Expires or Max-Age cookie
             * attributes, while a session cookie is deleted when the current
             * session ends.
             *
             * When set to "Permanent", AbsoluteTimeout indicates the
             * cookie's lifetime via the Expires or Max-Age cookie attributes
             * and is required.
             *
             * When set to "Session", AbsoluteTimeout indicates the
             * absolute lifetime of the cookie tracked by the gateway and
             * is optional.
             *
             * Defaults to "Session".
             *
             * Support: Core for "Session" type
             *
             * Support: Extended for "Permanent" type
             */
            lifetimeType?: pulumi.Input<string>;
        }

        /**
         * SessionPersistence defines and configures session persistence
         * for the backend.
         *
         * Support: Extended
         */
        export interface XBackendTrafficPolicySpecSessionPersistencePatch {
            /**
             * AbsoluteTimeout defines the absolute timeout of the persistent
             * session. Once the AbsoluteTimeout duration has elapsed, the
             * session becomes invalid.
             *
             * Support: Extended
             */
            absoluteTimeout?: pulumi.Input<string>;
            cookieConfig?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicySpecSessionPersistenceCookieConfigPatch>;
            /**
             * IdleTimeout defines the idle timeout of the persistent session.
             * Once the session has been idle for more than the specified
             * IdleTimeout duration, the session becomes invalid.
             *
             * Support: Extended
             */
            idleTimeout?: pulumi.Input<string>;
            /**
             * SessionName defines the name of the persistent session token
             * which may be reflected in the cookie or the header. Users
             * should avoid reusing session names to prevent unintended
             * consequences, such as rejection or unpredictable behavior.
             *
             * Support: Implementation-specific
             */
            sessionName?: pulumi.Input<string>;
            /**
             * Type defines the type of session persistence such as through
             * the use a header or cookie. Defaults to cookie based session
             * persistence.
             *
             * Support: Core for "Cookie" type
             *
             * Support: Extended for "Header" type
             */
            type?: pulumi.Input<string>;
        }

        /**
         * LocalPolicyTargetReference identifies an API object to apply a direct or
         * inherited policy to. This should be used as part of Policy resources
         * that can target Gateway API resources. For more information on how this
         * policy attachment model works, and a sample Policy resource, refer to
         * the policy attachment documentation for Gateway API.
         */
        export interface XBackendTrafficPolicySpecTargetRefs {
            /**
             * Group is the group of the target resource.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the target resource.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the target resource.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * LocalPolicyTargetReference identifies an API object to apply a direct or
         * inherited policy to. This should be used as part of Policy resources
         * that can target Gateway API resources. For more information on how this
         * policy attachment model works, and a sample Policy resource, refer to
         * the policy attachment documentation for Gateway API.
         */
        export interface XBackendTrafficPolicySpecTargetRefsPatch {
            /**
             * Group is the group of the target resource.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the target resource.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the target resource.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of BackendTrafficPolicy.
         */
        export interface XBackendTrafficPolicyStatus {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicyStatusAncestors>[]>;
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface XBackendTrafficPolicyStatusAncestors {
            ancestorRef?: pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicyStatusAncestorsAncestorRef>;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XBackendTrafficPolicyStatusAncestorsConditions>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName?: pulumi.Input<string>;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface XBackendTrafficPolicyStatusAncestorsAncestorRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface XBackendTrafficPolicyStatusAncestorsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * XListenerSet defines a set of additional listeners
         * to attach to an existing Gateway.
         */
        export interface XListenerSet {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.x-k8s.io/v1alpha1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"XListenerSet">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpec>;
            status?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetStatus>;
        }

        /**
         * Spec defines the desired state of ListenerSet.
         */
        export interface XListenerSetSpec {
            /**
             * Listeners associated with this ListenerSet. Listeners define
             * logical endpoints that are bound on this referenced parent Gateway's addresses.
             *
             * Listeners in a `Gateway` and their attached `ListenerSets` are concatenated
             * as a list when programming the underlying infrastructure. Each listener
             * name does not need to be unique across the Gateway and ListenerSets.
             * See ListenerEntry.Name for more details.
             *
             * Implementations MUST treat the parent Gateway as having the merged
             * list of all listeners from itself and attached ListenerSets using
             * the following precedence:
             *
             * 1. "parent" Gateway
             * 2. ListenerSet ordered by creation time (oldest first)
             * 3. ListenerSet ordered alphabetically by “{namespace}/{name}”.
             *
             * An implementation MAY reject listeners by setting the ListenerEntryStatus
             * `Accepted`` condition to False with the Reason `TooManyListeners`
             *
             * If a listener has a conflict, this will be reported in the
             * Status.ListenerEntryStatus setting the `Conflicted` condition to True.
             *
             * Implementations SHOULD be cautious about what information from the
             * parent or siblings are reported to avoid accidentally leaking
             * sensitive information that the child would not otherwise have access
             * to. This can include contents of secrets etc.
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListeners>[]>;
            parentRef?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecParentRef>;
        }

        export interface XListenerSetSpecListeners {
            allowedRoutes?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersAllowedRoutes>;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that
             * define this concept. When unspecified, all hostnames are matched. This
             * field is ignored for protocols that don't require hostname based
             * matching.
             *
             * Implementations MUST apply Hostname matching appropriately for each of
             * the following protocols:
             *
             * * TLS: The Listener Hostname MUST match the SNI.
             * * HTTP: The Listener Hostname MUST match the Host header of the request.
             * * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP
             *   protocol layers as described above. If an implementation does not
             *   ensure that both the SNI and Host header match the Listener hostname,
             *   it MUST clearly document that.
             *
             * For HTTPRoute and TLSRoute resources, there is an interaction with the
             * `spec.hostnames` array. When both listener and route specify hostnames,
             * there MUST be an intersection between the values for a Route to be
             * accepted. For more information, refer to the Route specific Hostnames
             * documentation.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             */
            hostname?: pulumi.Input<string>;
            /**
             * Name is the name of the Listener. This name MUST be unique within a
             * ListenerSet.
             *
             * Name is not required to be unique across a Gateway and ListenerSets.
             * Routes can attach to a Listener by having a ListenerSet as a parentRef
             * and setting the SectionName
             */
            name?: pulumi.Input<string>;
            /**
             * Port is the network port. Multiple listeners may use the
             * same port, subject to the Listener compatibility rules.
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol specifies the network protocol this listener expects to receive.
             */
            protocol?: pulumi.Input<string>;
            tls?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersTls>;
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a
         * Listener and the trusted namespaces where those Route resources MAY be
         * present.
         *
         * Although a client request may match multiple route rules, only one rule
         * may ultimately receive the request. Matching precedence MUST be
         * determined in order of the following criteria:
         *
         * * The most specific match as defined by the Route type.
         * * The oldest Route based on creation timestamp. For example, a Route with
         *   a creation timestamp of "2020-09-08 01:02:03" is given precedence over
         *   a Route with a creation timestamp of "2020-09-08 01:02:04".
         * * If everything else is equivalent, the Route appearing first in
         *   alphabetical order (namespace/name) should be given precedence. For
         *   example, foo/bar is given precedence over foo/baz.
         *
         * All valid rules within a Route attached to this Listener should be
         * implemented. Invalid Route rules can be ignored (sometimes that will mean
         * the full Route). If a Route rule transitions from valid to invalid,
         * support for that Route rule should be dropped to ensure consistency. For
         * example, even if a filter specified by a Route rule is invalid, the rest
         * of the rules within that Route should still be supported.
         */
        export interface XListenerSetSpecListenersAllowedRoutes {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind
             * to this Gateway Listener. When unspecified or empty, the kinds of Routes
             * selected are determined using the Listener protocol.
             *
             * A RouteGroupKind MUST correspond to kinds of Routes that are compatible
             * with the application protocol specified in the Listener's Protocol field.
             * If an implementation does not support or recognize this resource type, it
             * MUST set the "ResolvedRefs" condition to False for this Listener with the
             * "InvalidRouteKinds" reason.
             *
             * Support: Core
             */
            kinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersAllowedRoutesKinds>[]>;
            namespaces?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersAllowedRoutesNamespaces>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface XListenerSetSpecListenersAllowedRoutesKinds {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind?: pulumi.Input<string>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface XListenerSetSpecListenersAllowedRoutesKindsPatch {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind?: pulumi.Input<string>;
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this
         * Listener. This is restricted to the namespace of this Gateway by default.
         *
         * Support: Core
         */
        export interface XListenerSetSpecListenersAllowedRoutesNamespaces {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible
             * values are:
             *
             * * All: Routes in all namespaces may be used by this Gateway.
             * * Selector: Routes in namespaces selected by the selector may be used by
             *   this Gateway.
             * * Same: Only Routes in the same namespace may be used by this Gateway.
             *
             * Support: Core
             */
            from?: pulumi.Input<string>;
            selector?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersAllowedRoutesNamespacesSelector>;
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this
         * Listener. This is restricted to the namespace of this Gateway by default.
         *
         * Support: Core
         */
        export interface XListenerSetSpecListenersAllowedRoutesNamespacesPatch {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible
             * values are:
             *
             * * All: Routes in all namespaces may be used by this Gateway.
             * * Selector: Routes in namespaces selected by the selector may be used by
             *   this Gateway.
             * * Same: Only Routes in the same namespace may be used by this Gateway.
             *
             * Support: Core
             */
            from?: pulumi.Input<string>;
            selector?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersAllowedRoutesNamespacesSelectorPatch>;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only Routes in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         *
         * Support: Core
         */
        export interface XListenerSetSpecListenersAllowedRoutesNamespacesSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersAllowedRoutesNamespacesSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface XListenerSetSpecListenersAllowedRoutesNamespacesSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface XListenerSetSpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only Routes in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         *
         * Support: Core
         */
        export interface XListenerSetSpecListenersAllowedRoutesNamespacesSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a
         * Listener and the trusted namespaces where those Route resources MAY be
         * present.
         *
         * Although a client request may match multiple route rules, only one rule
         * may ultimately receive the request. Matching precedence MUST be
         * determined in order of the following criteria:
         *
         * * The most specific match as defined by the Route type.
         * * The oldest Route based on creation timestamp. For example, a Route with
         *   a creation timestamp of "2020-09-08 01:02:03" is given precedence over
         *   a Route with a creation timestamp of "2020-09-08 01:02:04".
         * * If everything else is equivalent, the Route appearing first in
         *   alphabetical order (namespace/name) should be given precedence. For
         *   example, foo/bar is given precedence over foo/baz.
         *
         * All valid rules within a Route attached to this Listener should be
         * implemented. Invalid Route rules can be ignored (sometimes that will mean
         * the full Route). If a Route rule transitions from valid to invalid,
         * support for that Route rule should be dropped to ensure consistency. For
         * example, even if a filter specified by a Route rule is invalid, the rest
         * of the rules within that Route should still be supported.
         */
        export interface XListenerSetSpecListenersAllowedRoutesPatch {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind
             * to this Gateway Listener. When unspecified or empty, the kinds of Routes
             * selected are determined using the Listener protocol.
             *
             * A RouteGroupKind MUST correspond to kinds of Routes that are compatible
             * with the application protocol specified in the Listener's Protocol field.
             * If an implementation does not support or recognize this resource type, it
             * MUST set the "ResolvedRefs" condition to False for this Listener with the
             * "InvalidRouteKinds" reason.
             *
             * Support: Core
             */
            kinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersAllowedRoutesKindsPatch>[]>;
            namespaces?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersAllowedRoutesNamespacesPatch>;
        }

        export interface XListenerSetSpecListenersPatch {
            allowedRoutes?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersAllowedRoutesPatch>;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that
             * define this concept. When unspecified, all hostnames are matched. This
             * field is ignored for protocols that don't require hostname based
             * matching.
             *
             * Implementations MUST apply Hostname matching appropriately for each of
             * the following protocols:
             *
             * * TLS: The Listener Hostname MUST match the SNI.
             * * HTTP: The Listener Hostname MUST match the Host header of the request.
             * * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP
             *   protocol layers as described above. If an implementation does not
             *   ensure that both the SNI and Host header match the Listener hostname,
             *   it MUST clearly document that.
             *
             * For HTTPRoute and TLSRoute resources, there is an interaction with the
             * `spec.hostnames` array. When both listener and route specify hostnames,
             * there MUST be an intersection between the values for a Route to be
             * accepted. For more information, refer to the Route specific Hostnames
             * documentation.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             */
            hostname?: pulumi.Input<string>;
            /**
             * Name is the name of the Listener. This name MUST be unique within a
             * ListenerSet.
             *
             * Name is not required to be unique across a Gateway and ListenerSets.
             * Routes can attach to a Listener by having a ListenerSet as a parentRef
             * and setting the SectionName
             */
            name?: pulumi.Input<string>;
            /**
             * Port is the network port. Multiple listeners may use the
             * same port, subject to the Listener compatibility rules.
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol specifies the network protocol this listener expects to receive.
             */
            protocol?: pulumi.Input<string>;
            tls?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersTlsPatch>;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if
         * the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
         * if the Protocol field is "HTTP", "TCP", or "UDP".
         *
         * The association of SNIs to Certificate defined in GatewayTLSConfig is
         * defined based on the Hostname field for this listener.
         *
         * The GatewayClass MUST use the longest matching SNI out of all
         * available certificates for any TLS handshake.
         */
        export interface XListenerSetSpecListenersTls {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that
             * contains TLS certificates and private keys. These certificates are used to
             * establish a TLS handshake for requests that match the hostname of the
             * associated listener.
             *
             * A single CertificateRef to a Kubernetes Secret has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             *
             * This field is required to have at least one element when the mode is set
             * to "Terminate" (default) and is optional otherwise.
             *
             * CertificateRefs can reference to standard Kubernetes resources, i.e.
             * Secret, or implementation-specific custom resources.
             *
             * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
             *
             * Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersTlsCertificateRefs>[]>;
            frontendValidation?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersTlsFrontendValidation>;
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client.
             * There are two possible modes:
             *
             * - Terminate: The TLS session between the downstream client and the
             *   Gateway is terminated at the Gateway. This mode requires certificates
             *   to be specified in some way, such as populating the certificateRefs
             *   field.
             * - Passthrough: The TLS session is NOT terminated by the Gateway. This
             *   implies that the Gateway can't decipher the TLS stream except for
             *   the ClientHello message of the TLS protocol. The certificateRefs field
             *   is ignored in this mode.
             *
             * Support: Core
             */
            mode?: pulumi.Input<string>;
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface XListenerSetSpecListenersTlsCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface XListenerSetSpecListenersTlsCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * FrontendValidation holds configuration information for validating the frontend (client).
         * Setting this field will require clients to send a client certificate
         * required for validation during the TLS handshake. In browsers this may result in a dialog appearing
         * that requests a user to specify the client certificate.
         * The maximum depth of a certificate chain accepted in verification is Implementation specific.
         *
         * Support: Extended
         */
        export interface XListenerSetSpecListenersTlsFrontendValidation {
            /**
             * CACertificateRefs contains one or more references to
             * Kubernetes objects that contain TLS certificates of
             * the Certificate Authorities that can be used
             * as a trust anchor to validate the certificates presented by the client.
             *
             * A single CA certificate reference to a Kubernetes ConfigMap
             * has "Core" support.
             * Implementations MAY choose to support attaching multiple CA certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * Support: Core - A single reference to a Kubernetes ConfigMap
             * with the CA certificate in a key named `ca.crt`.
             *
             * Support: Implementation-specific (More than one reference, or other kinds
             * of resources).
             *
             * References to a resource in a different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             */
            caCertificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersTlsFrontendValidationCaCertificateRefs>[]>;
        }

        /**
         * ObjectReference identifies an API object including its namespace.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface XListenerSetSpecListenersTlsFrontendValidationCaCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When set to the empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "ConfigMap" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ObjectReference identifies an API object including its namespace.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface XListenerSetSpecListenersTlsFrontendValidationCaCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When set to the empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "ConfigMap" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * FrontendValidation holds configuration information for validating the frontend (client).
         * Setting this field will require clients to send a client certificate
         * required for validation during the TLS handshake. In browsers this may result in a dialog appearing
         * that requests a user to specify the client certificate.
         * The maximum depth of a certificate chain accepted in verification is Implementation specific.
         *
         * Support: Extended
         */
        export interface XListenerSetSpecListenersTlsFrontendValidationPatch {
            /**
             * CACertificateRefs contains one or more references to
             * Kubernetes objects that contain TLS certificates of
             * the Certificate Authorities that can be used
             * as a trust anchor to validate the certificates presented by the client.
             *
             * A single CA certificate reference to a Kubernetes ConfigMap
             * has "Core" support.
             * Implementations MAY choose to support attaching multiple CA certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * Support: Core - A single reference to a Kubernetes ConfigMap
             * with the CA certificate in a key named `ca.crt`.
             *
             * Support: Implementation-specific (More than one reference, or other kinds
             * of resources).
             *
             * References to a resource in a different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             */
            caCertificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersTlsFrontendValidationCaCertificateRefsPatch>[]>;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if
         * the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
         * if the Protocol field is "HTTP", "TCP", or "UDP".
         *
         * The association of SNIs to Certificate defined in GatewayTLSConfig is
         * defined based on the Hostname field for this listener.
         *
         * The GatewayClass MUST use the longest matching SNI out of all
         * available certificates for any TLS handshake.
         */
        export interface XListenerSetSpecListenersTlsPatch {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that
             * contains TLS certificates and private keys. These certificates are used to
             * establish a TLS handshake for requests that match the hostname of the
             * associated listener.
             *
             * A single CertificateRef to a Kubernetes Secret has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             *
             * This field is required to have at least one element when the mode is set
             * to "Terminate" (default) and is optional otherwise.
             *
             * CertificateRefs can reference to standard Kubernetes resources, i.e.
             * Secret, or implementation-specific custom resources.
             *
             * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
             *
             * Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersTlsCertificateRefsPatch>[]>;
            frontendValidation?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersTlsFrontendValidationPatch>;
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client.
             * There are two possible modes:
             *
             * - Terminate: The TLS session between the downstream client and the
             *   Gateway is terminated at the Gateway. This mode requires certificates
             *   to be specified in some way, such as populating the certificateRefs
             *   field.
             * - Passthrough: The TLS session is NOT terminated by the Gateway. This
             *   implies that the Gateway can't decipher the TLS stream except for
             *   the ClientHello message of the TLS protocol. The certificateRefs field
             *   is ignored in this mode.
             *
             * Support: Core
             */
            mode?: pulumi.Input<string>;
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * ParentRef references the Gateway that the listeners are attached to.
         */
        export interface XListenerSetSpecParentRef {
            /**
             * Group is the group of the referent.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Gateway".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent.  If not present,
             * the namespace of the referent is assumed to be the same as
             * the namespace of the referring object.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ParentRef references the Gateway that the listeners are attached to.
         */
        export interface XListenerSetSpecParentRefPatch {
            /**
             * Group is the group of the referent.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Gateway".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent.  If not present,
             * the namespace of the referent is assumed to be the same as
             * the namespace of the referring object.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of ListenerSet.
         */
        export interface XListenerSetSpecPatch {
            /**
             * Listeners associated with this ListenerSet. Listeners define
             * logical endpoints that are bound on this referenced parent Gateway's addresses.
             *
             * Listeners in a `Gateway` and their attached `ListenerSets` are concatenated
             * as a list when programming the underlying infrastructure. Each listener
             * name does not need to be unique across the Gateway and ListenerSets.
             * See ListenerEntry.Name for more details.
             *
             * Implementations MUST treat the parent Gateway as having the merged
             * list of all listeners from itself and attached ListenerSets using
             * the following precedence:
             *
             * 1. "parent" Gateway
             * 2. ListenerSet ordered by creation time (oldest first)
             * 3. ListenerSet ordered alphabetically by “{namespace}/{name}”.
             *
             * An implementation MAY reject listeners by setting the ListenerEntryStatus
             * `Accepted`` condition to False with the Reason `TooManyListeners`
             *
             * If a listener has a conflict, this will be reported in the
             * Status.ListenerEntryStatus setting the `Conflicted` condition to True.
             *
             * Implementations SHOULD be cautious about what information from the
             * parent or siblings are reported to avoid accidentally leaking
             * sensitive information that the child would not otherwise have access
             * to. This can include contents of secrets etc.
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecListenersPatch>[]>;
            parentRef?: pulumi.Input<inputs.gateway.v1alpha1.XListenerSetSpecParentRefPatch>;
        }

        /**
         * Status defines the current state of ListenerSet.
         */
        export interface XListenerSetStatus {
            /**
             * Conditions describe the current conditions of the ListenerSet.
             *
             * Implementations MUST express ListenerSet conditions using the
             * `ListenerSetConditionType` and `ListenerSetConditionReason`
             * constants so that operators and tools can converge on a common
             * vocabulary to describe ListenerSet state.
             *
             * Known condition types are:
             *
             * * "Accepted"
             * * "Programmed"
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetStatusConditions>[]>;
            /**
             * Listeners provide status for each unique listener port defined in the Spec.
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetStatusListeners>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface XListenerSetStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ListenerStatus is the status associated with a Listener.
         */
        export interface XListenerSetStatusListeners {
            /**
             * AttachedRoutes represents the total number of Routes that have been
             * successfully attached to this Listener.
             *
             * Successful attachment of a Route to a Listener is based solely on the
             * combination of the AllowedRoutes field on the corresponding Listener
             * and the Route's ParentRefs field. A Route is successfully attached to
             * a Listener when it is selected by the Listener's AllowedRoutes field
             * AND the Route has a valid ParentRef selecting the whole Gateway
             * resource or a specific Listener as a parent resource (more detail on
             * attachment semantics can be found in the documentation on the various
             * Route kinds ParentRefs fields). Listener or Route status does not impact
             * successful attachment, i.e. the AttachedRoutes field count MUST be set
             * for Listeners with condition Accepted: false and MUST count successfully
             * attached Routes that may themselves have Accepted: false conditions.
             *
             * Uses for this field include troubleshooting Route attachment and
             * measuring blast radius/impact of changes to a Listener.
             */
            attachedRoutes?: pulumi.Input<number>;
            /**
             * Conditions describe the current condition of this listener.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetStatusListenersConditions>[]>;
            /**
             * Name is the name of the Listener that this status corresponds to.
             */
            name?: pulumi.Input<string>;
            /**
             * Port is the network port the listener is configured to listen on.
             */
            port?: pulumi.Input<number>;
            /**
             * SupportedKinds is the list indicating the Kinds supported by this
             * listener. This MUST represent the kinds an implementation supports for
             * that Listener configuration.
             *
             * If kinds are specified in Spec that are not supported, they MUST NOT
             * appear in this list and an implementation MUST set the "ResolvedRefs"
             * condition to "False" with the "InvalidRouteKinds" reason. If both valid
             * and invalid Route kinds are specified, the implementation MUST
             * reference the valid Route kinds that have been specified.
             */
            supportedKinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha1.XListenerSetStatusListenersSupportedKinds>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface XListenerSetStatusListenersConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface XListenerSetStatusListenersSupportedKinds {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind?: pulumi.Input<string>;
        }

    }

    export namespace v1alpha2 {
        /**
         * TCPRoute provides a way to route TCP requests. When combined with a Gateway
         * listener, it can be used to forward connections on the port specified by the
         * listener to a set of backends specified by the TCPRoute.
         */
        export interface TCPRoute {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1alpha2">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"TCPRoute">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1alpha2.TCPRouteSpec>;
            status?: pulumi.Input<inputs.gateway.v1alpha2.TCPRouteStatus>;
        }

        /**
         * Spec defines the desired state of TCPRoute.
         */
        export interface TCPRouteSpec {
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteSpecParentRefs>[]>;
            /**
             * Rules are a list of TCP matchers and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteSpecRules>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface TCPRouteSpecParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface TCPRouteSpecParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of TCPRoute.
         */
        export interface TCPRouteSpecPatch {
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteSpecParentRefsPatch>[]>;
            /**
             * Rules are a list of TCP matchers and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteSpecRulesPatch>[]>;
        }

        /**
         * TCPRouteRule is the configuration for a given rule.
         */
        export interface TCPRouteSpecRules {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent. If unspecified or invalid (refers to a nonexistent resource or a
             * Service with no endpoints), the underlying implementation MUST actively
             * reject connection attempts to this backend. Connection rejections must
             * respect weight; if an invalid backend is requested to have 80% of
             * connections, then 80% of connections must be rejected instead.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Extended
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteSpecRulesBackendRefs>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
        }

        /**
         * BackendRef defines how a Route should forward a request to a Kubernetes
         * resource.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         *
         * Note that when the BackendTLSPolicy object is enabled by the implementation,
         * there are some extra rules about validity to consider here. See the fields
         * where this struct is used for more information about the exact behavior.
         */
        export interface TCPRouteSpecRulesBackendRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * BackendRef defines how a Route should forward a request to a Kubernetes
         * resource.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         *
         * Note that when the BackendTLSPolicy object is enabled by the implementation,
         * there are some extra rules about validity to consider here. See the fields
         * where this struct is used for more information about the exact behavior.
         */
        export interface TCPRouteSpecRulesBackendRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * TCPRouteRule is the configuration for a given rule.
         */
        export interface TCPRouteSpecRulesPatch {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent. If unspecified or invalid (refers to a nonexistent resource or a
             * Service with no endpoints), the underlying implementation MUST actively
             * reject connection attempts to this backend. Connection rejections must
             * respect weight; if an invalid backend is requested to have 80% of
             * connections, then 80% of connections must be rejected instead.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Extended
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteSpecRulesBackendRefsPatch>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of TCPRoute.
         */
        export interface TCPRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteStatusParents>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface TCPRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a nonexistent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TCPRouteStatusParentsConditions>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName?: pulumi.Input<string>;
            parentRef?: pulumi.Input<inputs.gateway.v1alpha2.TCPRouteStatusParentsParentRef>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface TCPRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface TCPRouteStatusParentsParentRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * The TLSRoute resource is similar to TCPRoute, but can be configured
         * to match against TLS-specific metadata. This allows more flexibility
         * in matching streams for a given TLS listener.
         *
         * If you need to forward traffic to a single target for a TLS listener, you
         * could choose to use a TCPRoute with a TLS listener.
         */
        export interface TLSRoute {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1alpha2">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"TLSRoute">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1alpha2.TLSRouteSpec>;
            status?: pulumi.Input<inputs.gateway.v1alpha2.TLSRouteStatus>;
        }

        /**
         * Spec defines the desired state of TLSRoute.
         */
        export interface TLSRouteSpec {
            /**
             * Hostnames defines a set of SNI names that should match against the
             * SNI attribute of TLS ClientHello message in TLS handshake. This matches
             * the RFC 1123 definition of a hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed in SNI names per RFC 6066.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label must appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and TLSRoute, there
             * must be at least one intersecting hostname for the TLSRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches TLSRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches TLSRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `test.example.com` and `*.example.com` would both match. On the other
             *   hand, `example.com` and `test.example.net` would not match.
             *
             * If both the Listener and TLSRoute have specified hostnames, any
             * TLSRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * TLSRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` must not be considered for a match.
             *
             * If both the Listener and TLSRoute have specified hostnames, and none
             * match with the criteria above, then the TLSRoute is not accepted. The
             * implementation must raise an 'Accepted' Condition with a status of
             * `False` in the corresponding RouteParentStatus.
             *
             * Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteSpecParentRefs>[]>;
            /**
             * Rules are a list of TLS matchers and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteSpecRules>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface TLSRouteSpecParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface TLSRouteSpecParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of TLSRoute.
         */
        export interface TLSRouteSpecPatch {
            /**
             * Hostnames defines a set of SNI names that should match against the
             * SNI attribute of TLS ClientHello message in TLS handshake. This matches
             * the RFC 1123 definition of a hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed in SNI names per RFC 6066.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label must appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and TLSRoute, there
             * must be at least one intersecting hostname for the TLSRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches TLSRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches TLSRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `test.example.com` and `*.example.com` would both match. On the other
             *   hand, `example.com` and `test.example.net` would not match.
             *
             * If both the Listener and TLSRoute have specified hostnames, any
             * TLSRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * TLSRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` must not be considered for a match.
             *
             * If both the Listener and TLSRoute have specified hostnames, and none
             * match with the criteria above, then the TLSRoute is not accepted. The
             * implementation must raise an 'Accepted' Condition with a status of
             * `False` in the corresponding RouteParentStatus.
             *
             * Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteSpecParentRefsPatch>[]>;
            /**
             * Rules are a list of TLS matchers and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteSpecRulesPatch>[]>;
        }

        /**
         * TLSRouteRule is the configuration for a given rule.
         */
        export interface TLSRouteSpecRules {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent. If unspecified or invalid (refers to a nonexistent resource or
             * a Service with no endpoints), the rule performs no forwarding; if no
             * filters are specified that would result in a response being sent, the
             * underlying implementation must actively reject request attempts to this
             * backend, by rejecting the connection or returning a 500 status code.
             * Request rejections must respect weight; if an invalid backend is
             * requested to have 80% of requests, then 80% of requests must be rejected
             * instead.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Extended
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteSpecRulesBackendRefs>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
        }

        /**
         * BackendRef defines how a Route should forward a request to a Kubernetes
         * resource.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         *
         * Note that when the BackendTLSPolicy object is enabled by the implementation,
         * there are some extra rules about validity to consider here. See the fields
         * where this struct is used for more information about the exact behavior.
         */
        export interface TLSRouteSpecRulesBackendRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * BackendRef defines how a Route should forward a request to a Kubernetes
         * resource.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         *
         * Note that when the BackendTLSPolicy object is enabled by the implementation,
         * there are some extra rules about validity to consider here. See the fields
         * where this struct is used for more information about the exact behavior.
         */
        export interface TLSRouteSpecRulesBackendRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * TLSRouteRule is the configuration for a given rule.
         */
        export interface TLSRouteSpecRulesPatch {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent. If unspecified or invalid (refers to a nonexistent resource or
             * a Service with no endpoints), the rule performs no forwarding; if no
             * filters are specified that would result in a response being sent, the
             * underlying implementation must actively reject request attempts to this
             * backend, by rejecting the connection or returning a 500 status code.
             * Request rejections must respect weight; if an invalid backend is
             * requested to have 80% of requests, then 80% of requests must be rejected
             * instead.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Extended
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteSpecRulesBackendRefsPatch>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of TLSRoute.
         */
        export interface TLSRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteStatusParents>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface TLSRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a nonexistent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.TLSRouteStatusParentsConditions>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName?: pulumi.Input<string>;
            parentRef?: pulumi.Input<inputs.gateway.v1alpha2.TLSRouteStatusParentsParentRef>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface TLSRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface TLSRouteStatusParentsParentRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * UDPRoute provides a way to route UDP traffic. When combined with a Gateway
         * listener, it can be used to forward traffic on the port specified by the
         * listener to a set of backends specified by the UDPRoute.
         */
        export interface UDPRoute {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1alpha2">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"UDPRoute">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1alpha2.UDPRouteSpec>;
            status?: pulumi.Input<inputs.gateway.v1alpha2.UDPRouteStatus>;
        }

        /**
         * Spec defines the desired state of UDPRoute.
         */
        export interface UDPRouteSpec {
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteSpecParentRefs>[]>;
            /**
             * Rules are a list of UDP matchers and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteSpecRules>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface UDPRouteSpecParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface UDPRouteSpecParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of UDPRoute.
         */
        export interface UDPRouteSpecPatch {
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteSpecParentRefsPatch>[]>;
            /**
             * Rules are a list of UDP matchers and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteSpecRulesPatch>[]>;
        }

        /**
         * UDPRouteRule is the configuration for a given rule.
         */
        export interface UDPRouteSpecRules {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent. If unspecified or invalid (refers to a nonexistent resource or a
             * Service with no endpoints), the underlying implementation MUST actively
             * reject connection attempts to this backend. Packet drops must
             * respect weight; if an invalid backend is requested to have 80% of
             * the packets, then 80% of packets must be dropped instead.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Extended
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteSpecRulesBackendRefs>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
        }

        /**
         * BackendRef defines how a Route should forward a request to a Kubernetes
         * resource.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         *
         * Note that when the BackendTLSPolicy object is enabled by the implementation,
         * there are some extra rules about validity to consider here. See the fields
         * where this struct is used for more information about the exact behavior.
         */
        export interface UDPRouteSpecRulesBackendRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * BackendRef defines how a Route should forward a request to a Kubernetes
         * resource.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         *
         *
         * Note that when the BackendTLSPolicy object is enabled by the implementation,
         * there are some extra rules about validity to consider here. See the fields
         * where this struct is used for more information about the exact behavior.
         */
        export interface UDPRouteSpecRulesBackendRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * UDPRouteRule is the configuration for a given rule.
         */
        export interface UDPRouteSpecRulesPatch {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent. If unspecified or invalid (refers to a nonexistent resource or a
             * Service with no endpoints), the underlying implementation MUST actively
             * reject connection attempts to this backend. Packet drops must
             * respect weight; if an invalid backend is requested to have 80% of
             * the packets, then 80% of packets must be dropped instead.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Extended
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteSpecRulesBackendRefsPatch>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of UDPRoute.
         */
        export interface UDPRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteStatusParents>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface UDPRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a nonexistent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha2.UDPRouteStatusParentsConditions>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName?: pulumi.Input<string>;
            parentRef?: pulumi.Input<inputs.gateway.v1alpha2.UDPRouteStatusParentsParentRef>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface UDPRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface UDPRouteStatusParentsParentRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

    }

    export namespace v1alpha3 {
        /**
         * BackendTLSPolicy provides a way to configure how a Gateway
         * connects to a Backend via TLS.
         */
        export interface BackendTLSPolicy {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1alpha3">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"BackendTLSPolicy">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicySpec>;
            status?: pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicyStatus>;
        }

        /**
         * Spec defines the desired state of BackendTLSPolicy.
         */
        export interface BackendTLSPolicySpec {
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * TargetRefs identifies an API object to apply the policy to.
             * Only Services have Extended support. Implementations MAY support
             * additional objects, with Implementation Specific support.
             * Note that this config applies to the entire referenced resource
             * by default, but this default may change in the future to provide
             * a more granular application of the policy.
             *
             * TargetRefs must be _distinct_. This means either that:
             *
             * * They select different targets. If this is the case, then targetRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, and `name` must
             *   be unique across all targetRef entries in the BackendTLSPolicy.
             * * They select different sectionNames in the same target.
             *
             * Support: Extended for Kubernetes Service
             *
             * Support: Implementation-specific for any other resource
             */
            targetRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicySpecTargetRefs>[]>;
            validation?: pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicySpecValidation>;
        }

        /**
         * Spec defines the desired state of BackendTLSPolicy.
         */
        export interface BackendTLSPolicySpecPatch {
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * TargetRefs identifies an API object to apply the policy to.
             * Only Services have Extended support. Implementations MAY support
             * additional objects, with Implementation Specific support.
             * Note that this config applies to the entire referenced resource
             * by default, but this default may change in the future to provide
             * a more granular application of the policy.
             *
             * TargetRefs must be _distinct_. This means either that:
             *
             * * They select different targets. If this is the case, then targetRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, and `name` must
             *   be unique across all targetRef entries in the BackendTLSPolicy.
             * * They select different sectionNames in the same target.
             *
             * Support: Extended for Kubernetes Service
             *
             * Support: Implementation-specific for any other resource
             */
            targetRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicySpecTargetRefsPatch>[]>;
            validation?: pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicySpecValidationPatch>;
        }

        /**
         * LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
         * direct policy to. This should be used as part of Policy resources that can
         * target single resources. For more information on how this policy attachment
         * mode works, and a sample Policy resource, refer to the policy attachment
         * documentation for Gateway API.
         *
         * Note: This should only be used for direct policy attachment when references
         * to SectionName are actually needed. In all other cases,
         * LocalPolicyTargetReference should be used.
         */
        export interface BackendTLSPolicySpecTargetRefs {
            /**
             * Group is the group of the target resource.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the target resource.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the target resource.
             */
            name?: pulumi.Input<string>;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * LocalPolicyTargetReferenceWithSectionName identifies an API object to apply a
         * direct policy to. This should be used as part of Policy resources that can
         * target single resources. For more information on how this policy attachment
         * mode works, and a sample Policy resource, refer to the policy attachment
         * documentation for Gateway API.
         *
         * Note: This should only be used for direct policy attachment when references
         * to SectionName are actually needed. In all other cases,
         * LocalPolicyTargetReference should be used.
         */
        export interface BackendTLSPolicySpecTargetRefsPatch {
            /**
             * Group is the group of the target resource.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the target resource.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the target resource.
             */
            name?: pulumi.Input<string>;
            /**
             * SectionName is the name of a section within the target resource. When
             * unspecified, this targetRef targets the entire resource. In the following
             * resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name
             * * HTTPRoute: HTTPRouteRule name
             * * Service: Port name
             *
             * If a SectionName is specified, but does not exist on the targeted object,
             * the Policy must fail to attach, and the policy implementation should record
             * a `ResolvedRefs` or similar Condition in the Policy's status.
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * Validation contains backend TLS validation configuration.
         */
        export interface BackendTLSPolicySpecValidation {
            /**
             * CACertificateRefs contains one or more references to Kubernetes objects that
             * contain a PEM-encoded TLS CA certificate bundle, which is used to
             * validate a TLS handshake between the Gateway and backend Pod.
             *
             * If CACertificateRefs is empty or unspecified, then WellKnownCACertificates must be
             * specified. Only one of CACertificateRefs or WellKnownCACertificates may be specified,
             * not both. If CACertificateRefs is empty or unspecified, the configuration for
             * WellKnownCACertificates MUST be honored instead if supported by the implementation.
             *
             * References to a resource in a different namespace are invalid for the
             * moment, although we will revisit this in the future.
             *
             * A single CACertificateRef to a Kubernetes ConfigMap kind has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a backend, but this behavior is implementation-specific.
             *
             * Support: Core - An optional single reference to a Kubernetes ConfigMap,
             * with the CA certificate in a key named `ca.crt`.
             *
             * Support: Implementation-specific (More than one reference, or other kinds
             * of resources).
             */
            caCertificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicySpecValidationCaCertificateRefs>[]>;
            /**
             * Hostname is used for two purposes in the connection between Gateways and
             * backends:
             *
             * 1. Hostname MUST be used as the SNI to connect to the backend (RFC 6066).
             * 2. Hostname MUST be used for authentication and MUST match the certificate served by the matching backend, unless SubjectAltNames is specified.
             *    authentication and MUST match the certificate served by the matching
             *    backend.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * SubjectAltNames contains one or more Subject Alternative Names.
             * When specified the certificate served from the backend MUST
             * have at least one Subject Alternate Name matching one of the specified SubjectAltNames.
             *
             * Support: Extended
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicySpecValidationSubjectAltNames>[]>;
            /**
             * WellKnownCACertificates specifies whether system CA certificates may be used in
             * the TLS handshake between the gateway and backend pod.
             *
             * If WellKnownCACertificates is unspecified or empty (""), then CACertificateRefs
             * must be specified with at least one entry for a valid configuration. Only one of
             * CACertificateRefs or WellKnownCACertificates may be specified, not both. If an
             * implementation does not support the WellKnownCACertificates field or the value
             * supplied is not supported, the Status Conditions on the Policy MUST be
             * updated to include an Accepted: False Condition with Reason: Invalid.
             *
             * Support: Implementation-specific
             */
            wellKnownCACertificates?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference identifies an API object within the namespace of the
         * referrer.
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface BackendTLSPolicySpecValidationCaCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference identifies an API object within the namespace of the
         * referrer.
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface BackendTLSPolicySpecValidationCaCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Validation contains backend TLS validation configuration.
         */
        export interface BackendTLSPolicySpecValidationPatch {
            /**
             * CACertificateRefs contains one or more references to Kubernetes objects that
             * contain a PEM-encoded TLS CA certificate bundle, which is used to
             * validate a TLS handshake between the Gateway and backend Pod.
             *
             * If CACertificateRefs is empty or unspecified, then WellKnownCACertificates must be
             * specified. Only one of CACertificateRefs or WellKnownCACertificates may be specified,
             * not both. If CACertificateRefs is empty or unspecified, the configuration for
             * WellKnownCACertificates MUST be honored instead if supported by the implementation.
             *
             * References to a resource in a different namespace are invalid for the
             * moment, although we will revisit this in the future.
             *
             * A single CACertificateRef to a Kubernetes ConfigMap kind has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a backend, but this behavior is implementation-specific.
             *
             * Support: Core - An optional single reference to a Kubernetes ConfigMap,
             * with the CA certificate in a key named `ca.crt`.
             *
             * Support: Implementation-specific (More than one reference, or other kinds
             * of resources).
             */
            caCertificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicySpecValidationCaCertificateRefsPatch>[]>;
            /**
             * Hostname is used for two purposes in the connection between Gateways and
             * backends:
             *
             * 1. Hostname MUST be used as the SNI to connect to the backend (RFC 6066).
             * 2. Hostname MUST be used for authentication and MUST match the certificate served by the matching backend, unless SubjectAltNames is specified.
             *    authentication and MUST match the certificate served by the matching
             *    backend.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * SubjectAltNames contains one or more Subject Alternative Names.
             * When specified the certificate served from the backend MUST
             * have at least one Subject Alternate Name matching one of the specified SubjectAltNames.
             *
             * Support: Extended
             */
            subjectAltNames?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicySpecValidationSubjectAltNamesPatch>[]>;
            /**
             * WellKnownCACertificates specifies whether system CA certificates may be used in
             * the TLS handshake between the gateway and backend pod.
             *
             * If WellKnownCACertificates is unspecified or empty (""), then CACertificateRefs
             * must be specified with at least one entry for a valid configuration. Only one of
             * CACertificateRefs or WellKnownCACertificates may be specified, not both. If an
             * implementation does not support the WellKnownCACertificates field or the value
             * supplied is not supported, the Status Conditions on the Policy MUST be
             * updated to include an Accepted: False Condition with Reason: Invalid.
             *
             * Support: Implementation-specific
             */
            wellKnownCACertificates?: pulumi.Input<string>;
        }

        /**
         * SubjectAltName represents Subject Alternative Name.
         */
        export interface BackendTLSPolicySpecValidationSubjectAltNames {
            /**
             * Hostname contains Subject Alternative Name specified in DNS name format.
             * Required when Type is set to Hostname, ignored otherwise.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Type determines the format of the Subject Alternative Name. Always required.
             *
             * Support: Core
             */
            type?: pulumi.Input<string>;
            /**
             * URI contains Subject Alternative Name specified in a full URI format.
             * It MUST include both a scheme (e.g., "http" or "ftp") and a scheme-specific-part.
             * Common values include SPIFFE IDs like "spiffe://mycluster.example.com/ns/myns/sa/svc1sa".
             * Required when Type is set to URI, ignored otherwise.
             *
             * Support: Core
             */
            uri?: pulumi.Input<string>;
        }

        /**
         * SubjectAltName represents Subject Alternative Name.
         */
        export interface BackendTLSPolicySpecValidationSubjectAltNamesPatch {
            /**
             * Hostname contains Subject Alternative Name specified in DNS name format.
             * Required when Type is set to Hostname, ignored otherwise.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Type determines the format of the Subject Alternative Name. Always required.
             *
             * Support: Core
             */
            type?: pulumi.Input<string>;
            /**
             * URI contains Subject Alternative Name specified in a full URI format.
             * It MUST include both a scheme (e.g., "http" or "ftp") and a scheme-specific-part.
             * Common values include SPIFFE IDs like "spiffe://mycluster.example.com/ns/myns/sa/svc1sa".
             * Required when Type is set to URI, ignored otherwise.
             *
             * Support: Core
             */
            uri?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of BackendTLSPolicy.
         */
        export interface BackendTLSPolicyStatus {
            /**
             * Ancestors is a list of ancestor resources (usually Gateways) that are
             * associated with the policy, and the status of the policy with respect to
             * each ancestor. When this policy attaches to a parent, the controller that
             * manages the parent and the ancestors MUST add an entry to this list when
             * the controller first sees the policy and SHOULD update the entry as
             * appropriate when the relevant ancestor is modified.
             *
             * Note that choosing the relevant ancestor is left to the Policy designers;
             * an important part of Policy design is designing the right object level at
             * which to namespace this status.
             *
             * Note also that implementations MUST ONLY populate ancestor status for
             * the Ancestor resources they are responsible for. Implementations MUST
             * use the ControllerName field to uniquely identify the entries in this list
             * that they are responsible for.
             *
             * Note that to achieve this, the list of PolicyAncestorStatus structs
             * MUST be treated as a map with a composite key, made up of the AncestorRef
             * and ControllerName fields combined.
             *
             * A maximum of 16 ancestors will be represented in this list. An empty list
             * means the Policy is not relevant for any ancestors.
             *
             * If this slice is full, implementations MUST NOT add further entries.
             * Instead they MUST consider the policy unimplementable and signal that
             * on any related resources such as the ancestor that would be referenced
             * here. For example, if this list was full on BackendTLSPolicy, no
             * additional Gateways would be able to reference the Service targeted by
             * the BackendTLSPolicy.
             */
            ancestors?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicyStatusAncestors>[]>;
        }

        /**
         * PolicyAncestorStatus describes the status of a route with respect to an
         * associated Ancestor.
         *
         * Ancestors refer to objects that are either the Target of a policy or above it
         * in terms of object hierarchy. For example, if a policy targets a Service, the
         * Policy's Ancestors are, in order, the Service, the HTTPRoute, the Gateway, and
         * the GatewayClass. Almost always, in this hierarchy, the Gateway will be the most
         * useful object to place Policy status on, so we recommend that implementations
         * SHOULD use Gateway as the PolicyAncestorStatus object unless the designers
         * have a _very_ good reason otherwise.
         *
         * In the context of policy attachment, the Ancestor is used to distinguish which
         * resource results in a distinct application of this policy. For example, if a policy
         * targets a Service, it may have a distinct result per attached Gateway.
         *
         * Policies targeting the same resource may have different effects depending on the
         * ancestors of those resources. For example, different Gateways targeting the same
         * Service may have different capabilities, especially if they have different underlying
         * implementations.
         *
         * For example, in BackendTLSPolicy, the Policy attaches to a Service that is
         * used as a backend in a HTTPRoute that is itself attached to a Gateway.
         * In this case, the relevant object for status is the Gateway, and that is the
         * ancestor object referred to in this status.
         *
         * Note that a parent is also an ancestor, so for objects where the parent is the
         * relevant object for status, this struct SHOULD still be used.
         *
         * This struct is intended to be used in a slice that's effectively a map,
         * with a composite key made up of the AncestorRef and the ControllerName.
         */
        export interface BackendTLSPolicyStatusAncestors {
            ancestorRef?: pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicyStatusAncestorsAncestorRef>;
            /**
             * Conditions describes the status of the Policy with respect to the given Ancestor.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1alpha3.BackendTLSPolicyStatusAncestorsConditions>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName?: pulumi.Input<string>;
        }

        /**
         * AncestorRef corresponds with a ParentRef in the spec that this
         * PolicyAncestorStatus struct describes the status of.
         */
        export interface BackendTLSPolicyStatusAncestorsAncestorRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface BackendTLSPolicyStatusAncestorsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

    }

    export namespace v1beta1 {
        /**
         * Gateway represents an instance of a service-traffic handling infrastructure
         * by binding Listeners to a set of IP addresses.
         */
        export interface Gateway {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1beta1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"Gateway">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpec>;
            status?: pulumi.Input<inputs.gateway.v1beta1.GatewayStatus>;
        }

        /**
         * GatewayClass describes a class of Gateways available to the user for creating
         * Gateway resources.
         *
         * It is recommended that this resource be used as a template for Gateways. This
         * means that a Gateway is based on the state of the GatewayClass at the time it
         * was created and changes to the GatewayClass or associated parameters are not
         * propagated down to existing Gateways. This recommendation is intended to
         * limit the blast radius of changes to GatewayClass or associated parameters.
         * If implementations choose to propagate GatewayClass changes to existing
         * Gateways, that MUST be clearly documented by the implementation.
         *
         * Whenever one or more Gateways are using a GatewayClass, implementations SHOULD
         * add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the
         * associated GatewayClass. This ensures that a GatewayClass associated with a
         * Gateway is not deleted while in use.
         *
         * GatewayClass is a Cluster level resource.
         */
        export interface GatewayClass {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1beta1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"GatewayClass">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1beta1.GatewayClassSpec>;
            status?: pulumi.Input<inputs.gateway.v1beta1.GatewayClassStatus>;
        }

        /**
         * Spec defines the desired state of GatewayClass.
         */
        export interface GatewayClassSpec {
            /**
             * ControllerName is the name of the controller that is managing Gateways of
             * this class. The value of this field MUST be a domain prefixed path.
             *
             * Example: "example.net/gateway-controller".
             *
             * This field is not mutable and cannot be empty.
             *
             * Support: Core
             */
            controllerName?: pulumi.Input<string>;
            /**
             * Description helps describe a GatewayClass with more details.
             */
            description?: pulumi.Input<string>;
            parametersRef?: pulumi.Input<inputs.gateway.v1beta1.GatewayClassSpecParametersRef>;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the GatewayClass. This is optional if the
         * controller does not require any additional configuration.
         *
         * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap,
         * or an implementation-specific custom resource. The resource can be
         * cluster-scoped or namespace-scoped.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the GatewayClass SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * A Gateway for this GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewayClassSpecParametersRef {
            /**
             * Group is the group of the referent.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent.
             * This field is required when referring to a Namespace-scoped resource and
             * MUST be unset when referring to a Cluster-scoped resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the GatewayClass. This is optional if the
         * controller does not require any additional configuration.
         *
         * ParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap,
         * or an implementation-specific custom resource. The resource can be
         * cluster-scoped or namespace-scoped.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the GatewayClass SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * A Gateway for this GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * Support: Implementation-specific
         */
        export interface GatewayClassSpecParametersRefPatch {
            /**
             * Group is the group of the referent.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent.
             * This field is required when referring to a Namespace-scoped resource and
             * MUST be unset when referring to a Cluster-scoped resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of GatewayClass.
         */
        export interface GatewayClassSpecPatch {
            /**
             * ControllerName is the name of the controller that is managing Gateways of
             * this class. The value of this field MUST be a domain prefixed path.
             *
             * Example: "example.net/gateway-controller".
             *
             * This field is not mutable and cannot be empty.
             *
             * Support: Core
             */
            controllerName?: pulumi.Input<string>;
            /**
             * Description helps describe a GatewayClass with more details.
             */
            description?: pulumi.Input<string>;
            parametersRef?: pulumi.Input<inputs.gateway.v1beta1.GatewayClassSpecParametersRefPatch>;
        }

        /**
         * Status defines the current state of GatewayClass.
         *
         * Implementations MUST populate status on all GatewayClass resources which
         * specify their controller name.
         */
        export interface GatewayClassStatus {
            /**
             * Conditions is the current status from the controller for
             * this GatewayClass.
             *
             * Controllers should prefer to publish conditions using values
             * of GatewayClassConditionType for the type of each Condition.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayClassStatusConditions>[]>;
            /**
             * SupportedFeatures is the set of features the GatewayClass support.
             * It MUST be sorted in ascending alphabetical order by the Name key.
             */
            supportedFeatures?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayClassStatusSupportedFeatures>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayClassStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        export interface GatewayClassStatusSupportedFeatures {
            /**
             * FeatureName is used to describe distinct features that are covered by
             * conformance tests.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of Gateway.
         */
        export interface GatewaySpec {
            /**
             * Addresses requested for this Gateway. This is optional and behavior can
             * depend on the implementation. If a value is set in the spec and the
             * requested address is invalid or unavailable, the implementation MUST
             * indicate this in the associated entry in GatewayStatus.Addresses.
             *
             * The Addresses field represents a request for the address(es) on the
             * "outside of the Gateway", that traffic bound for this Gateway will use.
             * This could be the IP address or hostname of an external load balancer or
             * other networking infrastructure, or some other address that traffic will
             * be sent to.
             *
             * If no Addresses are specified, the implementation MAY schedule the
             * Gateway in an implementation-specific manner, assigning an appropriate
             * set of Addresses.
             *
             * The implementation MUST bind all Listeners to every GatewayAddress that
             * it assigns to the Gateway and add a corresponding entry in
             * GatewayStatus.Addresses.
             *
             * Support: Extended
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecAddresses>[]>;
            allowedListeners?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecAllowedListeners>;
            backendTLS?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecBackendTLS>;
            /**
             * GatewayClassName used for this Gateway. This is the name of a
             * GatewayClass resource.
             */
            gatewayClassName?: pulumi.Input<string>;
            infrastructure?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecInfrastructure>;
            /**
             * Listeners associated with this Gateway. Listeners define
             * logical endpoints that are bound on this Gateway's addresses.
             * At least one Listener MUST be specified.
             *
             * ## Distinct Listeners
             *
             * Each Listener in a set of Listeners (for example, in a single Gateway)
             * MUST be _distinct_, in that a traffic flow MUST be able to be assigned to
             * exactly one listener. (This section uses "set of Listeners" rather than
             * "Listeners in a single Gateway" because implementations MAY merge configuration
             * from multiple Gateways onto a single data plane, and these rules _also_
             * apply in that case).
             *
             * Practically, this means that each listener in a set MUST have a unique
             * combination of Port, Protocol, and, if supported by the protocol, Hostname.
             *
             * Some combinations of port, protocol, and TLS settings are considered
             * Core support and MUST be supported by implementations based on the objects
             * they support:
             *
             * HTTPRoute
             *
             * 1. HTTPRoute, Port: 80, Protocol: HTTP
             * 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided
             *
             * TLSRoute
             *
             * 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough
             *
             * "Distinct" Listeners have the following property:
             *
             * **The implementation can match inbound requests to a single distinct
             * Listener**.
             *
             * When multiple Listeners share values for fields (for
             * example, two Listeners with the same Port value), the implementation
             * can match requests to only one of the Listeners using other
             * Listener fields.
             *
             * When multiple listeners have the same value for the Protocol field, then
             * each of the Listeners with matching Protocol values MUST have different
             * values for other fields.
             *
             * The set of fields that MUST be different for a Listener differs per protocol.
             * The following rules define the rules for what fields MUST be considered for
             * Listeners to be distinct with each protocol currently defined in the
             * Gateway API spec.
             *
             * The set of listeners that all share a protocol value MUST have _different_
             * values for _at least one_ of these fields to be distinct:
             *
             * * **HTTP, HTTPS, TLS**: Port, Hostname
             * * **TCP, UDP**: Port
             *
             * One **very** important rule to call out involves what happens when an
             * implementation:
             *
             * * Supports TCP protocol Listeners, as well as HTTP, HTTPS, or TLS protocol
             *   Listeners, and
             * * sees HTTP, HTTPS, or TLS protocols with the same `port` as one with TCP
             *   Protocol.
             *
             * In this case all the Listeners that share a port with the
             * TCP Listener are not distinct and so MUST NOT be accepted.
             *
             * If an implementation does not support TCP Protocol Listeners, then the
             * previous rule does not apply, and the TCP Listeners SHOULD NOT be
             * accepted.
             *
             * Note that the `tls` field is not used for determining if a listener is distinct, because
             * Listeners that _only_ differ on TLS config will still conflict in all cases.
             *
             * ### Listeners that are distinct only by Hostname
             *
             * When the Listeners are distinct based only on Hostname, inbound request
             * hostnames MUST match from the most specific to least specific Hostname
             * values to choose the correct Listener and its associated set of Routes.
             *
             * Exact matches MUST be processed before wildcard matches, and wildcard
             * matches MUST be processed before fallback (empty Hostname value)
             * matches. For example, `"foo.example.com"` takes precedence over
             * `"*.example.com"`, and `"*.example.com"` takes precedence over `""`.
             *
             * Additionally, if there are multiple wildcard entries, more specific
             * wildcard entries must be processed before less specific wildcard entries.
             * For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`.
             *
             * The precise definition here is that the higher the number of dots in the
             * hostname to the right of the wildcard character, the higher the precedence.
             *
             * The wildcard character will match any number of characters _and dots_ to
             * the left, however, so `"*.example.com"` will match both
             * `"foo.bar.example.com"` _and_ `"bar.example.com"`.
             *
             * ## Handling indistinct Listeners
             *
             * If a set of Listeners contains Listeners that are not distinct, then those
             * Listeners are _Conflicted_, and the implementation MUST set the "Conflicted"
             * condition in the Listener Status to "True".
             *
             * The words "indistinct" and "conflicted" are considered equivalent for the
             * purpose of this documentation.
             *
             * Implementations MAY choose to accept a Gateway with some Conflicted
             * Listeners only if they only accept the partial Listener set that contains
             * no Conflicted Listeners.
             *
             * Specifically, an implementation MAY accept a partial Listener set subject to
             * the following rules:
             *
             * * The implementation MUST NOT pick one conflicting Listener as the winner.
             *   ALL indistinct Listeners must not be accepted for processing.
             * * At least one distinct Listener MUST be present, or else the Gateway effectively
             *   contains _no_ Listeners, and must be rejected from processing as a whole.
             *
             * The implementation MUST set a "ListenersNotValid" condition on the
             * Gateway Status when the Gateway contains Conflicted Listeners whether or
             * not they accept the Gateway. That Condition SHOULD clearly
             * indicate in the Message which Listeners are conflicted, and which are
             * Accepted. Additionally, the Listener status for those listeners SHOULD
             * indicate which Listeners are conflicted and not Accepted.
             *
             * ## General Listener behavior
             *
             * Note that, for all distinct Listeners, requests SHOULD match at most one Listener.
             * For example, if Listeners are defined for "foo.example.com" and "*.example.com", a
             * request to "foo.example.com" SHOULD only be routed using routes attached
             * to the "foo.example.com" Listener (and not the "*.example.com" Listener).
             *
             * This concept is known as "Listener Isolation", and it is an Extended feature
             * of Gateway API. Implementations that do not support Listener Isolation MUST
             * clearly document this, and MUST NOT claim support for the
             * `GatewayHTTPListenerIsolation` feature.
             *
             * Implementations that _do_ support Listener Isolation SHOULD claim support
             * for the Extended `GatewayHTTPListenerIsolation` feature and pass the associated
             * conformance tests.
             *
             * ## Compatible Listeners
             *
             * A Gateway's Listeners are considered _compatible_ if:
             *
             * 1. They are distinct.
             * 2. The implementation can serve them in compliance with the Addresses
             *    requirement that all Listeners are available on all assigned
             *    addresses.
             *
             * Compatible combinations in Extended support are expected to vary across
             * implementations. A combination that is compatible for one implementation
             * may not be compatible for another.
             *
             * For example, an implementation that cannot serve both TCP and UDP listeners
             * on the same address, or cannot mix HTTPS and generic TLS listens on the same port
             * would not consider those cases compatible, even though they are distinct.
             *
             * Implementations MAY merge separate Gateways onto a single set of
             * Addresses if all Listeners across all Gateways are compatible.
             *
             * In a future release the MinItems=1 requirement MAY be dropped.
             *
             * Support: Core
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListeners>[]>;
        }

        /**
         * GatewaySpecAddress describes an address that can be bound to a Gateway.
         */
        export interface GatewaySpecAddresses {
            /**
             * Type of the address.
             */
            type?: pulumi.Input<string>;
            /**
             * When a value is unspecified, an implementation SHOULD automatically
             * assign an address matching the requested type if possible.
             *
             * If an implementation does not support an empty value, they MUST set the
             * "Programmed" condition in status to False with a reason of "AddressNotAssigned".
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * GatewaySpecAddress describes an address that can be bound to a Gateway.
         */
        export interface GatewaySpecAddressesPatch {
            /**
             * Type of the address.
             */
            type?: pulumi.Input<string>;
            /**
             * When a value is unspecified, an implementation SHOULD automatically
             * assign an address matching the requested type if possible.
             *
             * If an implementation does not support an empty value, they MUST set the
             * "Programmed" condition in status to False with a reason of "AddressNotAssigned".
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * AllowedListeners defines which ListenerSets can be attached to this Gateway.
         * While this feature is experimental, the default value is to allow no ListenerSets.
         */
        export interface GatewaySpecAllowedListeners {
            namespaces?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecAllowedListenersNamespaces>;
        }

        /**
         * Namespaces defines which namespaces ListenerSets can be attached to this Gateway.
         * While this feature is experimental, the default value is to allow no ListenerSets.
         */
        export interface GatewaySpecAllowedListenersNamespaces {
            /**
             * From indicates where ListenerSets can attach to this Gateway. Possible
             * values are:
             *
             * * Same: Only ListenerSets in the same namespace may be attached to this Gateway.
             * * Selector: ListenerSets in namespaces selected by the selector may be attached to this Gateway.
             * * All: ListenerSets in all namespaces may be attached to this Gateway.
             * * None: Only listeners defined in the Gateway's spec are allowed
             *
             * While this feature is experimental, the default value None
             */
            from?: pulumi.Input<string>;
            selector?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecAllowedListenersNamespacesSelector>;
        }

        /**
         * Namespaces defines which namespaces ListenerSets can be attached to this Gateway.
         * While this feature is experimental, the default value is to allow no ListenerSets.
         */
        export interface GatewaySpecAllowedListenersNamespacesPatch {
            /**
             * From indicates where ListenerSets can attach to this Gateway. Possible
             * values are:
             *
             * * Same: Only ListenerSets in the same namespace may be attached to this Gateway.
             * * Selector: ListenerSets in namespaces selected by the selector may be attached to this Gateway.
             * * All: ListenerSets in all namespaces may be attached to this Gateway.
             * * None: Only listeners defined in the Gateway's spec are allowed
             *
             * While this feature is experimental, the default value None
             */
            from?: pulumi.Input<string>;
            selector?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecAllowedListenersNamespacesSelectorPatch>;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only ListenerSets in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         */
        export interface GatewaySpecAllowedListenersNamespacesSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecAllowedListenersNamespacesSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecAllowedListenersNamespacesSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecAllowedListenersNamespacesSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only ListenerSets in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         */
        export interface GatewaySpecAllowedListenersNamespacesSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecAllowedListenersNamespacesSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * AllowedListeners defines which ListenerSets can be attached to this Gateway.
         * While this feature is experimental, the default value is to allow no ListenerSets.
         */
        export interface GatewaySpecAllowedListenersPatch {
            namespaces?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecAllowedListenersNamespacesPatch>;
        }

        /**
         * BackendTLS configures TLS settings for when this Gateway is connecting to
         * backends with TLS.
         *
         * Support: Core
         */
        export interface GatewaySpecBackendTLS {
            clientCertificateRef?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecBackendTLSClientCertificateRef>;
        }

        /**
         * ClientCertificateRef is a reference to an object that contains a Client
         * Certificate and the associated private key.
         *
         * References to a resource in different namespace are invalid UNLESS there
         * is a ReferenceGrant in the target namespace that allows the certificate
         * to be attached. If a ReferenceGrant does not allow this reference, the
         * "ResolvedRefs" condition MUST be set to False for this listener with the
         * "RefNotPermitted" reason.
         *
         * ClientCertificateRef can reference to standard Kubernetes resources, i.e.
         * Secret, or implementation-specific custom resources.
         *
         * This setting can be overridden on the service level by use of BackendTLSPolicy.
         *
         * Support: Core
         */
        export interface GatewaySpecBackendTLSClientCertificateRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ClientCertificateRef is a reference to an object that contains a Client
         * Certificate and the associated private key.
         *
         * References to a resource in different namespace are invalid UNLESS there
         * is a ReferenceGrant in the target namespace that allows the certificate
         * to be attached. If a ReferenceGrant does not allow this reference, the
         * "ResolvedRefs" condition MUST be set to False for this listener with the
         * "RefNotPermitted" reason.
         *
         * ClientCertificateRef can reference to standard Kubernetes resources, i.e.
         * Secret, or implementation-specific custom resources.
         *
         * This setting can be overridden on the service level by use of BackendTLSPolicy.
         *
         * Support: Core
         */
        export interface GatewaySpecBackendTLSClientCertificateRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * BackendTLS configures TLS settings for when this Gateway is connecting to
         * backends with TLS.
         *
         * Support: Core
         */
        export interface GatewaySpecBackendTLSPatch {
            clientCertificateRef?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecBackendTLSClientCertificateRefPatch>;
        }

        /**
         * Infrastructure defines infrastructure level attributes about this Gateway instance.
         *
         * Support: Extended
         */
        export interface GatewaySpecInfrastructure {
            /**
             * Annotations that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "annotations" concepts.
             *
             * An implementation may chose to add additional implementation-specific annotations as they see fit.
             *
             * Support: Extended
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "labels" concepts.
             *
             * An implementation may chose to add additional implementation-specific labels as they see fit.
             *
             * If an implementation maps these labels to Pods, or any other resource that would need to be recreated when labels
             * change, it SHOULD clearly warn about this behavior in documentation.
             *
             * Support: Extended
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            parametersRef?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecInfrastructureParametersRef>;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the Gateway. This is optional if the
         * controller does not require any additional configuration.
         *
         * This follows the same semantics as GatewayClass's `parametersRef`, but on a per-Gateway basis
         *
         * The Gateway's GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the Gateway SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * Support: Implementation-specific
         */
        export interface GatewaySpecInfrastructureParametersRef {
            /**
             * Group is the group of the referent.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ParametersRef is a reference to a resource that contains the configuration
         * parameters corresponding to the Gateway. This is optional if the
         * controller does not require any additional configuration.
         *
         * This follows the same semantics as GatewayClass's `parametersRef`, but on a per-Gateway basis
         *
         * The Gateway's GatewayClass may provide its own `parametersRef`. When both are specified,
         * the merging behavior is implementation specific.
         * It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.
         *
         * If the referent cannot be found, refers to an unsupported kind, or when
         * the data within that resource is malformed, the Gateway SHOULD be
         * rejected with the "Accepted" status condition set to "False" and an
         * "InvalidParameters" reason.
         *
         * Support: Implementation-specific
         */
        export interface GatewaySpecInfrastructureParametersRefPatch {
            /**
             * Group is the group of the referent.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Infrastructure defines infrastructure level attributes about this Gateway instance.
         *
         * Support: Extended
         */
        export interface GatewaySpecInfrastructurePatch {
            /**
             * Annotations that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "annotations" concepts.
             *
             * An implementation may chose to add additional implementation-specific annotations as they see fit.
             *
             * Support: Extended
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that SHOULD be applied to any resources created in response to this Gateway.
             *
             * For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources.
             * For other implementations, this refers to any relevant (implementation specific) "labels" concepts.
             *
             * An implementation may chose to add additional implementation-specific labels as they see fit.
             *
             * If an implementation maps these labels to Pods, or any other resource that would need to be recreated when labels
             * change, it SHOULD clearly warn about this behavior in documentation.
             *
             * Support: Extended
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            parametersRef?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecInfrastructureParametersRefPatch>;
        }

        /**
         * Listener embodies the concept of a logical endpoint where a Gateway accepts
         * network connections.
         */
        export interface GatewaySpecListeners {
            allowedRoutes?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutes>;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that
             * define this concept. When unspecified, all hostnames are matched. This
             * field is ignored for protocols that don't require hostname based
             * matching.
             *
             * Implementations MUST apply Hostname matching appropriately for each of
             * the following protocols:
             *
             * * TLS: The Listener Hostname MUST match the SNI.
             * * HTTP: The Listener Hostname MUST match the Host header of the request.
             * * HTTPS: The Listener Hostname SHOULD match both the SNI and Host header.
             *   Note that this does not require the SNI and Host header to be the same.
             *   The semantics of this are described in more detail below.
             *
             * To ensure security, Section 11.1 of RFC-6066 emphasizes that server
             * implementations that rely on SNI hostname matching MUST also verify
             * hostnames within the application protocol.
             *
             * Section 9.1.2 of RFC-7540 provides a mechanism for servers to reject the
             * reuse of a connection by responding with the HTTP 421 Misdirected Request
             * status code. This indicates that the origin server has rejected the
             * request because it appears to have been misdirected.
             *
             * To detect misdirected requests, Gateways SHOULD match the authority of
             * the requests with all the SNI hostname(s) configured across all the
             * Gateway Listeners on the same port and protocol:
             *
             * * If another Listener has an exact match or more specific wildcard entry,
             *   the Gateway SHOULD return a 421.
             * * If the current Listener (selected by SNI matching during ClientHello)
             *   does not match the Host:
             *     * If another Listener does match the Host the Gateway SHOULD return a
             *       421.
             *     * If no other Listener matches the Host, the Gateway MUST return a
             *       404.
             *
             * For HTTPRoute and TLSRoute resources, there is an interaction with the
             * `spec.hostnames` array. When both listener and route specify hostnames,
             * there MUST be an intersection between the values for a Route to be
             * accepted. For more information, refer to the Route specific Hostnames
             * documentation.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Name is the name of the Listener. This name MUST be unique within a
             * Gateway.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Port is the network port. Multiple listeners may use the
             * same port, subject to the Listener compatibility rules.
             *
             * Support: Core
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol specifies the network protocol this listener expects to receive.
             *
             * Support: Core
             */
            protocol?: pulumi.Input<string>;
            tls?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersTls>;
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a
         * Listener and the trusted namespaces where those Route resources MAY be
         * present.
         *
         * Although a client request may match multiple route rules, only one rule
         * may ultimately receive the request. Matching precedence MUST be
         * determined in order of the following criteria:
         *
         * * The most specific match as defined by the Route type.
         * * The oldest Route based on creation timestamp. For example, a Route with
         *   a creation timestamp of "2020-09-08 01:02:03" is given precedence over
         *   a Route with a creation timestamp of "2020-09-08 01:02:04".
         * * If everything else is equivalent, the Route appearing first in
         *   alphabetical order (namespace/name) should be given precedence. For
         *   example, foo/bar is given precedence over foo/baz.
         *
         * All valid rules within a Route attached to this Listener should be
         * implemented. Invalid Route rules can be ignored (sometimes that will mean
         * the full Route). If a Route rule transitions from valid to invalid,
         * support for that Route rule should be dropped to ensure consistency. For
         * example, even if a filter specified by a Route rule is invalid, the rest
         * of the rules within that Route should still be supported.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutes {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind
             * to this Gateway Listener. When unspecified or empty, the kinds of Routes
             * selected are determined using the Listener protocol.
             *
             * A RouteGroupKind MUST correspond to kinds of Routes that are compatible
             * with the application protocol specified in the Listener's Protocol field.
             * If an implementation does not support or recognize this resource type, it
             * MUST set the "ResolvedRefs" condition to False for this Listener with the
             * "InvalidRouteKinds" reason.
             *
             * Support: Core
             */
            kinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesKinds>[]>;
            namespaces?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespaces>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewaySpecListenersAllowedRoutesKinds {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind?: pulumi.Input<string>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewaySpecListenersAllowedRoutesKindsPatch {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind?: pulumi.Input<string>;
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this
         * Listener. This is restricted to the namespace of this Gateway by default.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespaces {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible
             * values are:
             *
             * * All: Routes in all namespaces may be used by this Gateway.
             * * Selector: Routes in namespaces selected by the selector may be used by
             *   this Gateway.
             * * Same: Only Routes in the same namespace may be used by this Gateway.
             *
             * Support: Core
             */
            from?: pulumi.Input<string>;
            selector?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesSelector>;
        }

        /**
         * Namespaces indicates namespaces from which Routes may be attached to this
         * Listener. This is restricted to the namespace of this Gateway by default.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesPatch {
            /**
             * From indicates where Routes will be selected for this Gateway. Possible
             * values are:
             *
             * * All: Routes in all namespaces may be used by this Gateway.
             * * Selector: Routes in namespaces selected by the selector may be used by
             *   this Gateway.
             * * Same: Only Routes in the same namespace may be used by this Gateway.
             *
             * Support: Core
             */
            from?: pulumi.Input<string>;
            selector?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesSelectorPatch>;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only Routes in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that
         * relates the key and values.
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsPatch {
            /**
             * key is the label key that the selector applies to.
             */
            key?: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values.
             * Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator?: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn,
             * the values array must be non-empty. If the operator is Exists or DoesNotExist,
             * the values array must be empty. This array is replaced during a strategic
             * merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Selector must be specified when From is set to "Selector". In that case,
         * only Routes in Namespaces matching this Selector will be selected by this
         * Gateway. This field is ignored for other values of "From".
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesNamespacesSelectorPatch {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesSelectorMatchExpressionsPatch>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
             * map is equivalent to an element of matchExpressions, whose key field is "key", the
             * operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * AllowedRoutes defines the types of routes that MAY be attached to a
         * Listener and the trusted namespaces where those Route resources MAY be
         * present.
         *
         * Although a client request may match multiple route rules, only one rule
         * may ultimately receive the request. Matching precedence MUST be
         * determined in order of the following criteria:
         *
         * * The most specific match as defined by the Route type.
         * * The oldest Route based on creation timestamp. For example, a Route with
         *   a creation timestamp of "2020-09-08 01:02:03" is given precedence over
         *   a Route with a creation timestamp of "2020-09-08 01:02:04".
         * * If everything else is equivalent, the Route appearing first in
         *   alphabetical order (namespace/name) should be given precedence. For
         *   example, foo/bar is given precedence over foo/baz.
         *
         * All valid rules within a Route attached to this Listener should be
         * implemented. Invalid Route rules can be ignored (sometimes that will mean
         * the full Route). If a Route rule transitions from valid to invalid,
         * support for that Route rule should be dropped to ensure consistency. For
         * example, even if a filter specified by a Route rule is invalid, the rest
         * of the rules within that Route should still be supported.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersAllowedRoutesPatch {
            /**
             * Kinds specifies the groups and kinds of Routes that are allowed to bind
             * to this Gateway Listener. When unspecified or empty, the kinds of Routes
             * selected are determined using the Listener protocol.
             *
             * A RouteGroupKind MUST correspond to kinds of Routes that are compatible
             * with the application protocol specified in the Listener's Protocol field.
             * If an implementation does not support or recognize this resource type, it
             * MUST set the "ResolvedRefs" condition to False for this Listener with the
             * "InvalidRouteKinds" reason.
             *
             * Support: Core
             */
            kinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesKindsPatch>[]>;
            namespaces?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesNamespacesPatch>;
        }

        /**
         * Listener embodies the concept of a logical endpoint where a Gateway accepts
         * network connections.
         */
        export interface GatewaySpecListenersPatch {
            allowedRoutes?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersAllowedRoutesPatch>;
            /**
             * Hostname specifies the virtual hostname to match for protocol types that
             * define this concept. When unspecified, all hostnames are matched. This
             * field is ignored for protocols that don't require hostname based
             * matching.
             *
             * Implementations MUST apply Hostname matching appropriately for each of
             * the following protocols:
             *
             * * TLS: The Listener Hostname MUST match the SNI.
             * * HTTP: The Listener Hostname MUST match the Host header of the request.
             * * HTTPS: The Listener Hostname SHOULD match both the SNI and Host header.
             *   Note that this does not require the SNI and Host header to be the same.
             *   The semantics of this are described in more detail below.
             *
             * To ensure security, Section 11.1 of RFC-6066 emphasizes that server
             * implementations that rely on SNI hostname matching MUST also verify
             * hostnames within the application protocol.
             *
             * Section 9.1.2 of RFC-7540 provides a mechanism for servers to reject the
             * reuse of a connection by responding with the HTTP 421 Misdirected Request
             * status code. This indicates that the origin server has rejected the
             * request because it appears to have been misdirected.
             *
             * To detect misdirected requests, Gateways SHOULD match the authority of
             * the requests with all the SNI hostname(s) configured across all the
             * Gateway Listeners on the same port and protocol:
             *
             * * If another Listener has an exact match or more specific wildcard entry,
             *   the Gateway SHOULD return a 421.
             * * If the current Listener (selected by SNI matching during ClientHello)
             *   does not match the Host:
             *     * If another Listener does match the Host the Gateway SHOULD return a
             *       421.
             *     * If no other Listener matches the Host, the Gateway MUST return a
             *       404.
             *
             * For HTTPRoute and TLSRoute resources, there is an interaction with the
             * `spec.hostnames` array. When both listener and route specify hostnames,
             * there MUST be an intersection between the values for a Route to be
             * accepted. For more information, refer to the Route specific Hostnames
             * documentation.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            /**
             * Name is the name of the Listener. This name MUST be unique within a
             * Gateway.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Port is the network port. Multiple listeners may use the
             * same port, subject to the Listener compatibility rules.
             *
             * Support: Core
             */
            port?: pulumi.Input<number>;
            /**
             * Protocol specifies the network protocol this listener expects to receive.
             *
             * Support: Core
             */
            protocol?: pulumi.Input<string>;
            tls?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersTlsPatch>;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if
         * the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
         * if the Protocol field is "HTTP", "TCP", or "UDP".
         *
         * The association of SNIs to Certificate defined in GatewayTLSConfig is
         * defined based on the Hostname field for this listener.
         *
         * The GatewayClass MUST use the longest matching SNI out of all
         * available certificates for any TLS handshake.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersTls {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that
             * contains TLS certificates and private keys. These certificates are used to
             * establish a TLS handshake for requests that match the hostname of the
             * associated listener.
             *
             * A single CertificateRef to a Kubernetes Secret has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             *
             * This field is required to have at least one element when the mode is set
             * to "Terminate" (default) and is optional otherwise.
             *
             * CertificateRefs can reference to standard Kubernetes resources, i.e.
             * Secret, or implementation-specific custom resources.
             *
             * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
             *
             * Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersTlsCertificateRefs>[]>;
            frontendValidation?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersTlsFrontendValidation>;
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client.
             * There are two possible modes:
             *
             * - Terminate: The TLS session between the downstream client and the
             *   Gateway is terminated at the Gateway. This mode requires certificates
             *   to be specified in some way, such as populating the certificateRefs
             *   field.
             * - Passthrough: The TLS session is NOT terminated by the Gateway. This
             *   implies that the Gateway can't decipher the TLS stream except for
             *   the ClientHello message of the TLS protocol. The certificateRefs field
             *   is ignored in this mode.
             *
             * Support: Core
             */
            mode?: pulumi.Input<string>;
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * SecretObjectReference identifies an API object including its namespace,
         * defaulting to Secret.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "Secret".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * FrontendValidation holds configuration information for validating the frontend (client).
         * Setting this field will require clients to send a client certificate
         * required for validation during the TLS handshake. In browsers this may result in a dialog appearing
         * that requests a user to specify the client certificate.
         * The maximum depth of a certificate chain accepted in verification is Implementation specific.
         *
         * Support: Extended
         */
        export interface GatewaySpecListenersTlsFrontendValidation {
            /**
             * CACertificateRefs contains one or more references to
             * Kubernetes objects that contain TLS certificates of
             * the Certificate Authorities that can be used
             * as a trust anchor to validate the certificates presented by the client.
             *
             * A single CA certificate reference to a Kubernetes ConfigMap
             * has "Core" support.
             * Implementations MAY choose to support attaching multiple CA certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * Support: Core - A single reference to a Kubernetes ConfigMap
             * with the CA certificate in a key named `ca.crt`.
             *
             * Support: Implementation-specific (More than one reference, or other kinds
             * of resources).
             *
             * References to a resource in a different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             */
            caCertificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersTlsFrontendValidationCaCertificateRefs>[]>;
        }

        /**
         * ObjectReference identifies an API object including its namespace.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsFrontendValidationCaCertificateRefs {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When set to the empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "ConfigMap" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ObjectReference identifies an API object including its namespace.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         *
         * References to objects with invalid Group and Kind are not valid, and must
         * be rejected by the implementation, with appropriate Conditions set
         * on the containing object.
         */
        export interface GatewaySpecListenersTlsFrontendValidationCaCertificateRefsPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When set to the empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "ConfigMap" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referenced object. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * FrontendValidation holds configuration information for validating the frontend (client).
         * Setting this field will require clients to send a client certificate
         * required for validation during the TLS handshake. In browsers this may result in a dialog appearing
         * that requests a user to specify the client certificate.
         * The maximum depth of a certificate chain accepted in verification is Implementation specific.
         *
         * Support: Extended
         */
        export interface GatewaySpecListenersTlsFrontendValidationPatch {
            /**
             * CACertificateRefs contains one or more references to
             * Kubernetes objects that contain TLS certificates of
             * the Certificate Authorities that can be used
             * as a trust anchor to validate the certificates presented by the client.
             *
             * A single CA certificate reference to a Kubernetes ConfigMap
             * has "Core" support.
             * Implementations MAY choose to support attaching multiple CA certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * Support: Core - A single reference to a Kubernetes ConfigMap
             * with the CA certificate in a key named `ca.crt`.
             *
             * Support: Implementation-specific (More than one reference, or other kinds
             * of resources).
             *
             * References to a resource in a different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             */
            caCertificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersTlsFrontendValidationCaCertificateRefsPatch>[]>;
        }

        /**
         * TLS is the TLS configuration for the Listener. This field is required if
         * the Protocol field is "HTTPS" or "TLS". It is invalid to set this field
         * if the Protocol field is "HTTP", "TCP", or "UDP".
         *
         * The association of SNIs to Certificate defined in GatewayTLSConfig is
         * defined based on the Hostname field for this listener.
         *
         * The GatewayClass MUST use the longest matching SNI out of all
         * available certificates for any TLS handshake.
         *
         * Support: Core
         */
        export interface GatewaySpecListenersTlsPatch {
            /**
             * CertificateRefs contains a series of references to Kubernetes objects that
             * contains TLS certificates and private keys. These certificates are used to
             * establish a TLS handshake for requests that match the hostname of the
             * associated listener.
             *
             * A single CertificateRef to a Kubernetes Secret has "Core" support.
             * Implementations MAY choose to support attaching multiple certificates to
             * a Listener, but this behavior is implementation-specific.
             *
             * References to a resource in different namespace are invalid UNLESS there
             * is a ReferenceGrant in the target namespace that allows the certificate
             * to be attached. If a ReferenceGrant does not allow this reference, the
             * "ResolvedRefs" condition MUST be set to False for this listener with the
             * "RefNotPermitted" reason.
             *
             * This field is required to have at least one element when the mode is set
             * to "Terminate" (default) and is optional otherwise.
             *
             * CertificateRefs can reference to standard Kubernetes resources, i.e.
             * Secret, or implementation-specific custom resources.
             *
             * Support: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls
             *
             * Support: Implementation-specific (More than one reference or other resource types)
             */
            certificateRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersTlsCertificateRefsPatch>[]>;
            frontendValidation?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersTlsFrontendValidationPatch>;
            /**
             * Mode defines the TLS behavior for the TLS session initiated by the client.
             * There are two possible modes:
             *
             * - Terminate: The TLS session between the downstream client and the
             *   Gateway is terminated at the Gateway. This mode requires certificates
             *   to be specified in some way, such as populating the certificateRefs
             *   field.
             * - Passthrough: The TLS session is NOT terminated by the Gateway. This
             *   implies that the Gateway can't decipher the TLS stream except for
             *   the ClientHello message of the TLS protocol. The certificateRefs field
             *   is ignored in this mode.
             *
             * Support: Core
             */
            mode?: pulumi.Input<string>;
            /**
             * Options are a list of key/value pairs to enable extended TLS
             * configuration for each implementation. For example, configuring the
             * minimum TLS version or supported cipher suites.
             *
             * A set of common keys MAY be defined by the API in the future. To avoid
             * any ambiguity, implementation-specific definitions MUST use
             * domain-prefixed names, such as `example.com/my-custom-option`.
             * Un-prefixed names are reserved for key names defined by Gateway API.
             *
             * Support: Implementation-specific
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Spec defines the desired state of Gateway.
         */
        export interface GatewaySpecPatch {
            /**
             * Addresses requested for this Gateway. This is optional and behavior can
             * depend on the implementation. If a value is set in the spec and the
             * requested address is invalid or unavailable, the implementation MUST
             * indicate this in the associated entry in GatewayStatus.Addresses.
             *
             * The Addresses field represents a request for the address(es) on the
             * "outside of the Gateway", that traffic bound for this Gateway will use.
             * This could be the IP address or hostname of an external load balancer or
             * other networking infrastructure, or some other address that traffic will
             * be sent to.
             *
             * If no Addresses are specified, the implementation MAY schedule the
             * Gateway in an implementation-specific manner, assigning an appropriate
             * set of Addresses.
             *
             * The implementation MUST bind all Listeners to every GatewayAddress that
             * it assigns to the Gateway and add a corresponding entry in
             * GatewayStatus.Addresses.
             *
             * Support: Extended
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecAddressesPatch>[]>;
            allowedListeners?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecAllowedListenersPatch>;
            backendTLS?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecBackendTLSPatch>;
            /**
             * GatewayClassName used for this Gateway. This is the name of a
             * GatewayClass resource.
             */
            gatewayClassName?: pulumi.Input<string>;
            infrastructure?: pulumi.Input<inputs.gateway.v1beta1.GatewaySpecInfrastructurePatch>;
            /**
             * Listeners associated with this Gateway. Listeners define
             * logical endpoints that are bound on this Gateway's addresses.
             * At least one Listener MUST be specified.
             *
             * ## Distinct Listeners
             *
             * Each Listener in a set of Listeners (for example, in a single Gateway)
             * MUST be _distinct_, in that a traffic flow MUST be able to be assigned to
             * exactly one listener. (This section uses "set of Listeners" rather than
             * "Listeners in a single Gateway" because implementations MAY merge configuration
             * from multiple Gateways onto a single data plane, and these rules _also_
             * apply in that case).
             *
             * Practically, this means that each listener in a set MUST have a unique
             * combination of Port, Protocol, and, if supported by the protocol, Hostname.
             *
             * Some combinations of port, protocol, and TLS settings are considered
             * Core support and MUST be supported by implementations based on the objects
             * they support:
             *
             * HTTPRoute
             *
             * 1. HTTPRoute, Port: 80, Protocol: HTTP
             * 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided
             *
             * TLSRoute
             *
             * 1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough
             *
             * "Distinct" Listeners have the following property:
             *
             * **The implementation can match inbound requests to a single distinct
             * Listener**.
             *
             * When multiple Listeners share values for fields (for
             * example, two Listeners with the same Port value), the implementation
             * can match requests to only one of the Listeners using other
             * Listener fields.
             *
             * When multiple listeners have the same value for the Protocol field, then
             * each of the Listeners with matching Protocol values MUST have different
             * values for other fields.
             *
             * The set of fields that MUST be different for a Listener differs per protocol.
             * The following rules define the rules for what fields MUST be considered for
             * Listeners to be distinct with each protocol currently defined in the
             * Gateway API spec.
             *
             * The set of listeners that all share a protocol value MUST have _different_
             * values for _at least one_ of these fields to be distinct:
             *
             * * **HTTP, HTTPS, TLS**: Port, Hostname
             * * **TCP, UDP**: Port
             *
             * One **very** important rule to call out involves what happens when an
             * implementation:
             *
             * * Supports TCP protocol Listeners, as well as HTTP, HTTPS, or TLS protocol
             *   Listeners, and
             * * sees HTTP, HTTPS, or TLS protocols with the same `port` as one with TCP
             *   Protocol.
             *
             * In this case all the Listeners that share a port with the
             * TCP Listener are not distinct and so MUST NOT be accepted.
             *
             * If an implementation does not support TCP Protocol Listeners, then the
             * previous rule does not apply, and the TCP Listeners SHOULD NOT be
             * accepted.
             *
             * Note that the `tls` field is not used for determining if a listener is distinct, because
             * Listeners that _only_ differ on TLS config will still conflict in all cases.
             *
             * ### Listeners that are distinct only by Hostname
             *
             * When the Listeners are distinct based only on Hostname, inbound request
             * hostnames MUST match from the most specific to least specific Hostname
             * values to choose the correct Listener and its associated set of Routes.
             *
             * Exact matches MUST be processed before wildcard matches, and wildcard
             * matches MUST be processed before fallback (empty Hostname value)
             * matches. For example, `"foo.example.com"` takes precedence over
             * `"*.example.com"`, and `"*.example.com"` takes precedence over `""`.
             *
             * Additionally, if there are multiple wildcard entries, more specific
             * wildcard entries must be processed before less specific wildcard entries.
             * For example, `"*.foo.example.com"` takes precedence over `"*.example.com"`.
             *
             * The precise definition here is that the higher the number of dots in the
             * hostname to the right of the wildcard character, the higher the precedence.
             *
             * The wildcard character will match any number of characters _and dots_ to
             * the left, however, so `"*.example.com"` will match both
             * `"foo.bar.example.com"` _and_ `"bar.example.com"`.
             *
             * ## Handling indistinct Listeners
             *
             * If a set of Listeners contains Listeners that are not distinct, then those
             * Listeners are _Conflicted_, and the implementation MUST set the "Conflicted"
             * condition in the Listener Status to "True".
             *
             * The words "indistinct" and "conflicted" are considered equivalent for the
             * purpose of this documentation.
             *
             * Implementations MAY choose to accept a Gateway with some Conflicted
             * Listeners only if they only accept the partial Listener set that contains
             * no Conflicted Listeners.
             *
             * Specifically, an implementation MAY accept a partial Listener set subject to
             * the following rules:
             *
             * * The implementation MUST NOT pick one conflicting Listener as the winner.
             *   ALL indistinct Listeners must not be accepted for processing.
             * * At least one distinct Listener MUST be present, or else the Gateway effectively
             *   contains _no_ Listeners, and must be rejected from processing as a whole.
             *
             * The implementation MUST set a "ListenersNotValid" condition on the
             * Gateway Status when the Gateway contains Conflicted Listeners whether or
             * not they accept the Gateway. That Condition SHOULD clearly
             * indicate in the Message which Listeners are conflicted, and which are
             * Accepted. Additionally, the Listener status for those listeners SHOULD
             * indicate which Listeners are conflicted and not Accepted.
             *
             * ## General Listener behavior
             *
             * Note that, for all distinct Listeners, requests SHOULD match at most one Listener.
             * For example, if Listeners are defined for "foo.example.com" and "*.example.com", a
             * request to "foo.example.com" SHOULD only be routed using routes attached
             * to the "foo.example.com" Listener (and not the "*.example.com" Listener).
             *
             * This concept is known as "Listener Isolation", and it is an Extended feature
             * of Gateway API. Implementations that do not support Listener Isolation MUST
             * clearly document this, and MUST NOT claim support for the
             * `GatewayHTTPListenerIsolation` feature.
             *
             * Implementations that _do_ support Listener Isolation SHOULD claim support
             * for the Extended `GatewayHTTPListenerIsolation` feature and pass the associated
             * conformance tests.
             *
             * ## Compatible Listeners
             *
             * A Gateway's Listeners are considered _compatible_ if:
             *
             * 1. They are distinct.
             * 2. The implementation can serve them in compliance with the Addresses
             *    requirement that all Listeners are available on all assigned
             *    addresses.
             *
             * Compatible combinations in Extended support are expected to vary across
             * implementations. A combination that is compatible for one implementation
             * may not be compatible for another.
             *
             * For example, an implementation that cannot serve both TCP and UDP listeners
             * on the same address, or cannot mix HTTPS and generic TLS listens on the same port
             * would not consider those cases compatible, even though they are distinct.
             *
             * Implementations MAY merge separate Gateways onto a single set of
             * Addresses if all Listeners across all Gateways are compatible.
             *
             * In a future release the MinItems=1 requirement MAY be dropped.
             *
             * Support: Core
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewaySpecListenersPatch>[]>;
        }

        /**
         * Status defines the current state of Gateway.
         */
        export interface GatewayStatus {
            /**
             * Addresses lists the network addresses that have been bound to the
             * Gateway.
             *
             * This list may differ from the addresses provided in the spec under some
             * conditions:
             *
             *   * no addresses are specified, all addresses are dynamically assigned
             *   * a combination of specified and dynamic addresses are assigned
             *   * a specified address was unusable (e.g. already in use)
             */
            addresses?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayStatusAddresses>[]>;
            /**
             * Conditions describe the current conditions of the Gateway.
             *
             * Implementations should prefer to express Gateway conditions
             * using the `GatewayConditionType` and `GatewayConditionReason`
             * constants so that operators and tools can converge on a common
             * vocabulary to describe Gateway state.
             *
             * Known condition types are:
             *
             * * "Accepted"
             * * "Programmed"
             * * "Ready"
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayStatusConditions>[]>;
            /**
             * Listeners provide status for each unique listener port defined in the Spec.
             */
            listeners?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayStatusListeners>[]>;
        }

        /**
         * GatewayStatusAddress describes a network address that is bound to a Gateway.
         */
        export interface GatewayStatusAddresses {
            /**
             * Type of the address.
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the address. The validity of the values will depend
             * on the type and support by the controller.
             *
             * Examples: `1.2.3.4`, `128::1`, `my-ip-address`.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ListenerStatus is the status associated with a Listener.
         */
        export interface GatewayStatusListeners {
            /**
             * AttachedRoutes represents the total number of Routes that have been
             * successfully attached to this Listener.
             *
             * Successful attachment of a Route to a Listener is based solely on the
             * combination of the AllowedRoutes field on the corresponding Listener
             * and the Route's ParentRefs field. A Route is successfully attached to
             * a Listener when it is selected by the Listener's AllowedRoutes field
             * AND the Route has a valid ParentRef selecting the whole Gateway
             * resource or a specific Listener as a parent resource (more detail on
             * attachment semantics can be found in the documentation on the various
             * Route kinds ParentRefs fields). Listener or Route status does not impact
             * successful attachment, i.e. the AttachedRoutes field count MUST be set
             * for Listeners with condition Accepted: false and MUST count successfully
             * attached Routes that may themselves have Accepted: false conditions.
             *
             * Uses for this field include troubleshooting Route attachment and
             * measuring blast radius/impact of changes to a Listener.
             */
            attachedRoutes?: pulumi.Input<number>;
            /**
             * Conditions describe the current condition of this listener.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayStatusListenersConditions>[]>;
            /**
             * Name is the name of the Listener that this status corresponds to.
             */
            name?: pulumi.Input<string>;
            /**
             * SupportedKinds is the list indicating the Kinds supported by this
             * listener. This MUST represent the kinds an implementation supports for
             * that Listener configuration.
             *
             * If kinds are specified in Spec that are not supported, they MUST NOT
             * appear in this list and an implementation MUST set the "ResolvedRefs"
             * condition to "False" with the "InvalidRouteKinds" reason. If both valid
             * and invalid Route kinds are specified, the implementation MUST
             * reference the valid Route kinds that have been specified.
             */
            supportedKinds?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.GatewayStatusListenersSupportedKinds>[]>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface GatewayStatusListenersConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * RouteGroupKind indicates the group and kind of a Route resource.
         */
        export interface GatewayStatusListenersSupportedKinds {
            /**
             * Group is the group of the Route.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the Route.
             */
            kind?: pulumi.Input<string>;
        }

        /**
         * HTTPRoute provides a way to route HTTP requests. This includes the capability
         * to match requests by hostname, path, header, or query param. Filters can be
         * used to specify additional processing steps. Backends specify where matching
         * requests should be routed.
         */
        export interface HTTPRoute {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1beta1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"HTTPRoute">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpec>;
            status?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteStatus>;
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpec {
            /**
             * Hostnames defines a set of hostnames that should match against the HTTP Host
             * header to select a HTTPRoute used to process the request. Implementations
             * MUST ignore any port value specified in the HTTP Host header while
             * performing a match and (absent of any applicable header modification
             * configuration) MUST forward this header unmodified to the backend.
             *
             * Valid values for Hostnames are determined by RFC 1123 definition of a
             * hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label must appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and HTTPRoute, there
             * must be at least one intersecting hostname for the HTTPRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `*.example.com`, `test.example.com`, and `foo.test.example.com` would
             *   all match. On the other hand, `example.com` and `test.example.net` would
             *   not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and HTTPRoute have specified hostnames, any
             * HTTPRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * HTTPRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` must not be considered for a match.
             *
             * If both the Listener and HTTPRoute have specified hostnames, and none
             * match with the criteria above, then the HTTPRoute is not accepted. The
             * implementation must raise an 'Accepted' Condition with a status of
             * `False` in the corresponding RouteParentStatus.
             *
             * In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
             * overlapping wildcard matching and exact matching hostnames), precedence must
             * be given to rules from the HTTPRoute with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             *
             * If ties exist across multiple Routes, the matching precedence rules for
             * HTTPRouteMatches takes over.
             *
             * Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecParentRefs>[]>;
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRules>[]>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentRefs {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered
         * a parent of this resource (usually a route). There are two kinds of parent resources
         * with "Core" support:
         *
         * * Gateway (Gateway conformance profile)
         * * Service (Mesh conformance profile, ClusterIP Services only)
         *
         * This API may be extended in the future to support additional kinds of parent
         * resources.
         *
         * The API object must be valid in the cluster; the Group and Kind must
         * be registered in the cluster for this reference to be valid.
         */
        export interface HTTPRouteSpecParentRefsPatch {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of HTTPRoute.
         */
        export interface HTTPRouteSpecPatch {
            /**
             * Hostnames defines a set of hostnames that should match against the HTTP Host
             * header to select a HTTPRoute used to process the request. Implementations
             * MUST ignore any port value specified in the HTTP Host header while
             * performing a match and (absent of any applicable header modification
             * configuration) MUST forward this header unmodified to the backend.
             *
             * Valid values for Hostnames are determined by RFC 1123 definition of a
             * hostname with 2 notable exceptions:
             *
             * 1. IPs are not allowed.
             * 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
             *    label must appear by itself as the first label.
             *
             * If a hostname is specified by both the Listener and HTTPRoute, there
             * must be at least one intersecting hostname for the HTTPRoute to be
             * attached to the Listener. For example:
             *
             * * A Listener with `test.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames, or have specified at
             *   least one of `test.example.com` or `*.example.com`.
             * * A Listener with `*.example.com` as the hostname matches HTTPRoutes
             *   that have either not specified any hostnames or have specified at least
             *   one hostname that matches the Listener hostname. For example,
             *   `*.example.com`, `test.example.com`, and `foo.test.example.com` would
             *   all match. On the other hand, `example.com` and `test.example.net` would
             *   not match.
             *
             * Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
             * as a suffix match. That means that a match for `*.example.com` would match
             * both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
             *
             * If both the Listener and HTTPRoute have specified hostnames, any
             * HTTPRoute hostnames that do not match the Listener hostname MUST be
             * ignored. For example, if a Listener specified `*.example.com`, and the
             * HTTPRoute specified `test.example.com` and `test.example.net`,
             * `test.example.net` must not be considered for a match.
             *
             * If both the Listener and HTTPRoute have specified hostnames, and none
             * match with the criteria above, then the HTTPRoute is not accepted. The
             * implementation must raise an 'Accepted' Condition with a status of
             * `False` in the corresponding RouteParentStatus.
             *
             * In the event that multiple HTTPRoutes specify intersecting hostnames (e.g.
             * overlapping wildcard matching and exact matching hostnames), precedence must
             * be given to rules from the HTTPRoute with the largest number of:
             *
             * * Characters in a matching non-wildcard hostname.
             * * Characters in a matching hostname.
             *
             * If ties exist across multiple Routes, the matching precedence rules for
             * HTTPRouteMatches takes over.
             *
             * Support: Core
             */
            hostnames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ParentRefs references the resources (usually Gateways) that a Route wants
             * to be attached to. Note that the referenced parent resource needs to
             * allow this for the attachment to be complete. For Gateways, that means
             * the Gateway needs to allow attachment from Routes of this kind and
             * namespace. For Services, that means the Service must either be in the same
             * namespace for a "producer" route, or the mesh implementation must support
             * and allow "consumer" routes for the referenced Service. ReferenceGrant is
             * not applicable for governing ParentRefs to Services - it is not possible to
             * create a "producer" route for a Service in a different namespace from the
             * Route.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * This API may be extended in the future to support additional kinds of parent
             * resources.
             *
             * ParentRefs must be _distinct_. This means either that:
             *
             * * They select different objects.  If this is the case, then parentRef
             *   entries are distinct. In terms of fields, this means that the
             *   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
             *   be unique across all parentRef entries in the Route.
             * * They do not select different objects, but for each optional field used,
             *   each ParentRef that selects the same object must set the same set of
             *   optional fields to different values. If one ParentRef sets a
             *   combination of optional fields, all must set the same combination.
             *
             * Some examples:
             *
             * * If one ParentRef sets `sectionName`, all ParentRefs referencing the
             *   same object must also set `sectionName`.
             * * If one ParentRef sets `port`, all ParentRefs referencing the same
             *   object must also set `port`.
             * * If one ParentRef sets `sectionName` and `port`, all ParentRefs
             *   referencing the same object must also set `sectionName` and `port`.
             *
             * It is possible to separately reference multiple distinct objects that may
             * be collapsed by an implementation. For example, some implementations may
             * choose to merge compatible Gateway Listeners together. If that is the
             * case, the list of routes attached to those resources should also be
             * merged.
             *
             * Note that for ParentRefs that cross namespace boundaries, there are specific
             * rules. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example,
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable other kinds of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecParentRefsPatch>[]>;
            /**
             * Rules are a list of HTTP matchers, filters and actions.
             */
            rules?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesPatch>[]>;
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface HTTPRouteSpecRules {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive a 500 status code.
             *
             * See the HTTPBackendRef definition for the rules about what makes a single
             * HTTPBackendRef invalid.
             *
             * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive a 500 status code.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic must receive a 500. Implementations may
             * choose how that 50 percent is determined.
             *
             * When a HTTPBackendRef refers to a Service that has no ready endpoints,
             * implementations SHOULD return a 503 for requests to that backend instead.
             * If an implementation chooses to do this, all of the above rules for 500 responses
             * MUST also apply for responses that return a 503.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefs>[]>;
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * Wherever possible, implementations SHOULD implement filters in the order
             * they are specified.
             *
             * Implementations MAY choose to implement this ordering strictly, rejecting
             * any combination or order of filters that cannot be supported. If implementations
             * choose a strict interpretation of filter ordering, they MUST clearly document
             * that behavior.
             *
             * To reject an invalid combination or order of filters, implementations SHOULD
             * consider the Route Rules with this configuration invalid. If all Route Rules
             * in a Route are invalid, the entire Route would be considered invalid. If only
             * a portion of Route Rules are invalid, implementations MUST set the
             * "PartiallyInvalid" condition for the Route.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * All filters are expected to be compatible with each other except for the
             * URLRewrite and RequestRedirect filters, which may not be combined. If an
             * implementation cannot support other combinations of filters, they must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFilters>[]>;
            /**
             * Matches define conditions used for matching the rule against incoming
             * HTTP requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - path:
             *     value: "/foo"
             *   headers:
             *   - name: "version"
             *     value: "v2"
             * - path:
             *     value: "/v2/foo"
             * ```
             *
             * For a request to match against this rule, a request must satisfy
             * EITHER of the two conditions:
             *
             * - path prefixed with `/foo` AND contains the header `version: v2`
             * - path prefix of `/v2/foo`
             *
             * See the documentation for HTTPRouteMatch on how to specify multiple
             * match conditions that should be ANDed together.
             *
             * If no matches are specified, the default is a prefix
             * path match on "/", which has the effect of matching every
             * HTTP request.
             *
             * Proxy or Load Balancer routing configuration generated from HTTPRoutes
             * MUST prioritize matches based on the following criteria, continuing on
             * ties. Across all rules specified on applicable Routes, precedence must be
             * given to the match having:
             *
             * * "Exact" path match.
             * * "Prefix" path match with largest number of characters.
             * * Method match.
             * * Largest number of header matches.
             * * Largest number of query param matches.
             *
             * Note: The precedence of RegularExpression path matches are implementation-specific.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within an HTTPRoute, matching precedence MUST be granted
             * to the FIRST matching rule (in list order) with a match meeting the above
             * criteria.
             *
             * When no rules matching a request have been successfully attached to the
             * parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatches>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
            retry?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesRetry>;
            sessionPersistence?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesSessionPersistence>;
            timeouts?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesTimeouts>;
        }

        /**
         * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         */
        export interface HTTPRouteSpecRulesBackendRefs {
            /**
             * Filters defined at this level should be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in HTTPRouteRule.)
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFilters>[]>;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesBackendRefsFilters {
            cors?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersCors>;
            extensionRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersExtensionRef>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifier>;
            requestMirror?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirror>;
            requestRedirect?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirect>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifier>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
            urlRewrite?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewrite>;
        }

        /**
         * CORS defines a schema for a filter that responds to the
         * cross-origin request based on HTTP response header.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersCors {
            /**
             * AllowCredentials indicates whether the actual cross-origin request allows
             * to include credentials.
             *
             * The only valid value for the `Access-Control-Allow-Credentials` response
             * header is true (case-sensitive).
             *
             * If the credentials are not allowed in cross-origin requests, the gateway
             * will omit the header `Access-Control-Allow-Credentials` entirely rather
             * than setting its value to false.
             *
             * Support: Extended
             */
            allowCredentials?: pulumi.Input<boolean>;
            /**
             * AllowHeaders indicates which HTTP request headers are supported for
             * accessing the requested resource.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Allow-Headers`
             * response header are separated by a comma (",").
             *
             * When the `AllowHeaders` field is configured with one or more headers, the
             * gateway must return the `Access-Control-Allow-Headers` response header
             * which value is present in the `AllowHeaders` field.
             *
             * If any header name in the `Access-Control-Request-Headers` request header
             * is not included in the list of header names specified by the response
             * header `Access-Control-Allow-Headers`, it will present an error on the
             * client side.
             *
             * If any header name in the `Access-Control-Allow-Headers` response header
             * does not recognize by the client, it will also occur an error on the
             * client side.
             *
             * A wildcard indicates that the requests with all HTTP headers are allowed.
             * The `Access-Control-Allow-Headers` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowHeaders` field
             * specified with the `*` wildcard, the gateway must specify one or more
             * HTTP headers in the value of the `Access-Control-Allow-Headers` response
             * header. The value of the header `Access-Control-Allow-Headers` is same as
             * the `Access-Control-Request-Headers` header provided by the client. If
             * the header `Access-Control-Request-Headers` is not included in the
             * request, the gateway will omit the `Access-Control-Allow-Headers`
             * response header, instead of specifying the `*` wildcard. A Gateway
             * implementation may choose to add implementation-specific default headers.
             *
             * Support: Extended
             */
            allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowMethods indicates which HTTP methods are supported for accessing the
             * requested resource.
             *
             * Valid values are any method defined by RFC9110, along with the special
             * value `*`, which represents all HTTP methods are allowed.
             *
             * Method names are case sensitive, so these values are also case-sensitive.
             * (See https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)
             *
             * Multiple method names in the value of the `Access-Control-Allow-Methods`
             * response header are separated by a comma (",").
             *
             * A CORS-safelisted method is a method that is `GET`, `HEAD`, or `POST`.
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-method) The
             * CORS-safelisted methods are always allowed, regardless of whether they
             * are specified in the `AllowMethods` field.
             *
             * When the `AllowMethods` field is configured with one or more methods, the
             * gateway must return the `Access-Control-Allow-Methods` response header
             * which value is present in the `AllowMethods` field.
             *
             * If the HTTP method of the `Access-Control-Request-Method` request header
             * is not included in the list of methods specified by the response header
             * `Access-Control-Allow-Methods`, it will present an error on the client
             * side.
             *
             * The `Access-Control-Allow-Methods` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowMethods` field
             * specified with the `*` wildcard, the gateway must specify one HTTP method
             * in the value of the Access-Control-Allow-Methods response header. The
             * value of the header `Access-Control-Allow-Methods` is same as the
             * `Access-Control-Request-Method` header provided by the client. If the
             * header `Access-Control-Request-Method` is not included in the request,
             * the gateway will omit the `Access-Control-Allow-Methods` response header,
             * instead of specifying the `*` wildcard. A Gateway implementation may
             * choose to add implementation-specific default methods.
             *
             * Support: Extended
             */
            allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowOrigins indicates whether the response can be shared with requested
             * resource from the given `Origin`.
             *
             * The `Origin` consists of a scheme and a host, with an optional port, and
             * takes the form `<scheme>://<host>(:<port>)`.
             *
             * Valid values for scheme are: `http` and `https`.
             *
             * Valid values for port are any integer between 1 and 65535 (the list of
             * available TCP/UDP ports). Note that, if not included, port `80` is
             * assumed for `http` scheme origins, and port `443` is assumed for `https`
             * origins. This may affect origin matching.
             *
             * The host part of the origin may contain the wildcard character `*`. These
             * wildcard characters behave as follows:
             *
             * * `*` is a greedy match to the _left_, including any number of
             *   DNS labels to the left of its position. This also means that
             *   `*` will include any number of period `.` characters to the
             *   left of its position.
             * * A wildcard by itself matches all hosts.
             *
             * An origin value that includes _only_ the `*` character indicates requests
             * from all `Origin`s are allowed.
             *
             * When the `AllowOrigins` field is configured with multiple origins, it
             * means the server supports clients from multiple origins. If the request
             * `Origin` matches the configured allowed origins, the gateway must return
             * the given `Origin` and sets value of the header
             * `Access-Control-Allow-Origin` same as the `Origin` header provided by the
             * client.
             *
             * The status code of a successful response to a "preflight" request is
             * always an OK status (i.e., 204 or 200).
             *
             * If the request `Origin` does not match the configured allowed origins,
             * the gateway returns 204/200 response but doesn't set the relevant
             * cross-origin response headers. Alternatively, the gateway responds with
             * 403 status to the "preflight" request is denied, coupled with omitting
             * the CORS headers. The cross-origin request fails on the client side.
             * Therefore, the client doesn't attempt the actual cross-origin request.
             *
             * The `Access-Control-Allow-Origin` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowOrigins` field
             * specified with the `*` wildcard, the gateway must return a single origin
             * in the value of the `Access-Control-Allow-Origin` response header,
             * instead of specifying the `*` wildcard. The value of the header
             * `Access-Control-Allow-Origin` is same as the `Origin` header provided by
             * the client.
             *
             * Support: Extended
             */
            allowOrigins?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExposeHeaders indicates which HTTP response headers can be exposed
             * to client-side scripts in response to a cross-origin request.
             *
             * A CORS-safelisted response header is an HTTP header in a CORS response
             * that it is considered safe to expose to the client scripts.
             * The CORS-safelisted response headers include the following headers:
             * `Cache-Control`
             * `Content-Language`
             * `Content-Length`
             * `Content-Type`
             * `Expires`
             * `Last-Modified`
             * `Pragma`
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name)
             * The CORS-safelisted response headers are exposed to client by default.
             *
             * When an HTTP header name is specified using the `ExposeHeaders` field,
             * this additional header will be exposed as part of the response to the
             * client.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Expose-Headers`
             * response header are separated by a comma (",").
             *
             * A wildcard indicates that the responses with all HTTP headers are exposed
             * to clients. The `Access-Control-Expose-Headers` response header can only
             * use `*` wildcard as value when the `AllowCredentials` field is
             * unspecified.
             *
             * Support: Extended
             */
            exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxAge indicates the duration (in seconds) for the client to cache the
             * results of a "preflight" request.
             *
             * The information provided by the `Access-Control-Allow-Methods` and
             * `Access-Control-Allow-Headers` response headers can be cached by the
             * client until the time specified by `Access-Control-Max-Age` elapses.
             *
             * The default value of `Access-Control-Max-Age` response header is 5
             * (seconds).
             */
            maxAge?: pulumi.Input<number>;
        }

        /**
         * CORS defines a schema for a filter that responds to the
         * cross-origin request based on HTTP response header.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersCorsPatch {
            /**
             * AllowCredentials indicates whether the actual cross-origin request allows
             * to include credentials.
             *
             * The only valid value for the `Access-Control-Allow-Credentials` response
             * header is true (case-sensitive).
             *
             * If the credentials are not allowed in cross-origin requests, the gateway
             * will omit the header `Access-Control-Allow-Credentials` entirely rather
             * than setting its value to false.
             *
             * Support: Extended
             */
            allowCredentials?: pulumi.Input<boolean>;
            /**
             * AllowHeaders indicates which HTTP request headers are supported for
             * accessing the requested resource.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Allow-Headers`
             * response header are separated by a comma (",").
             *
             * When the `AllowHeaders` field is configured with one or more headers, the
             * gateway must return the `Access-Control-Allow-Headers` response header
             * which value is present in the `AllowHeaders` field.
             *
             * If any header name in the `Access-Control-Request-Headers` request header
             * is not included in the list of header names specified by the response
             * header `Access-Control-Allow-Headers`, it will present an error on the
             * client side.
             *
             * If any header name in the `Access-Control-Allow-Headers` response header
             * does not recognize by the client, it will also occur an error on the
             * client side.
             *
             * A wildcard indicates that the requests with all HTTP headers are allowed.
             * The `Access-Control-Allow-Headers` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowHeaders` field
             * specified with the `*` wildcard, the gateway must specify one or more
             * HTTP headers in the value of the `Access-Control-Allow-Headers` response
             * header. The value of the header `Access-Control-Allow-Headers` is same as
             * the `Access-Control-Request-Headers` header provided by the client. If
             * the header `Access-Control-Request-Headers` is not included in the
             * request, the gateway will omit the `Access-Control-Allow-Headers`
             * response header, instead of specifying the `*` wildcard. A Gateway
             * implementation may choose to add implementation-specific default headers.
             *
             * Support: Extended
             */
            allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowMethods indicates which HTTP methods are supported for accessing the
             * requested resource.
             *
             * Valid values are any method defined by RFC9110, along with the special
             * value `*`, which represents all HTTP methods are allowed.
             *
             * Method names are case sensitive, so these values are also case-sensitive.
             * (See https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)
             *
             * Multiple method names in the value of the `Access-Control-Allow-Methods`
             * response header are separated by a comma (",").
             *
             * A CORS-safelisted method is a method that is `GET`, `HEAD`, or `POST`.
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-method) The
             * CORS-safelisted methods are always allowed, regardless of whether they
             * are specified in the `AllowMethods` field.
             *
             * When the `AllowMethods` field is configured with one or more methods, the
             * gateway must return the `Access-Control-Allow-Methods` response header
             * which value is present in the `AllowMethods` field.
             *
             * If the HTTP method of the `Access-Control-Request-Method` request header
             * is not included in the list of methods specified by the response header
             * `Access-Control-Allow-Methods`, it will present an error on the client
             * side.
             *
             * The `Access-Control-Allow-Methods` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowMethods` field
             * specified with the `*` wildcard, the gateway must specify one HTTP method
             * in the value of the Access-Control-Allow-Methods response header. The
             * value of the header `Access-Control-Allow-Methods` is same as the
             * `Access-Control-Request-Method` header provided by the client. If the
             * header `Access-Control-Request-Method` is not included in the request,
             * the gateway will omit the `Access-Control-Allow-Methods` response header,
             * instead of specifying the `*` wildcard. A Gateway implementation may
             * choose to add implementation-specific default methods.
             *
             * Support: Extended
             */
            allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowOrigins indicates whether the response can be shared with requested
             * resource from the given `Origin`.
             *
             * The `Origin` consists of a scheme and a host, with an optional port, and
             * takes the form `<scheme>://<host>(:<port>)`.
             *
             * Valid values for scheme are: `http` and `https`.
             *
             * Valid values for port are any integer between 1 and 65535 (the list of
             * available TCP/UDP ports). Note that, if not included, port `80` is
             * assumed for `http` scheme origins, and port `443` is assumed for `https`
             * origins. This may affect origin matching.
             *
             * The host part of the origin may contain the wildcard character `*`. These
             * wildcard characters behave as follows:
             *
             * * `*` is a greedy match to the _left_, including any number of
             *   DNS labels to the left of its position. This also means that
             *   `*` will include any number of period `.` characters to the
             *   left of its position.
             * * A wildcard by itself matches all hosts.
             *
             * An origin value that includes _only_ the `*` character indicates requests
             * from all `Origin`s are allowed.
             *
             * When the `AllowOrigins` field is configured with multiple origins, it
             * means the server supports clients from multiple origins. If the request
             * `Origin` matches the configured allowed origins, the gateway must return
             * the given `Origin` and sets value of the header
             * `Access-Control-Allow-Origin` same as the `Origin` header provided by the
             * client.
             *
             * The status code of a successful response to a "preflight" request is
             * always an OK status (i.e., 204 or 200).
             *
             * If the request `Origin` does not match the configured allowed origins,
             * the gateway returns 204/200 response but doesn't set the relevant
             * cross-origin response headers. Alternatively, the gateway responds with
             * 403 status to the "preflight" request is denied, coupled with omitting
             * the CORS headers. The cross-origin request fails on the client side.
             * Therefore, the client doesn't attempt the actual cross-origin request.
             *
             * The `Access-Control-Allow-Origin` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowOrigins` field
             * specified with the `*` wildcard, the gateway must return a single origin
             * in the value of the `Access-Control-Allow-Origin` response header,
             * instead of specifying the `*` wildcard. The value of the header
             * `Access-Control-Allow-Origin` is same as the `Origin` header provided by
             * the client.
             *
             * Support: Extended
             */
            allowOrigins?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExposeHeaders indicates which HTTP response headers can be exposed
             * to client-side scripts in response to a cross-origin request.
             *
             * A CORS-safelisted response header is an HTTP header in a CORS response
             * that it is considered safe to expose to the client scripts.
             * The CORS-safelisted response headers include the following headers:
             * `Cache-Control`
             * `Content-Language`
             * `Content-Length`
             * `Content-Type`
             * `Expires`
             * `Last-Modified`
             * `Pragma`
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name)
             * The CORS-safelisted response headers are exposed to client by default.
             *
             * When an HTTP header name is specified using the `ExposeHeaders` field,
             * this additional header will be exposed as part of the response to the
             * client.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Expose-Headers`
             * response header are separated by a comma (",").
             *
             * A wildcard indicates that the responses with all HTTP headers are exposed
             * to clients. The `Access-Control-Expose-Headers` response header can only
             * use `*` wildcard as value when the `AllowCredentials` field is
             * unspecified.
             *
             * Support: Extended
             */
            exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxAge indicates the duration (in seconds) for the client to cache the
             * results of a "preflight" request.
             *
             * The information provided by the `Access-Control-Allow-Methods` and
             * `Access-Control-Allow-Headers` response headers can be cached by the
             * client until the time specified by `Access-Control-Max-Age` elapses.
             *
             * The default value of `Access-Control-Max-Age` response header is 5
             * (seconds).
             */
            maxAge?: pulumi.Input<number>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersPatch {
            cors?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersCorsPatch>;
            extensionRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersExtensionRefPatch>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch>;
            requestMirror?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorPatch>;
            requestRedirect?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPatch>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
            urlRewrite?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePatch>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirror {
            backendRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef>;
            fraction?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorFraction>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorFraction {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorFractionPatch {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorPatch {
            backendRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch>;
            fraction?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestMirrorFractionPatch>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPath>;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPatch {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathPatch>;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersRequestRedirectPathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewrite {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePath>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePatch {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathPatch>;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesBackendRefsFiltersUrlRewritePathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * HTTPBackendRef defines how a HTTPRoute forwards a HTTP request.
         *
         * Note that when a namespace different than the local namespace is specified, a
         * ReferenceGrant object is required in the referent namespace to allow that
         * namespace's owner to accept the reference. See the ReferenceGrant
         * documentation for details.
         *
         *
         * When the BackendRef points to a Kubernetes Service, implementations SHOULD
         * honor the appProtocol field if it is set for the target Service Port.
         *
         * Implementations supporting appProtocol SHOULD recognize the Kubernetes
         * Standard Application Protocols defined in KEP-3726.
         *
         * If a Service appProtocol isn't specified, an implementation MAY infer the
         * backend protocol through its own means. Implementations MAY infer the
         * protocol from the Route type referring to the backend Service.
         *
         * If a Route is not able to send traffic to the backend using the specified
         * protocol then the backend is considered invalid. Implementations MUST set the
         * "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
         */
        export interface HTTPRouteSpecRulesBackendRefsPatch {
            /**
             * Filters defined at this level should be executed if and only if the
             * request is being forwarded to the backend defined here.
             *
             * Support: Implementation-specific (For broader support of filters, use the
             * Filters field in HTTPRouteRule.)
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsFiltersPatch>[]>;
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
            /**
             * Weight specifies the proportion of requests forwarded to the referenced
             * backend. This is computed as weight/(sum of all weights in this
             * BackendRefs list). For non-zero values, there may be some epsilon from
             * the exact proportion defined here depending on the precision an
             * implementation supports. Weight is not a percentage and the sum of
             * weights does not need to equal 100.
             *
             * If only one backend is specified and it has a weight greater than 0, 100%
             * of the traffic is forwarded to that backend. If weight is set to 0, no
             * traffic should be forwarded for this entry. If unspecified, weight
             * defaults to 1.
             *
             * Support for this field varies based on the context where used.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFilters {
            cors?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersCors>;
            extensionRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersExtensionRef>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifier>;
            requestMirror?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirror>;
            requestRedirect?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestRedirect>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifier>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
            urlRewrite?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersUrlRewrite>;
        }

        /**
         * CORS defines a schema for a filter that responds to the
         * cross-origin request based on HTTP response header.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersCors {
            /**
             * AllowCredentials indicates whether the actual cross-origin request allows
             * to include credentials.
             *
             * The only valid value for the `Access-Control-Allow-Credentials` response
             * header is true (case-sensitive).
             *
             * If the credentials are not allowed in cross-origin requests, the gateway
             * will omit the header `Access-Control-Allow-Credentials` entirely rather
             * than setting its value to false.
             *
             * Support: Extended
             */
            allowCredentials?: pulumi.Input<boolean>;
            /**
             * AllowHeaders indicates which HTTP request headers are supported for
             * accessing the requested resource.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Allow-Headers`
             * response header are separated by a comma (",").
             *
             * When the `AllowHeaders` field is configured with one or more headers, the
             * gateway must return the `Access-Control-Allow-Headers` response header
             * which value is present in the `AllowHeaders` field.
             *
             * If any header name in the `Access-Control-Request-Headers` request header
             * is not included in the list of header names specified by the response
             * header `Access-Control-Allow-Headers`, it will present an error on the
             * client side.
             *
             * If any header name in the `Access-Control-Allow-Headers` response header
             * does not recognize by the client, it will also occur an error on the
             * client side.
             *
             * A wildcard indicates that the requests with all HTTP headers are allowed.
             * The `Access-Control-Allow-Headers` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowHeaders` field
             * specified with the `*` wildcard, the gateway must specify one or more
             * HTTP headers in the value of the `Access-Control-Allow-Headers` response
             * header. The value of the header `Access-Control-Allow-Headers` is same as
             * the `Access-Control-Request-Headers` header provided by the client. If
             * the header `Access-Control-Request-Headers` is not included in the
             * request, the gateway will omit the `Access-Control-Allow-Headers`
             * response header, instead of specifying the `*` wildcard. A Gateway
             * implementation may choose to add implementation-specific default headers.
             *
             * Support: Extended
             */
            allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowMethods indicates which HTTP methods are supported for accessing the
             * requested resource.
             *
             * Valid values are any method defined by RFC9110, along with the special
             * value `*`, which represents all HTTP methods are allowed.
             *
             * Method names are case sensitive, so these values are also case-sensitive.
             * (See https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)
             *
             * Multiple method names in the value of the `Access-Control-Allow-Methods`
             * response header are separated by a comma (",").
             *
             * A CORS-safelisted method is a method that is `GET`, `HEAD`, or `POST`.
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-method) The
             * CORS-safelisted methods are always allowed, regardless of whether they
             * are specified in the `AllowMethods` field.
             *
             * When the `AllowMethods` field is configured with one or more methods, the
             * gateway must return the `Access-Control-Allow-Methods` response header
             * which value is present in the `AllowMethods` field.
             *
             * If the HTTP method of the `Access-Control-Request-Method` request header
             * is not included in the list of methods specified by the response header
             * `Access-Control-Allow-Methods`, it will present an error on the client
             * side.
             *
             * The `Access-Control-Allow-Methods` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowMethods` field
             * specified with the `*` wildcard, the gateway must specify one HTTP method
             * in the value of the Access-Control-Allow-Methods response header. The
             * value of the header `Access-Control-Allow-Methods` is same as the
             * `Access-Control-Request-Method` header provided by the client. If the
             * header `Access-Control-Request-Method` is not included in the request,
             * the gateway will omit the `Access-Control-Allow-Methods` response header,
             * instead of specifying the `*` wildcard. A Gateway implementation may
             * choose to add implementation-specific default methods.
             *
             * Support: Extended
             */
            allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowOrigins indicates whether the response can be shared with requested
             * resource from the given `Origin`.
             *
             * The `Origin` consists of a scheme and a host, with an optional port, and
             * takes the form `<scheme>://<host>(:<port>)`.
             *
             * Valid values for scheme are: `http` and `https`.
             *
             * Valid values for port are any integer between 1 and 65535 (the list of
             * available TCP/UDP ports). Note that, if not included, port `80` is
             * assumed for `http` scheme origins, and port `443` is assumed for `https`
             * origins. This may affect origin matching.
             *
             * The host part of the origin may contain the wildcard character `*`. These
             * wildcard characters behave as follows:
             *
             * * `*` is a greedy match to the _left_, including any number of
             *   DNS labels to the left of its position. This also means that
             *   `*` will include any number of period `.` characters to the
             *   left of its position.
             * * A wildcard by itself matches all hosts.
             *
             * An origin value that includes _only_ the `*` character indicates requests
             * from all `Origin`s are allowed.
             *
             * When the `AllowOrigins` field is configured with multiple origins, it
             * means the server supports clients from multiple origins. If the request
             * `Origin` matches the configured allowed origins, the gateway must return
             * the given `Origin` and sets value of the header
             * `Access-Control-Allow-Origin` same as the `Origin` header provided by the
             * client.
             *
             * The status code of a successful response to a "preflight" request is
             * always an OK status (i.e., 204 or 200).
             *
             * If the request `Origin` does not match the configured allowed origins,
             * the gateway returns 204/200 response but doesn't set the relevant
             * cross-origin response headers. Alternatively, the gateway responds with
             * 403 status to the "preflight" request is denied, coupled with omitting
             * the CORS headers. The cross-origin request fails on the client side.
             * Therefore, the client doesn't attempt the actual cross-origin request.
             *
             * The `Access-Control-Allow-Origin` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowOrigins` field
             * specified with the `*` wildcard, the gateway must return a single origin
             * in the value of the `Access-Control-Allow-Origin` response header,
             * instead of specifying the `*` wildcard. The value of the header
             * `Access-Control-Allow-Origin` is same as the `Origin` header provided by
             * the client.
             *
             * Support: Extended
             */
            allowOrigins?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExposeHeaders indicates which HTTP response headers can be exposed
             * to client-side scripts in response to a cross-origin request.
             *
             * A CORS-safelisted response header is an HTTP header in a CORS response
             * that it is considered safe to expose to the client scripts.
             * The CORS-safelisted response headers include the following headers:
             * `Cache-Control`
             * `Content-Language`
             * `Content-Length`
             * `Content-Type`
             * `Expires`
             * `Last-Modified`
             * `Pragma`
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name)
             * The CORS-safelisted response headers are exposed to client by default.
             *
             * When an HTTP header name is specified using the `ExposeHeaders` field,
             * this additional header will be exposed as part of the response to the
             * client.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Expose-Headers`
             * response header are separated by a comma (",").
             *
             * A wildcard indicates that the responses with all HTTP headers are exposed
             * to clients. The `Access-Control-Expose-Headers` response header can only
             * use `*` wildcard as value when the `AllowCredentials` field is
             * unspecified.
             *
             * Support: Extended
             */
            exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxAge indicates the duration (in seconds) for the client to cache the
             * results of a "preflight" request.
             *
             * The information provided by the `Access-Control-Allow-Methods` and
             * `Access-Control-Allow-Headers` response headers can be cached by the
             * client until the time specified by `Access-Control-Max-Age` elapses.
             *
             * The default value of `Access-Control-Max-Age` response header is 5
             * (seconds).
             */
            maxAge?: pulumi.Input<number>;
        }

        /**
         * CORS defines a schema for a filter that responds to the
         * cross-origin request based on HTTP response header.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersCorsPatch {
            /**
             * AllowCredentials indicates whether the actual cross-origin request allows
             * to include credentials.
             *
             * The only valid value for the `Access-Control-Allow-Credentials` response
             * header is true (case-sensitive).
             *
             * If the credentials are not allowed in cross-origin requests, the gateway
             * will omit the header `Access-Control-Allow-Credentials` entirely rather
             * than setting its value to false.
             *
             * Support: Extended
             */
            allowCredentials?: pulumi.Input<boolean>;
            /**
             * AllowHeaders indicates which HTTP request headers are supported for
             * accessing the requested resource.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Allow-Headers`
             * response header are separated by a comma (",").
             *
             * When the `AllowHeaders` field is configured with one or more headers, the
             * gateway must return the `Access-Control-Allow-Headers` response header
             * which value is present in the `AllowHeaders` field.
             *
             * If any header name in the `Access-Control-Request-Headers` request header
             * is not included in the list of header names specified by the response
             * header `Access-Control-Allow-Headers`, it will present an error on the
             * client side.
             *
             * If any header name in the `Access-Control-Allow-Headers` response header
             * does not recognize by the client, it will also occur an error on the
             * client side.
             *
             * A wildcard indicates that the requests with all HTTP headers are allowed.
             * The `Access-Control-Allow-Headers` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowHeaders` field
             * specified with the `*` wildcard, the gateway must specify one or more
             * HTTP headers in the value of the `Access-Control-Allow-Headers` response
             * header. The value of the header `Access-Control-Allow-Headers` is same as
             * the `Access-Control-Request-Headers` header provided by the client. If
             * the header `Access-Control-Request-Headers` is not included in the
             * request, the gateway will omit the `Access-Control-Allow-Headers`
             * response header, instead of specifying the `*` wildcard. A Gateway
             * implementation may choose to add implementation-specific default headers.
             *
             * Support: Extended
             */
            allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowMethods indicates which HTTP methods are supported for accessing the
             * requested resource.
             *
             * Valid values are any method defined by RFC9110, along with the special
             * value `*`, which represents all HTTP methods are allowed.
             *
             * Method names are case sensitive, so these values are also case-sensitive.
             * (See https://www.rfc-editor.org/rfc/rfc2616#section-5.1.1)
             *
             * Multiple method names in the value of the `Access-Control-Allow-Methods`
             * response header are separated by a comma (",").
             *
             * A CORS-safelisted method is a method that is `GET`, `HEAD`, or `POST`.
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-method) The
             * CORS-safelisted methods are always allowed, regardless of whether they
             * are specified in the `AllowMethods` field.
             *
             * When the `AllowMethods` field is configured with one or more methods, the
             * gateway must return the `Access-Control-Allow-Methods` response header
             * which value is present in the `AllowMethods` field.
             *
             * If the HTTP method of the `Access-Control-Request-Method` request header
             * is not included in the list of methods specified by the response header
             * `Access-Control-Allow-Methods`, it will present an error on the client
             * side.
             *
             * The `Access-Control-Allow-Methods` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowMethods` field
             * specified with the `*` wildcard, the gateway must specify one HTTP method
             * in the value of the Access-Control-Allow-Methods response header. The
             * value of the header `Access-Control-Allow-Methods` is same as the
             * `Access-Control-Request-Method` header provided by the client. If the
             * header `Access-Control-Request-Method` is not included in the request,
             * the gateway will omit the `Access-Control-Allow-Methods` response header,
             * instead of specifying the `*` wildcard. A Gateway implementation may
             * choose to add implementation-specific default methods.
             *
             * Support: Extended
             */
            allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AllowOrigins indicates whether the response can be shared with requested
             * resource from the given `Origin`.
             *
             * The `Origin` consists of a scheme and a host, with an optional port, and
             * takes the form `<scheme>://<host>(:<port>)`.
             *
             * Valid values for scheme are: `http` and `https`.
             *
             * Valid values for port are any integer between 1 and 65535 (the list of
             * available TCP/UDP ports). Note that, if not included, port `80` is
             * assumed for `http` scheme origins, and port `443` is assumed for `https`
             * origins. This may affect origin matching.
             *
             * The host part of the origin may contain the wildcard character `*`. These
             * wildcard characters behave as follows:
             *
             * * `*` is a greedy match to the _left_, including any number of
             *   DNS labels to the left of its position. This also means that
             *   `*` will include any number of period `.` characters to the
             *   left of its position.
             * * A wildcard by itself matches all hosts.
             *
             * An origin value that includes _only_ the `*` character indicates requests
             * from all `Origin`s are allowed.
             *
             * When the `AllowOrigins` field is configured with multiple origins, it
             * means the server supports clients from multiple origins. If the request
             * `Origin` matches the configured allowed origins, the gateway must return
             * the given `Origin` and sets value of the header
             * `Access-Control-Allow-Origin` same as the `Origin` header provided by the
             * client.
             *
             * The status code of a successful response to a "preflight" request is
             * always an OK status (i.e., 204 or 200).
             *
             * If the request `Origin` does not match the configured allowed origins,
             * the gateway returns 204/200 response but doesn't set the relevant
             * cross-origin response headers. Alternatively, the gateway responds with
             * 403 status to the "preflight" request is denied, coupled with omitting
             * the CORS headers. The cross-origin request fails on the client side.
             * Therefore, the client doesn't attempt the actual cross-origin request.
             *
             * The `Access-Control-Allow-Origin` response header can only use `*`
             * wildcard as value when the `AllowCredentials` field is unspecified.
             *
             * When the `AllowCredentials` field is specified and `AllowOrigins` field
             * specified with the `*` wildcard, the gateway must return a single origin
             * in the value of the `Access-Control-Allow-Origin` response header,
             * instead of specifying the `*` wildcard. The value of the header
             * `Access-Control-Allow-Origin` is same as the `Origin` header provided by
             * the client.
             *
             * Support: Extended
             */
            allowOrigins?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ExposeHeaders indicates which HTTP response headers can be exposed
             * to client-side scripts in response to a cross-origin request.
             *
             * A CORS-safelisted response header is an HTTP header in a CORS response
             * that it is considered safe to expose to the client scripts.
             * The CORS-safelisted response headers include the following headers:
             * `Cache-Control`
             * `Content-Language`
             * `Content-Length`
             * `Content-Type`
             * `Expires`
             * `Last-Modified`
             * `Pragma`
             * (See https://fetch.spec.whatwg.org/#cors-safelisted-response-header-name)
             * The CORS-safelisted response headers are exposed to client by default.
             *
             * When an HTTP header name is specified using the `ExposeHeaders` field,
             * this additional header will be exposed as part of the response to the
             * client.
             *
             * Header names are not case sensitive.
             *
             * Multiple header names in the value of the `Access-Control-Expose-Headers`
             * response header are separated by a comma (",").
             *
             * A wildcard indicates that the responses with all HTTP headers are exposed
             * to clients. The `Access-Control-Expose-Headers` response header can only
             * use `*` wildcard as value when the `AllowCredentials` field is
             * unspecified.
             *
             * Support: Extended
             */
            exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxAge indicates the duration (in seconds) for the client to cache the
             * results of a "preflight" request.
             *
             * The information provided by the `Access-Control-Allow-Methods` and
             * `Access-Control-Allow-Headers` response headers can be cached by the
             * client until the time specified by `Access-Control-Max-Age` elapses.
             *
             * The default value of `Access-Control-Max-Age` response header is 5
             * (seconds).
             */
            maxAge?: pulumi.Input<number>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesFiltersExtensionRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ExtensionRef is an optional, implementation-specific extension to the
         * "filter" behavior.  For example, resource "myroutefilter" in group
         * "networking.example.net"). ExtensionRef MUST NOT be used for core and
         * extended filters.
         *
         * This filter can be used multiple times within the same rule.
         *
         * Support: Implementation-specific
         */
        export interface HTTPRouteSpecRulesFiltersExtensionRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. For example "HTTPRoute" or "Service".
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * HTTPRouteFilter defines processing steps that must be completed during the
         * request or response lifecycle. HTTPRouteFilters are meant as an extension
         * point to express processing that may be done in Gateway implementations. Some
         * examples include request or response modification, implementing
         * authentication strategies, rate-limiting, and traffic shaping. API
         * guarantee/conformance is defined based on the type of the filter.
         */
        export interface HTTPRouteSpecRulesFiltersPatch {
            cors?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersCorsPatch>;
            extensionRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersExtensionRefPatch>;
            requestHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierPatch>;
            requestMirror?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirrorPatch>;
            requestRedirect?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestRedirectPatch>;
            responseHeaderModifier?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierPatch>;
            /**
             * Type identifies the type of filter to apply. As with other API fields,
             * types are classified into three conformance levels:
             *
             * - Core: Filter types and their corresponding configuration defined by
             *   "Support: Core" in this package, e.g. "RequestHeaderModifier". All
             *   implementations must support core filters.
             *
             * - Extended: Filter types and their corresponding configuration defined by
             *   "Support: Extended" in this package, e.g. "RequestMirror". Implementers
             *   are encouraged to support extended filters.
             *
             * - Implementation-specific: Filters that are defined and supported by
             *   specific vendors.
             *   In the future, filters showing convergence in behavior across multiple
             *   implementations will be considered for inclusion in extended or core
             *   conformance levels. Filter-specific configuration for such filters
             *   is specified using the ExtensionRef field. `Type` should be set to
             *   "ExtensionRef" for custom filters.
             *
             * Implementers are encouraged to define custom implementation types to
             * extend the core API with implementation-specific behavior.
             *
             * If a reference to a custom filter type cannot be resolved, the filter
             * MUST NOT be skipped. Instead, requests that would have been processed by
             * that filter MUST receive a HTTP error response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
            urlRewrite?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersUrlRewritePatch>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestHeaderModifier defines a schema for a filter that modifies request
         * headers.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersRequestHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirror {
            backendRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirrorBackendRef>;
            fraction?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirrorFraction>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorBackendRef {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * BackendRef references a resource where mirrored requests are sent.
         *
         * Mirrored requests must be sent only to a single destination endpoint
         * within this BackendRef, irrespective of how many endpoints are present
         * within this BackendRef.
         *
         * If the referent cannot be found, this BackendRef is invalid and must be
         * dropped from the Gateway. The controller must ensure the "ResolvedRefs"
         * condition on the Route status is set to `status: False` and not configure
         * this backend in the underlying implementation.
         *
         * If there is a cross-namespace reference to an *existing* object
         * that is not allowed by a ReferenceGrant, the controller must ensure the
         * "ResolvedRefs"  condition on the Route is set to `status: False`,
         * with the "RefNotPermitted" reason and not configure this backend in the
         * underlying implementation.
         *
         * In either error case, the Message of the `ResolvedRefs` Condition
         * should be used to provide more detail about the problem.
         *
         * Support: Extended for Kubernetes Service
         *
         * Support: Implementation-specific for any other resource
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorBackendRefPatch {
            /**
             * Group is the group of the referent. For example, "gateway.networking.k8s.io".
             * When unspecified or empty string, core API group is inferred.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the Kubernetes resource kind of the referent. For example
             * "Service".
             *
             * Defaults to "Service" when not specified.
             *
             * ExternalName services can refer to CNAME DNS records that may live
             * outside of the cluster and as such are difficult to reason about in
             * terms of conformance. They also may not be safe to forward to (see
             * CVE-2021-25740 for more information). Implementations SHOULD NOT
             * support ExternalName Services.
             *
             * Support: Core (Services with a type other than ExternalName)
             *
             * Support: Implementation-specific (Services with type ExternalName)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the backend. When unspecified, the local
             * namespace is inferred.
             *
             * Note that when a namespace different than the local namespace is specified,
             * a ReferenceGrant object is required in the referent namespace to allow that
             * namespace's owner to accept the reference. See the ReferenceGrant
             * documentation for details.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port specifies the destination port number to use for this resource.
             * Port is required when the referent is a Kubernetes Service. In this
             * case, the port number is the service port number, not the target port.
             * For other resources, destination port might be derived from the referent
             * resource or this field.
             */
            port?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorFraction {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * Fraction represents the fraction of requests that should be
         * mirrored to BackendRef.
         *
         * Only one of Fraction or Percent may be specified. If neither field
         * is specified, 100% of requests will be mirrored.
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorFractionPatch {
            denominator?: pulumi.Input<number>;
            numerator?: pulumi.Input<number>;
        }

        /**
         * RequestMirror defines a schema for a filter that mirrors requests.
         * Requests are sent to the specified destination, but responses from
         * that destination are ignored.
         *
         * This filter can be used multiple times within the same rule. Note that
         * not all implementations will be able to support mirroring to multiple
         * backends.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestMirrorPatch {
            backendRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirrorBackendRefPatch>;
            fraction?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestMirrorFractionPatch>;
            /**
             * Percent represents the percentage of requests that should be
             * mirrored to BackendRef. Its minimum value is 0 (indicating 0% of
             * requests) and its maximum value is 100 (indicating 100% of requests).
             *
             * Only one of Fraction or Percent may be specified. If neither field
             * is specified, 100% of requests will be mirrored.
             */
            percent?: pulumi.Input<number>;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirect {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestRedirectPath>;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }

        /**
         * RequestRedirect defines a schema for a filter that responds to the
         * request with an HTTP redirection.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPatch {
            /**
             * Hostname is the hostname to be used in the value of the `Location`
             * header in the response.
             * When empty, the hostname in the `Host` header of the request is used.
             *
             * Support: Core
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersRequestRedirectPathPatch>;
            /**
             * Port is the port to be used in the value of the `Location`
             * header in the response.
             *
             * If no port is specified, the redirect port MUST be derived using the
             * following rules:
             *
             * * If redirect scheme is not-empty, the redirect port MUST be the well-known
             *   port associated with the redirect scheme. Specifically "http" to port 80
             *   and "https" to port 443. If the redirect scheme does not have a
             *   well-known port, the listener port of the Gateway SHOULD be used.
             * * If redirect scheme is empty, the redirect port MUST be the Gateway
             *   Listener port.
             *
             * Implementations SHOULD NOT add the port number in the 'Location'
             * header in the following cases:
             *
             * * A Location header that will use HTTP (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 80.
             * * A Location header that will use HTTPS (whether that is determined via
             *   the Listener protocol or the Scheme field) _and_ use port 443.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * Scheme is the scheme to be used in the value of the `Location` header in
             * the response. When empty, the scheme of the request is used.
             *
             * Scheme redirects can affect the port of the redirect, for more information,
             * refer to the documentation for the port field of this filter.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Extended
             */
            scheme?: pulumi.Input<string>;
            /**
             * StatusCode is the HTTP status code to be used in response.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             *
             * Support: Core
             */
            statusCode?: pulumi.Input<number>;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Path defines parameters used to modify the path of the incoming request.
         * The modified path is then used to construct the `Location` header. When
         * empty, the request path is used as-is.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersRequestRedirectPathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifier {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierAdd>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierSet>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierAdd {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierAddPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * ResponseHeaderModifier defines a schema for a filter that modifies response
         * headers.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierPatch {
            /**
             * Add adds the given header(s) (name, value) to the request
             * before the action. It appends to any existing values associated
             * with the header name.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   add:
             *   - name: "my-header"
             *     value: "bar,baz"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: foo,bar,baz
             */
            add?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierAddPatch>[]>;
            /**
             * Remove the given header(s) from the HTTP request before the action. The
             * value of Remove is a list of HTTP header names. Note that the header
             * names are case-insensitive (see
             * https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header1: foo
             *   my-header2: bar
             *   my-header3: baz
             *
             * Config:
             *   remove: ["my-header1", "my-header3"]
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header2: bar
             */
            remove?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Set overwrites the request with the given header (name, value)
             * before the action.
             *
             * Input:
             *   GET /foo HTTP/1.1
             *   my-header: foo
             *
             * Config:
             *   set:
             *   - name: "my-header"
             *     value: "bar"
             *
             * Output:
             *   GET /foo HTTP/1.1
             *   my-header: bar
             */
            set?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersResponseHeaderModifierSetPatch>[]>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierSet {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
         */
        export interface HTTPRouteSpecRulesFiltersResponseHeaderModifierSetPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, the first entry with
             * an equivalent name MUST be considered for a match. Subsequent entries
             * with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             */
            name?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewrite {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersUrlRewritePath>;
        }

        /**
         * URLRewrite defines a schema for a filter that modifies a request during forwarding.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePatch {
            /**
             * Hostname is the value to be used to replace the Host header value during
             * forwarding.
             *
             * Support: Extended
             */
            hostname?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersUrlRewritePathPatch>;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePath {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Path defines a path rewrite.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesFiltersUrlRewritePathPatch {
            /**
             * ReplaceFullPath specifies the value with which to replace the full path
             * of a request during a rewrite or redirect.
             */
            replaceFullPath?: pulumi.Input<string>;
            /**
             * ReplacePrefixMatch specifies the value with which to replace the prefix
             * match of a request during a rewrite or redirect. For example, a request
             * to "/foo/bar" with a prefix match of "/foo" and a ReplacePrefixMatch
             * of "/xyz" would be modified to "/xyz/bar".
             *
             * Note that this matches the behavior of the PathPrefix match type. This
             * matches full path elements. A path element refers to the list of labels
             * in the path split by the `/` separator. When specified, a trailing `/` is
             * ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all
             * match the prefix `/abc`, but the path `/abcd` would not.
             *
             * ReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch.
             * Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in
             * the implementation setting the Accepted Condition for the Route to `status: False`.
             *
             * Request Path | Prefix Match | Replace Prefix | Modified Path
             */
            replacePrefixMatch?: pulumi.Input<string>;
            /**
             * Type defines the type of path modifier. Additional types may be
             * added in a future release of the API.
             *
             * Note that values may be added to this enum, implementations
             * must ensure that unknown values will not cause a crash.
             *
             * Unknown values here must result in the implementation setting the
             * Accepted Condition for the Route to `status: False`, with a
             * Reason of `UnsupportedValue`.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a HTTP request only if its path
         * starts with `/foo` AND it contains the `version: v1` header:
         *
         * ```
         * match:
         *
         * 	path:
         * 	  value: "/foo"
         * 	headers:
         * 	- name: "version"
         * 	  value "v1"
         *
         * ```
         */
        export interface HTTPRouteSpecRulesMatches {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are
             * ANDed together, meaning, a request must match all the specified headers
             * to select the route.
             */
            headers?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesHeaders>[]>;
            /**
             * Method specifies HTTP method matcher.
             * When specified, this route will be matched only if the request has the
             * specified method.
             *
             * Support: Extended
             */
            method?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesPath>;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match
             * values are ANDed together, meaning, a request must match all the
             * specified query parameters to select the route.
             *
             * Support: Extended
             */
            queryParams?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesQueryParams>[]>;
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
         * headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeaders {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             *
             * When a header is repeated in an HTTP request, it is
             * implementation-specific behavior as to how this is represented.
             * Generally, proxies should follow the guidance from the RFC:
             * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
             * processing a repeated header, with special handling for "Set-Cookie".
             */
            name?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the header.
             *
             * Support: Core (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression HeaderMatchType has implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other dialects
             * of regular expressions. Please read the implementation's documentation to
             * determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request
         * headers.
         */
        export interface HTTPRouteSpecRulesMatchesHeadersPatch {
            /**
             * Name is the name of the HTTP Header to be matched. Name matching MUST be
             * case-insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
             *
             * If multiple entries specify equivalent header names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent header name MUST be ignored. Due to the
             * case-insensitivity of header names, "foo" and "Foo" are considered
             * equivalent.
             *
             * When a header is repeated in an HTTP request, it is
             * implementation-specific behavior as to how this is represented.
             * Generally, proxies should follow the guidance from the RFC:
             * https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding
             * processing a repeated header, with special handling for "Set-Cookie".
             */
            name?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the header.
             *
             * Support: Core (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression HeaderMatchType has implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other dialects
             * of regular expressions. Please read the implementation's documentation to
             * determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP Header to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPRouteMatch defines the predicate used to match requests to a given
         * action. Multiple match types are ANDed together, i.e. the match will
         * evaluate to true only if all conditions are satisfied.
         *
         * For example, the match below will match a HTTP request only if its path
         * starts with `/foo` AND it contains the `version: v1` header:
         *
         * ```
         * match:
         *
         * 	path:
         * 	  value: "/foo"
         * 	headers:
         * 	- name: "version"
         * 	  value "v1"
         *
         * ```
         */
        export interface HTTPRouteSpecRulesMatchesPatch {
            /**
             * Headers specifies HTTP request header matchers. Multiple match values are
             * ANDed together, meaning, a request must match all the specified headers
             * to select the route.
             */
            headers?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesHeadersPatch>[]>;
            /**
             * Method specifies HTTP method matcher.
             * When specified, this route will be matched only if the request has the
             * specified method.
             *
             * Support: Extended
             */
            method?: pulumi.Input<string>;
            path?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesPathPatch>;
            /**
             * QueryParams specifies HTTP query parameter matchers. Multiple match
             * values are ANDed together, meaning, a request must match all the
             * specified query parameters to select the route.
             *
             * Support: Extended
             */
            queryParams?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesQueryParamsPatch>[]>;
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not
         * specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPath {
            /**
             * Type specifies how to match against the path Value.
             *
             * Support: Core (Exact, PathPrefix)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the HTTP path to match against.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Path specifies a HTTP request path matcher. If this field is not
         * specified, a default prefix match on the "/" path is provided.
         */
        export interface HTTPRouteSpecRulesMatchesPathPatch {
            /**
             * Type specifies how to match against the path Value.
             *
             * Support: Core (Exact, PathPrefix)
             *
             * Support: Implementation-specific (RegularExpression)
             */
            type?: pulumi.Input<string>;
            /**
             * Value of the HTTP path to match against.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
         * query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryParams {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an
             * exact string match. (See
             * https://tools.ietf.org/html/rfc7230#section-2.7.3).
             *
             * If multiple entries specify equivalent query param names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent query param name MUST be ignored.
             *
             * If a query param is repeated in an HTTP request, the behavior is
             * purposely left undefined, since different data planes have different
             * capabilities. However, it is *recommended* that implementations should
             * match against the first value of the param if the data plane supports it,
             * as this behavior is expected in other load balancing contexts outside of
             * the Gateway API.
             *
             * Users SHOULD NOT route traffic based on repeated query params to guard
             * themselves against potential differences in the implementations.
             */
            name?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the query parameter.
             *
             * Support: Extended (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression QueryParamMatchType has Implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other
             * dialects of regular expressions. Please read the implementation's
             * documentation to determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP
         * query parameters.
         */
        export interface HTTPRouteSpecRulesMatchesQueryParamsPatch {
            /**
             * Name is the name of the HTTP query param to be matched. This must be an
             * exact string match. (See
             * https://tools.ietf.org/html/rfc7230#section-2.7.3).
             *
             * If multiple entries specify equivalent query param names, only the first
             * entry with an equivalent name MUST be considered for a match. Subsequent
             * entries with an equivalent query param name MUST be ignored.
             *
             * If a query param is repeated in an HTTP request, the behavior is
             * purposely left undefined, since different data planes have different
             * capabilities. However, it is *recommended* that implementations should
             * match against the first value of the param if the data plane supports it,
             * as this behavior is expected in other load balancing contexts outside of
             * the Gateway API.
             *
             * Users SHOULD NOT route traffic based on repeated query params to guard
             * themselves against potential differences in the implementations.
             */
            name?: pulumi.Input<string>;
            /**
             * Type specifies how to match against the value of the query parameter.
             *
             * Support: Extended (Exact)
             *
             * Support: Implementation-specific (RegularExpression)
             *
             * Since RegularExpression QueryParamMatchType has Implementation-specific
             * conformance, implementations can support POSIX, PCRE or any other
             * dialects of regular expressions. Please read the implementation's
             * documentation to determine the supported dialect.
             */
            type?: pulumi.Input<string>;
            /**
             * Value is the value of HTTP query param to be matched.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * HTTPRouteRule defines semantics for matching an HTTP request based on
         * conditions (matches), processing it (filters), and forwarding the request to
         * an API object (backendRefs).
         */
        export interface HTTPRouteSpecRulesPatch {
            /**
             * BackendRefs defines the backend(s) where matching requests should be
             * sent.
             *
             * Failure behavior here depends on how many BackendRefs are specified and
             * how many are invalid.
             *
             * If *all* entries in BackendRefs are invalid, and there are also no filters
             * specified in this route rule, *all* traffic which matches this rule MUST
             * receive a 500 status code.
             *
             * See the HTTPBackendRef definition for the rules about what makes a single
             * HTTPBackendRef invalid.
             *
             * When a HTTPBackendRef is invalid, 500 status codes MUST be returned for
             * requests that would have otherwise been routed to an invalid backend. If
             * multiple backends are specified, and some are invalid, the proportion of
             * requests that would otherwise have been routed to an invalid backend
             * MUST receive a 500 status code.
             *
             * For example, if two backends are specified with equal weights, and one is
             * invalid, 50 percent of traffic must receive a 500. Implementations may
             * choose how that 50 percent is determined.
             *
             * When a HTTPBackendRef refers to a Service that has no ready endpoints,
             * implementations SHOULD return a 503 for requests to that backend instead.
             * If an implementation chooses to do this, all of the above rules for 500 responses
             * MUST also apply for responses that return a 503.
             *
             * Support: Core for Kubernetes Service
             *
             * Support: Extended for Kubernetes ServiceImport
             *
             * Support: Implementation-specific for any other resource
             *
             * Support for weight: Core
             */
            backendRefs?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesBackendRefsPatch>[]>;
            /**
             * Filters define the filters that are applied to requests that match
             * this rule.
             *
             * Wherever possible, implementations SHOULD implement filters in the order
             * they are specified.
             *
             * Implementations MAY choose to implement this ordering strictly, rejecting
             * any combination or order of filters that cannot be supported. If implementations
             * choose a strict interpretation of filter ordering, they MUST clearly document
             * that behavior.
             *
             * To reject an invalid combination or order of filters, implementations SHOULD
             * consider the Route Rules with this configuration invalid. If all Route Rules
             * in a Route are invalid, the entire Route would be considered invalid. If only
             * a portion of Route Rules are invalid, implementations MUST set the
             * "PartiallyInvalid" condition for the Route.
             *
             * Conformance-levels at this level are defined based on the type of filter:
             *
             * - ALL core filters MUST be supported by all implementations.
             * - Implementers are encouraged to support extended filters.
             * - Implementation-specific custom filters have no API guarantees across
             *   implementations.
             *
             * Specifying the same filter multiple times is not supported unless explicitly
             * indicated in the filter.
             *
             * All filters are expected to be compatible with each other except for the
             * URLRewrite and RequestRedirect filters, which may not be combined. If an
             * implementation cannot support other combinations of filters, they must clearly
             * document that limitation. In cases where incompatible or unsupported
             * filters are specified and cause the `Accepted` condition to be set to status
             * `False`, implementations may use the `IncompatibleFilters` reason to specify
             * this configuration error.
             *
             * Support: Core
             */
            filters?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesFiltersPatch>[]>;
            /**
             * Matches define conditions used for matching the rule against incoming
             * HTTP requests. Each match is independent, i.e. this rule will be matched
             * if **any** one of the matches is satisfied.
             *
             * For example, take the following matches configuration:
             *
             * ```
             * matches:
             * - path:
             *     value: "/foo"
             *   headers:
             *   - name: "version"
             *     value: "v2"
             * - path:
             *     value: "/v2/foo"
             * ```
             *
             * For a request to match against this rule, a request must satisfy
             * EITHER of the two conditions:
             *
             * - path prefixed with `/foo` AND contains the header `version: v2`
             * - path prefix of `/v2/foo`
             *
             * See the documentation for HTTPRouteMatch on how to specify multiple
             * match conditions that should be ANDed together.
             *
             * If no matches are specified, the default is a prefix
             * path match on "/", which has the effect of matching every
             * HTTP request.
             *
             * Proxy or Load Balancer routing configuration generated from HTTPRoutes
             * MUST prioritize matches based on the following criteria, continuing on
             * ties. Across all rules specified on applicable Routes, precedence must be
             * given to the match having:
             *
             * * "Exact" path match.
             * * "Prefix" path match with largest number of characters.
             * * Method match.
             * * Largest number of header matches.
             * * Largest number of query param matches.
             *
             * Note: The precedence of RegularExpression path matches are implementation-specific.
             *
             * If ties still exist across multiple Routes, matching precedence MUST be
             * determined in order of the following criteria, continuing on ties:
             *
             * * The oldest Route based on creation timestamp.
             * * The Route appearing first in alphabetical order by
             *   "{namespace}/{name}".
             *
             * If ties still exist within an HTTPRoute, matching precedence MUST be granted
             * to the FIRST matching rule (in list order) with a match meeting the above
             * criteria.
             *
             * When no rules matching a request have been successfully attached to the
             * parent a request is coming from, a HTTP 404 status code MUST be returned.
             */
            matches?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesMatchesPatch>[]>;
            /**
             * Name is the name of the route rule. This name MUST be unique within a Route if it is set.
             *
             * Support: Extended
             */
            name?: pulumi.Input<string>;
            retry?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesRetryPatch>;
            sessionPersistence?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesSessionPersistencePatch>;
            timeouts?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesTimeoutsPatch>;
        }

        /**
         * Retry defines the configuration for when to retry an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesRetry {
            /**
             * Attempts specifies the maximum number of times an individual request
             * from the gateway to a backend should be retried.
             *
             * If the maximum number of retries has been attempted without a successful
             * response from the backend, the Gateway MUST return an error.
             *
             * When this field is unspecified, the number of times to attempt to retry
             * a backend request is implementation-specific.
             *
             * Support: Extended
             */
            attempts?: pulumi.Input<number>;
            /**
             * Backoff specifies the minimum duration a Gateway should wait between
             * retry attempts and is represented in Gateway API Duration formatting.
             *
             * For example, setting the `rules[].retry.backoff` field to the value
             * `100ms` will cause a backend request to first be retried approximately
             * 100 milliseconds after timing out or receiving a response code configured
             * to be retryable.
             *
             * An implementation MAY use an exponential or alternative backoff strategy
             * for subsequent retry attempts, MAY cap the maximum backoff duration to
             * some amount greater than the specified minimum, and MAY add arbitrary
             * jitter to stagger requests, as long as unsuccessful backend requests are
             * not retried before the configured minimum duration.
             *
             * If a Request timeout (`rules[].timeouts.request`) is configured on the
             * route, the entire duration of the initial request and any retry attempts
             * MUST not exceed the Request timeout duration. If any retry attempts are
             * still in progress when the Request timeout duration has been reached,
             * these SHOULD be canceled if possible and the Gateway MUST immediately
             * return a timeout error.
             *
             * If a BackendRequest timeout (`rules[].timeouts.backendRequest`) is
             * configured on the route, any retry attempts which reach the configured
             * BackendRequest timeout duration without a response SHOULD be canceled if
             * possible and the Gateway should wait for at least the specified backoff
             * duration before attempting to retry the backend request again.
             *
             * If a BackendRequest timeout is _not_ configured on the route, retry
             * attempts MAY time out after an implementation default duration, or MAY
             * remain pending until a configured Request timeout or implementation
             * default duration for total request time is reached.
             *
             * When this field is unspecified, the time to wait between retry attempts
             * is implementation-specific.
             *
             * Support: Extended
             */
            backoff?: pulumi.Input<string>;
            /**
             * Codes defines the HTTP response status codes for which a backend request
             * should be retried.
             *
             * Support: Extended
             */
            codes?: pulumi.Input<pulumi.Input<number>[]>;
        }

        /**
         * Retry defines the configuration for when to retry an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesRetryPatch {
            /**
             * Attempts specifies the maximum number of times an individual request
             * from the gateway to a backend should be retried.
             *
             * If the maximum number of retries has been attempted without a successful
             * response from the backend, the Gateway MUST return an error.
             *
             * When this field is unspecified, the number of times to attempt to retry
             * a backend request is implementation-specific.
             *
             * Support: Extended
             */
            attempts?: pulumi.Input<number>;
            /**
             * Backoff specifies the minimum duration a Gateway should wait between
             * retry attempts and is represented in Gateway API Duration formatting.
             *
             * For example, setting the `rules[].retry.backoff` field to the value
             * `100ms` will cause a backend request to first be retried approximately
             * 100 milliseconds after timing out or receiving a response code configured
             * to be retryable.
             *
             * An implementation MAY use an exponential or alternative backoff strategy
             * for subsequent retry attempts, MAY cap the maximum backoff duration to
             * some amount greater than the specified minimum, and MAY add arbitrary
             * jitter to stagger requests, as long as unsuccessful backend requests are
             * not retried before the configured minimum duration.
             *
             * If a Request timeout (`rules[].timeouts.request`) is configured on the
             * route, the entire duration of the initial request and any retry attempts
             * MUST not exceed the Request timeout duration. If any retry attempts are
             * still in progress when the Request timeout duration has been reached,
             * these SHOULD be canceled if possible and the Gateway MUST immediately
             * return a timeout error.
             *
             * If a BackendRequest timeout (`rules[].timeouts.backendRequest`) is
             * configured on the route, any retry attempts which reach the configured
             * BackendRequest timeout duration without a response SHOULD be canceled if
             * possible and the Gateway should wait for at least the specified backoff
             * duration before attempting to retry the backend request again.
             *
             * If a BackendRequest timeout is _not_ configured on the route, retry
             * attempts MAY time out after an implementation default duration, or MAY
             * remain pending until a configured Request timeout or implementation
             * default duration for total request time is reached.
             *
             * When this field is unspecified, the time to wait between retry attempts
             * is implementation-specific.
             *
             * Support: Extended
             */
            backoff?: pulumi.Input<string>;
            /**
             * Codes defines the HTTP response status codes for which a backend request
             * should be retried.
             *
             * Support: Extended
             */
            codes?: pulumi.Input<pulumi.Input<number>[]>;
        }

        /**
         * SessionPersistence defines and configures session persistence
         * for the route rule.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesSessionPersistence {
            /**
             * AbsoluteTimeout defines the absolute timeout of the persistent
             * session. Once the AbsoluteTimeout duration has elapsed, the
             * session becomes invalid.
             *
             * Support: Extended
             */
            absoluteTimeout?: pulumi.Input<string>;
            cookieConfig?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesSessionPersistenceCookieConfig>;
            /**
             * IdleTimeout defines the idle timeout of the persistent session.
             * Once the session has been idle for more than the specified
             * IdleTimeout duration, the session becomes invalid.
             *
             * Support: Extended
             */
            idleTimeout?: pulumi.Input<string>;
            /**
             * SessionName defines the name of the persistent session token
             * which may be reflected in the cookie or the header. Users
             * should avoid reusing session names to prevent unintended
             * consequences, such as rejection or unpredictable behavior.
             *
             * Support: Implementation-specific
             */
            sessionName?: pulumi.Input<string>;
            /**
             * Type defines the type of session persistence such as through
             * the use a header or cookie. Defaults to cookie based session
             * persistence.
             *
             * Support: Core for "Cookie" type
             *
             * Support: Extended for "Header" type
             */
            type?: pulumi.Input<string>;
        }

        /**
         * CookieConfig provides configuration settings that are specific
         * to cookie-based session persistence.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesSessionPersistenceCookieConfig {
            /**
             * LifetimeType specifies whether the cookie has a permanent or
             * session-based lifetime. A permanent cookie persists until its
             * specified expiry time, defined by the Expires or Max-Age cookie
             * attributes, while a session cookie is deleted when the current
             * session ends.
             *
             * When set to "Permanent", AbsoluteTimeout indicates the
             * cookie's lifetime via the Expires or Max-Age cookie attributes
             * and is required.
             *
             * When set to "Session", AbsoluteTimeout indicates the
             * absolute lifetime of the cookie tracked by the gateway and
             * is optional.
             *
             * Defaults to "Session".
             *
             * Support: Core for "Session" type
             *
             * Support: Extended for "Permanent" type
             */
            lifetimeType?: pulumi.Input<string>;
        }

        /**
         * CookieConfig provides configuration settings that are specific
         * to cookie-based session persistence.
         *
         * Support: Core
         */
        export interface HTTPRouteSpecRulesSessionPersistenceCookieConfigPatch {
            /**
             * LifetimeType specifies whether the cookie has a permanent or
             * session-based lifetime. A permanent cookie persists until its
             * specified expiry time, defined by the Expires or Max-Age cookie
             * attributes, while a session cookie is deleted when the current
             * session ends.
             *
             * When set to "Permanent", AbsoluteTimeout indicates the
             * cookie's lifetime via the Expires or Max-Age cookie attributes
             * and is required.
             *
             * When set to "Session", AbsoluteTimeout indicates the
             * absolute lifetime of the cookie tracked by the gateway and
             * is optional.
             *
             * Defaults to "Session".
             *
             * Support: Core for "Session" type
             *
             * Support: Extended for "Permanent" type
             */
            lifetimeType?: pulumi.Input<string>;
        }

        /**
         * SessionPersistence defines and configures session persistence
         * for the route rule.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesSessionPersistencePatch {
            /**
             * AbsoluteTimeout defines the absolute timeout of the persistent
             * session. Once the AbsoluteTimeout duration has elapsed, the
             * session becomes invalid.
             *
             * Support: Extended
             */
            absoluteTimeout?: pulumi.Input<string>;
            cookieConfig?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteSpecRulesSessionPersistenceCookieConfigPatch>;
            /**
             * IdleTimeout defines the idle timeout of the persistent session.
             * Once the session has been idle for more than the specified
             * IdleTimeout duration, the session becomes invalid.
             *
             * Support: Extended
             */
            idleTimeout?: pulumi.Input<string>;
            /**
             * SessionName defines the name of the persistent session token
             * which may be reflected in the cookie or the header. Users
             * should avoid reusing session names to prevent unintended
             * consequences, such as rejection or unpredictable behavior.
             *
             * Support: Implementation-specific
             */
            sessionName?: pulumi.Input<string>;
            /**
             * Type defines the type of session persistence such as through
             * the use a header or cookie. Defaults to cookie based session
             * persistence.
             *
             * Support: Core for "Cookie" type
             *
             * Support: Extended for "Header" type
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Timeouts defines the timeouts that can be configured for an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesTimeouts {
            /**
             * BackendRequest specifies a timeout for an individual request from the gateway
             * to a backend. This covers the time from when the request first starts being
             * sent from the gateway to when the full response has been received from the backend.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * An entire client HTTP transaction with a gateway, covered by the Request timeout,
             * may result in more than one call from the gateway to the destination backend,
             * for example, if automatic retries are supported.
             *
             * The value of BackendRequest must be a Gateway API Duration string as defined by
             * GEP-2257.  When this field is unspecified, its behavior is implementation-specific;
             * when specified, the value of BackendRequest must be no more than the value of the
             * Request timeout (since the Request timeout encompasses the BackendRequest timeout).
             *
             * Support: Extended
             */
            backendRequest?: pulumi.Input<string>;
            /**
             * Request specifies the maximum duration for a gateway to respond to an HTTP request.
             * If the gateway has not been able to respond before this deadline is met, the gateway
             * MUST return a timeout error.
             *
             * For example, setting the `rules.timeouts.request` field to the value `10s` in an
             * `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
             * to complete.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * This timeout is intended to cover as close to the whole request-response transaction
             * as possible although an implementation MAY choose to start the timeout after the entire
             * request stream has been received instead of immediately after the transaction is
             * initiated by the client.
             *
             * The value of Request is a Gateway API Duration string as defined by GEP-2257. When this
             * field is unspecified, request timeout behavior is implementation-specific.
             *
             * Support: Extended
             */
            request?: pulumi.Input<string>;
        }

        /**
         * Timeouts defines the timeouts that can be configured for an HTTP request.
         *
         * Support: Extended
         */
        export interface HTTPRouteSpecRulesTimeoutsPatch {
            /**
             * BackendRequest specifies a timeout for an individual request from the gateway
             * to a backend. This covers the time from when the request first starts being
             * sent from the gateway to when the full response has been received from the backend.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * An entire client HTTP transaction with a gateway, covered by the Request timeout,
             * may result in more than one call from the gateway to the destination backend,
             * for example, if automatic retries are supported.
             *
             * The value of BackendRequest must be a Gateway API Duration string as defined by
             * GEP-2257.  When this field is unspecified, its behavior is implementation-specific;
             * when specified, the value of BackendRequest must be no more than the value of the
             * Request timeout (since the Request timeout encompasses the BackendRequest timeout).
             *
             * Support: Extended
             */
            backendRequest?: pulumi.Input<string>;
            /**
             * Request specifies the maximum duration for a gateway to respond to an HTTP request.
             * If the gateway has not been able to respond before this deadline is met, the gateway
             * MUST return a timeout error.
             *
             * For example, setting the `rules.timeouts.request` field to the value `10s` in an
             * `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds
             * to complete.
             *
             * Setting a timeout to the zero duration (e.g. "0s") SHOULD disable the timeout
             * completely. Implementations that cannot completely disable the timeout MUST
             * instead interpret the zero duration as the longest possible value to which
             * the timeout can be set.
             *
             * This timeout is intended to cover as close to the whole request-response transaction
             * as possible although an implementation MAY choose to start the timeout after the entire
             * request stream has been received instead of immediately after the transaction is
             * initiated by the client.
             *
             * The value of Request is a Gateway API Duration string as defined by GEP-2257. When this
             * field is unspecified, request timeout behavior is implementation-specific.
             *
             * Support: Extended
             */
            request?: pulumi.Input<string>;
        }

        /**
         * Status defines the current state of HTTPRoute.
         */
        export interface HTTPRouteStatus {
            /**
             * Parents is a list of parent resources (usually Gateways) that are
             * associated with the route, and the status of the route with respect to
             * each parent. When this route attaches to a parent, the controller that
             * manages the parent must add an entry to this list when the controller
             * first sees the route and should update the entry as appropriate when the
             * route or gateway is modified.
             *
             * Note that parent references that cannot be resolved by an implementation
             * of this API will not be added to this list. Implementations of this API
             * can only populate Route status for the Gateways/parent resources they are
             * responsible for.
             *
             * A maximum of 32 Gateways will be represented in this list. An empty list
             * means the route has not been attached to any Gateway.
             */
            parents?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteStatusParents>[]>;
        }

        /**
         * RouteParentStatus describes the status of a route with respect to an
         * associated Parent.
         */
        export interface HTTPRouteStatusParents {
            /**
             * Conditions describes the status of the route with respect to the Gateway.
             * Note that the route's availability is also subject to the Gateway's own
             * status conditions and listener status.
             *
             * If the Route's ParentRef specifies an existing Gateway that supports
             * Routes of this kind AND that Gateway's controller has sufficient access,
             * then that Gateway's controller MUST set the "Accepted" condition on the
             * Route, to indicate whether the route has been accepted or rejected by the
             * Gateway, and why.
             *
             * A Route MUST be considered "Accepted" if at least one of the Route's
             * rules is implemented by the Gateway.
             *
             * There are a number of cases where the "Accepted" condition may not be set
             * due to lack of controller visibility, that includes when:
             *
             * * The Route refers to a nonexistent parent.
             * * The Route is of a type that the controller does not support.
             * * The Route is in a namespace the controller does not have access to.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.HTTPRouteStatusParentsConditions>[]>;
            /**
             * ControllerName is a domain/path string that indicates the name of the
             * controller that wrote this status. This corresponds with the
             * controllerName field on GatewayClass.
             *
             * Example: "example.net/gateway-controller".
             *
             * The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
             * valid Kubernetes names
             * (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
             *
             * Controllers MUST populate this field when writing status. Controllers should ensure that
             * entries to status populated with their ControllerName are cleaned up when they are no
             * longer necessary.
             */
            controllerName?: pulumi.Input<string>;
            parentRef?: pulumi.Input<inputs.gateway.v1beta1.HTTPRouteStatusParentsParentRef>;
        }

        /**
         * Condition contains details for one aspect of the current state of this API Resource.
         */
        export interface HTTPRouteStatusParentsConditions {
            /**
             * lastTransitionTime is the last time the condition transitioned from one status to another.
             * This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is a human readable message indicating details about the transition.
             * This may be an empty string.
             */
            message?: pulumi.Input<string>;
            /**
             * observedGeneration represents the .metadata.generation that the condition was set based upon.
             * For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
             * with respect to the current state of the instance.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * reason contains a programmatic identifier indicating the reason for the condition's last transition.
             * Producers of specific condition types may define expected values and meanings for this field,
             * and whether the values are considered a guaranteed API.
             * The value should be a CamelCase string.
             * This field may not be empty.
             */
            reason?: pulumi.Input<string>;
            /**
             * status of the condition, one of True, False, Unknown.
             */
            status?: pulumi.Input<string>;
            /**
             * type of condition in CamelCase or in foo.example.com/CamelCase.
             */
            type?: pulumi.Input<string>;
        }

        /**
         * ParentRef corresponds with a ParentRef in the spec that this
         * RouteParentStatus struct describes the status of.
         */
        export interface HTTPRouteStatusParentsParentRef {
            /**
             * Group is the group of the referent.
             * When unspecified, "gateway.networking.k8s.io" is inferred.
             * To set the core API group (such as for a "Service" kind referent),
             * Group must be explicitly set to "" (empty string).
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent.
             *
             * There are two kinds of parent resources with "Core" support:
             *
             * * Gateway (Gateway conformance profile)
             * * Service (Mesh conformance profile, ClusterIP Services only)
             *
             * Support for other resources is Implementation-Specific.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent.
             *
             * Support: Core
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers
             * to the local namespace of the Route.
             *
             * Note that there are specific rules for ParentRefs which cross namespace
             * boundaries. Cross-namespace references are only valid if they are explicitly
             * allowed by something in the namespace they are referring to. For example:
             * Gateway has the AllowedRoutes field, and ReferenceGrant provides a
             * generic way to enable any other kind of cross-namespace reference.
             *
             *
             * ParentRefs from a Route to a Service in the same namespace are "producer"
             * routes, which apply default routing rules to inbound connections from
             * any namespace to the Service.
             *
             * ParentRefs from a Route to a Service in a different namespace are
             * "consumer" routes, and these routing rules are only applied to outbound
             * connections originating from the same namespace as the Route, for which
             * the intended destination of the connections are a Service targeted as a
             * ParentRef of the Route.
             *
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted
             * differently based on the type of parent resource.
             *
             * When the parent resource is a Gateway, this targets all listeners
             * listening on the specified port that also support this kind of Route(and
             * select this Route). It's not recommended to set `Port` unless the
             * networking behaviors specified in a Route must apply to a specific port
             * as opposed to a listener(s) whose port(s) may be changed. When both Port
             * and SectionName are specified, the name and port of the selected listener
             * must match both specified values.
             *
             *
             * When the parent resource is a Service, this targets a specific port in the
             * Service spec. When both Port (experimental) and SectionName are specified,
             * the name and port of the selected port must match both specified values.
             *
             *
             * Implementations MAY choose to support other parent resources.
             * Implementations supporting other types of parent resources MUST clearly
             * document how/if Port is interpreted.
             *
             * For the purpose of status, an attachment is considered successful as
             * long as the parent resource accepts it partially. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
             * from the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route,
             * the Route MUST be considered detached from the Gateway.
             *
             * Support: Extended
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the
             * following resources, SectionName is interpreted as the following:
             *
             * * Gateway: Listener name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             * * Service: Port name. When both Port (experimental) and SectionName
             * are specified, the name and port of the selected listener must match
             * both specified values.
             *
             * Implementations MAY choose to support attaching Routes to other resources.
             * If that is the case, they MUST clearly document how SectionName is
             * interpreted.
             *
             * When unspecified (empty string), this will reference the entire resource.
             * For the purpose of status, an attachment is considered successful if at
             * least one section in the parent resource accepts it. For example, Gateway
             * listeners can restrict which Routes can attach to them by Route kind,
             * namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
             * the referencing Route, the Route MUST be considered successfully
             * attached. If no Gateway listeners accept attachment from this Route, the
             * Route MUST be considered detached from the Gateway.
             *
             * Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }

        /**
         * ReferenceGrant identifies kinds of resources in other namespaces that are
         * trusted to reference the specified kinds of resources in the same namespace
         * as the policy.
         *
         * Each ReferenceGrant can be used to represent a unique trust relationship.
         * Additional Reference Grants can be used to add to the set of trusted
         * sources of inbound references for the namespace they are defined within.
         *
         * All cross-namespace references in Gateway API (with the exception of cross-namespace
         * Gateway-route attachment) require a ReferenceGrant.
         *
         * ReferenceGrant is a form of runtime verification allowing users to assert
         * which cross-namespace object references are permitted. Implementations that
         * support ReferenceGrant MUST NOT permit cross-namespace references which have
         * no grant, and MUST respond to the removal of a grant by revoking the access
         * that the grant allowed.
         */
        export interface ReferenceGrant {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"gateway.networking.k8s.io/v1beta1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"ReferenceGrant">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.gateway.v1beta1.ReferenceGrantSpec>;
        }

        /**
         * Spec defines the desired state of ReferenceGrant.
         */
        export interface ReferenceGrantSpec {
            /**
             * From describes the trusted namespaces and kinds that can reference the
             * resources described in "To". Each entry in this list MUST be considered
             * to be an additional place that references can be valid from, or to put
             * this another way, entries MUST be combined using OR.
             *
             * Support: Core
             */
            from?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.ReferenceGrantSpecFrom>[]>;
            /**
             * To describes the resources that may be referenced by the resources
             * described in "From". Each entry in this list MUST be considered to be an
             * additional place that references can be valid to, or to put this another
             * way, entries MUST be combined using OR.
             *
             * Support: Core
             */
            to?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.ReferenceGrantSpecTo>[]>;
        }

        /**
         * ReferenceGrantFrom describes trusted namespaces and kinds.
         */
        export interface ReferenceGrantSpecFrom {
            /**
             * Group is the group of the referent.
             * When empty, the Kubernetes core API group is inferred.
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the referent. Although implementations may support
             * additional resources, the following types are part of the "Core"
             * support level for this field.
             *
             * When used to permit a SecretObjectReference:
             *
             * * Gateway
             *
             * When used to permit a BackendObjectReference:
             *
             * * GRPCRoute
             * * HTTPRoute
             * * TCPRoute
             * * TLSRoute
             * * UDPRoute
             */
            kind?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ReferenceGrantFrom describes trusted namespaces and kinds.
         */
        export interface ReferenceGrantSpecFromPatch {
            /**
             * Group is the group of the referent.
             * When empty, the Kubernetes core API group is inferred.
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the referent. Although implementations may support
             * additional resources, the following types are part of the "Core"
             * support level for this field.
             *
             * When used to permit a SecretObjectReference:
             *
             * * Gateway
             *
             * When used to permit a BackendObjectReference:
             *
             * * GRPCRoute
             * * HTTPRoute
             * * TCPRoute
             * * TLSRoute
             * * UDPRoute
             */
            kind?: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent.
             *
             * Support: Core
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired state of ReferenceGrant.
         */
        export interface ReferenceGrantSpecPatch {
            /**
             * From describes the trusted namespaces and kinds that can reference the
             * resources described in "To". Each entry in this list MUST be considered
             * to be an additional place that references can be valid from, or to put
             * this another way, entries MUST be combined using OR.
             *
             * Support: Core
             */
            from?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.ReferenceGrantSpecFromPatch>[]>;
            /**
             * To describes the resources that may be referenced by the resources
             * described in "From". Each entry in this list MUST be considered to be an
             * additional place that references can be valid to, or to put this another
             * way, entries MUST be combined using OR.
             *
             * Support: Core
             */
            to?: pulumi.Input<pulumi.Input<inputs.gateway.v1beta1.ReferenceGrantSpecToPatch>[]>;
        }

        /**
         * ReferenceGrantTo describes what Kinds are allowed as targets of the
         * references.
         */
        export interface ReferenceGrantSpecTo {
            /**
             * Group is the group of the referent.
             * When empty, the Kubernetes core API group is inferred.
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the referent. Although implementations may support
             * additional resources, the following types are part of the "Core"
             * support level for this field:
             *
             * * Secret when used to permit a SecretObjectReference
             * * Service when used to permit a BackendObjectReference
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. When unspecified, this policy
             * refers to all resources of the specified Group and Kind in the local
             * namespace.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * ReferenceGrantTo describes what Kinds are allowed as targets of the
         * references.
         */
        export interface ReferenceGrantSpecToPatch {
            /**
             * Group is the group of the referent.
             * When empty, the Kubernetes core API group is inferred.
             *
             * Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is the kind of the referent. Although implementations may support
             * additional resources, the following types are part of the "Core"
             * support level for this field:
             *
             * * Secret when used to permit a SecretObjectReference
             * * Service when used to permit a BackendObjectReference
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. When unspecified, this policy
             * refers to all resources of the specified Group and Kind in the local
             * namespace.
             */
            name?: pulumi.Input<string>;
        }
    }
}

export namespace meta {
    export namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        export interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue?: pulumi.Input<string>;
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount?: pulumi.Input<number>;
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink?: pulumi.Input<string>;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntry {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType?: pulumi.Input<string>;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1?: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager?: pulumi.Input<string>;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation?: pulumi.Input<string>;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource?: pulumi.Input<string>;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time?: pulumi.Input<string>;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntryPatch {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType?: pulumi.Input<string>;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1?: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager?: pulumi.Input<string>;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation?: pulumi.Input<string>;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource?: pulumi.Input<string>;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time?: pulumi.Input<string>;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMeta {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp?: pulumi.Input<string>;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp?: pulumi.Input<string>;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName?: pulumi.Input<string>;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation?: pulumi.Input<number>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields?: pulumi.Input<pulumi.Input<inputs.meta.v1.ManagedFieldsEntry>[]>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences?: pulumi.Input<pulumi.Input<inputs.meta.v1.OwnerReference>[]>;
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink?: pulumi.Input<string>;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMetaPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp?: pulumi.Input<string>;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp?: pulumi.Input<string>;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName?: pulumi.Input<string>;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation?: pulumi.Input<number>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields?: pulumi.Input<pulumi.Input<inputs.meta.v1.ManagedFieldsEntryPatch>[]>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences?: pulumi.Input<pulumi.Input<inputs.meta.v1.OwnerReferencePatch>[]>;
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink?: pulumi.Input<string>;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReference {
            /**
             * API version of the referent.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: pulumi.Input<boolean>;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: pulumi.Input<boolean>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: pulumi.Input<string>;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReferencePatch {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: pulumi.Input<boolean>;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: pulumi.Input<boolean>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid?: pulumi.Input<string>;
        }

    }
}
